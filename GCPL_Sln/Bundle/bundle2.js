var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var ARAdvancePaymentModel = /** @class */ (function () {
            function ARAdvancePaymentModel() {
            }
            return ARAdvancePaymentModel;
        }());
        Model.ARAdvancePaymentModel = ARAdvancePaymentModel;
        var EditARAdvancePaymentModel = /** @class */ (function () {
            function EditARAdvancePaymentModel() {
            }
            return EditARAdvancePaymentModel;
        }());
        Model.EditARAdvancePaymentModel = EditARAdvancePaymentModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AdvancePaymentListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var Insert = GCPL.Model.ARAdvancePaymentModel;
            var AdvanceController = /** @class */ (function () {
                function AdvanceController(_Autofillservice, _PaymentModeddlservice, _InsertServices, _cookieStore, _window, $location) {
                    this._cookieStore = _cookieStore;
                    this._window = _window;
                    this.$location = $location;
                    this.PaymentMode = null;
                    this.alert = null;
                    this.Cookie = null;
                    this.CheckARPayment = null;
                    this.CustomerAutofill = _Autofillservice;
                    this.PaymentModeddlServices = _PaymentModeddlservice;
                    this.CheckARPayment = new Insert();
                    this.InsertServices = _InsertServices;
                    this.Cookie = _cookieStore;
                    this.CheckARPayment.PaymentModeID = $location.search().id;
                }
                AdvanceController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                AdvanceController.prototype.Init = function () {
                    var _this = this;
                    this.PaymentMode = this.PaymentModeddlServices.Find().then((function (response) {
                        _this.PaymentMode = _this.PaymentModeddlServices.GetPaymentMode(response.data.Result);
                    }));
                    var that = this;
                    $("#txtCustomerName").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.CustomerAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedCustomerID = ui.item.id;
                            that.CheckARPayment.CustomerID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                };
                AdvanceController.prototype.submit = function () {
                    var _this = this;
                    this.CheckARPayment.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.CheckARPayment.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.InsertServices.PostARPayment(this.CheckARPayment).then((function (response) {
                        if (response.data.Result != null) {
                            _this.alert = "Data Saved Successfully";
                            $("#close").show();
                            $("#errorclose").hide();
                        }
                        else {
                            _this.alert = "Oops Some Error Occured";
                            $("#close").hide();
                            $("#errorclose").show();
                        }
                    }));
                };
                AdvanceController.prototype.Close = function () {
                    location.href = "/#!/AdvancePaymentList";
                };
                AdvanceController.$inject = ["CustomeraAtofillService", "PaymentModeddlService", "InsertArAdvancePaymentServies", "$cookieStore", "$window", "$location"];
                return AdvanceController;
            }());
            var AdvanceComponentComponentController = /** @class */ (function () {
                function AdvanceComponentComponentController() {
                    this.controller = AdvanceController;
                    this.templateUrl = "/Scripts/App/Sales/AdvanceTransaction/Template/_AdvanceTransaction.html";
                }
                AdvanceComponentComponentController.Name = "advanceComponent";
                return AdvanceComponentComponentController;
            }());
            app.AddComponent(AdvanceComponentComponentController.Name, new AdvanceComponentComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AdvanceTransactionComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var AdvanceTransactionController = /** @class */ (function (_super) {
            __extends(AdvanceTransactionController, _super);
            function AdvanceTransactionController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AdvanceTransactionController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.AdvanceTransactionController = AdvanceTransactionController;
        app.AddController("AdvanceTransactionController", AdvanceTransactionController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AdvanceTransactionController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var InsertArAdvancePaymentServies = /** @class */ (function (_super) {
            __extends(InsertArAdvancePaymentServies, _super);
            function InsertArAdvancePaymentServies($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "AdvancePaymentListctrl";
                return _this;
            }
            InsertArAdvancePaymentServies.prototype.PostARPayment = function (data) {
                console.log(data);
                var url = this.apiUrl;
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            InsertArAdvancePaymentServies.$inject = ["$http", "$q"];
            return InsertArAdvancePaymentServies;
        }(GCPL.Service.BaseService));
        Service.InsertArAdvancePaymentServies = InsertArAdvancePaymentServies;
        app.AddService("InsertArAdvancePaymentServies", InsertArAdvancePaymentServies);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AdvanceTransactionService.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var AdvancePaymentListController = /** @class */ (function () {
                function AdvancePaymentListController(_PaymentListService, _window) {
                    this._window = _window;
                    this.PaymentList = null;
                    this.AdvancePaymentService = _PaymentListService;
                }
                AdvancePaymentListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                AdvancePaymentListController.prototype.Init = function () {
                    var _this = this;
                    this.PaymentList = this.AdvancePaymentService.Find().then((function (response) {
                        _this.PaymentList = _this.AdvancePaymentService.GetPaymenListGrid(response.data.Result);
                    }));
                };
                AdvancePaymentListController.prototype.View = function (data) {
                    console.log(data);
                    this._window.location.href = "#!/AdvanceTransactionView?id=" + data.SOPaymentID;
                };
                AdvancePaymentListController.$inject = ["AdvancePaymentService", "$window"];
                return AdvancePaymentListController;
            }());
            var AdvanceComponentListComponentController = /** @class */ (function () {
                function AdvanceComponentListComponentController() {
                    this.controller = AdvancePaymentListController;
                    this.templateUrl = "/Scripts/App/Sales/AdvancePaymentList/Template/_AdvancePaymentList.html";
                }
                AdvanceComponentListComponentController.Name = "advancePaymentListComponent";
                return AdvanceComponentListComponentController;
            }());
            app.AddComponent(AdvanceComponentListComponentController.Name, new AdvanceComponentListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AdvancePaymentListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var AdvancePaymentController = /** @class */ (function (_super) {
            __extends(AdvancePaymentController, _super);
            function AdvancePaymentController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AdvancePaymentController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.AdvancePaymentController = AdvancePaymentController;
        app.AddController("AdvancePaymentController", AdvancePaymentController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AdvancePaymentListController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var AdvancePaymentService = /** @class */ (function (_super) {
            __extends(AdvancePaymentService, _super);
            function AdvancePaymentService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/" + "AdvancePaymentListctrl";
                _this.Cookie = _cookieStore;
                return _this;
            }
            AdvancePaymentService.prototype.Find = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            AdvancePaymentService.prototype.GetPaymenListGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        CustomerName: item.CustomerName,
                        Bankname: item.Bankname,
                        BranchName: item.BranchName,
                        InstrumentNo: item.InstrumentNo,
                        PaymentMode: item.PaymentMode,
                        InstrumentAmount: item.InstrumentAmount,
                        SOPaymentID: item.SOPaymentID,
                        CustomerID: item.CustomerID,
                        DealerID: item.DealerID,
                        PaymentModeID: item.PaymentModeID,
                        UserID: ''
                    });
                }
                return list;
            };
            AdvancePaymentService.$inject = ["$http", "$q", "$cookieStore"];
            return AdvancePaymentService;
        }(GCPL.Service.BaseService));
        Service.AdvancePaymentService = AdvancePaymentService;
        app.AddService("AdvancePaymentService", AdvancePaymentService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AdvancePaymentListService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var InvoiceSerchListModel = /** @class */ (function () {
            function InvoiceSerchListModel() {
            }
            return InvoiceSerchListModel;
        }());
        Model.InvoiceSerchListModel = InvoiceSerchListModel;
        var IstatusddltMode = /** @class */ (function () {
            function IstatusddltMode() {
            }
            return IstatusddltMode;
        }());
        Model.IstatusddltMode = IstatusddltMode;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=InvoiceListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var VendorinvoiceListModel = GCPL.Model.InvoiceSerchListModel;
            var InvoiceListController = /** @class */ (function () {
                function InvoiceListController(_ItemAutoservice, _Vendorservice, _Vendorinvoicelistserch, _Vendorinvoiceststusddl, _cookieStore, _window) {
                    this._cookieStore = _cookieStore;
                    this._window = _window;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = "10";
                    this.Description = null;
                    this.ItemID = null;
                    this.ID = null;
                    this.FillVendorinvoiceGrid = null;
                    //SearchVendorinvoiceList = null;
                    this.SearchVendorDDLSATUS = null;
                    this.SearchVendorinvoiceList = null;
                    this.DealerID = null;
                    this.Cookie = null;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.VendornameAutofill = _Vendorservice;
                    this.Vendorinvoicelistserch = _Vendorinvoicelistserch;
                    this.Vendorinvoiceststusddl = _Vendorinvoiceststusddl;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.SearchVendorinvoiceList = new VendorinvoiceListModel();
                    this.FillVendorinvoiceGrid = Array();
                }
                InvoiceListController.prototype.$onInit = function () {
                    var that = this;
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                    this.Init();
                };
                //Page Load Define Values//
                InvoiceListController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            that.ItemDescriptionAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //let SelectedItemID = ui.item.id;
                            //that.QtyChange.ItemID = ui.item.id;
                            //that.Description = ui.item.value;
                        },
                        change: function () {
                        }
                    });
                    $("#txtVendorName").autocomplete({
                        source: function (request, res) {
                            that.VendornameAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.VendornameAutofill.GetVendorName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.VendorName,
                                        value: item.VendorName,
                                        id: item.VendorID,
                                        Address1: item.Address1,
                                        PANReferenceNo: item.PANReferenceNo,
                                        GSTIN: item.GSTIN,
                                        VendorStateID: item.VendorStateID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                        },
                        change: function () {
                        }
                    });
                    this.SearchVendorDDLSATUS = this.Vendorinvoiceststusddl.Find().then((function (response) {
                        _this.SearchVendorDDLSATUS = _this.Vendorinvoiceststusddl.GetVendorInvoicestatusddl(response.data.Result);
                    }));
                    this.FillGrid(this.numRecords);
                };
                InvoiceListController.prototype.VendorinvoiceListSearchModel = function () {
                    this.SearchVendorinvoiceList.Fromdate = document.getElementById("txtFromDate").value;
                    this.SearchVendorinvoiceList.ToDate = document.getElementById("txtToDate").value;
                    this.FillGrid(this.numRecords);
                };
                InvoiceListController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.FillVendorinvoiceGrid = this.Vendorinvoicelistserch.FindVendorInvoice(this.SearchVendorinvoiceList).then((function (response) {
                        _this.FillVendorinvoiceGrid = _this.Vendorinvoicelistserch.GeVendorInvoiceList(response.data.Result);
                        _this.FillVendorinvoiceGrid.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.FillVendorinvoiceGrid.slice(0, that.numRecords);
                    }));
                    $("#tblPOPMList").show();
                    console.log(NoOfRecords);
                };
                InvoiceListController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                InvoiceListController.prototype.View = function (data) {
                    console.log(data);
                    this._window.location.href = "#!/VendorInvoiceviewList?id=" + data;
                };
                InvoiceListController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillVendorinvoiceGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                InvoiceListController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillVendorinvoiceGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                InvoiceListController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                InvoiceListController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                InvoiceListController.prototype.Clear = function () {
                    // $("#txtVendorName").val("");
                    // $("#txtDescription").val("");
                    // $("#txtBrand").val("");
                    //$("#DDLStatus").val("");
                    //$("#txtPoNumber").val("");
                    // $("#Fromdt").val("");
                    //$("#nTodt").val("");
                    this.SearchVendorinvoiceList.VendorName = "";
                    this.SearchVendorinvoiceList.Description = "";
                    this.SearchVendorinvoiceList.BillNumber = "";
                    this.SearchVendorinvoiceList.Status = "";
                    this.SearchVendorinvoiceList.PoNumber = "";
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                };
                InvoiceListController.$inject = ["itemDescriptionService", "VendorMasterAutofillService", "VendorInvoicelistReportMasterService", "statusddlService", "$cookieStore", "$window"];
                return InvoiceListController;
            }());
            var InvoiceListComponentController = /** @class */ (function () {
                function InvoiceListComponentController() {
                    this.controller = InvoiceListController;
                    this.templateUrl = "/Scripts/App/Reports/InvoiceList/Template/_InvoiceList.html";
                }
                InvoiceListComponentController.Name = "invoicelistcomponent";
                return InvoiceListComponentController;
            }());
            app.AddComponent(InvoiceListComponentController.Name, new InvoiceListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=InvoiceListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var InvoiceListController = /** @class */ (function (_super) {
            __extends(InvoiceListController, _super);
            function InvoiceListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return InvoiceListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.InvoiceListController = InvoiceListController;
        app.AddController("InvoiceListController", InvoiceListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=InvoiceListController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var VendorInvoicelistReportMasterService = /** @class */ (function (_super) {
            __extends(VendorInvoicelistReportMasterService, _super);
            function VendorInvoicelistReportMasterService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            VendorInvoicelistReportMasterService.prototype.FindVendorInvoice = function (data) {
                var url = this.apiUrl + "/VendorInvoiceListSerch";
                var PoNumber;
                var BillNumber;
                var Description;
                var VendorName;
                var Fromdate;
                var ToDate;
                var Status;
                if (data.PoNumber == undefined) {
                    PoNumber = '';
                }
                else {
                    PoNumber = data.PoNumber;
                }
                if (data.BillNumber == undefined) {
                    BillNumber = '';
                }
                else {
                    BillNumber = data.BillNumber;
                }
                if (data.Description == undefined) {
                    Description = '';
                }
                else {
                    Description = data.Description;
                }
                if (data.VendorName == undefined) {
                    VendorName = '';
                }
                else {
                    VendorName = data.VendorName;
                }
                if (data.Fromdate !== undefined) {
                    Fromdate = data.Fromdate;
                }
                else {
                    Fromdate = '';
                }
                if (data.ToDate !== undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                if (data.Status == undefined) {
                    Status = "";
                }
                else {
                    Status = data.Status;
                }
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        PoNumber: PoNumber,
                        BillNumber: BillNumber,
                        Description: Description,
                        VendorName: VendorName,
                        Fromdate: Fromdate,
                        ToDate: ToDate,
                        Status: Status
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            VendorInvoicelistReportMasterService.prototype.GeVendorInvoiceList = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        ID: item.ID,
                        PoNumber: item.PoNumber,
                        BillNumber: item.BillNumber,
                        VendorId: item.VendorId,
                        Status: item.Status,
                        TotalInvoiveAmount: item.TotalInvoiveAmount,
                        TotalQuantity: item.TotalQuantity,
                        InvoiceDocumentNumber: item.InvoiceDocumentNumber,
                        WhenEntered: item.WhenEntered,
                        Description: item.Description,
                        GoodReceiptNo: item.GoodReceiptNo,
                        InvoiceQty: item.ItemInvoiceQtyID,
                        GRdate: item.GRdate,
                        Podate: item.Podate,
                        poqty: item.poqty,
                        ReceiptQty: item.ReceiptQty,
                        VendorName: item.VendorName,
                        Fromdate: item.Fromdate,
                        ToDate: item.ToDate
                    });
                    console.log(item);
                }
                return list;
            };
            VendorInvoicelistReportMasterService.$inject = ["$http", "$q", "$cookieStore"];
            return VendorInvoicelistReportMasterService;
        }(GCPL.Service.BaseService));
        Service.VendorInvoicelistReportMasterService = VendorInvoicelistReportMasterService;
        app.AddService("VendorInvoicelistReportMasterService", VendorInvoicelistReportMasterService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Stausddl 
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var statusddlService = /** @class */ (function (_super) {
            __extends(statusddlService, _super);
            function statusddlService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "VendorInvoiceListSerch";
                return _this;
            }
            statusddlService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            statusddlService.prototype.GetVendorInvoicestatusddl = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        ID: item.ID,
                        Status: item.Status
                    });
                }
                return list;
            };
            statusddlService.$inject = ["$http", "$q"];
            return statusddlService;
        }(GCPL.Service.BaseService));
        Service.statusddlService = statusddlService;
        app.AddService("statusddlService", statusddlService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=InvoiceListService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var accountModel = /** @class */ (function () {
            function accountModel() {
            }
            return accountModel;
        }());
        Model.accountModel = accountModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=MyaccountModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var MyaccountController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function MyaccountController(_MyaccountService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.FillGrid = null;
                    this.FillPastGrid = null;
                    this.BusinessEntityID = null;
                    this.Cookie = null;
                    this.MyaccountService = _MyaccountService;
                    this.Cookie = _cookieStore;
                    this.BusinessEntityID = this.Cookie.get('UserInfo')['BusinessEntityID'];
                }
                MyaccountController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                MyaccountController.prototype.Init = function () {
                    var _this = this;
                    this.FillGrid = this.MyaccountService.FindGrid(this.BusinessEntityID).then((function (response) {
                        _this.FillGrid = _this.MyaccountService.GetGrid(response.data.Result);
                        console.log(_this.FillGrid);
                    }));
                    this.FillPastGrid = this.MyaccountService.FindPastGrid(this.BusinessEntityID).then((function (response) {
                        _this.FillPastGrid = _this.MyaccountService.GetPastGrid(response.data.Result);
                        console.log("this.FillPastGrid");
                        console.log(_this.FillPastGrid);
                    }));
                };
                MyaccountController.$inject = ["MyaccountComponentService", "$cookieStore"];
                return MyaccountController;
            }());
            var MyaccountComponentController = /** @class */ (function () {
                function MyaccountComponentController() {
                    this.controller = MyaccountController;
                    this.templateUrl = "/Scripts/App/MyAccount/Template/_Myaccount.html";
                }
                MyaccountComponentController.Name = "myaccountcomponent";
                return MyaccountComponentController;
            }());
            app.AddComponent(MyaccountComponentController.Name, new MyaccountComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=MyaccountComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var MyaccountController = /** @class */ (function (_super) {
            __extends(MyaccountController, _super);
            function MyaccountController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return MyaccountController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.MyaccountController = MyaccountController;
        app.AddController("MyaccountController", MyaccountController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=MyaccountController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var MyaccountComponentService = /** @class */ (function (_super) {
            __extends(MyaccountComponentService, _super);
            function MyaccountComponentService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            MyaccountComponentService.prototype.FindGrid = function (data) {
                var config = {
                    params: {
                        BusinessEntityID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/AccountData",
                    Config: config
                });
            };
            MyaccountComponentService.prototype.GetGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        Productname: item.Productname,
                        Startdate: item.Startdate,
                        Enddate: item.Enddate,
                        Planname: item.Planname,
                        Plantype: item.Plantype,
                        Status: item.Status,
                        Orderdate: item.Orderdate,
                        OrderNo: item.OrderNo,
                        AccountNo: item.AccountNo,
                        order_status: item.order_status,
                        suborderno: item.suborderno,
                        renewno: item.renewno,
                        pastProductname: item.pastProductname,
                        pastStartdate: item.pastStartdate,
                        pastEnddate: item.pastEnddate,
                        pastPlanname: item.pastPlanname,
                        pastPlantype: item.pastPlantype,
                        pastStatus: item.pastStatus,
                        pastOrderdate: item.pastOrderdate,
                        pastOrderNo: item.pastOrderNo,
                        pastsuborderno: item.pastsuborderno,
                        pastrenewno: item.pastrenewno,
                    });
                }
                return list;
            };
            MyaccountComponentService.prototype.FindPastGrid = function (data) {
                var config = {
                    params: {
                        BusinessEntityID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/PastAccountData",
                    Config: config
                });
            };
            MyaccountComponentService.prototype.GetPastGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    if (item.pastOrderNo != null || item.pastOrderNo != undefined) {
                        list.push({
                            Productname: item.Productname,
                            Startdate: item.Startdate,
                            Enddate: item.Enddate,
                            Planname: item.Planname,
                            Plantype: item.Plantype,
                            Status: item.Status,
                            Orderdate: item.Orderdate,
                            OrderNo: item.OrderNo,
                            AccountNo: item.AccountNo,
                            order_status: item.order_status,
                            suborderno: item.suborderno,
                            renewno: item.renewno,
                            pastProductname: item.pastProductname,
                            pastStartdate: item.pastStartdate,
                            pastEnddate: item.pastEnddate,
                            pastPlanname: item.pastPlanname,
                            pastPlantype: item.pastPlantype,
                            pastStatus: item.pastStatus,
                            pastOrderdate: item.pastOrderdate,
                            pastOrderNo: item.pastOrderNo,
                            pastsuborderno: item.pastsuborderno,
                            pastrenewno: item.pastrenewno,
                        });
                    }
                }
                return list;
            };
            MyaccountComponentService.$inject = ["$http", "$q", "$cookieStore"];
            return MyaccountComponentService;
        }(GCPL.Service.BaseService));
        Service.MyaccountComponentService = MyaccountComponentService;
        //inject service
        app.AddService("MyaccountComponentService", MyaccountComponentService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=MyaccountService.js.map
//# sourceMappingURL=QuictReceiptModel.js.map
/// <reference path="../../../../typings/jqueryui/jqueryui.d.ts" />
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var QtyChangeValues = GCPL.Model.QtyTextChangePricingDTO;
            var PurchaseOrderModel = GCPL.Model.PurchaseOrderModel;
            var QuickReceiptModel = GCPL.Model.QuickReceiptHeaderDto;
            var PurchaseOrderDetailModel = GCPL.Model.PoItemsModel;
            var GoodsReceiptDetailsModel = GCPL.Model.GoodsReceiptDetailsModel;
            var Podto = GCPL.Model.PoDTO;
            var GoodsReceiptModel = GCPL.Model.GoodsReceiptModel;
            var QuickReceiptController = /** @class */ (function () {
                function QuickReceiptController(_ItemAutoservice, _cookieStore, _ItemCodeservice, _UOMservice, _Vendorservice, _FillPoType, _ItemEditListservice, _goodsReceiptService, _PoItemPriceS, _PoTotalPriceService, _PricePerUnitService, $location, _window, _StockvarianceReportService) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this._window = _window;
                    this.IsDisplayModalPopup = false;
                    this.WarehouseList = null;
                    this.QuickReceiptModel = null;
                    this.Tempcart = null;
                    this.goodsReceiptDTO = null;
                    this.alert = null;
                    this.Description = null;
                    this.DealerID = null;
                    this.edit = null;
                    this.ItemCode = null;
                    this.UOM = null;
                    this.PoType = null;
                    this.PoItemPrice = null;
                    this.DealerState = null;
                    this.AddToGrid = null;
                    this.PricePerUint = null;
                    this.Total = null;
                    this.TempCart = null;
                    this.SubmitPO = null;
                    this.ItemCode1 = null;
                    this.Id = null;
                    this.Type = null;
                    this.GetHeaderData = null;
                    this.GetDetailData = null;
                    this.UserId = null;
                    this.SalesUnitQuantity = null;
                    //AddToGrid.list = null;
                    this.Podto = null;
                    this.Deletetext = null;
                    this.Edittext = null;
                    this.data = null;
                    this.QtyChange = null;
                    this.PurchaseOrderDetailModel = null;
                    this.PurchaseOrderModel = null;
                    this.goodsReceiptDetailsDTO = null;
                    this.goodsReceiptDetailsDTOList = null;
                    this.Cookie = null;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.ItemDescriptionChange = _ItemCodeservice;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.DealerState = this.Cookie.get('UserInfo')['RegionStateId'];
                    this.UserId = this.Cookie.get('UserInfo')['UserID'];
                    this.QtyChange = new QtyChangeValues();
                    this.FillUOMServices = _UOMservice;
                    this.VendornameAutofill = _Vendorservice;
                    this.FillPoType = _FillPoType;
                    this.PurchaseOrderModel = new PurchaseOrderModel();
                    this.GetItemDetailService = _ItemEditListservice;
                    this.PoItemPriceS = _PoItemPriceS;
                    this.GoodsReceiptService = _goodsReceiptService;
                    this.PoTotalPriceService = _PoTotalPriceService;
                    this.PricePerUnitService = _PricePerUnitService;
                    this.PurchaseOrderDetailModel = new PurchaseOrderDetailModel();
                    this.Podto = new Podto();
                    this.StockvarianceReportService = _StockvarianceReportService;
                    this.Id = $location.search().id;
                    this.Type = $location.search().Type;
                    this.goodsReceiptDTO = new GoodsReceiptModel();
                    this.goodsReceiptDetailsDTO = new GoodsReceiptDetailsModel();
                    this.QuickReceiptModel = new QuickReceiptModel();
                }
                QuickReceiptController.prototype.$onInit = function () {
                    $("#errorclose").hide();
                    $("#close").hide();
                    this.Init();
                    $("#txtPODelvDate").datepicker({
                        dateFormat: 'dd M yy',
                        changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectPODelvDate
                    });
                    var n = new Date();
                    var y = n.getFullYear();
                    var m = n.getMonth() + 1;
                    var d = n.getDate();
                    document.getElementById("date").innerHTML = d + "/" + m + "/" + y;
                    this.PurchaseOrderModel.POCuurentDate = document.getElementById("date").value;
                    this.PurchaseOrderModel.DealerID = this.DealerID;
                    this.PurchaseOrderModel.UserID = this.UserId;
                };
                QuickReceiptController.prototype.selectPODelvDate = function (e) {
                    document.getElementById("txtPODelvDate").value = e;
                };
                QuickReceiptController.prototype.Close = function () {
                    if (this.Id == null) {
                        this._window.location.href = "#!/PurchaseOrderList";
                    }
                    else {
                        this._window.location.href = "#!/PurchaseOrderList";
                    }
                };
                QuickReceiptController.prototype.ErrorClose = function () {
                    if (this.Id == null) {
                        location.href = "#!/QuickReceipt";
                    }
                    else {
                        this._window.location.href = "#!/QuickReceipt?id=" + this.Id + "&Type=" + this.Type;
                    }
                };
                QuickReceiptController.prototype.Init = function () {
                    var _this = this;
                    var element = document.getElementById('lnkEdit');
                    var element1 = document.getElementById('lnkDelete');
                    var element3 = document.getElementById('lnkView');
                    this.PurchaseOrderModel.DealerID = this.DealerID;
                    this.WarehouseList = this.StockvarianceReportService.Find().then((function (response) {
                        _this.WarehouseList = _this.StockvarianceReportService.GetWarehouseName(response.data.Result);
                    }));
                    if (this.Id == null) {
                        this.GetUOM();
                        this.GetUOMChange();
                        this.GetPoType();
                        //element3.style.display = "none";
                        //element1.style.display = "";
                        //element.style.display = "";
                        //<HTMLAnchorElement>document.getElementById('lnkEdit').;
                        $("#txtDescription").prop("disabled", true);
                        $("#txtVendorName").prop("disabled", false);
                        $("#txtPaymentTerms").prop("disabled", false);
                    }
                    else {
                        this.GetHeader();
                        this.GetDetail();
                        //$("#DivAdd").hide();
                        this.GetUOM();
                        this.GetUOMChange();
                        this.GetPoType();
                        //element3.style.display = "";
                        //element1.style.display = "none";
                        //element.style.display = "none";
                        $("#txtDescription").prop("disabled", false);
                        $("#txtVendorName").prop("disabled", true);
                        $("#txtPaymentTerms").prop("disabled", true);
                    }
                    if (this.Type === 'View') {
                        $("#DIVSubmit").hide();
                        $("#DIVAdd").hide();
                        $("#DIVEx").hide();
                        $("#DIVVIew").show();
                        this.Deletetext = "";
                        this.Edittext = "";
                    }
                    else {
                        $("#DIVSubmit").show();
                        $("#DIVAdd").show();
                        $("#DIVEx").show();
                        $("#DIVVIew").hide();
                        this.Deletetext = "Delete";
                        this.Edittext = "Edit  | ";
                    }
                };
                QuickReceiptController.prototype.Clear = function () {
                    this.PurchaseOrderDetailModel = null;
                };
                QuickReceiptController.prototype.Bindshiptoaddress = function () {
                    for (var i = 0; i < this.WarehouseList.length; i++) {
                        if (this.PurchaseOrderModel.ShipToVendorID === this.WarehouseList[i].WHID) {
                            this.PurchaseOrderModel.ShipToAddress1 = this.WarehouseList[i].WHaddress;
                            this.PurchaseOrderModel.WHState = this.WarehouseList[i].state;
                        }
                    }
                };
                QuickReceiptController.prototype.Shiptochange = function () {
                    if (this.PurchaseOrderModel.PoType === '5') {
                        this.PurchaseOrderModel.ShipToVendorID = null;
                        this.PurchaseOrderModel.ShipToAddress1 = null;
                        $("#ddlWarehouse").prop("disabled", true);
                    }
                    else {
                        $("#ddlWarehouse").prop("disabled", false);
                    }
                };
                QuickReceiptController.prototype.GetHeader = function () {
                    var _this = this;
                    this.PoTotalPriceService.FindHeader(this.Id).then((function (response) {
                        _this.GetHeaderData = _this.PoTotalPriceService.GetPoHeader(response.data.Result);
                        _this.PurchaseOrderModel = _this.GetHeaderData;
                        _this.PurchaseOrderModel.State = _this.GetHeaderData.VendorStateID;
                        console.log(_this.PurchaseOrderModel);
                        document.getElementById("txtPODelvDate").value = _this.PurchaseOrderModel.DeliveryDate;
                    }));
                };
                QuickReceiptController.prototype.GetDetail = function () {
                    var _this = this;
                    this.PoTotalPriceService.FindDetail(this.Id).then((function (response) {
                        _this.AddToGrid = _this.PoTotalPriceService.GetPoTotalPrice(response.data.Result);
                    }));
                };
                QuickReceiptController.prototype.AutoSearch = function () {
                    var that = this;
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            that.ItemDescriptionAutofill.FilterAutoCompletePO(request, that.PurchaseOrderModel.PoType).then((function (response) {
                                var data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedItemID = ui.item.id;
                            that.QtyChange.ItemID = ui.item.id;
                            that.Description = ui.item.value;
                            that.PurchaseOrderDetailModel.ItemDescription = ui.item.value;
                            that.PurchaseOrderDetailModel.ItemId = ui.item.id;
                            that.ItemDescriptionChange.FindPoAutofill(that.Description, that.PurchaseOrderModel.PoType).then((function (response) {
                                that.ItemCode = that.ItemDescriptionChange.GetItemCode(response.data.Result);
                                that.PurchaseOrderDetailModel.ItemCode = that.ItemCode.ItemNo;
                                that.GetItemDetailService.Find(ui.item.id).then((function (response) {
                                    that.goodsReceiptDetailsDTO = that.GoodsReceiptService.getGoodsReceiptItemDetails(response.data.Result);
                                    that.PurchaseOrderDetailModel.HSNNumber = that.goodsReceiptDetailsDTO.HSNNumber;
                                    that.PurchaseOrderDetailModel.UOMID = that.goodsReceiptDetailsDTO.UOMID.toString();
                                    that.PurchaseOrderDetailModel.UOM = that.PurchaseOrderDetailModel.UOMID;
                                    console.log(that.goodsReceiptDetailsDTO);
                                    that.PoItemPrice = that.PoItemPriceS.Find(that.PurchaseOrderDetailModel.HSNNumber).then((function (response) {
                                        that.PoItemPrice = that.PoItemPriceS.GetPoItemPrice(response.data.Result);
                                        console.log(that.DealerState);
                                        console.log(that.PurchaseOrderModel.VendorStateID);
                                        if (that.DealerState == that.PurchaseOrderModel.VendorStateID) {
                                            that.PurchaseOrderDetailModel.CGST = that.PoItemPrice.CGST;
                                            that.PurchaseOrderDetailModel.SGST = that.PoItemPrice.SGST;
                                            that.PurchaseOrderDetailModel.IGST = 0;
                                        }
                                        else {
                                            that.PurchaseOrderDetailModel.CGST = 0;
                                            that.PurchaseOrderDetailModel.SGST = 0;
                                            that.PurchaseOrderDetailModel.IGST = that.PoItemPrice.IGST;
                                        }
                                        that.PricePerUint = that.PricePerUnitService.Find(ui.item.id, that.PurchaseOrderModel.BillToVendorID).then((function (response) {
                                            that.PricePerUint = that.PricePerUnitService.GetPoItemPrice(response.data.Result);
                                            that.PurchaseOrderDetailModel.PricePerunit = that.PricePerUint.PricePerUnit;
                                        }));
                                    }));
                                }));
                            }));
                        },
                        change: function () {
                        }
                    });
                };
                QuickReceiptController.prototype.AutoSearchBaarCode = function () {
                    //  console.log('hi');
                    //   console.log('hi');
                    //this.PurchaseOrderDetailModel.Baarcode = (<HTMLInputElement>document.getElementById("txtBaarCode")).value
                    //  console.log((<HTMLInputElement>document.getElementById("txtBaarCode")).value);
                    var _this = this;
                    this.ItemDescriptionAutofill.FilterAutoCompletePOBarCode(document.getElementById("txtBaarCode").value, this.PurchaseOrderModel.PoType).then((function (response) {
                        _this.data = _this.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                        // console.log(this.data);
                        // console.log(this.data[0].Description);
                        // console.log(this.PurchaseOrderDetailModel.ItemDescription);
                        document.getElementById("txtDescription").value = _this.data[0].Description;
                        _this.PurchaseOrderDetailModel.ItemId = _this.data[0].ItemID;
                        _this.PurchaseOrderDetailModel.ItemDescription = _this.data[0].Description;
                        if (_this.data[0] != null) {
                            _this.ItemDescriptionChange.FindPoAutofill(_this.data[0].Description, _this.PurchaseOrderModel.PoType).then((function (response) {
                                _this.ItemCode = _this.ItemDescriptionChange.GetItemCode(response.data.Result);
                                _this.PurchaseOrderDetailModel.ItemCode = _this.ItemCode.ItemNo;
                                _this.GetItemDetailService.Find(_this.data[0].ItemID).then((function (response) {
                                    _this.goodsReceiptDetailsDTO = _this.GoodsReceiptService.getGoodsReceiptItemDetails(response.data.Result);
                                    _this.PurchaseOrderDetailModel.HSNNumber = _this.goodsReceiptDetailsDTO.HSNNumber;
                                    _this.PurchaseOrderDetailModel.UOMID = _this.goodsReceiptDetailsDTO.UOMID.toString();
                                    _this.PurchaseOrderDetailModel.UOM = _this.PurchaseOrderDetailModel.UOMID;
                                    _this.PoItemPrice = _this.PoItemPriceS.Find(_this.PurchaseOrderDetailModel.HSNNumber).then((function (response) {
                                        _this.PoItemPrice = _this.PoItemPriceS.GetPoItemPrice(response.data.Result);
                                        if (_this.DealerState == _this.PurchaseOrderModel.VendorStateID) {
                                            _this.PurchaseOrderDetailModel.CGST = _this.PoItemPrice.CGST;
                                            _this.PurchaseOrderDetailModel.SGST = _this.PoItemPrice.SGST;
                                            _this.PurchaseOrderDetailModel.IGST = 0;
                                        }
                                        else {
                                            _this.PurchaseOrderDetailModel.CGST = 0;
                                            _this.PurchaseOrderDetailModel.SGST = 0;
                                            _this.PurchaseOrderDetailModel.IGST = _this.PoItemPrice.IGST;
                                        }
                                        _this.PricePerUint = _this.PricePerUnitService.Find(_this.data[0].ItemID, _this.PurchaseOrderModel.BillToVendorID).then((function (response) {
                                            _this.PricePerUint = _this.PricePerUnitService.GetPoItemPrice(response.data.Result);
                                            _this.PurchaseOrderDetailModel.PricePerunit = _this.PricePerUint.PricePerUnit;
                                        }));
                                    }));
                                }));
                            }));
                        }
                    }));
                };
                QuickReceiptController.prototype.Altuomchange = function () {
                    for (var i = 0; i < this.ItemCode.UOMList.length; i++) {
                        if (this.ItemCode.UOMList[i].uomid.toString() === this.PurchaseOrderDetailModel.UOM.toString()) {
                            this.SalesUnitQuantity = parseInt(this.ItemCode.UOMList[i].SalesUnitQuantity.toString());
                        }
                    }
                };
                QuickReceiptController.prototype.CalculateBaseQty = function () {
                    var _this = this;
                    this.ItemCode1 = this.ItemDescriptionChange.Find(this.PurchaseOrderDetailModel.ItemDescription).then((function (response) {
                        _this.ItemCode1 = _this.ItemDescriptionChange.GetItemCode(response.data.Result);
                        for (var i = 0; i < _this.ItemCode1.UOMList.length; i++) {
                            if (_this.ItemCode1.UOMList[i].uomid.toString() === _this.PurchaseOrderDetailModel.UOM.toString()) {
                                _this.SalesUnitQuantity = parseInt(_this.ItemCode1.UOMList[i].SalesUnitQuantity.toString());
                                _this.PurchaseOrderDetailModel.QuantityinBaseUOM = _this.SalesUnitQuantity * _this.PurchaseOrderDetailModel.ItemQuantity;
                                _this.TotalPricecalculation();
                            }
                        }
                    }));
                };
                QuickReceiptController.prototype.AutoFillSupplier = function () {
                    var that = this;
                    $("#txtVendorName").autocomplete({
                        source: function (request, res) {
                            that.VendornameAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.VendornameAutofill.GetVendorName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.VendorName,
                                        value: item.VendorName,
                                        id: item.VendorID,
                                        Address1: item.Address1,
                                        PANReferenceNo: item.PANReferenceNo,
                                        GSTIN: item.GSTIN,
                                        VendorStateID: item.VendorStateID,
                                        State: item.State,
                                        PaymentTerms: item.PaymentTerms,
                                        Currency: item.Currency
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedItemID = ui.item.id;
                            that.PurchaseOrderModel.BillToVendorName = ui.item.value;
                            that.PurchaseOrderModel.BillToVendorID = ui.item.id;
                            that.PurchaseOrderModel.ShipToVendorName = ui.item.value;
                            //that.PurchaseOrderModel.ShipToVendorID = ui.item.id;
                            that.PurchaseOrderModel.BillToAddress1 = ui.item.Address1;
                            that.PurchaseOrderModel.ShipToAddress1 = ui.item.Address1;
                            that.PurchaseOrderModel.PANReferenceNo = ui.item.PANReferenceNo;
                            that.PurchaseOrderModel.VendorStateID = ui.item.VendorStateID;
                            that.PurchaseOrderModel.GSTIN = ui.item.GSTIN;
                            that.PurchaseOrderModel.State = ui.item.State;
                            that.PurchaseOrderModel.Currency = ui.item.Currency;
                            that.PurchaseOrderModel.ShipToVendorID = "1";
                            that.PurchaseOrderModel.PaymentTerms = ui.item.PaymentTerms;
                            $("#txtDescription").prop("disabled", false);
                        },
                        change: function () {
                        }
                    });
                };
                QuickReceiptController.prototype.GetUOMChange = function () {
                    var _this = this;
                    this.ItemDescriptionChange.Find('').then((function (response) {
                        _this.ItemCode = _this.ItemDescriptionChange.GetItemCode(response.data.Result);
                    }));
                };
                QuickReceiptController.prototype.GetUOM = function () {
                    var _this = this;
                    this.UOM = this.FillUOMServices.Find().then((function (response) {
                        _this.UOM = _this.FillUOMServices.GetUOM(response.data.Result);
                    }));
                };
                QuickReceiptController.prototype.GetPoType = function () {
                    var _this = this;
                    this.PoType = this.FillPoType.Find().then((function (response) {
                        _this.PoType = _this.FillPoType.GetPoType(response.data.Result);
                    }));
                };
                QuickReceiptController.prototype.AddClick = function () {
                    var _this = this;
                    if (this.PurchaseOrderDetailModel.ItemDescription === undefined) {
                        this.HideShow();
                        this.alert = "Please Enter Item Description";
                    }
                    //else if (this.PurchaseOrderDetailModel.UOM === undefined) {
                    //    this.HideShow();
                    //    this.alert = "Please Select UOM";
                    //}
                    else if (this.PurchaseOrderDetailModel.ItemQuantity === undefined) {
                        this.HideShow();
                        this.alert = "Please Enter Item Quantity";
                    }
                    else if (this.PurchaseOrderDetailModel.UOMID === undefined) {
                        this.HideShow();
                        this.alert = "Please Select Base UOM";
                    }
                    else if (this.PurchaseOrderDetailModel.QuantityinBaseUOM === undefined) {
                        this.HideShow();
                        this.alert = "Please Enter Qunatity in Base UOM";
                    }
                    else if (this.PurchaseOrderDetailModel.PricePerunit === undefined) {
                        this.HideShow();
                        this.alert = "Please Enter PricePerunit";
                    }
                    else {
                        if (this.AddToGrid !== null) {
                            this.Podto.list = this.AddToGrid.list;
                            this.Podto.EditId = this.PurchaseOrderDetailModel.index;
                            this.PurchaseOrderDetailModel.GridTotalQuantity = this.AddToGrid.poddto.GridTotalQuantity;
                            this.PurchaseOrderDetailModel.GridTotalValue = this.AddToGrid.poddto.GridTotalValue;
                            this.PurchaseOrderDetailModel.GridTotaltax = this.AddToGrid.poddto.GridTotaltax;
                            this.PurchaseOrderDetailModel.GridTotalNetAmount = this.AddToGrid.poddto.GridTotalNetAmount;
                        }
                        else {
                        }
                        this.Podto.poddto = this.PurchaseOrderDetailModel;
                        this.PoTotalPriceService.Find(this.Podto).then((function (response) {
                            _this.AddToGrid = _this.PoTotalPriceService.GetPoTotalPrice(response.data.Result);
                            //this.GetDetailData = this.AddToGrid.list;
                            //this.PurchaseOrderModel.TotalQuantity = this.AddToGrid.podto.
                            console.log(_this.AddToGrid);
                        }));
                        this.PurchaseOrderDetailModel = null;
                        this.GetUOM();
                        this.HideShow();
                        //this.alert = "Successfully Added Record in cart";
                    }
                };
                QuickReceiptController.prototype.TotalPricecalculation = function () {
                    var _this = this;
                    this.Total = this.PoTotalPriceService.FindChange(this.PurchaseOrderDetailModel).then((function (response) {
                        _this.Total = _this.PoTotalPriceService.GetPoTotalPriceChange(response.data.Result);
                        _this.PurchaseOrderDetailModel.BasicPriceAfterDiscount = _this.Total.BasicPriceAfterDiscount;
                        _this.PurchaseOrderDetailModel.TotalTax = _this.Total.TotalTax;
                        _this.PurchaseOrderDetailModel.ItemValue = _this.Total.ItemValue;
                        _this.PurchaseOrderDetailModel.convertedCGST = _this.Total.convertedCGST;
                        _this.PurchaseOrderDetailModel.convertedSGST = _this.Total.convertedSGST;
                        _this.PurchaseOrderDetailModel.convertedIGST = _this.Total.convertedIGST;
                        _this.PurchaseOrderDetailModel.TotalPrice = _this.Total.TotalPrice;
                    }));
                };
                QuickReceiptController.prototype.Edit = function (data) {
                    var _this = this;
                    this.AddToGrid.Type = 'Edit';
                    this.AddToGrid.EditId = data;
                    console.log(this.AddToGrid);
                    this.edit = this.PoTotalPriceService.FindEdit(this.AddToGrid).then((function (response) {
                        _this.edit = _this.PoTotalPriceService.GetPoTotalPrice(response.data.Result);
                        console.log(_this.edit);
                        _this.PurchaseOrderDetailModel = _this.edit.poddto;
                        _this.PurchaseOrderDetailModel.BasicPriceAfterDiscount = _this.edit.poddto.BasicPriceAfterDiscount;
                        //for (var i = 0; i < this.ItemCode.UOMList.length; i++) {
                        //    if (this.ItemCode.UOMList[i].uomid.toString() === this.PurchaseOrderDetailModel.UOM.toString()) {
                        //        this.SalesUnitQuantity = this.ItemCode.UOMList[i].SalesUnitQuantity;
                        //    }
                        //}
                        //this.PurchaseOrderModel.Total = this.edit.poddto.GridTotalQuantity;
                    }));
                };
                QuickReceiptController.prototype.View = function (data) {
                    var _this = this;
                    this.PoTotalPriceService.FindDetailView(this.Id).then((function (response) {
                        _this.PurchaseOrderDetailModel = _this.PoTotalPriceService.GetPoDetailView(response.data.Result);
                    }));
                };
                QuickReceiptController.prototype.Delete = function (data) {
                    var _this = this;
                    if (this.Type === 'View') {
                    }
                    else {
                        this.AddToGrid.EditId = data;
                        this.AddToGrid.Type = 'Delete';
                        this.PoTotalPriceService.FindEdit(this.AddToGrid).then((function (response) {
                            _this.AddToGrid = _this.PoTotalPriceService.GetPoTotalPrice(response.data.Result);
                        }));
                    }
                };
                QuickReceiptController.prototype.HideShow = function () {
                    $("#errorclose").show();
                    $("#close").hide();
                };
                QuickReceiptController.prototype.Submit = function () {
                    var _this = this;
                    this.PurchaseOrderModel.DeliveryDate = document.getElementById("txtPODelvDate").value;
                    this.goodsReceiptDTO.warehouseID = Number(this.PurchaseOrderModel.ShipToVendorID);
                    if (this.PurchaseOrderModel.BillToVendorName == undefined) {
                        this.HideShow();
                        this.alert = "Please Enter Bill To Supplier";
                    }
                    else if (this.PurchaseOrderModel.PoType == undefined) {
                        this.HideShow();
                        this.alert = "Please Select PO type";
                    }
                    else if (this.PurchaseOrderModel.DeliveryDate == undefined) {
                        this.HideShow();
                        this.alert = "Please Enter Delivery Date";
                    }
                    else if (this.AddToGrid == null) {
                        this.HideShow();
                        this.alert = "There are no any Record in Cart";
                    }
                    else if (this.PurchaseOrderModel.PaymentTerms == null) {
                        this.HideShow();
                        this.alert = "Please Enter Payment Terms";
                    }
                    else if (this.goodsReceiptDTO.warehouseID == undefined) {
                        this.alert = "Please Select Warehouse";
                    }
                    else if (this.goodsReceiptDTO.InvoiceNo == undefined) {
                        this.alert = "Please Enter Supplier Bill No";
                    }
                    else {
                        //this.PurchaseOrderModel.PoId = this.Id;
                        //
                        //
                        //
                        //this.goodsReceiptDTO.PoNumber = this.SubmitPO.Ponumber;
                        //this.goodsReceiptDTO.DealerID = this.DealerID;
                        //this.goodsReceiptDTO.VendorName = this.PurchaseOrderModel.BillToVendorName;
                        //this.goodsReceiptDTO.vendorAddress = this.PurchaseOrderModel.BillToAddress1;
                        //this.goodsReceiptDTO.PAN = this.PurchaseOrderModel.PANReferenceNo;
                        //this.goodsReceiptDTO.GSTN = this.PurchaseOrderModel.GSTIN;
                        //this.goodsReceiptDTO.POID = this.SubmitPO.POID;
                        //this.goodsReceiptDTO.VendorID = parseInt(this.PurchaseOrderModel.BillToVendorID);
                        //
                        //
                        this.QuickReceiptModel.BillToVendorID = this.PurchaseOrderModel.BillToVendorID;
                        this.QuickReceiptModel.DealerID = this.DealerID;
                        this.QuickReceiptModel.DeliveryDate = document.getElementById("txtPODelvDate").value;
                        this.QuickReceiptModel.IncoTerms = this.PurchaseOrderModel.IncoTerms;
                        this.QuickReceiptModel.POCuurentDate = document.getElementById("txtPODelvDate").value;
                        this.QuickReceiptModel.PoType = this.PurchaseOrderModel.PoType;
                        this.QuickReceiptModel.DocumentType = '909';
                        this.QuickReceiptModel.status = '1';
                        this.QuickReceiptModel.TotalQuantity = this.AddToGrid.poddto.GridTotalQuantity.toString();
                        this.QuickReceiptModel.TotalValue = this.AddToGrid.poddto.GridTotalValue.toString();
                        this.QuickReceiptModel.ShipToVendorID = parseInt(this.PurchaseOrderModel.ShipToVendorID);
                        this.QuickReceiptModel.ShipToVendorName = this.PurchaseOrderModel.ShipToVendorName;
                        this.QuickReceiptModel.ShipToAddress1 = this.PurchaseOrderModel.ShipToAddress1;
                        this.QuickReceiptModel.UserID = this.Cookie.get('UserInfo')['UserID'];
                        this.QuickReceiptModel.PaymentTerms = this.PurchaseOrderModel.PaymentTerms;
                        this.QuickReceiptModel.InvoiceNo = this.goodsReceiptDTO.InvoiceNo;
                        this.QuickReceiptModel.InvDate = this.goodsReceiptDTO.InvDate;
                        this.QuickReceiptModel.warehouseID = this.goodsReceiptDTO.warehouseID;
                        this.QuickReceiptModel.QuickReceiptDetailsDto = this.AddToGrid.list;
                        console.log(this.QuickReceiptModel);
                        this.GoodsReceiptService.SaveQuickReceipt(this.QuickReceiptModel).then(function (response) {
                            $("#errorclose").hide();
                            $("#close").show();
                            _this.alert = 'Your Quick Receipt is saved sucessfully with Quick Receipt number ' + response.data.Result;
                        });
                    }
                };
                QuickReceiptController.$inject = ["itemDescriptionService", "$cookieStore", "itemDescriptionChangeService", "GetUomServices", "VendorMasterAutofillService",
                    "PoTypeDropdownService", "ItemMasterEditService", "GoodsReceiptService", "PoItemPriceService", "PoTotalPriceService", "PricePerUnitService", "$location", "$window", "StockvarianceReportService"];
                return QuickReceiptController;
            }());
            var QuickReceiptComponentController = /** @class */ (function () {
                function QuickReceiptComponentController() {
                    this.controller = QuickReceiptController;
                    this.templateUrl = "/Scripts/App/Purchase/QuickReceipt/Template/_QuickReceipt.html";
                }
                QuickReceiptComponentController.Name = "quickReceiptComponent";
                return QuickReceiptComponentController;
            }());
            app.AddComponent(QuickReceiptComponentController.Name, new QuickReceiptComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=QuickReceiptComponent.js.map
//# sourceMappingURL=QuictReceiptController.js.map
//# sourceMappingURL=QuickReceiptServices.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var MTTRReportModel = /** @class */ (function () {
            function MTTRReportModel() {
            }
            return MTTRReportModel;
        }());
        Model.MTTRReportModel = MTTRReportModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=MTTRReportModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var MTTRReportController = /** @class */ (function () {
                function MTTRReportController(_cookieStore, _MTTRReportService) {
                    this._cookieStore = _cookieStore;
                    this.Cookie = null;
                    this.UserID = null;
                    this.Customer = null;
                    this.AllocatedToUser = null;
                    this.FromDate = null;
                    this.ToDate = null;
                    this.Model = null;
                    this.Cookie = _cookieStore;
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.MTTRReportService = _MTTRReportService;
                }
                MTTRReportController.prototype.$onInit = function () {
                    this.Init();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                MTTRReportController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                MTTRReportController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                MTTRReportController.prototype.Init = function () {
                    this.Search();
                };
                MTTRReportController.prototype.Search = function () {
                    var _this = this;
                    this.FromDate = document.getElementById("txtFromDate").value;
                    this.ToDate = document.getElementById("txtToDate").value;
                    if (this.Customer == null) {
                        this.Customer = '';
                    }
                    if (this.AllocatedToUser == null) {
                        this.AllocatedToUser = '';
                    }
                    if (this.Model == null) {
                        this.Model = '';
                    }
                    this.MTTRReportService.Find(this.Customer, this.AllocatedToUser, this.Model, this.FromDate, this.ToDate).then((function (response) {
                        console.log(response);
                        _this.MTTRModel = _this.MTTRReportService.GetMTTRReportList(response.data.Result);
                        console.log(_this.MTTRModel);
                    }));
                    //console.log(this.UserID);
                    //console.log(this.Customer);
                    //console.log(this.AllocatedToUser);
                    //console.log(this.FromDate);
                    //console.log(this.ToDate);
                    //console.log(this.Model);
                };
                MTTRReportController.$inject = ["$cookieStore", "MTTRReportService"];
                return MTTRReportController;
            }());
            var MTTRReportComponentController = /** @class */ (function () {
                function MTTRReportComponentController() {
                    this.controller = MTTRReportController;
                    this.templateUrl = "/Scripts/App/Reports/MTTR/Template/_MTTRReport.html";
                }
                //static Name: string = "aaa"
                MTTRReportComponentController.Name = "mttrreportcomponent";
                return MTTRReportComponentController;
            }());
            app.AddComponent(MTTRReportComponentController.Name, new MTTRReportComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=MTTRReportComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var MTTRReportController = /** @class */ (function (_super) {
            __extends(MTTRReportController, _super);
            function MTTRReportController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return MTTRReportController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.MTTRReportController = MTTRReportController;
        app.AddController("MTTRReportController", MTTRReportController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=MTTRReportController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var MTTRReportService = /** @class */ (function (_super) {
            __extends(MTTRReportService, _super);
            function MTTRReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            MTTRReportService.prototype.Find = function (Customer, AllocatedToUser, Model, FromDate, ToDate) {
                var config = {
                    params: {
                        customername: Customer,
                        modelno: Model,
                        status: '',
                        employeeid: AllocatedToUser,
                        fromdate: FromDate,
                        todate: ToDate
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/MTTRReport",
                    Config: config
                });
            };
            MTTRReportService.prototype.GetMTTRReportList = function (data) {
                console.log(data);
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        CustomerName: item.CustomerName,
                        ModelNo: item.ModelNo,
                        Status: item.Status,
                        EmployeeName: item.EmployeeName,
                        EmployeeID: item.EmployeeID,
                        FromDate: item.FromDate,
                        ToDate: item.ToDate,
                        TicketID: item.TicketID,
                        MachineSrNo: item.MachineSrNo,
                        AllocationDate: item.AllocationDate,
                        ActualStartDate: item.ActualStartDate,
                        ExpReachingDate: item.ExpReachingDate,
                        ActualReachDate: item.ActualReachDate,
                        WorkClosureDate: item.WorkClosureDate,
                        DateResolved: item.DateResolved,
                        RepairStatus: item.RepairStatus
                    });
                }
                return list;
            };
            MTTRReportService.$inject = ["$http", "$q", "$cookieStore"];
            return MTTRReportService;
        }(GCPL.Service.BaseService));
        Service.MTTRReportService = MTTRReportService;
        app.AddService("MTTRReportService", MTTRReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=MTTRReportService.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var PartInvoiceListModel = GCPL.Model.PartInvoiceAutofill;
            var ServicePartinvoice = GCPL.Model.PartInvoiceAutofill;
            var LabourInvoiceListModel = GCPL.Model.ServiceInvoiceLbourDetailsResponse;
            var ServiceLabourinvoice = GCPL.Model.ServiceInvoiceLbourDetailsResponse;
            var Insert = GCPL.Model.PartInvoiceInsertHeader;
            var TotalPrices = GCPL.Model.ItemPriceDto;
            var QtyChangeValues = GCPL.Model.QtyTextChangePricingDTO;
            // import ItemPriceListModel = GCPL.Model.ItemPriceDto;
            var SODtolist = GCPL.Model.SODto;
            var ItemPriceListModel = GCPL.Model.SalesOrderDetails;
            var LabourInvoiceControllerComponent = /** @class */ (function () {
                function LabourInvoiceControllerComponent(_ServiceInvoiceService, $location, _ItemAutoservice, _cookieStore, _LabourInvoiceAutofill, _FillWoType, _LabouInvoiceDetailsService, _insert, _UOMservice, _QuotationServices, _IQuickSaleServices, _Custinfoservice, _ItemCodeservice, _Service, _FillItemType) {
                    this.$location = $location;
                    this._cookieStore = _cookieStore;
                    this.IsDisplayModalPopup = false;
                    this.IsDisplayModalPopupError = false;
                    this.InvoiceDetails = null;
                    this.TempAddcart = null;
                    this.alert = null;
                    this.SODetails = null;
                    this.SODto = null;
                    this.QtyChange = null;
                    this.ItemType = null;
                    //ItemPriceList: Model.ItemPriceDto = null;
                    this.TicketNo = null;
                    this.WOID = null;
                    this.UOM = null;
                    this.CustInfo = null;
                    this.ItemID = null;
                    this.Description = null;
                    this.DealerID = null;
                    this.ID = null;
                    this.Name = null;
                    this.Partdetails = null;
                    this.WorkOrdetType = null;
                    this.tempLabour = null;
                    this.tempPart = null;
                    this.Quantity = null;
                    this.edit = null;
                    this.Dropdownsubtype = null;
                    this.CGSTValueQty = null;
                    this.SGSTValueQty = null;
                    this.IGSTValueQty = null;
                    this.TotalNetAmount = null;
                    this.TotalPrice1 = null;
                    this.ItemCode = null;
                    this.ServicePart = null;
                    this.PartInvoiceList = null;
                    this.LabourDetails = null;
                    this.LabourtInvoiceList = null;
                    this.InsertServiceInvoice = null;
                    this.GetDetails = null;
                    this.TotalPrice = null;
                    this.Cookie = null;
                    this.ServiceInvoiceService = _ServiceInvoiceService;
                    this.TicketNo = $location.search().TicketNo;
                    this.WOID = $location.search().WOID;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.LabouInvoiceDetailsService = _LabouInvoiceDetailsService;
                    this.QuotationServices = _QuotationServices;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.LabourInvoiceAutofill = _LabourInvoiceAutofill;
                    this.FillWoTypeService = _FillWoType;
                    this.QtyChange = new QtyChangeValues();
                    this.ServicePart = new PartInvoiceListModel();
                    this.PartInvoiceList = new ServicePartinvoice();
                    this.FillUOMServices = _UOMservice;
                    this.LabourDetails = new LabourInvoiceListModel();
                    this.LabourtInvoiceList = new ServiceLabourinvoice();
                    this.InsertInvoice = _insert;
                    this.TotalPrice = new TotalPrices();
                    this.InsertServiceInvoice = new Insert();
                    this.IQuickSaleServices = _IQuickSaleServices;
                    this.SODto = new SODtolist();
                    this.SODetails = new ItemPriceListModel();
                    this.CustomerInfoService = _Custinfoservice;
                    this.ItemDescriptionChange = _ItemCodeservice;
                    this.Service = _Service;
                    this.FillItemType = _FillItemType;
                    this.InvoiceDetails = new GCPL.Model.ServiceInvoiceDetailsResponse();
                }
                LabourInvoiceControllerComponent.prototype.$onInit = function () {
                    this.IsDisplayModalPopup = false;
                    this.IsDisplayModalPopupError = false;
                    this.Init();
                    $("#errorclose").hide();
                    $("#close").show();
                    $("#txtinvoicedate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                };
                LabourInvoiceControllerComponent.prototype.selectFromDate = function (e) {
                    document.getElementById("txtinvoicedate").value = e;
                };
                LabourInvoiceControllerComponent.prototype.Init = function () {
                    var _this = this;
                    this.GetPoType();
                    //this.GetItemSubType();
                    //autocomplete
                    var currentDate = new Date();
                    var day = currentDate.getDate();
                    var month = currentDate.getMonth() + 1;
                    var year = currentDate.getFullYear();
                    console.log(day + "/" + month + "/" + year);
                    var that = this;
                    $("#txtLabourInvoice").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.LabourInvoiceAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.LabourInvoiceAutofill.GetLabouInvoiceAutofill(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Name,
                                        value: item.Name,
                                        id: item.ID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var ID = ui.item.id;
                            var LabourName = ui.item.value;
                            //let SelectedCustomerID = ui.item.id;
                            // that.changeLabour(LabourName);
                        },
                        change: function () {
                        }
                    });
                    this.WorkOrdetType = this.FillWoTypeService.Find(this.DealerID).then((function (response) {
                        _this.WorkOrdetType = _this.FillWoTypeService.GetWOFill(response.data.Result);
                    }));
                    this.InvoiceDetails = this.ServiceInvoiceService.FindInvoiceDetails(this.TicketNo, this.DealerID, this.WOID).then((function (response) {
                        _this.InvoiceDetails = _this.ServiceInvoiceService.GetInvoiceDetails(response.data.Result);
                        _this.InvoiceDetails.WOID = _this.WOID;
                        //this.InvoiceDetails.WOTypeID = this.InvoiceDetails.WOTypeID.tostring();
                        _this.CGSTValueQty = 0;
                        _this.SGSTValueQty = 0;
                        _this.IGSTValueQty = 0;
                        _this.TotalNetAmount = 0;
                        _this.TotalPrice1 = 0;
                        if (_this.InvoiceDetails.labourInvoice != null) {
                            console.log(_this.InvoiceDetails);
                            for (var _i = 0, _a = _this.InvoiceDetails.labourInvoice; _i < _a.length; _i++) {
                                var Item = _a[_i];
                                _this.CGSTValueQty += Item.CGSTValueQty;
                                _this.SGSTValueQty += Item.SGSTValueQty;
                                _this.IGSTValueQty += Item.IGSTValueQty;
                                _this.TotalNetAmount += Number(Item.TotalAmount);
                                _this.TotalPrice1 += Number(Item.TotalLabourAmount);
                            }
                        }
                        else {
                            console.log('null');
                        }
                        _this.CustInfo = _this.CustomerInfoService.Find(_this.InvoiceDetails.CustomerID).then((function (response) {
                            _this.CustInfo = _this.CustomerInfoService.GetCustomerNameSelectByAddress(response.data.Result);
                            //this.Partdetails = this.ServiceInvoiceService.FindPartDetails(this.TicketNo).then((response => {
                            //    this.Partdetails = this.ServiceInvoiceService.GetPartDetails(response.data.Result);
                            //    for (let result of this.Partdetails) {
                            //        this.SODetails.Quantity = result.Quantity;
                            //        this.SODetails.ItemID = result.PartID;
                            //        this.SODetails.UOMID = "1";
                            //        this.SODetails.Description = result.Description;
                            //        this.Quantity = result.Quantity;
                            //        this.IQuickSaleServices.FindQtyChange(this.SODetails, this.CustInfo).then((response => {
                            //            this.SODetails = this.IQuickSaleServices.GetPriceList(response.data.Result);
                            //            this.AddPart();
                            //        }));
                            //    }
                            //    //this.SODetails.Quantity = "";
                            //    // this.SODetails.UOMID = "";
                            //    // this.SODetails.Description = "";
                            //}));
                        }));
                    }));
                };
                LabourInvoiceControllerComponent.prototype.GetPoType = function () {
                    var _this = this;
                    var that = this;
                    this.ServiceInvoiceService.Find1().then((function (response) {
                        _this.ItemType = _this.ServiceInvoiceService.GetItemType(response.data.Result);
                        console.log(_this.ItemType);
                        _this.ItemType.forEach(function (value, key) {
                            if (value.ItemType == "Service") {
                                that.InvoiceDetails.ItemType = value.ItemTypeID;
                                that.GetItemSubType(value.ItemTypeID);
                            }
                        });
                    }));
                };
                LabourInvoiceControllerComponent.prototype.GetItemSubType = function (data) {
                    var _this = this;
                    this.Service.BindItemSubTypeddl(data).then((function (response) {
                        _this.Dropdownsubtype = _this.Service.DropdownSubtype(response.data.Result);
                    }));
                };
                LabourInvoiceControllerComponent.prototype.calculatechangedPrice = function (data) {
                    var _this = this;
                    console.log(data);
                    this.ServiceInvoiceService.FindChangedPrice(data, this.InvoiceDetails.labourInvoice).then((function (response) {
                        _this.CGSTValueQty = 0;
                        _this.SGSTValueQty = 0;
                        _this.IGSTValueQty = 0;
                        _this.TotalNetAmount = 0;
                        _this.TotalPrice1 = 0;
                        _this.InvoiceDetails.labourInvoice = response.data.Result;
                        for (var _i = 0, _a = _this.InvoiceDetails.labourInvoice; _i < _a.length; _i++) {
                            var Item = _a[_i];
                            _this.CGSTValueQty += Item.CGSTValueQty;
                            _this.SGSTValueQty += Item.SGSTValueQty;
                            _this.IGSTValueQty += Item.IGSTValueQty;
                            _this.TotalNetAmount += Number(Item.TotalAmount);
                            _this.TotalPrice1 += Number(Item.TotalLabourAmount);
                        }
                    }));
                };
                LabourInvoiceControllerComponent.prototype.changeLabour = function (data) {
                    //this.LabouInvoiceDetailsService.Find(data).then((response => {
                    //    this.LabourDetails = this.LabouInvoiceDetailsService.GetInvoiceLabourDetails(response.data.Result);
                    //}));
                };
                LabourInvoiceControllerComponent.prototype.DeleteItem = function (data) {
                    var index = this.InvoiceDetails.labourInvoice.findIndex(function (x) { return x.index == data.index; });
                    if (index > -1) {
                        this.InvoiceDetails.labourInvoice.splice(index, 1);
                    }
                };
                LabourInvoiceControllerComponent.prototype.FindSelectedQty = function (listOfExistinglySelectedQty) {
                    var listOfSelectedQty = [];
                    if (listOfExistinglySelectedQty != null) {
                        listOfExistinglySelectedQty.push(this.SODetails);
                        return listOfExistinglySelectedQty;
                    }
                    else {
                        listOfSelectedQty.push(this.SODetails);
                        return listOfSelectedQty;
                    }
                };
                LabourInvoiceControllerComponent.prototype.ClearFiled = function () {
                    $("#txtDescription").val() == "";
                    $("#txtPartQty").val() == "";
                };
                LabourInvoiceControllerComponent.prototype.HideShow = function () {
                    $("#errorclose").show();
                    $("#close").hide();
                };
                LabourInvoiceControllerComponent.prototype.InsertInvoiveServiceMatser = function () {
                    var _this = this;
                    this.InvoiceDetails.InvoiceDate = document.getElementById("txtinvoicedate").value;
                    this.InsertServiceInvoice.InvoiceDate = document.getElementById("txtinvoicedate").value;
                    console.log(this.InvoiceDetails.InvoiceDate);
                    if (this.InvoiceDetails.InvoiceDate == undefined || this.InvoiceDetails.InvoiceDate == '') {
                        this.HideShow();
                        this.alert = "Please Enter Invoice Date";
                    }
                    else {
                        this.InsertServiceInvoice.TicketID = this.InvoiceDetails.TicketID;
                        this.InsertServiceInvoice.CustomerID = this.InvoiceDetails.CustomerID;
                        this.InsertServiceInvoice.TickitNo = this.InvoiceDetails.TicketNo;
                        this.InsertServiceInvoice.ModelNo = this.InvoiceDetails.ModelNo;
                        this.InsertServiceInvoice.WOTypeID = this.InvoiceDetails.WOTypeID;
                        this.InsertServiceInvoice.MachineNo = this.InvoiceDetails.MachineSrNo;
                        this.InsertServiceInvoice.TotalNetAmount = this.TotalNetAmount;
                        this.InsertServiceInvoice.TotalCGSTQtyValue = this.CGSTValueQty;
                        this.InsertServiceInvoice.TotalSGSTQTyValue = this.SGSTValueQty;
                        this.InsertServiceInvoice.TotalIGSTQtyValue = this.IGSTValueQty;
                        this.InsertServiceInvoice.TotalUGSTQtyValue = '0';
                        this.InsertServiceInvoice.TotalInvoiceAmount = this.TotalPrice1;
                        this.InsertServiceInvoice.WOID = this.InvoiceDetails.WOID;
                        this.InsertServiceInvoice.ItemType = this.InvoiceDetails.ItemType;
                        this.InsertServiceInvoice.ItemSubType = this.InvoiceDetails.ItemSubType;
                        this.InsertServiceInvoice.docType = "1000";
                        this.InsertServiceInvoice.DealerID = this.DealerID;
                        this.InsertServiceInvoice.UserID = this.Cookie.get('UserInfo')['UserID'];
                        // this.InsertServiceInvoice.InvoiceDate = this.InvoiceDetails.InvoiceDate;
                        //if (this.TempAddcart.list !== null) {
                        //    console.log(this.TempAddcart);
                        //    this.InsertServiceInvoice.ServicePartnvoiceDto = this.TempAddcart.list;
                        //}
                        //else {
                        //    this.InsertServiceInvoice.ServicePartnvoiceDto = null;
                        //}
                        this.InsertServiceInvoice.ServicePartnvoiceDto = null;
                        this.InsertServiceInvoice.LabourServiceItem = this.InvoiceDetails.labourInvoice;
                        // console.log(this.InsertServiceInvoice);
                        this.InsertInvoice.PostServiceInvoiceService(this.InsertServiceInvoice).then(function (response) {
                            if (response.data.Result != null) {
                                $("#errorclose").hide();
                                $("#close").show();
                                _this.alert = "Service Invoice Successfully Save";
                            }
                            else {
                                _this.alert = "Oops Some Error Occure";
                            }
                        });
                    }
                };
                LabourInvoiceControllerComponent.prototype.Close = function () {
                    location.href = "/#!/ServiceInvoiceList";
                };
                LabourInvoiceControllerComponent.$inject = ["ServiceInvoiceService", "$location", "PartInvoiceAutofillService",
                    "$cookieStore", "LabouInvoiceAutofillService", "WOFillServices", "LabouInvoiceDetailsService",
                    "InsertServiceInvoiceService", "GetUomServices", "QuotationServices", "QuickSaleServices",
                    "SelectedByCustomer", "itemDescriptionChangeService", "AccountAssignmentListService", "ItemTypeDropdownService"];
                return LabourInvoiceControllerComponent;
            }());
            var LabourInvoiceComponent = /** @class */ (function () {
                function LabourInvoiceComponent() {
                    this.controller = LabourInvoiceControllerComponent;
                    this.templateUrl = "/Scripts/App/Services/LabourInvoice/Template/_LabourInvoice.html";
                }
                LabourInvoiceComponent.Name = "labourInvoiceComponent";
                return LabourInvoiceComponent;
            }());
            app.AddComponent(LabourInvoiceComponent.Name, new LabourInvoiceComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=LabourInvoiceComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var LabourInvoiceController = /** @class */ (function (_super) {
            __extends(LabourInvoiceController, _super);
            function LabourInvoiceController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return LabourInvoiceController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.LabourInvoiceController = LabourInvoiceController;
        app.AddController("LabourInvoiceController", LabourInvoiceController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=LabourInvoiceController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var mandtry = GCPL.Model.Mandatory;
            var servicecallmodel = GCPL.Model.ServiceCallListSerachmodel;
            var TimesheetlistContentComponentController = /** @class */ (function () {
                function TimesheetlistContentComponentController(_TimesheetService, _cookieStore, _Custnameservice) {
                    this._cookieStore = _cookieStore;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.TimesheetList = null;
                    this.ApprovealTimeSheetList = null;
                    this.CustomerID = null;
                    this.UserID = null;
                    this.Mandatory = null;
                    this.Cookie = null;
                    this.IsDisplayModalPopup = false;
                    this.SCListSerachA = null;
                    this.TimesheetService = _TimesheetService;
                    this.Cookie = _cookieStore;
                    this.Mandatory = new mandtry();
                    this.Mandatory.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.Custnameservice = _Custnameservice;
                    this.SCListSerachA = new servicecallmodel();
                    //this.Mandatory.BusinessEntityID = this.Cookie.get('UserInfo')['BusinessEntityID'];
                }
                TimesheetlistContentComponentController.prototype.OnModalBoxClose = function (item) {
                    this.IsDisplayModalPopup = false;
                    this.Init();
                };
                TimesheetlistContentComponentController.prototype.$onInit = function () {
                    this.Init();
                };
                TimesheetlistContentComponentController.prototype.Init = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                    var that = this;
                    $("#txtCustomer").autocomplete({
                        source: function (request, res) {
                            //that.DealerID = that.Cookie.get('UserInfo')['DealerID'];
                            //console.log(that.DealerID);
                            that.Custnameservice.FilterAutoComplete(request).then((function (response) {
                                var data = that.Custnameservice.GetCustomerName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID,
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedCustomerID = ui.item.id;
                            that.SCListSerachA.CustomerID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                };
                TimesheetlistContentComponentController.prototype.BackSpaceCustomer = function (event) {
                    //alert();
                    var charCode = (window.event ? event.keyCode : event.which);
                    console.log(charCode);
                    if (charCode == 8) {
                        $('#txtCustomer').val('');
                        this.SCListSerachA.CustomerID = '';
                    }
                };
                TimesheetlistContentComponentController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                TimesheetlistContentComponentController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                TimesheetlistContentComponentController.prototype.Clear = function () {
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    document.getElementById("txtCustomer").value = "";
                    document.getElementById("txtServiceCallNo").value = "";
                    this.SCListSerachA.WOID = "";
                    this.SCListSerachA.CustomerID = "";
                    this.SCListSerachA.ServiceCallNumber = "";
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                TimesheetlistContentComponentController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    this.incre = 0;
                    this.numRecords = parseInt(NoOfRecords);
                    this.page = 0;
                    this.maxPages = 0;
                    this.shownItems = [];
                    this.SCListSerachA.FromDate = document.getElementById("txtFromDate").value;
                    this.SCListSerachA.ToDate = document.getElementById("txtToDate").value;
                    this.CustomerID = this.SCListSerachA.CustomerID;
                    this.UserID = '';
                    this.TimesheetService.FindCalculatedFilter(this.Mandatory, this.CustomerID, this.UserID, this.SCListSerachA.ServiceCallNumber, this.SCListSerachA.FromDate, this.SCListSerachA.ToDate).then((function (response) {
                        _this.TimesheetList = _this.TimesheetService.GetTSCalcList(response.data.Result);
                        console.log(_this.TimesheetList);
                        _this.TimesheetList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (_this.incre / _this.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = _this.maxPages > 1 ? true : false;
                        _this.shownItems = _this.TimesheetList.slice(0, _this.numRecords);
                    }));
                };
                TimesheetlistContentComponentController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                TimesheetlistContentComponentController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TimesheetList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                TimesheetlistContentComponentController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TimesheetList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                TimesheetlistContentComponentController.prototype.Search = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                TimesheetlistContentComponentController.$inject = ["TimesheetService", "$cookieStore", "ServiceCallCustomerNameService"];
                return TimesheetlistContentComponentController;
            }());
            var TimesheetlistContentComponent = /** @class */ (function () {
                function TimesheetlistContentComponent() {
                    this.controller = TimesheetlistContentComponentController;
                    this.templateUrl = "/Scripts/App/Services/TimeSheetList/Template/_TimeSheetList.html";
                }
                TimesheetlistContentComponent.Name = "timesheetlistcomponent";
                return TimesheetlistContentComponent;
            }());
            app.AddComponent(TimesheetlistContentComponent.Name, new TimesheetlistContentComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TimeSheetListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var TimesheetListController = /** @class */ (function (_super) {
            __extends(TimesheetListController, _super);
            function TimesheetListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TimesheetListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.TimesheetListController = TimesheetListController;
        app.AddController("TimesheetListController", TimesheetListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TimeSheetListController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var mandtry = GCPL.Model.Mandatory;
            var TimesheetReportContentComponentController = /** @class */ (function () {
                function TimesheetReportContentComponentController(_TimesheetService, _cookieStore, _Custnameservice, _WorkOrderReportListService) {
                    this._cookieStore = _cookieStore;
                    this.TimesheetList = null;
                    this.WOStatus = null;
                    this.ApprovealTimeSheetList = null;
                    this.Mandatory = null;
                    this.Cookie = null;
                    this.IsDisplayModalPopup = false;
                    this.TimesheetService = _TimesheetService;
                    this.Cookie = _cookieStore;
                    this.Custnameservice = _Custnameservice;
                    this.WorkOrderReportListService = _WorkOrderReportListService;
                    this.Mandatory = new mandtry();
                    this.Mandatory.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                TimesheetReportContentComponentController.prototype.$onInit = function () {
                    this.Init();
                    var that = this;
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                TimesheetReportContentComponentController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                TimesheetReportContentComponentController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                TimesheetReportContentComponentController.prototype.Init = function () {
                    var _this = this;
                    this.WOStatus = this.WorkOrderReportListService.FindStatus("1").then((function (response) {
                        _this.WOStatus = _this.WorkOrderReportListService.GetStatus(response.data.Result);
                    }));
                    var that = this;
                    $("#txtCustomer").autocomplete({
                        source: function (request, res) {
                            //this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                            console.log(this.DealerID);
                            that.Custnameservice.FilterAutoComplete(request).then((function (response) {
                                var data = that.Custnameservice.GetCustomerName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID,
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedCustomerID = ui.item.id;
                            that.Mandatory.CustomerID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    this.TimesheetService.FindCalculated(this.Mandatory).then((function (response) {
                        _this.TimesheetList = _this.TimesheetService.GetTSCalcList(response.data.Result);
                    }));
                };
                TimesheetReportContentComponentController.prototype.Search = function () {
                    var _this = this;
                    this.Mandatory.FromDate = document.getElementById("txtFromDate").value;
                    this.Mandatory.ToDate = document.getElementById("txtToDate").value;
                    this.TimesheetService.FindTimesheet(this.Mandatory).then((function (response) {
                        _this.TimesheetList = _this.TimesheetService.GetTimesheet(response.data.Result);
                    }));
                };
                TimesheetReportContentComponentController.prototype.BackSpaceCustomer = function (event) {
                    //alert();
                    var charCode = (window.event ? event.keyCode : event.which);
                    console.log(charCode);
                    if (charCode == 8) {
                        $('#txtCustomer').val('');
                        this.Mandatory.CustomerID = '';
                    }
                };
                TimesheetReportContentComponentController.$inject = ["TimesheetService", "$cookieStore", "ServiceCallCustomerNameService", "WorkOrderReportListService"];
                return TimesheetReportContentComponentController;
            }());
            var TimesheetReportContentComponent = /** @class */ (function () {
                function TimesheetReportContentComponent() {
                    this.controller = TimesheetReportContentComponentController;
                    this.templateUrl = "/Scripts/App/Reports/TimesheetReport/Template/_TimesheetReportChaild.html";
                }
                TimesheetReportContentComponent.Name = "timesheetController";
                return TimesheetReportContentComponent;
            }());
            app.AddComponent(TimesheetReportContentComponent.Name, new TimesheetReportContentComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TimesheetReportComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var TimesheetReportController = /** @class */ (function (_super) {
            __extends(TimesheetReportController, _super);
            function TimesheetReportController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TimesheetReportController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.TimesheetReportController = TimesheetReportController;
        app.AddController("TimesheetReportController", TimesheetReportController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TimesheetReportController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var servicecallSearchmodel = GCPL.Model.ServiceCallListSerachmodel;
            var ServiceInvoiceReportListControllerComponent = /** @class */ (function () {
                function ServiceInvoiceReportListControllerComponent(_ServiceInvoiceListService, _cookieStore, _WorkOrderService, _window, _Custnameservice) {
                    this._cookieStore = _cookieStore;
                    this._window = _window;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.ServiceInvoiceList = null;
                    this.ServiceInvoice = null;
                    this.DealerID = null;
                    this.WorkOrdetType = null;
                    this.UserID = null;
                    this.Cookie = null;
                    this.IsDisplayModalPopup = false;
                    this.IsDisplayModalPopupError = false;
                    this.alert = null;
                    this.alert1 = null;
                    this.CustomerID = null;
                    this.ServiceCallNo = null;
                    this.WorkOrderNo = null;
                    this.InvoiceNo = null;
                    this.FromDate = null;
                    this.ToDate = null;
                    this.SCListSerachA = null;
                    this.ServiceInvoiceService = _ServiceInvoiceListService;
                    this.WorkOrderService = _WorkOrderService;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.Custnameservice = _Custnameservice;
                    this.SCListSerachA = new servicecallSearchmodel();
                }
                ServiceInvoiceReportListControllerComponent.prototype.$onInit = function () {
                    this.Init();
                };
                ServiceInvoiceReportListControllerComponent.prototype.Init = function () {
                    var _this = this;
                    this.WorkOrdetType = this.WorkOrderService.Find().then((function (response) {
                        _this.WorkOrdetType = _this.WorkOrderService.GetWorkOrderType(response.data.Result);
                    }));
                    // this.ServiceInvoice.DealerID = this.DealerID;
                    this.CustomerID = '';
                    this.ServiceCallNo = '';
                    this.WorkOrderNo = '';
                    this.InvoiceNo = '';
                    this.FromDate = '';
                    this.ToDate = '';
                    //this.ServiceInvoiceList = this.ServiceInvoiceService.FindInvoiceReport(this.UserID, this.CustomerID, this.ServiceCallNo, this.WorkOrderNo, this.InvoiceNo, this.FromDate, this.ToDate).then((response => {
                    //    this.ServiceInvoiceList = this.ServiceInvoiceService.GetServiceInvoiceListGrid(response.data.Result);
                    //    console.log(this.ServiceInvoiceList);
                    //}));
                    this.Search();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                    var that = this;
                    $("#txtCustomer").autocomplete({
                        source: function (request, res) {
                            //  this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                            that.Custnameservice.FilterAutoComplete(request).then((function (response) {
                                var data = that.Custnameservice.GetCustomerName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID,
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedCustomerID = ui.item.id;
                            that.CustomerID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                };
                ServiceInvoiceReportListControllerComponent.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                ServiceInvoiceReportListControllerComponent.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                ServiceInvoiceReportListControllerComponent.prototype.Clear = function () {
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    document.getElementById("txtCustomer").value = "";
                    document.getElementById("txtServiceCallNo").value = "";
                    document.getElementById("txtWONo").value = "";
                    document.getElementById("txtInvoiceNo").value = "";
                    this.WorkOrderNo = "";
                    this.CustomerID = "";
                    this.ServiceCallNo = "";
                    this.InvoiceNo = "";
                    this.FromDate = "";
                    this.ToDate = "";
                    //this.Search();
                };
                ServiceInvoiceReportListControllerComponent.prototype.Search = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                ServiceInvoiceReportListControllerComponent.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                ServiceInvoiceReportListControllerComponent.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.FromDate = document.getElementById("txtFromDate").value;
                    this.ToDate = document.getElementById("txtToDate").value;
                    console.log(this.SCListSerachA);
                    this.ServiceInvoiceList = this.ServiceInvoiceService.FindInvoiceReport(this.UserID, this.CustomerID, this.ServiceCallNo, this.WorkOrderNo, this.InvoiceNo, this.FromDate, this.ToDate).then((function (response) {
                        _this.ServiceInvoiceList = _this.ServiceInvoiceService.GetServiceInvoiceListGrid(response.data.Result);
                        console.log(_this.ServiceInvoiceList);
                        _this.ServiceInvoiceList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.ServiceInvoiceList.slice(0, that.numRecords);
                        for (var i = 0; i < _this.shownItems.length; i++) {
                            console.log(_this.shownItems[i].IsInWarranty);
                            if (_this.shownItems[i].IsInWarranty == 'true') {
                                _this.shownItems[i].IsInWarranty = 'Yes';
                            }
                            else {
                                _this.shownItems[i].IsInWarranty = 'No';
                            }
                        }
                    }));
                };
                ServiceInvoiceReportListControllerComponent.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ServiceInvoiceList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                ServiceInvoiceReportListControllerComponent.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ServiceInvoiceList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                ServiceInvoiceReportListControllerComponent.prototype.OnModalBoxClose = function (item) {
                    this.IsDisplayModalPopup = false;
                    this.IsDisplayModalPopupError = false;
                };
                ServiceInvoiceReportListControllerComponent.prototype.ErrorClose = function () {
                };
                ServiceInvoiceReportListControllerComponent.prototype.LabourInvoice = function (data) {
                    var _this = this;
                    this.ServiceInvoiceService.GetTimeSheetApprovalStaus(data.WorkOrderID).then((function (response) {
                        console.log(response.data.Result);
                        if (response.data.Result == 0) {
                            if (data.RepairStatusID == 4 || data.RepairStatusID == 7 || data.RepairStatusID == 8) {
                                _this.IsDisplayModalPopup = false;
                                _this._window.location.href = "#!/LabourInvoice?TicketNo=" + data.TicketID + "&WOID=" + data.WorkOrderID;
                                $("#close").click();
                            }
                            else {
                                $("#errorclose").hide();
                                $("#close").show();
                                _this.alert = "You can not post the work order";
                            }
                        }
                        else {
                            //console.log("else");
                            $("#errorclose").hide();
                            $("#close").show();
                            _this.alert = "One Or More TimeSheet Validation Pending";
                        }
                        //href="/#!/LabourInvoice?TicketNo={{item.TicketID}}"
                    }));
                };
                ServiceInvoiceReportListControllerComponent.prototype.PartInvoice = function (data) {
                    this._window.location.href = "#!/ServiceInvoice?TicketNo=" + data.TicketID + "&WOID=" + data.WorkOrderID;
                    $("#close").click();
                };
                //Serach() {
                //    this.ServiceInvoice.DealerID = this.DealerID;
                //    this.ServiceInvoiceList = this.ServiceInvoiceService.Find(this.ServiceInvoice).then((response => {
                //        this.ServiceInvoiceList = this.ServiceInvoiceService.GetServiceInvoiceListGrid(response.data.Result);
                //    }));
                //}
                ServiceInvoiceReportListControllerComponent.prototype.downloadCSV = function (csv, filename) {
                    var csvFile;
                    var downloadLink;
                    // CSV file
                    csvFile = new Blob([csv], { type: "text/csv" });
                    // Download link
                    downloadLink = document.createElement("a");
                    // File name
                    downloadLink.download = filename;
                    // Create a link to the file
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    // Hide download link
                    downloadLink.style.display = "none";
                    // Add the link to DOM
                    document.body.appendChild(downloadLink);
                    // Click download link
                    downloadLink.click();
                };
                ServiceInvoiceReportListControllerComponent.prototype.exportTableToCSV = function (filename) {
                    var csv = [];
                    var rows = document.querySelectorAll(".excel tr");
                    for (var i = 0; i < rows.length; i++) {
                        var row = [], cols = rows[i].querySelectorAll("td, th");
                        for (var j = 0; j < cols.length; j++)
                            row.push(cols[j].innerHTML);
                        csv.push(row.join(","));
                    }
                    // Download CSV file
                    this.downloadCSV(csv.join("\n"), filename);
                };
                ServiceInvoiceReportListControllerComponent.$inject = ["ServiceInvoiceListService", "$cookieStore", "WorkOrderService", "$window", "ServiceCallCustomerNameService"];
                return ServiceInvoiceReportListControllerComponent;
            }());
            var ServiceInvoiceReportListComponent = /** @class */ (function () {
                function ServiceInvoiceReportListComponent() {
                    this.controller = ServiceInvoiceReportListControllerComponent;
                    this.templateUrl = "/Scripts/App/Services/ServiceInvoiceReportList/Template/_ServiceInvoiceReportList.html";
                }
                ServiceInvoiceReportListComponent.Name = "serviceInvoiceReportListComponent";
                return ServiceInvoiceReportListComponent;
            }());
            app.AddComponent(ServiceInvoiceReportListComponent.Name, new ServiceInvoiceReportListComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ServiceInvoiceReportListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ServiceInvoiceReportList1Controller = /** @class */ (function (_super) {
            __extends(ServiceInvoiceReportList1Controller, _super);
            function ServiceInvoiceReportList1Controller() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ServiceInvoiceReportList1Controller;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ServiceInvoiceReportList1Controller = ServiceInvoiceReportList1Controller;
        app.AddController("ServiceInvoiceReportList1Controller", ServiceInvoiceReportList1Controller);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ServiceInvoiceReportListController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var WorkOrderDetailsComponentController = /** @class */ (function () {
                function WorkOrderDetailsComponentController(_service, $location, _Custinfoservice, _WorkOrderService, _BusinessEntityService, _cookieStore, _Dealerservice, _WorkOrderPPRService, _ProblemTypeDDService, _InsertWorkOrderReportComponentService, _WorkOrderReportListService, _ItemAutoservice, _goodsReceiptService, _ItemCodeservice, _ItemEditListservice, _UOMservice) {
                    this.$location = $location;
                    this._cookieStore = _cookieStore;
                    this.Partdetails = null;
                    this.IsDisplayModalPopup = false;
                    this.IsDisplayModalPopupError = false;
                    this.WorkOrderReport = null;
                    this.WorkOrderReportDetails = null;
                    this.TicketID = null;
                    this.CustInfo = null;
                    this.WorkOrdetType = null;
                    this.BusinessEntity = null;
                    this.DealerID = null;
                    this.UserData = null;
                    this.WorkOrderPPR = null;
                    this.WorkOrderPPRDTO = null;
                    this.ProblemTypeDD = null;
                    this.InsertWorkOrder = null;
                    this.Status = null;
                    this.WOID = null;
                    this.ProbSolution = null;
                    this.alert = null;
                    this.Departuretime = null;
                    this.Reachetime = null;
                    this.WorkStartTime = null;
                    this.WorkEndTime = null;
                    this.Description = null;
                    this.UOM = null;
                    this.OriginalRequestedQty = null;
                    this.ItemCode = null;
                    this.goodsReceiptDetailsDTO = null;
                    this.Cookie = null;
                    this.WOStatus = null;
                    this.originalStatus = null;
                    this.ItemCode1 = null;
                    this.SalesUnitQuantity = null;
                    this.QuantityInKG = null;
                    this.ActualDate = null;
                    this.ReachDate = null;
                    this.WorkStartDate = null;
                    this.WorkEndDate = null;
                    this.Service = _service;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.ItemDescriptionChange = _ItemCodeservice;
                    this.WorkOrderService = _WorkOrderService;
                    this.WorkOrderPPRService = _WorkOrderPPRService;
                    this.CustomerInfoService = _Custinfoservice;
                    this.BusinessEnityService = _BusinessEntityService;
                    this.ProblemTypeDDService = _ProblemTypeDDService;
                    this.InsertWorkOrderReportComponentService = _InsertWorkOrderReportComponentService;
                    this.Cookie = _cookieStore;
                    this.DealerService = _Dealerservice;
                    this.TicketID = $location.search().TicketID;
                    this.WOID = $location.search().WOID;
                    this.Status = $location.search().Status;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.WorkOrderReportListService = _WorkOrderReportListService;
                    this.GetItemDetailService = _ItemEditListservice;
                    this.GoodsReceiptService = _goodsReceiptService;
                    this.FillUOMServices = _UOMservice;
                }
                WorkOrderDetailsComponentController.prototype.$onInit = function () {
                    this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                    $("#txtReachDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.ActualReachDate
                    });
                    $("#txtActualDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.DeparturetDate
                    });
                    $("#txtxworkstartDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.workstartDate
                    });
                    $("#txtworkendDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.workendDate
                    });
                    //let that = this;
                    //$("#txtDescription").autocomplete({
                    //    //  source:['1a0','anjali','archana'],
                    //    source: function (request, res) {
                    //        that.ItemDescriptionAutofill.FilterAutoComplete(request).then((response => {
                    //            let data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                    //            res($.map(data, function (item, index) {
                    //                return {
                    //                    label: item.Description,
                    //                    value: item.Description,
                    //                    id: item.ItemID
                    //                }
                    //            }));
                    //        }));
                    //    },
                    //    minLength: 2,
                    //    focus: (event, ui) => {
                    //        // Don't populate input field with selected value (pxid)
                    //        event.preventDefault();
                    //    },
                    //    select: function (e, ui) {
                    //        let Description = ui.item.value;
                    //        let ItemID = ui.item.id;
                    //        //that.QtyChange.ItemID = ui.item.id;
                    //        //that.Description = ui.item.value;
                    //        //that.SODetails.ItemID = ItemID;
                    //        //that.SelectPart(Description);
                    //    },
                    //    change: function () {
                    //    }
                    //});
                    var that = this;
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            that.ItemDescriptionAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedItemID = ui.item.id;
                            //that.QtyChange.ItemID = ui.item.id;
                            that.Description = ui.item.value;
                            that.WorkOrderPPRDTO.Description = ui.item.value;
                            that.WorkOrderPPRDTO.PartID = ui.item.id;
                            that.ItemDescriptionChange.Find(that.Description).then((function (response) {
                                that.ItemCode = that.ItemDescriptionChange.GetItemCode(response.data.Result);
                                that.WorkOrderPPRDTO.ItemNo = that.ItemCode.ItemNo;
                                that.GetItemDetailService.Find(ui.item.id).then((function (response) {
                                    that.goodsReceiptDetailsDTO = that.GoodsReceiptService.getGoodsReceiptItemDetails(response.data.Result);
                                    //that.PurchaseOrderDetailModel.HSNNumber = that.goodsReceiptDetailsDTO.HSNNumber;
                                    that.WorkOrderPPRDTO.UOMID = that.goodsReceiptDetailsDTO.UOMID.toString();
                                    that.WorkOrderPPRDTO.UOM = that.WorkOrderPPRDTO.UOMID;
                                }));
                            }));
                        }
                    });
                };
                WorkOrderDetailsComponentController.prototype.GetUOM = function () {
                    var _this = this;
                    this.UOM = this.FillUOMServices.Find().then((function (response) {
                        _this.UOM = _this.FillUOMServices.GetUOM(response.data.Result);
                    }));
                };
                WorkOrderDetailsComponentController.prototype.CalculateBaseQty = function () {
                    var _this = this;
                    this.ItemCode1 = this.ItemDescriptionChange.Find(this.WorkOrderPPRDTO.Description).then((function (response) {
                        _this.ItemCode1 = _this.ItemDescriptionChange.GetItemCode(response.data.Result);
                        console.log(_this.ItemCode1);
                        for (var i = 0; i < _this.ItemCode1.UOMList.length; i++) {
                            if (_this.ItemCode1.UOMList[i].uomid.toString() === _this.WorkOrderPPRDTO.UOMID.toString()) {
                                _this.SalesUnitQuantity = parseInt(_this.ItemCode1.UOMList[i].SalesUnitQuantity.toString());
                                _this.WorkOrderPPRDTO.UsedQty = _this.SalesUnitQuantity * _this.WorkOrderPPRDTO.Quantity;
                                _this.QuantityInKG = _this.WorkOrderPPRDTO.UsedQty;
                            }
                        }
                    }));
                };
                WorkOrderDetailsComponentController.prototype.AddPart = function () {
                    var _this = this;
                    var len = this.WorkOrderPPR.length;
                    if (this.WorkOrderPPRDTO.index !== 'undefined') {
                        // var index = this.WorkOrderPPR.indexOf(this.WorkOrderPPRDTO.index);
                        var index = this.WorkOrderPPR.findIndex(function (x) { return x.index == _this.WorkOrderPPRDTO.index; });
                        console.log(index);
                        if (index !== -1) {
                            if (this.WorkOrderPPRDTO.usedFrom == '1' || this.WorkOrderPPRDTO.usedFrom == '2') {
                                this.WorkOrderPPRDTO.Quantity = this.WorkOrderPPRDTO.UsedQty;
                            }
                            else {
                                this.WorkOrderPPRDTO.Quantity = this.OriginalRequestedQty;
                            }
                            this.WorkOrderPPR[index] = this.WorkOrderPPRDTO;
                        }
                        else {
                            var len_1 = this.WorkOrderPPR.length;
                            this.WorkOrderPPRDTO.index = len_1 + 1;
                            this.WorkOrderPPRDTO.ModelNo = "";
                            if (this.WorkOrderPPRDTO.usedFrom == '1' || this.WorkOrderPPRDTO.usedFrom == '2') {
                                this.WorkOrderPPRDTO.Quantity = this.WorkOrderPPRDTO.UsedQty;
                            }
                            this.WorkOrderPPR.push(this.WorkOrderPPRDTO);
                        }
                    }
                    else {
                        var len_2 = this.WorkOrderPPR.length;
                        this.WorkOrderPPRDTO.index = len_2 + 1;
                        this.WorkOrderPPRDTO.ModelNo = "";
                        if (this.WorkOrderPPRDTO.usedFrom == '1' || this.WorkOrderPPRDTO.usedFrom == '2') {
                            this.WorkOrderPPRDTO.Quantity = this.WorkOrderPPRDTO.UsedQty;
                        }
                        this.WorkOrderPPR.push(this.WorkOrderPPRDTO);
                    }
                    this.WorkOrderPPRDTO = null;
                };
                WorkOrderDetailsComponentController.prototype.ActualReachDate = function (e) {
                    document.getElementById("txtReachDate").value = e;
                };
                WorkOrderDetailsComponentController.prototype.DeparturetDate = function (e) {
                    document.getElementById("txtActualDate").value = e;
                };
                WorkOrderDetailsComponentController.prototype.workstartDate = function (e) {
                    document.getElementById("txtxworkstartDate").value = e;
                };
                WorkOrderDetailsComponentController.prototype.workendDate = function (e) {
                    document.getElementById("txtworkendDate").value = e;
                };
                WorkOrderDetailsComponentController.prototype.StatusChange = function () {
                    console.log("status selected");
                    console.log(this.WorkOrderReport.WorkOrderStatus);
                };
                WorkOrderDetailsComponentController.prototype.Init = function () {
                    var _this = this;
                    this.WorkOrderService.Find().then((function (response) {
                        _this.WorkOrdetType = _this.WorkOrderService.GetWorkOrderType(response.data.Result);
                    }));
                    this.Service.Find(this.WOID, this.TicketID).then((function (response) {
                        _this.WOStatus = _this.WorkOrderReportListService.FindStatus("2").then((function (response) {
                            _this.WOStatus = _this.WorkOrderReportListService.GetStatus(response.data.Result);
                        }));
                        _this.WorkOrderReport = _this.Service.GetWorkOrderReport(response.data.Result);
                        console.log(_this.WorkOrderReport);
                        _this.originalStatus = _this.WorkOrderReport.RepairStatus;
                        _this.ProbSolution = new GCPL.Model.ProblemTypeDDModel();
                        _this.ProblemSolution();
                        _this.WorkOrderReport.WorkOrderStatus = _this.WorkOrderReport.RepairStatus;
                        _this.change();
                        $('#ddlnaturProblem').prop("disabled", true);
                        $('#ddlRepairComplete').prop("disabled", true);
                        $('#txtProblemSolution').prop("disabled", true);
                        $('#txtActualProblem').prop("disabled", true);
                        $('#txtHMR').prop("disabled", true);
                        $('#txtMachineSRNo').prop("disabled", true);
                        $('#txtMachineLocation').prop("disabled", true);
                        $('#ddlisPartRequired').prop("disabled", true);
                        $('#ddlWorkOrderStatus').prop("disabled", true);
                        $('#ddlisCustomerConfirmationReceived').prop("disabled", true);
                        $('#ddlisproblemfixed').prop("disabled", true);
                        _this.WorkOrderPPRService.Find(_this.TicketID).then((function (response) {
                            _this.WorkOrderPPR = _this.WorkOrderPPRService.GetPPRData(response.data.Result);
                        }));
                        _this.CustomerInfoService.Find(_this.WorkOrderReport.CustomerId).then((function (response) {
                            _this.CustInfo = _this.CustomerInfoService.GetCustomerDetails(response.data.Result);
                        }));
                        _this.ProblemTypeDDService.Find(_this.DealerID).then((function (response) {
                            _this.ProblemTypeDD = _this.ProblemTypeDDService.GetProblemType(response.data.Result);
                        }));
                        _this.WorkOrderPPRService.FindPartDetails(_this.TicketID, _this.WOID).then((function (response) {
                            _this.Partdetails = _this.WorkOrderPPRService.GetPartDetails(response.data.Result);
                            _this.WorkOrderPPR = _this.Partdetails;
                        }));
                    }));
                };
                WorkOrderDetailsComponentController.prototype.changeUser = function () {
                    var _this = this;
                    this.DealerService.Find(this.WorkOrderReport.DealerID).then((function (response) {
                        _this.UserData = _this.DealerService.GetUser(response.data.Result);
                    }));
                };
                WorkOrderDetailsComponentController.prototype.ProblemSolution = function () {
                    var _this = this;
                    console.log("ProblemTypeID :" + this.WorkOrderReport.ProblemTypeID);
                    this.ProblemTypeDDService.FindProbSolution(this.WorkOrderReport.ProblemTypeID).then((function (response) {
                        _this.ProbSolution = _this.ProblemTypeDDService.GetProblemSolution(response.data.Result);
                    }));
                };
                WorkOrderDetailsComponentController.prototype.change = function () {
                    var _this = this;
                    if (this.WorkOrderReport.AssignBy == 1) {
                        $("#ddlUser").show();
                        $("#ddlDealer").hide();
                        this.WorkOrderReport.AssignToDealer = 0;
                        this.changeUser();
                    }
                    else {
                        this.BusinessEnityService.Find(this.DealerID).then((function (response) {
                            _this.BusinessEntity = _this.BusinessEnityService.GetBusinessEntity(response.data.Result);
                        }));
                        $("#ddlDealer").show();
                        $("#ddlUser").hide();
                        this.WorkOrderReport.AssignToUser = 0;
                    }
                };
                //ChabgeUpdateTimeSheet(): void {
                //    if (this.WorkOrderReport.UpdateTimeSheet == "2")
                //    {
                //        $("#div-3").removeClass("hidden");
                //    }
                //    else
                //    {
                //        $("#div-3").removeClass("hidden");
                //    }
                //}
                WorkOrderDetailsComponentController.prototype.PostWorkOrderReport = function () {
                    var _this = this;
                    this.ActualDate = document.getElementById("txtActualDate").value;
                    this.Departuretime = document.getElementById("txtActualTime").value;
                    this.ReachDate = document.getElementById("txtReachDate").value;
                    this.Reachetime = document.getElementById("txtReachTime").value;
                    this.WorkStartDate = document.getElementById("txtxworkstartDate").value;
                    this.WorkStartTime = document.getElementById("txtworkstartTime").value;
                    this.WorkEndDate = document.getElementById("txtworkendDate").value;
                    this.WorkEndTime = document.getElementById("txtworkendTime").value;
                    //   var index = this.Departuretime.toTimeString().lastIndexOf(':') + 6
                    this.WorkOrderReport.ActualTime = this.ActualDate + ' ' + this.Departuretime;
                    this.WorkOrderReport.ReachTime = this.ReachDate + ' ' + this.Reachetime;
                    this.WorkOrderReport.WorkStartTime = this.WorkStartDate + ' ' + this.WorkStartTime;
                    this.WorkOrderReport.WorkEndTime = this.WorkEndDate + ' ' + this.WorkEndTime;
                    this.WorkOrderReport.WOPartReqUestDTO = this.WorkOrderPPR;
                    if (this.WorkOrderReport.ProblemTypeID == undefined) {
                        this.Hideshow();
                        this.alert = "Please Select Nature Problem";
                    }
                    else if (this.WorkOrderReport.ActualTime == undefined) {
                        this.Hideshow();
                        this.alert = "Please Enter Actual start Date Time ";
                    }
                    else if (this.WorkOrderReport.ReachTime == undefined) {
                        this.Hideshow();
                        this.alert = "Please Select Actual End Date Time";
                    }
                    else if (this.WorkOrderReport.WorkStartTime == undefined) {
                        this.Hideshow();
                        this.alert = "Please Enter Work start Date Time ";
                    }
                    else if (this.WorkOrderReport.WorkEndTime == undefined) {
                        this.Hideshow();
                        this.alert = "Please Enter Work End Date Time ";
                    }
                    else if (this.WorkOrderReport.WorkOrderStatus == undefined && this.WorkOrderReport.WorkOrderStatus == "Select") {
                        this.Hideshow();
                        this.alert = "Please Select Repair Status ";
                    }
                    else if (this.originalStatus == 2 && (this.WorkOrderReport.WorkOrderStatus == 4 || this.WorkOrderReport.WorkOrderStatus == 6)) {
                        this.Hideshow();
                        this.alert = "You Can not Skip the Status ";
                    }
                    else if (this.originalStatus == 3 && this.WorkOrderReport.WorkOrderStatus == 6) {
                        this.Hideshow();
                        this.alert = "You Can not Skip the Status ";
                    }
                    else if (this.originalStatus == 4 && (this.WorkOrderReport.WorkOrderStatus == 3)) {
                        this.Hideshow();
                        this.alert = "You Can not go backword ";
                    }
                    else if (this.originalStatus == 5 && this.WorkOrderReport.WorkOrderStatus < 5) {
                        this.Hideshow();
                        this.alert = "You Can not go backword ";
                    }
                    else if (this.originalStatus == 6 && this.WorkOrderReport.WorkOrderStatus < 6) {
                        this.Hideshow();
                        this.alert = "You Can not go backword ";
                    }
                    else if (this.WorkOrderReport.WorkOrderStatus == 4 && this.WorkOrderReport.ProblemFixed == 1) {
                        this.Hideshow();
                        this.alert = "You Can not Complete the Status If Problem Is not fixed ";
                    }
                    else {
                        this.WorkOrderReport.TicketID = this.TicketID;
                        this.InsertWorkOrderReportComponentService.PostWorkOrderReport(this.WorkOrderReport).then(function (response) {
                            if (response.data.Result != null) {
                                $("#errorclose").hide();
                                $("#close").show();
                                _this.alert = "Work Order report Succeesssfully saved";
                            }
                            else {
                                $("#errorclose").hide();
                                $("#close").show();
                                _this.alert = "Oops Some Error Occure.";
                            }
                        });
                    }
                };
                WorkOrderDetailsComponentController.prototype.Edit = function (data) {
                    var _this = this;
                    console.log(this.WorkOrderPPR.find(function (x) { return x.b === data; }));
                    this.WorkOrderPPRDTO = new GCPL.Model.WorkOrderPPRReportModel();
                    for (var i = 0, iLen = this.WorkOrderPPR.length; i < iLen; i++) {
                        if (this.WorkOrderPPR[i].index == data) {
                            console.log(this.WorkOrderPPR[i]);
                            this.WorkOrderPPRDTO.index = this.WorkOrderPPR[i].index;
                            this.WorkOrderPPRDTO.usedFrom = this.WorkOrderPPR[i].usedFrom;
                            this.WorkOrderPPRDTO.Description = this.WorkOrderPPR[i].Description;
                            this.WorkOrderPPRDTO.PartID = this.WorkOrderPPR[i].PartID;
                            this.ItemDescriptionChange.Find(this.WorkOrderPPRDTO.Description).then((function (response) {
                                _this.ItemCode = _this.ItemDescriptionChange.GetItemCode(response.data.Result);
                                _this.WorkOrderPPRDTO.ItemNo = _this.ItemCode.ItemNo;
                                _this.GetItemDetailService.Find(_this.WorkOrderPPRDTO.PartID).then((function (response) {
                                    _this.goodsReceiptDetailsDTO = _this.GoodsReceiptService.getGoodsReceiptItemDetails(response.data.Result);
                                    //that.PurchaseOrderDetailModel.HSNNumber = that.goodsReceiptDetailsDTO.HSNNumber;
                                    _this.WorkOrderPPRDTO.UOMID = _this.goodsReceiptDetailsDTO.UOMID.toString();
                                    _this.WorkOrderPPRDTO.UOM = _this.WorkOrderPPRDTO.UOMID;
                                }));
                            }));
                            this.OriginalRequestedQty = this.WorkOrderPPR[i].Quantity;
                            console.log(this.OriginalRequestedQty);
                            this.WorkOrderPPRDTO.UOMID = this.WorkOrderPPR[i].UOMID;
                            this.WorkOrderPPRDTO.Quantity = this.WorkOrderPPR[i].UsedQty;
                            this.QuantityInKG = this.WorkOrderPPR[i].UsedQty;
                        }
                    }
                };
                //convert(str) :any {
                //    var date = new Date(str);
                //    var mnth = ("0" + (date.getMonth() + 1)).slice(-2);
                //   var   day = ("0" + date.getDate()).slice(-2);
                //   var  hours = ("0" + date.getHours()).slice(-2);
                //   var  minutes = ("0" + date.getMinutes()).slice(-2);
                //    return [date.getFullYear(), mnth, day, hours, minutes].join("-");
                //}
                WorkOrderDetailsComponentController.prototype.Hideshow = function () {
                    $("#errorclose").show();
                    $("#close").hide();
                };
                WorkOrderDetailsComponentController.prototype.OnModalBoxClose = function (item) {
                    this.IsDisplayModalPopup = false;
                    this.IsDisplayModalPopupError = false;
                    location.href = "#!/WorkOrderReportList";
                };
                WorkOrderDetailsComponentController.prototype.Close = function () {
                    location.href = "#!/WorkOrderReportList";
                };
                WorkOrderDetailsComponentController.prototype.ErrorClose = function () {
                    location.href = "#!/WorkOrderReport?WOID=" + this.WOID + "&TicketID=" + this.TicketID + "&Status=" + this.Status + "";
                };
                WorkOrderDetailsComponentController.$inject = ["WorkOrderReportService", "$location", "ServiceCallAllocationCustomerDetailsService", "WorkOrderService", "BusinessEnityService", "$cookieStore", "ServiceCallAllocationUserService", "WorkOrderPPRService", "ProblemTypeDDService",
                    "InsertWorkOrderReportComponentService", "WorkOrderReportListService", "itemDescriptionService", "GoodsReceiptService", "itemDescriptionChangeService", "ItemMasterEditService", "GetUomServices"];
                return WorkOrderDetailsComponentController;
            }());
            var NewWorkOrderDetailsComponent = /** @class */ (function () {
                function NewWorkOrderDetailsComponent() {
                    this.controller = WorkOrderDetailsComponentController;
                    this.templateUrl = "/Scripts/App/Services/WorkOrderDtls/Template/_WorkOrderDetails.html";
                }
                NewWorkOrderDetailsComponent.Name = "workOrderDetailsComponent";
                return NewWorkOrderDetailsComponent;
            }());
            app.AddComponent(NewWorkOrderDetailsComponent.Name, new NewWorkOrderDetailsComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WorkOrderDetailsComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var WorkOrderDetailsController = /** @class */ (function (_super) {
            __extends(WorkOrderDetailsController, _super);
            function WorkOrderDetailsController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return WorkOrderDetailsController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.WorkOrderDetailsController = WorkOrderDetailsController;
        app.AddController("WorkOrderDetailsController", WorkOrderDetailsController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WorkOrderDetailsController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ST_TechnicianListController = /** @class */ (function () {
                function ST_TechnicianListController(_ST_TechnicianService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.DealerID = null;
                    this.StockTechList = null;
                    this.Cookie = null;
                    this.ST_TechnicianService = _ST_TechnicianService;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                ST_TechnicianListController.prototype.$onInit = function () {
                    this.Init();
                };
                ST_TechnicianListController.prototype.Init = function () {
                    var _this = this;
                    this.StockTechList = this.ST_TechnicianService.FindStockTechList(this.DealerID).then((function (response) {
                        _this.StockTechList = _this.ST_TechnicianService.GetStockTechList(response.data.Result);
                    }));
                };
                ST_TechnicianListController.$inject = ["ST_TechnicianService", "$cookieStore"];
                return ST_TechnicianListController;
            }());
            var ST_TechnicianListComponentController = /** @class */ (function () {
                function ST_TechnicianListComponentController() {
                    this.controller = ST_TechnicianListController;
                    this.templateUrl = "/Scripts/App/Sales/StockTechnicianList/Template/_StockTechnicianList.html";
                }
                ST_TechnicianListComponentController.Name = "sttechnicianlistcomponent";
                return ST_TechnicianListComponentController;
            }());
            app.AddComponent(ST_TechnicianListComponentController.Name, new ST_TechnicianListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StockTechnicianListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StockTechnicianListController = /** @class */ (function (_super) {
            __extends(StockTechnicianListController, _super);
            function StockTechnicianListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StockTechnicianListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StockTechnicianListController = StockTechnicianListController;
        app.AddController("StockTechnicianListController", StockTechnicianListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StockTechnicianListController.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var ST_TechnicianSubmit = /** @class */ (function () {
            function ST_TechnicianSubmit() {
            }
            return ST_TechnicianSubmit;
        }());
        Model.ST_TechnicianSubmit = ST_TechnicianSubmit;
        var ST_TechnicianGrid = /** @class */ (function () {
            function ST_TechnicianGrid() {
            }
            return ST_TechnicianGrid;
        }());
        Model.ST_TechnicianGrid = ST_TechnicianGrid;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ST_TechnicianModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ST_TechnicianSubmit = GCPL.Model.ST_TechnicianSubmit;
            var griddtomodel = GCPL.Model.ST_TechnicianGrid;
            var ST_TechnicianController = /** @class */ (function () {
                function ST_TechnicianController(_RoleAccessRelation, _ItemAutoservice, _WareHouse, _GridFill, _cookieStore, _Submitm, _window) {
                    this._cookieStore = _cookieStore;
                    this._window = _window;
                    this.ST_TechnicianSubmit = null;
                    this.QtyChange = null;
                    this.Description = null;
                    this.TOUserName = null;
                    this.FromWareHousename = null;
                    this.ToUserID = null;
                    this.FromWHID = null;
                    this.alert = null;
                    this.griddto = null;
                    this.grid = null;
                    this.DealerID = null;
                    this.itemDesctription = null;
                    this.Itemid = null;
                    this.QTY = null;
                    this.Stock = null;
                    this.UOM = null;
                    this.Cookie = null;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.WareHouse = _WareHouse;
                    this.RoleAccessRelation = _RoleAccessRelation;
                    this.GridFill = _GridFill;
                    this.SubmitM = _Submitm;
                    this.ST_TechnicianSubmit = new ST_TechnicianSubmit();
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.griddto = new griddtomodel();
                    this.grid = new Array();
                }
                ST_TechnicianController.prototype.$onInit = function () {
                    this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                ST_TechnicianController.prototype.Init = function () {
                    var _this = this;
                    this.TOUserName = this.RoleAccessRelation.FindUserName(this.DealerID).then((function (response) {
                        _this.TOUserName = _this.RoleAccessRelation.getUserName(response.data.Result);
                    }));
                    this.FromWareHousename = this.WareHouse.Find().then((function (response) {
                        _this.FromWareHousename = _this.WareHouse.GetWareHouse(response.data.Result);
                    }));
                };
                ST_TechnicianController.prototype.AutoSearch = function () {
                    var that = this;
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            that.ItemDescriptionAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var _this = this;
                            var SelectedItemID = ui.item.id;
                            that.griddto.ItemID = ui.item.id;
                            //that.Itemid = that.QtyChange.ItemID;
                            //that.Description = ui.item.value;
                            that.GridFill.Find(that.griddto.FromWHID, that.griddto.ItemID).then((function (response) {
                                that.QtyChange = that.GridFill.GetGrid(response.data.Result);
                                _this.grid.UOM = that.QtyChange.UOM;
                                console.log(that.QtyChange);
                                //
                                // var index = this.QtyChange.findIndex(x => x.PartNumber == that.griddto.ItemID);
                                //that.Stock = that.QtyChange.Stock;
                                //that.UOM = that.grid.UOM
                                //console.log(that.grid);
                                //console.log(that.UOM);
                                //console.log(that.Stock);
                            }));
                            //
                            //if (that.Stock == undefined) {
                            //    $("#txtstock").hide();
                            //    $("#QTY").hide();
                            //}
                        },
                        change: function () {
                        }
                    });
                };
                ST_TechnicianController.prototype.AddPart = function () {
                    var _this = this;
                    var len = 0;
                    var that = this;
                    if (this.grid == null) {
                        len = 0;
                    }
                    else {
                        len = this.grid.length;
                    }
                    this.griddto.UOM = document.getElementById("txtUOM").value;
                    for (var i = 0; i < this.FromWareHousename.length; i++) {
                        if (this.FromWareHousename[i].WHID == this.griddto.FromWHID) {
                            that.griddto.FromWHName = this.FromWareHousename[i].WHName;
                        }
                    }
                    for (var i = 0; i < this.TOUserName.length; i++) {
                        if (this.TOUserName[i].UserID == this.griddto.ToUserID) {
                            that.griddto.ToUserName = this.TOUserName[i].UserName;
                        }
                    }
                    if (this.grid !== null && this.grid !== 'undefined') {
                        // var index = this.WorkOrderPPR.indexOf(this.WorkOrderPPRDTO.index);
                        var index = this.grid.findIndex(function (x) { return x.index == _this.griddto.index; });
                        console.log(index);
                        if (index !== -1) {
                            this.grid[index] = this.griddto;
                        }
                        else {
                            var len_1 = this.grid.length;
                            this.griddto.index = len_1 + 1;
                            //this.griddto.FromWHID = "";
                            //this.griddto.ToUserID = "";
                            //this.griddto.QtyChange.Description = "";
                            //this.griddto.QTY = ""; 
                            this.grid.push(this.griddto);
                        }
                    }
                    else {
                        this.grid = new Array();
                        var len_2 = 0;
                        this.griddto.index = len_2 + 1;
                        this.griddto.ModelNo = "";
                        if (this.griddto.usedFrom == '1' || this.griddto.usedFrom == '2') {
                            this.griddto.Quantity = this.griddto.UsedQty;
                        }
                        this.grid.push(this.griddto);
                    }
                    this.griddto = null;
                    this.QtyChange = null;
                };
                ST_TechnicianController.prototype.Submit = function () {
                    var _this = this;
                    var that = this;
                    //this.Stock = $("#txtstock").val();
                    //var des = $("#txtDescription").val();
                    //var qtyconvert;
                    //var stockconvet;
                    //qtyconvert = parseInt(this.QTY);
                    //stockconvet = (parseInt(this.Stock) + 1);
                    //if (this.griddto.FromWHID == undefined) {
                    //    $("#errorclose").show();
                    //    $("#close").hide();
                    //    this.alert = "Please Enter From  Warehousename";
                    //}
                    //else if (this.griddto.ToUserID == undefined) {
                    //    $("#errorclose").show();
                    //    $("#close").hide();
                    //    this.alert = "Please Enter To Username";
                    //}
                    //else if (qtyconvert >= stockconvet) {
                    //    $("#errorclose").show();
                    //    $("#close").hide();
                    //    this.alert = "Qty should not be greater than stock";
                    //}
                    //else if (des == "") {
                    //    $("#errorclose").show();
                    //    $("#close").hide();
                    //    this.alert = "Please Select item Description";
                    //}
                    //else if (this.Stock == undefined || this.Stock == "") {
                    //    $("#errorclose").show();
                    //    $("#close").hide();
                    //    $("#QTY").val("");
                    //    //$('#txtdispose').attr('disabled', 'disabled');
                    //    this.alert = "This item has no stock. Please select another Item";
                    //}
                    //else if (this.Stock != null && this.griddto.Qty == undefined) {
                    //    //$('#txtdispose').attr('enabled', 'enabled');
                    //    $("#errorclose").show();
                    //    $("#close").hide();
                    //    this.alert = "Disposed quantity is required";
                    //}
                    //else if (this.IsValidNumber(this.griddto.Qty).Result == "False") {
                    //    this.ShowHidePopUp(this.IsValidNumber(this.griddto.Qty).Message);
                    //}
                    //else if (this.griddto.Qty == undefined) {
                    //    $("#errorclose").show();
                    //    $("#close").hide();
                    //    this.alert = "Please Enter QTY";
                    //}
                    //  else {
                    var liststock = [];
                    var listuom = [];
                    $.each(that.grid, function (key, item) {
                        //console.log(DealerID);
                        item.DealerID = that.DealerID;
                        liststock.push(item.Stock);
                        listuom.push(item.UOM);
                    });
                    //this.ST_TechnicianSubmit.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    //this.ST_TechnicianSubmit.FromWHID = this.FromWHID;
                    //this.ST_TechnicianSubmit.ToUserID = this.ToUserID;
                    //this.ST_TechnicianSubmit.Description = this.Description;
                    //this.ST_TechnicianSubmit.ItemID = this.Itemid;
                    //this.ST_TechnicianSubmit.UOM = listuom.toString();
                    //this.ST_TechnicianSubmit.Qty = this.QTY;
                    ////change qty             
                    //this.grid.UOM = listuom.toString();
                    this.SubmitM.Submit(this.grid).then((function (response) {
                        if (response.data.Result != 0) {
                            //this.alert = "Inserted Sucessfully";
                            $("#errorclose").hide();
                            $("#close").show();
                            $("#txtstock").val("");
                            _this.alert = 'Your Stock Transfer To Technician is successfully Done ';
                        }
                        else {
                            $("#errorclose").hide();
                            $("#close").show();
                            _this.alert = 'Oops Some Error Occured';
                        }
                        _this.grid = null;
                    }));
                };
                ST_TechnicianController.prototype.Close = function () {
                    location.href = "#!/TransferStockToTechnicianList";
                };
                ST_TechnicianController.prototype.ErrorClose = function () {
                    location.href = "#!/TransferStockToTechnicianList";
                };
                ST_TechnicianController.prototype.ShowHidePopUp = function (Message) {
                    $("#errorclose").show();
                    $("#close").hide();
                    this.alert = Message;
                };
                ST_TechnicianController.prototype.IsValidNumber = function (value) {
                    if (isNaN(value)) {
                        return { Result: "False", Message: 'Qty should be a number' };
                    }
                    else {
                        return { Result: "True", Message: 'Success' };
                    }
                };
                ST_TechnicianController.$inject = ["RoleAccessRelation", "itemDescriptionService", "StockListWarehousenameService", "StockGridService", "$cookieStore", "ST_TechnicianService", "$window"];
                return ST_TechnicianController;
            }());
            var ST_TechnicianComponentController = /** @class */ (function () {
                function ST_TechnicianComponentController() {
                    this.controller = ST_TechnicianController;
                    this.templateUrl = "/Scripts/App/Sales/StockTransfer_Technician/Template/_ST_Technician.html";
                }
                ST_TechnicianComponentController.Name = "sttechniciancomponent";
                return ST_TechnicianComponentController;
            }());
            app.AddComponent(ST_TechnicianComponentController.Name, new ST_TechnicianComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ST_TechnicianComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ST_TechnicianController = /** @class */ (function (_super) {
            __extends(ST_TechnicianController, _super);
            function ST_TechnicianController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ST_TechnicianController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ST_TechnicianController = ST_TechnicianController;
        app.AddController("ST_TechnicianController", ST_TechnicianController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ST_TechnicianController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var ST_TechnicianService = /** @class */ (function (_super) {
            __extends(ST_TechnicianService, _super);
            function ST_TechnicianService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/";
                return _this;
            }
            ST_TechnicianService.prototype.Submit = function (data) {
                console.log(data);
                var url = this.apiUrl + "/InsertStockTransferTechnician";
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            ST_TechnicianService.prototype.FindUserName = function (data) {
                var url = this.apiUrl + "/AccessMaster";
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            ST_TechnicianService.prototype.getUserName = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        UserID: item.UserID,
                        UserName: item.UserName,
                        UserIDM: item.UserIDM,
                        UserNameM: item.UserNameM
                    });
                }
                return list;
            };
            ST_TechnicianService.prototype.FindStockTechList = function (data) {
                var url = this.apiUrl + "/TransaferStockToTechctrl";
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            ST_TechnicianService.prototype.GetStockTechList = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        Description: item.Description,
                        DealerID: item.DealerID,
                        FromWHID: item.FromWHID,
                        FromWHName: item.FromWH,
                        ItemID: item.ItemID,
                        Qty: item.Quantity,
                        ToUserID: item.ToUserID,
                        UOM: item.UOM,
                        ToUserName: item.ToUserName,
                        StockTransferNo: item.StockTransferNo
                    });
                    console.log(list);
                }
                return list;
            };
            ST_TechnicianService.$inject = ["$http", "$q"];
            return ST_TechnicianService;
        }(GCPL.Service.BaseService));
        Service.ST_TechnicianService = ST_TechnicianService;
        //inject service
        app.AddService("ST_TechnicianService", ST_TechnicianService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ST_TechnicianService.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ST_WHToTechnicianListController = /** @class */ (function () {
                function ST_WHToTechnicianListController(_ST_WarehouseService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.DealerID = null;
                    this.StockTechList = null;
                    this.Cookie = null;
                    this.ST_WarehouseService = _ST_WarehouseService;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                ST_WHToTechnicianListController.prototype.$onInit = function () {
                    this.Init();
                };
                ST_WHToTechnicianListController.prototype.Init = function () {
                    var _this = this;
                    this.StockTechList = this.ST_WarehouseService.FindStockTechList(this.DealerID).then((function (response) {
                        _this.StockTechList = _this.ST_WarehouseService.GetStockTechList(response.data.Result);
                    }));
                };
                ST_WHToTechnicianListController.$inject = ["ST_WarehouseService", "$cookieStore"];
                return ST_WHToTechnicianListController;
            }());
            var ST_WHToTechnicianListComponentController = /** @class */ (function () {
                function ST_WHToTechnicianListComponentController() {
                    this.controller = ST_WHToTechnicianListController;
                    this.templateUrl = "/Scripts/App/Sales/StockTechnicianTOWHList/Template/_StockWHToTechnicianList.html";
                }
                ST_WHToTechnicianListComponentController.Name = "stwhtotechnicianlistcomponent";
                return ST_WHToTechnicianListComponentController;
            }());
            app.AddComponent(ST_WHToTechnicianListComponentController.Name, new ST_WHToTechnicianListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StockWHToTechnicianListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StockWHToTechnicianListController = /** @class */ (function (_super) {
            __extends(StockWHToTechnicianListController, _super);
            function StockWHToTechnicianListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StockWHToTechnicianListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StockWHToTechnicianListController = StockWHToTechnicianListController;
        app.AddController("StockWHToTechnicianListController", StockWHToTechnicianListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StockWHToTechnicianListController.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var ST_WarehouseSubmit = /** @class */ (function () {
            function ST_WarehouseSubmit() {
            }
            return ST_WarehouseSubmit;
        }());
        Model.ST_WarehouseSubmit = ST_WarehouseSubmit;
        var ST_WarehouseGrid = /** @class */ (function () {
            function ST_WarehouseGrid() {
            }
            return ST_WarehouseGrid;
        }());
        Model.ST_WarehouseGrid = ST_WarehouseGrid;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ST_WarehouseModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ST_WarehouseSubmit = GCPL.Model.ST_WarehouseSubmit;
            var griddtomodel = GCPL.Model.ST_WarehouseGrid;
            var ST_WarehouseController = /** @class */ (function () {
                function ST_WarehouseController(_RoleAccessRelation, _ItemAutoservice, _WareHouse, _GridFill, _cookieStore, _Submitm, _window) {
                    this._cookieStore = _cookieStore;
                    this._window = _window;
                    this.ST_WarehouseSubmit = null;
                    this.QtyChange = null;
                    this.Description = null;
                    this.TOUserName = null;
                    this.FromWareHousename = null;
                    this.ToUserID = null;
                    this.FromWHID = null;
                    this.alert = null;
                    this.griddto = null;
                    this.grid = null;
                    this.DealerID = null;
                    this.itemDesctription = null;
                    this.Itemid = null;
                    this.QTY = null;
                    this.Stock = null;
                    this.UOM = null;
                    this.Cookie = null;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.WareHouse = _WareHouse;
                    this.RoleAccessRelation = _RoleAccessRelation;
                    this.GridFill = _GridFill;
                    this.SubmitM = _Submitm;
                    this.ST_WarehouseSubmit = new ST_WarehouseSubmit();
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.griddto = new griddtomodel();
                    this.grid = new Array();
                }
                ST_WarehouseController.prototype.$onInit = function () {
                    this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                ST_WarehouseController.prototype.Init = function () {
                    var _this = this;
                    this.TOUserName = this.RoleAccessRelation.FindUserName(this.DealerID).then((function (response) {
                        _this.TOUserName = _this.RoleAccessRelation.getUserName(response.data.Result);
                    }));
                    this.FromWareHousename = this.WareHouse.Find().then((function (response) {
                        console.log(_this.FromWareHousename);
                        _this.FromWareHousename = _this.WareHouse.GetWareHouse(response.data.Result);
                    }));
                };
                ST_WarehouseController.prototype.AutoSearch = function () {
                    var that = this;
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            that.ItemDescriptionAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var _this = this;
                            var SelectedItemID = ui.item.id;
                            that.griddto.ItemID = ui.item.id;
                            //that.Itemid = that.QtyChange.ItemID;
                            //that.Description = ui.item.value;
                            that.GridFill.Find(that.griddto.FromWHID, that.griddto.ItemID).then((function (response) {
                                that.QtyChange = that.GridFill.GetGrid(response.data.Result);
                                console.log(that.QtyChange);
                                _this.grid.UOM = that.QtyChange.UOM;
                            }));
                        },
                        change: function () {
                        }
                    });
                };
                ST_WarehouseController.prototype.AddPart = function () {
                    var _this = this;
                    var len = 0;
                    var that = this;
                    if (this.grid == null) {
                        len = 0;
                    }
                    else {
                        len = this.grid.length;
                    }
                    this.griddto.UOM = document.getElementById("txtUOM").value;
                    for (var i = 0; i < this.FromWareHousename.length; i++) {
                        if (this.FromWareHousename[i].WHID == this.griddto.FromWHID) {
                            that.griddto.FromWHName = this.FromWareHousename[i].WHName;
                        }
                    }
                    for (var i = 0; i < this.TOUserName.length; i++) {
                        if (this.TOUserName[i].UserID == this.griddto.ToUserID) {
                            that.griddto.ToUserName = this.TOUserName[i].UserName;
                        }
                    }
                    if (this.grid !== null && this.grid !== 'undefined') {
                        // var index = this.WorkOrderPPR.indexOf(this.WorkOrderPPRDTO.index);
                        var index = this.grid.findIndex(function (x) { return x.index == _this.griddto.index; });
                        console.log(index);
                        if (index !== -1) {
                            this.grid[index] = this.griddto;
                        }
                        else {
                            var len_1 = this.grid.length;
                            this.griddto.index = len_1 + 1;
                            this.grid.push(this.griddto);
                        }
                    }
                    else {
                        this.grid = new Array();
                        var len_2 = 0;
                        this.griddto.index = len_2 + 1;
                        this.griddto.ModelNo = "";
                        if (this.griddto.usedFrom == '1' || this.griddto.usedFrom == '2') {
                            this.griddto.Quantity = this.griddto.UsedQty;
                        }
                        this.grid.push(this.griddto);
                    }
                    this.griddto = null;
                    this.QtyChange = null;
                };
                ST_WarehouseController.prototype.Submit = function () {
                    var _this = this;
                    var that = this;
                    var liststock = [];
                    var listuom = [];
                    $.each(that.grid, function (key, item) {
                        //console.log(DealerID);
                        item.DealerID = that.DealerID;
                        liststock.push(item.Stock);
                        listuom.push(item.UOM);
                    });
                    this.SubmitM.Submit(this.grid).then((function (response) {
                        debugger;
                        if (response.data.Result != 0) {
                            //this.alert = "Inserted Sucessfully";
                            $("#errorclose").hide();
                            $("#close").show();
                            $("#txtstock").val("");
                            _this.alert = 'Your Stock Transfer To Warehouse is successfully Done ';
                        }
                        else {
                            $("#errorclose").hide();
                            $("#close").show();
                            _this.alert = 'Oops Some Error Occured';
                        }
                        _this.grid = null;
                    }));
                };
                ST_WarehouseController.prototype.Close = function () {
                    location.href = "#!/TransferStockTechnicianTOWHList";
                };
                ST_WarehouseController.prototype.ErrorClose = function () {
                    location.href = "#!/TransferStockTechnicianTOWHList";
                };
                ST_WarehouseController.prototype.ShowHidePopUp = function (Message) {
                    $("#errorclose").show();
                    $("#close").hide();
                    this.alert = Message;
                };
                ST_WarehouseController.prototype.IsValidNumber = function (value) {
                    if (isNaN(value)) {
                        return { Result: "False", Message: 'Qty should be a number' };
                    }
                    else {
                        return { Result: "True", Message: 'Success' };
                    }
                };
                ST_WarehouseController.$inject = ["RoleAccessRelation", "itemDescriptionService", "StockListWarehousenameService", "StockGridService", "$cookieStore", "ST_WarehouseService", "$window"];
                return ST_WarehouseController;
            }());
            var ST_WarehouseComponentController = /** @class */ (function () {
                function ST_WarehouseComponentController() {
                    this.controller = ST_WarehouseController;
                    this.templateUrl = "/Scripts/App/Sales/StockTransfer_Warehouse/Template/_ST_Warehouse.html";
                }
                ST_WarehouseComponentController.Name = "stwarehousecomponent";
                return ST_WarehouseComponentController;
            }());
            app.AddComponent(ST_WarehouseComponentController.Name, new ST_WarehouseComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ST_WarehouseComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ST_WarehouseController = /** @class */ (function (_super) {
            __extends(ST_WarehouseController, _super);
            function ST_WarehouseController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ST_WarehouseController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ST_WarehouseController = ST_WarehouseController;
        app.AddController("ST_WarehouseController", ST_WarehouseController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ST_WarehouseController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var ST_WarehouseService = /** @class */ (function (_super) {
            __extends(ST_WarehouseService, _super);
            function ST_WarehouseService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/";
                return _this;
            }
            ST_WarehouseService.prototype.Submit = function (data) {
                console.log(data);
                var url = this.apiUrl + "InsertStockTransferWarehouse";
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            ST_WarehouseService.prototype.FindUserName = function (data) {
                var url = this.apiUrl + "/AccessMaster";
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            ST_WarehouseService.prototype.getUserName = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        UserID: item.UserID,
                        UserName: item.UserName,
                        UserIDM: item.UserIDM,
                        UserNameM: item.UserNameM
                    });
                }
                return list;
            };
            ST_WarehouseService.prototype.FindStockTechList = function (data) {
                var url = this.apiUrl + "/StockWHToTechListctrl";
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            ST_WarehouseService.prototype.GetStockTechList = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        DealerID: item.DealerID,
                        Description: item.Description,
                        FromWHID: item.FromWHID,
                        FromWHName: item.FromWH,
                        ItemID: item.ItemID,
                        Qty: item.Quantity,
                        ToUserID: item.ToUserID,
                        ToUserName: item.ToUserName,
                        UOM: item.UOM,
                        StockTransferNo: item.StockTransferNo,
                    });
                    console.log(list);
                }
                return list;
            };
            ST_WarehouseService.$inject = ["$http", "$q"];
            return ST_WarehouseService;
        }(GCPL.Service.BaseService));
        Service.ST_WarehouseService = ST_WarehouseService;
        //inject service
        app.AddService("ST_WarehouseService", ST_WarehouseService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ST_WarehouseService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var IsValidatemodel = /** @class */ (function () {
            function IsValidatemodel() {
            }
            return IsValidatemodel;
        }());
        Model.IsValidatemodel = IsValidatemodel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ValidateStatusModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ValidateStatusController = /** @class */ (function () {
                function ValidateStatusController(_ValidateStatusService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    //IsDisplayModalPopup: boolean = false;
                    //IsDisplayModalPopupError: boolean = false;
                    //alert = null;
                    //FindVTList = null;
                    //SegmentDropDown = null;
                    this.alert = null;
                    this.DealerID = null;
                    this.Validate = null;
                    this.ISButtonShow = false;
                    this.Cookie = null;
                    this.ValidateStatusService = _ValidateStatusService;
                    this.Cookie = _cookieStore;
                    //this.InsertVT = new ValidateStatus();
                    //this.InsertCustStatus = new InsertCustStatus1();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.IsValidatemodel = new GCPL.Model.IsValidatemodel();
                }
                ValidateStatusController.prototype.$onInit = function () {
                    this.Init();
                };
                ValidateStatusController.prototype.Init = function () {
                };
                ValidateStatusController.prototype.ShowButton = function () {
                    this.ISButtonShow = this.Validate == "" ? false : true;
                };
                ValidateStatusController.prototype.InsertValidateStatus = function () {
                    var _this = this;
                    //location.href = "#!/CreateLead?ValidateStatus=" + this.Validate;
                    if (this.Validate == undefined || this.Validate == "" || this.Validate == null) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Status";
                    }
                    else {
                        this.IsValidatemodel.StatusID = this.Validate;
                        this.IsValidatemodel.DealerID = this.DealerID;
                        this.ValidateStatusService.InsertIsValid(this.IsValidatemodel).then(function (response) {
                            if (response.data.Result != null) {
                                _this.alert = " Data saved Successfully";
                                $("#errorclose").hide();
                                $("#close").show();
                            }
                            else {
                                _this.alert = 'Oops Some Error Occured';
                                $("#errorclose").show();
                                $("#close").hide();
                            }
                        });
                    }
                };
                ValidateStatusController.$inject = ["ValidateStatusService", "$cookieStore"];
                return ValidateStatusController;
            }());
            var ValidateStatusComponentController = /** @class */ (function () {
                function ValidateStatusComponentController() {
                    this.controller = ValidateStatusController;
                    this.templateUrl = "/Scripts/App/CostumerConfiguration/ValidateStatus/Template/_ValidateStatus.html";
                }
                ValidateStatusComponentController.Name = "validatestatus";
                return ValidateStatusComponentController;
            }());
            app.AddComponent(ValidateStatusComponentController.Name, new ValidateStatusComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ValidateStatusComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ValidateStatusController = /** @class */ (function (_super) {
            __extends(ValidateStatusController, _super);
            function ValidateStatusController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ValidateStatusController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ValidateStatusController = ValidateStatusController;
        app.AddController("ValidateStatusController", ValidateStatusController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ValidateStatusController.js.map
//# sourceMappingURL=ValidateStatusService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var InsertBillingType = /** @class */ (function () {
            function InsertBillingType() {
            }
            return InsertBillingType;
        }());
        Model.InsertBillingType = InsertBillingType;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//    export class DivisionMasterListModel {
//        constructor() {
//        }
//        DivisionID: number;
//        CategoryID: number;
//        Division: string;
//        Description: string;
//        DivisionSAPID: number;
//        IsActive: string;
//        WhenEntered: string;
//        Category: string;
//        DealerID: number;
//    }
//    export class DivisionMasterSearchModel {
//        constructor() {
//        }
//        SearchText: string;
//        Status: string;
//        DealerID: number;
//    }
//    export class ICategoryddl {
//        constructor() {
//        }
//        CategoryID: number;
//        Category: string;
//    }
//    export class DivisionMasterEditModel {
//        constructor() {
//        }
//        DivisionID: number;
//        CategoryID: any;
//        Division: string;
//        Description: string;
//        DivisionSAPID: number;
//        Status: string;
//        Category: string;
//        DealerID: number;
//        WhenEntered: string;
//    }
//    export class DivisionMasterUpdateModel {
//        constructor() {
//        }
//        DivisionID: number;
//        CategoryID: number;
//        Division: number;
//        Description: number;
//        DivisionSAPID: number;
//        Status: string;
//        WhenEntered: string;
//    }
//# sourceMappingURL=BillingtyprModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var insert = GCPL.Model.InsertBillingType;
            var BillingTypeController = /** @class */ (function () {
                function BillingTypeController(_Service, _cookieStore, _ServiceList, _Eservice, _WorkOrderService) {
                    this._cookieStore = _cookieStore;
                    this.WorkOrdetType = null;
                    this.InsertBillingTypeMaster = null;
                    this.alert = null;
                    this.BillingTyperList = null;
                    this.ID = null;
                    this.Cookie = null;
                    this.service = _Service;
                    this.serviceList = _ServiceList;
                    this.Cookie = _cookieStore;
                    this.InsertBillingTypeMaster = new insert();
                    this.InsertBillingTypeMaster.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.Eservice = _Eservice;
                    this.WorkOrderService = _WorkOrderService;
                }
                BillingTypeController.prototype.$onInit = function () {
                    this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                //Page Load Define Values//
                BillingTypeController.prototype.Init = function () {
                    var _this = this;
                    this.BillingTyperList = this.serviceList.Find().then((function (response) {
                        _this.BillingTyperList = _this.serviceList.GetList(response.data.Result);
                    }));
                    this.WorkOrdetType = this.WorkOrderService.Find().then((function (response) {
                        _this.WorkOrdetType = _this.WorkOrderService.GetWorkOrderType(response.data.Result);
                    }));
                };
                BillingTypeController.prototype.Submit = function () {
                    var _this = this;
                    if (this.InsertBillingTypeMaster.BillingType == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter BillingType";
                    }
                    else if (this.InsertBillingTypeMaster.Description == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter Description";
                    }
                    else if (this.InsertBillingTypeMaster.IsActive == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter Status";
                    }
                    else if (this.InsertBillingTypeMaster.Qty == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter Qty";
                    }
                    else if (this.InsertBillingTypeMaster.Billable == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Billable Option";
                    }
                    else {
                        this.InsertBillingTypeMaster.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                        this.service.PostBillingMaster(this.InsertBillingTypeMaster).then((function (response) {
                            _this.BillingTyperList = _this.serviceList.Find().then((function (response) {
                                _this.BillingTyperList = _this.serviceList.GetList(response.data.Result);
                            }));
                            if (response.data.Result == true) {
                                //this.IsDisplayModalPopup = true;
                                _this.alert = " Data is Successfully Inserted";
                                $("#errorclose").hide();
                                $("#close").show();
                                $('#myModalAddNew').click();
                                _this.InsertBillingTypeMaster = null;
                            }
                            else {
                                _this.alert = 'Oops Some Error Occured';
                                $("#errorclose").hide();
                                $("#close").show();
                            }
                        }));
                        //$('#txtproduct').val('');
                        //$('#txtDescription').val('');
                        //$('#ddlStatus').val('Select');
                        //$('#ddlDivision').val('Select');
                    }
                };
                BillingTypeController.prototype.EditBiilingTypeMaster = function (data) {
                    var _this = this;
                    console.log("data");
                    console.log(data);
                    this.Eservice.Find(data).then((function (response) {
                        _this.InsertBillingTypeMaster = _this.Eservice.GetBillingTypeMasterEdit(response.data.Result);
                        console.log(_this.InsertBillingTypeMaster);
                        if (Boolean(_this.InsertBillingTypeMaster.IsActive) == true) {
                            _this.InsertBillingTypeMaster.IsActive = "1";
                        }
                        else {
                            _this.InsertBillingTypeMaster.IsActive = "0";
                        }
                        //if (this.InsertBillingTypeMaster.Qty == "1") {
                        //    this.InsertBillingTypeMaster.Qty = "Quantity Based";
                        //}
                        //else {
                        //    this.InsertBillingTypeMaster.Qty = "Timesheet Based";
                        //}
                        if (Boolean(_this.InsertBillingTypeMaster.Billable) == true) {
                            _this.InsertBillingTypeMaster.Billable = "Yes";
                        }
                        else {
                            _this.InsertBillingTypeMaster.Billable = "No";
                        }
                    }));
                    $("myModalAddNew").show();
                };
                BillingTypeController.prototype.Clear = function () {
                    $("#txtBilling").val("");
                    $("#Status").val("");
                    $("#txtDescription").val("");
                    //$("#nTodt").val("");
                    //this.SearchCMRListList.CustomerName = "";
                };
                BillingTypeController.$inject = ["InsertBillingTypeService", "$cookieStore", "BillingListServies", "BillingTypeEditService", "WorkOrderService"];
                return BillingTypeController;
            }());
            var BillingTypeComponent = /** @class */ (function () {
                function BillingTypeComponent() {
                    this.controller = BillingTypeController;
                    this.templateUrl = "/Scripts/App/BillingType/Template/_BillingType.html";
                }
                BillingTypeComponent.Name = "billingTypeComponent";
                return BillingTypeComponent;
            }());
            app.AddComponent(BillingTypeComponent.Name, new BillingTypeComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BillingtypeComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var BillingTypeController = /** @class */ (function (_super) {
            __extends(BillingTypeController, _super);
            function BillingTypeController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return BillingTypeController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.BillingTypeController = BillingTypeController;
        app.AddController("BillingTypeController", BillingTypeController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BillingTypeController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
//insert
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var InsertBillingTypeService = /** @class */ (function (_super) {
            __extends(InsertBillingTypeService, _super);
            function InsertBillingTypeService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                //this.apiUrl = `${this.url}/${"InsertServiceCallctrl"}`;
                _this.apiUrl = _this.url + "/" + "BillingList";
                return _this;
            }
            InsertBillingTypeService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            InsertBillingTypeService.prototype.PostBillingMaster = function (data) {
                var url = this.apiUrl;
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            InsertBillingTypeService.$inject = ["$http", "$q"];
            return InsertBillingTypeService;
        }(GCPL.Service.BaseService));
        Service.InsertBillingTypeService = InsertBillingTypeService;
        app.AddService("InsertBillingTypeService", InsertBillingTypeService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//List
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var BillingListServies = /** @class */ (function (_super) {
            __extends(BillingListServies, _super);
            function BillingListServies($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url; ///${"InsertPPRTypeCtrl"}
                _this.Cookie = _cookieStore;
                return _this;
            }
            BillingListServies.prototype.Find = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/BillingList",
                    Config: config
                });
            };
            BillingListServies.prototype.GetList = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        Description: item.Description,
                        BillingType: item.BillingType,
                        ID: item.ID.toString(),
                        IsActive: item.IsActive,
                        DealerID: item.DealerID,
                        Qty: item.Qty,
                        Billable: item.Billable,
                        WOTypeName: item.WOTypeName,
                        WOTypeID: item.WOTypeID
                    });
                }
                return list;
            };
            BillingListServies.$inject = ["$http", "$q", "$cookieStore"];
            return BillingListServies;
        }(GCPL.Service.BaseService));
        Service.BillingListServies = BillingListServies;
        app.AddService("BillingListServies", BillingListServies);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Edit
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var BillingTypeEditService = /** @class */ (function (_super) {
            __extends(BillingTypeEditService, _super);
            function BillingTypeEditService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "BillingTypeEdit";
                return _this;
            }
            BillingTypeEditService.prototype.Find = function (data) {
                var config = {
                    params: {
                        ID: data
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            BillingTypeEditService.prototype.GetBillingTypeMasterEdit = function (data) {
                var obj = new model.InsertBillingType();
                obj.DealerID = data.DealerID,
                    obj.Description = data.Description,
                    obj.BillingType = data.BillingType,
                    obj.IsActive = data.IsActive,
                    obj.ID = data.ID,
                    obj.Qty = data.Qty,
                    obj.WOTypeID = data.WOTypeID,
                    obj.Billable = data.Billable;
                return obj;
            };
            BillingTypeEditService.$inject = ["$http", "$q"];
            return BillingTypeEditService;
        }(GCPL.Service.BaseService));
        Service.BillingTypeEditService = BillingTypeEditService;
        app.AddService("BillingTypeEditService", BillingTypeEditService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
////update
//namespace GCPL.Service {
//    import app = GCPL.app;
//    import model = GCPL.Model;
//    export interface IDivisionMasterUpdateService {
//        Find(data: any): ng.IPromise<Utility.Ajax.IResponse>;
//        PostDivisionMaster(data: any): model.DivisionMasterUpdateModel;
//    }
//    export class DivisionMasterUpdateService extends GCPL.Service.BaseService implements IDivisionMasterUpdateService {
//        private apiUrl: string = "";
//        static $inject = ["$http", "$q"];
//        constructor(private $http: ng.IHttpService, private $q: ng.IQService) {
//            super($http, $q);
//            this.apiUrl = `${this.url}/${"DivisionMaster"}`;
//        }
//        Find(data: any): ng.IHttpPromise<model.DivisionMasterUpdateModel> {
//            let config = {
//                params: {
//                    DivisionID: data
//                }
//            };
//            console.log(config);
//            return this.ajaXUtility.Get({
//                Url: this.apiUrl,
//                Config: config
//            }
//            );
//        }
//        PostDivisionMaster(data: any): model.DivisionMasterUpdateModel {
//            let obj = new model.DivisionMasterUpdateModel();
//            obj.DivisionID = data.DivisionID,
//                obj.CategoryID = data.CategoryID,
//                obj.Division = data.Division,
//                obj.Description = data.Description,
//                obj.DivisionSAPID = data.DivisionSAPID,
//                obj.Status = data.IsActive
//            return obj;
//        }
//    }
//    app.AddService("DivisionMasterUpdateService", DivisionMasterUpdateService);
//}
//# sourceMappingURL=BillingTypeServices.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var BiilingpriceInsertModel = /** @class */ (function () {
            function BiilingpriceInsertModel() {
            }
            return BiilingpriceInsertModel;
        }());
        Model.BiilingpriceInsertModel = BiilingpriceInsertModel;
        var IBiilingTypeddl = /** @class */ (function () {
            function IBiilingTypeddl() {
            }
            return IBiilingTypeddl;
        }());
        Model.IBiilingTypeddl = IBiilingTypeddl;
        var WOTypeddl = /** @class */ (function () {
            function WOTypeddl() {
            }
            return WOTypeddl;
        }());
        Model.WOTypeddl = WOTypeddl;
        //export class DivisionMasterInsertModel {
        //    constructor() {
        //    }
        //    DivisionID: number;
        //    CategoryID: number;
        //    Division: string;
        //    Description: string;
        //    DivisionSAPID: number;
        //    Status: string;
        //    WhenEntered: string;
        //    DealerID: number;
        //}
        //export class DivisionMasterEditModel {
        //    constructor() {
        //    }
        //    DivisionID: number;
        //    CategoryID: any;
        //    Division: string;
        //    Description: string;
        //    DivisionSAPID: number;
        //    Status: string;
        //    Category: string;
        //    DealerID: number;
        //    WhenEntered: string;
        //}
        //export class DivisionMasterUpdateModel {
        //    constructor() {
        //    }
        //    DivisionID: number;
        //    CategoryID: number;
        //    Division: number;
        //    Description: number;
        //    DivisionSAPID: number;
        //    Status: string;
        //    WhenEntered: string;
        //}
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ServicesPriceMasterModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var insert = GCPL.Model.BiilingpriceInsertModel;
            var ServicePriceMasterController = /** @class */ (function () {
                function ServicePriceMasterController(_WolistService, _BillinglistService, _CurrencyService, _InsertService, _cookieStore, _Listservice, _Eservice) {
                    this._cookieStore = _cookieStore;
                    this.alert = null;
                    this.Woddl = null;
                    this.Billingddl = null;
                    this.Currency = null;
                    this.ServicePriceList = null;
                    this.InsertBillingPrice = null;
                    this.ID = null;
                    this.Cookie = null;
                    this.WolistService = _WolistService;
                    this.BillinglistService = _BillinglistService;
                    this.Currencyservice = _CurrencyService;
                    this.Insertservice = _InsertService;
                    this.InsertBillingPrice = new insert();
                    this.Cookie = _cookieStore;
                    this.InsertBillingPrice.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.Listservice = _Listservice;
                    this.Eservice = _Eservice;
                }
                ServicePriceMasterController.prototype.$onInit = function () {
                    this.Init();
                    this.InsertBillingPrice.WOType = "";
                    this.InsertBillingPrice.BillingType = "";
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                //Page Load Define Values//
                ServicePriceMasterController.prototype.Init = function () {
                    var _this = this;
                    this.Woddl = this.WolistService.Find(this.InsertBillingPrice.DealerID).then((function (response) {
                        _this.Woddl = _this.WolistService.GetWOTypeddl(response.data.Result);
                        if (_this.Woddl[0].WOTypeID == "0") {
                            _this.Woddl.splice(0, 1);
                        }
                    }));
                    this.Currency = this.Currencyservice.Find().then((function (response) {
                        _this.Currency = _this.Currencyservice.GetCurrency(response.data.Result);
                        // this.InsertDealerMaster.Currency = this.BEDropdown[0].Currency.toString();
                    }));
                    this.ServicePriceList = this.Listservice.Find().then((function (response) {
                        _this.ServicePriceList = _this.Listservice.GetList(response.data.Result);
                    }));
                };
                ServicePriceMasterController.prototype.Billing = function () {
                    var _this = this;
                    debugger;
                    this.Billingddl = this.BillinglistService.Find(this.InsertBillingPrice.WOType, this.InsertBillingPrice.DealerID).then((function (response) {
                        _this.Billingddl = _this.BillinglistService.GetBiilingddl(response.data.Result);
                        if (_this.Billingddl[0].ID == "0") {
                            _this.Billingddl.splice(0, 1);
                        }
                    }));
                };
                ServicePriceMasterController.prototype.Submit = function () {
                    var _this = this;
                    if (this.InsertBillingPrice.BillingType == undefined || this.InsertBillingPrice.BillingType == "" || this.InsertBillingPrice.BillingType == null) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please select BillingType";
                    }
                    else if (this.InsertBillingPrice.WOType == undefined || this.InsertBillingPrice.WOType == "" || this.InsertBillingPrice.WOType == null) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please select WOType";
                    }
                    else if (this.InsertBillingPrice.Rate == undefined || this.InsertBillingPrice.Rate == "" || this.InsertBillingPrice.Rate == null) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter Rate";
                    }
                    else if (this.InsertBillingPrice.Currency == undefined || this.InsertBillingPrice.Currency == "" || this.InsertBillingPrice.Currency == null) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please select Currency";
                    }
                    else if (this.InsertBillingPrice.IsActive == undefined || this.InsertBillingPrice.IsActive == "" || this.InsertBillingPrice.IsActive == null) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please select Status";
                    }
                    else {
                        this.InsertBillingPrice.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                        this.Insertservice.PostBillingPriceMaster(this.InsertBillingPrice).then(function (response) {
                            _this.ServicePriceList = _this.Listservice.Find().then((function (response) {
                                _this.ServicePriceList = _this.Listservice.GetList(response.data.Result);
                            }));
                            console.log("sdfsdfs");
                            console.log(_this.InsertBillingPrice);
                            if (response.data.Result != false) {
                                //this.IsDisplayModalPopup = true;
                                _this.alert = " Data saved Successfully ";
                                $("#errorclose").hide();
                                $("#close").show();
                                $('#myModalAddNew').click();
                                _this.InsertBillingPrice = null;
                            }
                            else {
                                //this.IsDisplayModalPopupError = true;
                                _this.alert = 'Already Exist';
                                $("#errorclose").hide();
                                $("#close").show();
                            }
                        });
                    }
                };
                //checkdata(): void {
                //    if (this.InsertBillingPrice.BillingType == null)
                //    {
                //    this.Insertservice.PostBillingPriceMaster(this.InsertBillingPrice).then(response => {
                //        });
                //        else
                //}
                ServicePriceMasterController.prototype.Edit = function (data) {
                    var _this = this;
                    this.Eservice.Find(data).then((function (response) {
                        _this.InsertBillingPrice = _this.Eservice.GetServicePrice(response.data.Result);
                        if (Boolean(_this.InsertBillingPrice.IsActive) == true) {
                            _this.InsertBillingPrice.IsActive = "1";
                        }
                        else {
                            _this.InsertBillingPrice.IsActive = "0";
                        }
                    }));
                    $("myModalAddNew").show();
                };
                ServicePriceMasterController.prototype.Clear = function () {
                    $("#ddlwotype").val("");
                    $("#txtRate").val("");
                    $("#Currency").val("");
                    $("#status1").val("");
                    $("#ddlBil").val("");
                    //this.SearchCMRListList.CustomerName = "";
                };
                ServicePriceMasterController.$inject = ["WOTypeddlService", "BillingtypeddlService", "CurrencyService", "PriceMasterMasterService", "$cookieStore",
                    "ServicepriceListServies", "ServicePriceEditService"];
                return ServicePriceMasterController;
            }());
            var ServicePriceMasterComponent = /** @class */ (function () {
                function ServicePriceMasterComponent() {
                    this.controller = ServicePriceMasterController;
                    this.templateUrl = "/Scripts/App/ServicePriceMaster/Template/_ServicesPriceMaster.html";
                }
                ServicePriceMasterComponent.Name = "servicePriceMasterComponent";
                return ServicePriceMasterComponent;
            }());
            app.AddComponent(ServicePriceMasterComponent.Name, new ServicePriceMasterComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ServicesPriceMasterComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ServicePriceMasterController = /** @class */ (function (_super) {
            __extends(ServicePriceMasterController, _super);
            function ServicePriceMasterController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ServicePriceMasterController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ServicePriceMasterController = ServicePriceMasterController;
        app.AddController("ServicePriceMasterController", ServicePriceMasterController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ServicesPriceMasterController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
//BillingTypeddl
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var BillingtypeddlService = /** @class */ (function (_super) {
            __extends(BillingtypeddlService, _super);
            function BillingtypeddlService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.Cookie = _cookieStore;
                _this.apiUrl = _this.url + "/" + "BillingList";
                return _this;
            }
            BillingtypeddlService.prototype.Find = function (data, DealerID) {
                var config = {
                    params: {
                        WOID: data,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            BillingtypeddlService.prototype.GetBiilingddl = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        ID: item.ID,
                        DealerID: item.DealerID,
                        BillingType: item.BillingType
                    });
                }
                return list;
            };
            BillingtypeddlService.$inject = ["$http", "$q", "$cookieStore"];
            return BillingtypeddlService;
        }(GCPL.Service.BaseService));
        Service.BillingtypeddlService = BillingtypeddlService;
        app.AddService("BillingtypeddlService", BillingtypeddlService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Categoryddl
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var WOTypeddlService = /** @class */ (function (_super) {
            __extends(WOTypeddlService, _super);
            function WOTypeddlService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.Cookie = _cookieStore;
                _this.apiUrl = _this.url + "/" + "ServiceInvoiceFillWO";
                return _this;
            }
            WOTypeddlService.prototype.Find = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            WOTypeddlService.prototype.GetWOTypeddl = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        WOType: item.WOType,
                        DealerID: item.DealerID,
                        WOTypeID: item.WOTypeID
                    });
                }
                return list;
            };
            WOTypeddlService.$inject = ["$http", "$q", "$cookieStore"];
            return WOTypeddlService;
        }(GCPL.Service.BaseService));
        Service.WOTypeddlService = WOTypeddlService;
        app.AddService("WOTypeddlService", WOTypeddlService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var PriceMasterMasterService = /** @class */ (function (_super) {
            __extends(PriceMasterMasterService, _super);
            function PriceMasterMasterService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                //this.apiUrl = `${this.url}/${"InsertServiceCallctrl"}`;
                _this.apiUrl = _this.url + "/" + "ServicePriceMaster";
                return _this;
            }
            PriceMasterMasterService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            PriceMasterMasterService.prototype.PostBillingPriceMaster = function (data) {
                var url = this.apiUrl;
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            PriceMasterMasterService.$inject = ["$http", "$q"];
            return PriceMasterMasterService;
        }(GCPL.Service.BaseService));
        Service.PriceMasterMasterService = PriceMasterMasterService;
        app.AddService("PriceMasterMasterService", PriceMasterMasterService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var ServicepriceListServies = /** @class */ (function (_super) {
            __extends(ServicepriceListServies, _super);
            function ServicepriceListServies($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url; ///${"InsertPPRTypeCtrl"}
                _this.Cookie = _cookieStore;
                return _this;
            }
            ServicepriceListServies.prototype.Find = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/ServicePriceMaster",
                    Config: config
                });
            };
            ServicepriceListServies.prototype.GetList = function (data) {
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    console.log("data");
                    console.log(data);
                    list.push({
                        BillingType: item.BillingType,
                        WOType: item.WOType,
                        Rate: item.Rate,
                        Currency: item.Currency,
                        IsActive: item.IsActive,
                        DealerID: item.DealerID,
                        //WOType: item.WOType,
                        ID: item.ID
                    });
                    console.log("list");
                    console.log(list);
                }
                return list;
            };
            ServicepriceListServies.$inject = ["$http", "$q", "$cookieStore"];
            return ServicepriceListServies;
        }(GCPL.Service.BaseService));
        Service.ServicepriceListServies = ServicepriceListServies;
        app.AddService("ServicepriceListServies", ServicepriceListServies);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var ServicePriceEditService = /** @class */ (function (_super) {
            __extends(ServicePriceEditService, _super);
            function ServicePriceEditService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "ServicePriceMasterEditctrl";
                return _this;
            }
            ServicePriceEditService.prototype.Find = function (data) {
                var config = {
                    params: {
                        ID: data
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            ServicePriceEditService.prototype.GetServicePrice = function (data) {
                var obj = new model.BiilingpriceInsertModel();
                obj.DealerID = data.DealerID,
                    obj.WOType = data.WOType,
                    obj.BillingType = data.BillingType,
                    obj.IsActive = data.IsActive,
                    obj.Rate = data.Rate,
                    obj.Currency = data.Currency,
                    obj.ID = data.ID;
                return obj;
            };
            ServicePriceEditService.$inject = ["$http", "$q"];
            return ServicePriceEditService;
        }(GCPL.Service.BaseService));
        Service.ServicePriceEditService = ServicePriceEditService;
        app.AddService("ServicePriceEditService", ServicePriceEditService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ServicesPriceMasterServices.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var VendorInvoicedBlockedlistmodel = /** @class */ (function () {
            function VendorInvoicedBlockedlistmodel() {
            }
            return VendorInvoicedBlockedlistmodel;
        }());
        Model.VendorInvoicedBlockedlistmodel = VendorInvoicedBlockedlistmodel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VendorInvoicedBlockedlistmodel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var VendorInvoiceBlockedListController = /** @class */ (function () {
                function VendorInvoiceBlockedListController(_service, _Vendorservice, _cookieStore, _window) {
                    this._cookieStore = _cookieStore;
                    this._window = _window;
                    this.VendorName = null;
                    this.VendorId = null;
                    this.DealerID = null;
                    this.Grid = null;
                    this.Cookie = null;
                    this.Service = _service;
                    this.VendornameAutofill = _Vendorservice;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                VendorInvoiceBlockedListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                VendorInvoiceBlockedListController.prototype.Init = function () {
                    this.View();
                };
                VendorInvoiceBlockedListController.prototype.Release = function (data) {
                    this._window.location.href = "#!/VendorInvoice?id=" + data;
                };
                VendorInvoiceBlockedListController.prototype.View = function () {
                    var _this = this;
                    if (this.VendorId == null) {
                        this.VendorId = '';
                    }
                    this.Service.Find(this.DealerID, this.VendorId).then((function (response) {
                        _this.Grid = _this.Service.GetGrid(response.data.Result);
                    }));
                };
                VendorInvoiceBlockedListController.prototype.AutoFillSupplier = function () {
                    var that = this;
                    $("#txtVendorName").autocomplete({
                        source: function (request, res) {
                            that.VendornameAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.VendornameAutofill.GetVendorName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.VendorName,
                                        value: item.VendorName,
                                        id: item.VendorID,
                                        Address1: item.Address1,
                                        PANReferenceNo: item.PANReferenceNo,
                                        GSTIN: item.GSTIN,
                                        VendorStateID: item.VendorStateID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedItemID = ui.item.id;
                            that.VendorName = ui.item.value;
                            that.VendorId = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                };
                VendorInvoiceBlockedListController.$inject = ["VendorInvoiceBlockedListService", "VendorMasterAutofillService", "$cookieStore", "$window"];
                return VendorInvoiceBlockedListController;
            }());
            var VendorInvoiceBlockedListComponentController = /** @class */ (function () {
                function VendorInvoiceBlockedListComponentController() {
                    this.controller = VendorInvoiceBlockedListController;
                    this.templateUrl = "/Scripts/App/VendorInvoiceBlockedList/Template/_VendorInvoiceBlockedList.html";
                }
                VendorInvoiceBlockedListComponentController.Name = "vendorInvoiceBlockedList";
                return VendorInvoiceBlockedListComponentController;
            }());
            app.AddComponent(VendorInvoiceBlockedListComponentController.Name, new VendorInvoiceBlockedListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VendorInvoicedBlockedListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var VendorInvoiceBlockedListService = /** @class */ (function (_super) {
            __extends(VendorInvoiceBlockedListService, _super);
            function VendorInvoiceBlockedListService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/" + "GetVendorInvoiceBlockedList";
                _this.Cookie = _cookieStore;
                return _this;
            }
            VendorInvoiceBlockedListService.prototype.Find = function (DealerID, VendorId) {
                var config = {
                    params: {
                        DealerID: DealerID,
                        VendorId: VendorId
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            VendorInvoiceBlockedListService.prototype.GetGrid = function (data) {
                console.log(data);
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        id: item.id,
                        billnumber: item.billnumber,
                        vendorname: item.vendorname,
                        ponumber: item.ponumber,
                        createdon: item.createdon,
                        totalgst: item.totalgst,
                        InvoiceAmount: item.InvoiceAmount,
                        totalinvoiveamount: item.totalinvoiveamount,
                        Status: item.Status
                    });
                }
                return list;
            };
            VendorInvoiceBlockedListService.$inject = ["$http", "$q", "$cookieStore"];
            return VendorInvoiceBlockedListService;
        }(GCPL.Service.BaseService));
        Service.VendorInvoiceBlockedListService = VendorInvoiceBlockedListService;
        app.AddService("VendorInvoiceBlockedListService", VendorInvoiceBlockedListService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VendorInvoiceBlockedListServices.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var GetHeaderData = /** @class */ (function () {
            function GetHeaderData() {
            }
            return GetHeaderData;
        }());
        Model.GetHeaderData = GetHeaderData;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=POAdvanceModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var POAdvanceController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function POAdvanceController(_cookieStore, $location, _POAdvService) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this._POAdvService = _POAdvService;
                    this.Cookie = null;
                    this.Id = null;
                    this.alert = null;
                    this.IsShow = false;
                    this.IsGiven = false;
                    this.IsPOExists = false;
                    this.IsAdvAmt = false;
                    this.Cookie = _cookieStore;
                    this.Id = $location.search().id;
                    this.POAdvService = _POAdvService;
                    this.GetHeaderData = new GCPL.Model.GetHeaderData();
                }
                POAdvanceController.prototype.$onInit = function () {
                    this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                POAdvanceController.prototype.Init = function () { };
                POAdvanceController.prototype.View = function () {
                    var _this = this;
                    this.IsShow = false;
                    this.IsGiven = false;
                    this.IsPOExists = false;
                    this.IsAdvAmt = false;
                    if (this.GetHeaderData.PONO == null || this.GetHeaderData.PONO == undefined) {
                        this.ShowHidePopUp("Please Enter PO Number");
                    }
                    else {
                        var abc = this.GetHeaderData.PONO;
                        this.POAdvService.FindHeader(this.GetHeaderData.PONO).then((function (response) {
                            _this.GetHeaderData = _this.POAdvService.GetHeaderData(response.data.Result);
                            if (_this.GetHeaderData.StatusID === "6" || _this.GetHeaderData.StatusID === "7") {
                                _this.ShowHidePopUp("Advance Payment Is Not Allowed");
                            }
                            else {
                                if (_this.GetHeaderData.Status == "PO does not exists") {
                                    _this.IsPOExists = true;
                                    _this.GetHeaderData.PONO = abc;
                                }
                                else if (_this.GetHeaderData.Status == "Given") {
                                    _this.IsShow = true;
                                    _this.IsGiven = true;
                                    _this.IsAdvAmt = true;
                                }
                                else {
                                    _this.IsShow = true;
                                }
                            }
                        }));
                    }
                };
                POAdvanceController.prototype.Save = function () {
                    var _this = this;
                    if (this.GetHeaderData.AdvAmt == null || this.GetHeaderData.AdvAmt == undefined || this.GetHeaderData.AdvAmt == "") {
                        this.ShowHidePopUp("Please Enter Advance Amount");
                    }
                    else if (parseFloat(this.GetHeaderData.TotAmt) < parseFloat(this.GetHeaderData.AdvAmt)) {
                        this.ShowHidePopUp("Advance Amount must be less than Total Amount");
                    }
                    else {
                        this.GetHeaderData.UserID = this.Cookie.get('UserInfo')['UserID'];
                        this.GetHeaderData.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                        this.POAdvService.SubmitData(this.GetHeaderData).then((function (response) {
                            if (response.data.Result == 0) {
                                _this.alert = 'Data Saved successfully.';
                                $("#errorclose").hide();
                                $("#close").show();
                            }
                            else {
                                _this.alert = 'Oops Some Error Occured';
                                $("#errorclose").show();
                                $("#close").hide();
                            }
                        }));
                    }
                };
                POAdvanceController.prototype.ShowHidePopUp = function (Message) {
                    $("#errorclose").show();
                    $("#close").hide();
                    this.alert = Message;
                };
                POAdvanceController.prototype.Close = function () {
                    location.href = "#!/POAdvanceList";
                    //this.IsShow = false;
                };
                POAdvanceController.prototype.ErrorClose = function () {
                    // location.href = "#!/DealerMaster";
                };
                POAdvanceController.$inject = ["$cookieStore", "$location", "POAdvanceService"];
                return POAdvanceController;
            }());
            var POAdvanceComponentController = /** @class */ (function () {
                function POAdvanceComponentController() {
                    this.controller = POAdvanceController;
                    this.templateUrl = "/Scripts/App/Purchase/PurchaseOrderAdvance/Template/POAdvance.html";
                }
                POAdvanceComponentController.Name = "poadvance";
                return POAdvanceComponentController;
            }());
            app.AddComponent(POAdvanceComponentController.Name, new POAdvanceComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=POAdvanceComponent.js.map
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var POAdvanceController = /** @class */ (function () {
            function POAdvanceController() {
            }
            return POAdvanceController;
        }());
        Controller.POAdvanceController = POAdvanceController;
        app.AddController("POAdvanceController", POAdvanceController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=POAdvanceController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var POAdvanceService = /** @class */ (function (_super) {
            __extends(POAdvanceService, _super);
            function POAdvanceService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                //this.apiUrl = `${this.url}/${"VendorInvoiceGrid"}`;
                _this.Cookie = _cookieStore;
                return _this;
            }
            POAdvanceService.prototype.FindHeader = function (id) {
                var config = {
                    params: {
                        PONO: id,
                        DealerID: parseInt(this.Cookie.get('UserInfo')['DealerID'])
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "POAdvance",
                    Config: config
                });
            };
            POAdvanceService.prototype.GetHeaderData = function (data) {
                var list = new model.GetHeaderData;
                list = data;
                return list;
            };
            POAdvanceService.prototype.SubmitData = function (dto) {
                var config = {
                    params: {
                        dto: dto,
                    }
                };
                return this.ajaXUtility.Post({
                    Url: this.url + "/" + "POAdvance",
                    data: dto
                });
            };
            POAdvanceService.$inject = ["$http", "$q", "$cookieStore"];
            return POAdvanceService;
        }(GCPL.Service.BaseService));
        Service.POAdvanceService = POAdvanceService;
        //inject service
        app.AddService("POAdvanceService", POAdvanceService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=POAdvanceService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var POAdvList = /** @class */ (function () {
            function POAdvList() {
            }
            return POAdvList;
        }());
        Model.POAdvList = POAdvList;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=POAdvListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var POAdvListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function POAdvListController(_cookieStore, _POAdvListService) {
                    this._cookieStore = _cookieStore;
                    this._POAdvListService = _POAdvListService;
                    this.PoNumber = null;
                    this.Status = null;
                    this.Vendorid = null;
                    this.POlist = null;
                    this.List = null;
                    this.TotalValueRs = 0;
                    this.TotalQty = 0;
                    this.VendorName = null;
                    this.FromDate = null;
                    this.Todate = null;
                    this.POStatus = null;
                    this.DealerID = null;
                    this.change = null;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.POAdvListService = _POAdvListService;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    console.log(this.DealerID);
                }
                POAdvListController.prototype.$onInit = function () {
                    var that = this;
                    this.Init();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                POAdvListController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                POAdvListController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                POAdvListController.prototype.Init = function () {
                    //  this.Search();
                    //this.POStatus = this.POItemListService.FindStatus().then((response => {
                    //    this.POStatus = this.POItemListService.GetStatus(response.data.Result);
                    //}));
                    this.FillGrid(this.NoOfRds);
                };
                //AutoFillSupplier(): void {
                //    let that = this;
                //    $("#txtVendorName").autocomplete({
                //        source: function (request, res) {
                //            that.VendornameAutofill.FilterAutoComplete(request).then((response => {
                //                console.log(response);
                //                let data = that.VendornameAutofill.GetVendorName(response.data.Result);
                //                res($.map(data, function (item, index) {
                //                    return {
                //                        label: item.VendorName,
                //                        value: item.VendorName,
                //                        id: item.VendorID,
                //                        Address1: item.Address1,
                //                        PANReferenceNo: item.PANReferenceNo,
                //                        GSTIN: item.GSTIN,
                //                        VendorStateID: item.VendorStateID
                //                    }
                //                }));
                //            }));
                //        },
                //        minLength: 2,
                //        focus: (event, ui) => {
                //            event.preventDefault();
                //        },
                //        select: function (e, ui) {
                //            let SelectedItemID = ui.item.id;
                //            that.VendorName = ui.item.value;
                //            that.Vendorid = ui.item.id;
                //        },
                //        change: function () {
                //        }
                //    });
                //}
                //Search(): void {
                //    this.FromDate = (<HTMLInputElement>document.getElementById("txtFromDate")).value;
                //    this.Todate = (<HTMLInputElement>document.getElementById("txtToDate")).value;
                //    if (this.PoNumber == null) {
                //        this.PoNumber = ''
                //    }
                //    if (this.Vendorid == null) {
                //        this.Vendorid = ''
                //    }
                //    if (this.Status == null) {
                //        this.Status = ''
                //    }
                //    if (this.FromDate == null && this.Todate == null) {
                //        this.FromDate = '';
                //        this.Todate = '';
                //    }
                //    //this.PoListService.Find(this.PoNumber, this.Status, this.Vendorid, this.FromDate, this.Todate).then((response => {
                //    //    this.POlist = this.PoListService.PurchaseOrderList(response.data.Result);
                //    //    this.TotalValueRs = 0;
                //    //    this.TotalQty = 0;
                //    //    for (var i = 0; i < this.POlist.length; i++) {
                //    //        this.TotalValueRs = this.TotalValueRs + this.POlist[i].TotalPrice;
                //    //        this.TotalQty = this.TotalQty + this.POlist[i].TotalQuantity;
                //    //        if (this.POlist[i].POStatusID == "Created") {
                //    //            console.log(this.POlist[i].POStatusID);
                //    //            this.POlist[i].ChangeText = "Change";
                //    //        }
                //    //        else {
                //    //            this.POlist[i].ChangeText = "";
                //    //        }
                //    //    }
                //    //}));
                //    this.numRecords = parseInt(this.NoOfRds);
                //    this.FillGrid(this.numRecords);
                //}
                POAdvListController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.POAdvListService.Find().then((function (response) {
                        _this.POlist = _this.POAdvListService.GetPOAdvList(response.data.Result);
                        _this.POlist.forEach(function (value, key) {
                            that.incre = key + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.POlist.slice(0, that.numRecords);
                        console.log("this.shownItems");
                        console.log(_this.shownItems);
                    }));
                };
                POAdvListController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                POAdvListController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.POlist.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                POAdvListController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.POlist.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                POAdvListController.$inject = ["$cookieStore", "POAdvListService"];
                return POAdvListController;
            }());
            var POAdvListComponentController = /** @class */ (function () {
                function POAdvListComponentController() {
                    this.controller = POAdvListController;
                    this.templateUrl = "/Scripts/App/Purchase/PurchaseOrderAdvanceList/Template/POAdvList.html";
                }
                POAdvListComponentController.Name = "poadvlistcomponent";
                return POAdvListComponentController;
            }());
            app.AddComponent(POAdvListComponentController.Name, new POAdvListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=POAdvListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var POAdvListController = /** @class */ (function (_super) {
            __extends(POAdvListController, _super);
            function POAdvListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return POAdvListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.POAdvListController = POAdvListController;
        app.AddController("POAdvListController", POAdvListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=POAdvListController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var POAdvListService = /** @class */ (function (_super) {
            __extends(POAdvListService, _super);
            function POAdvListService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/" + "POAdvance";
                _this.Cookie = _cookieStore;
                return _this;
            }
            POAdvListService.prototype.Find = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        Temp: 'ForCallingThisPerticularAPI'
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            POAdvListService.prototype.GetPOAdvList = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        PONO: item.PONO,
                        POID: item.POID,
                        DealerID: item.DealerID,
                        DealerName: item.DealerName,
                        VendorID: item.VendorID,
                        VendorName: item.VendorName,
                        TotAmt: item.TotAmt,
                        AdvAmt: item.AdvAmt
                    });
                }
                return list;
            };
            POAdvListService.$inject = ["$http", "$q", "$cookieStore"];
            return POAdvListService;
        }(GCPL.Service.BaseService));
        Service.POAdvListService = POAdvListService;
        //inject service
        app.AddService("POAdvListService", POAdvListService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=POAdvListService.js.map
//# sourceMappingURL=COAListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var COAListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function COAListController(_Service, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.COAList = null;
                    this.DealerID = null;
                    this.DelCOA = null;
                    this.SearchCOA = null;
                    this.Cookie = null;
                    this.Service = _Service;
                    this.Cookie = _cookieStore;
                    this.DelCOA = new GCPL.Model.InsertCOAModel();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                COAListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                COAListController.prototype.Init = function () {
                    this.SearchData();
                };
                COAListController.prototype.SearchData = function () {
                    var _this = this;
                    this.COAList = this.Service.FindCOAList(this.DealerID, this.SearchCOA).then((function (response) {
                        _this.COAList = _this.Service.GetCOAList(response.data.Result);
                    }));
                };
                COAListController.prototype.DeleteCOA = function (data) {
                    var _this = this;
                    this.Service.Find(data).then((function (response) {
                        _this.DelCOA = _this.Service.postCOADelete(response.data.Result);
                        _this.Init();
                        alert("Record deactivated successfully..");
                    }));
                };
                COAListController.$inject = ["COAListService", "$cookieStore"];
                return COAListController;
            }());
            var COAListComponentController = /** @class */ (function () {
                function COAListComponentController() {
                    this.controller = COAListController;
                    this.templateUrl = "/Scripts/App/Account/COAList/Template/_COAList.html";
                }
                COAListComponentController.Name = "coalistcomponent";
                return COAListComponentController;
            }());
            app.AddComponent(COAListComponentController.Name, new COAListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=COAListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var COAListController = /** @class */ (function (_super) {
            __extends(COAListController, _super);
            function COAListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return COAListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.COAListController = COAListController;
        app.AddController("COAListController", COAListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=COAListController.js.map
//PostInsertCOA
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var COAListService = /** @class */ (function (_super) {
            __extends(COAListService, _super);
            function COAListService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url; ///${"LeadAssessmentSubmit"}`;
                return _this;
            }
            COAListService.prototype.FindCOAList = function (data, COACode) {
                var config = {
                    params: {
                        DealerID: data,
                        COACode: COACode == undefined ? "" : COACode
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/CtrlCOAGridFill",
                    Config: config
                });
            };
            COAListService.prototype.GetCOAList = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        ID: item.ID,
                        COACode: item.COACode,
                        CountryID: item.CountryID,
                        COACurrency: item.COACurrency,
                        COADescription: item.COADescription,
                        Dealer: item.Dealer,
                        AlternateCurrency: item.AlternateCurrency,
                        Status: item.Status == "True" ? "Active" : "Deactive",
                        StartDate: item.StartDate,
                        CreatedBy: item.CreatedBy,
                        ModifiedBy: item.ModifiedBy,
                        IsGlobal: item.IsGlobal,
                        DealerID: item.DealerID
                    });
                }
                return list;
            };
            COAListService.prototype.Find = function (data) {
                var config = {
                    params: {
                        ID: data
                    }
                };
                return this.ajaXUtility.Post({
                    Url: this.apiUrl + "/PostDeactivateCOA",
                    data: data,
                    Config: config
                });
            };
            COAListService.prototype.postCOADelete = function (data) {
                var url = this.apiUrl;
                this.$http.post(url, data).then(function (response) {
                });
            };
            COAListService.$inject = ["$http", "$q"];
            return COAListService;
        }(GCPL.Service.BaseService));
        Service.COAListService = COAListService;
        app.AddService("COAListService", COAListService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=COAListService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var InsertCOAModel = /** @class */ (function () {
            function InsertCOAModel() {
            }
            return InsertCOAModel;
        }());
        Model.InsertCOAModel = InsertCOAModel;
        var MyDealer = /** @class */ (function () {
            function MyDealer() {
            }
            return MyDealer;
        }());
        Model.MyDealer = MyDealer;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=COAModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var InsertCOA1 = GCPL.Model.InsertCOAModel;
            var COAController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function COAController(_cookieStore, _CurrencyService, _Service, $location, _Cservice, _window) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this._window = _window;
                    this.UserID = null;
                    this.DealerID = null;
                    this.DealerNameddl = null;
                    this.Currency = null;
                    this.Currency1 = null;
                    this.alert = null;
                    this.editCOA = null;
                    this.ID = null;
                    this.CountryDropDown = null;
                    this.Cookie = null;
                    this.InsertCOA = null;
                    this.Cookie = _cookieStore;
                    this.Currencyservice = _CurrencyService;
                    this.Service = _Service;
                    this.Cservice = _Cservice;
                    this.InsertCOA = new InsertCOA1();
                    this.ID = $location.search().ID;
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                COAController.prototype.Close = function () {
                    this._window.location.href = "#!/COAList";
                };
                COAController.prototype.$onInit = function () {
                    this.Init();
                    var that = this;
                    $("#txtFromDate").datepicker({
                        dateFormat: 'yy/mm/dd', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                COAController.prototype.selectFromDate = function (e) {
                    document.getElementById("hfFromDate").value = e;
                };
                //Page Load Define Values//
                COAController.prototype.Init = function () {
                    var _this = this;
                    var n = new Date();
                    var y = n.getFullYear();
                    var m = n.getMonth() + 1;
                    var d = n.getDate();
                    if (m < 10) {
                        $("#txtFromDate").val(y.toString() + "/0" + m.toString() + "/" + d.toString());
                    }
                    else {
                        $("#txtFromDate").val(y.toString() + "/" + m.toString() + "/" + d.toString());
                    }
                    this.Currency = this.Currencyservice.Find().then((function (response) {
                        _this.Currency = _this.Currencyservice.GetCurrency(response.data.Result);
                    }));
                    this.Currency1 = this.Currencyservice.Find().then((function (response) {
                        _this.Currency1 = _this.Currencyservice.GetCurrency(response.data.Result);
                    }));
                    this.DealerNameddl = this.Service.FindDealer(this.DealerID).then((function (response) {
                        _this.DealerNameddl = _this.Service.GetDealer(response.data.Result);
                        _this.InsertCOA.Dealer = _this.DealerNameddl.DealerName;
                    }));
                    this.CountryDropDown = this.Cservice.Find().then((function (response) {
                        _this.CountryDropDown = _this.Cservice.GetCountryName(response.data.Result);
                        var that = _this;
                        _this.CountryDropDown.forEach(function (value, key) {
                            that.InsertCOA.CountryID = "99";
                            that.InsertCOA.COACurrency = "99";
                        });
                    }));
                    if (this.ID !== "") {
                        this.EditCOAMasterData(this.ID);
                    }
                    else { }
                };
                COAController.prototype.ChangeCurrency = function (data) {
                    var that = this;
                    this.Currency.forEach(function (value, key) {
                        console.log(value);
                        if (data == value.CurrencyID.toString()) {
                            that.InsertCOA.COACurrency = value.CurrencyID.toString();
                        }
                    });
                };
                COAController.prototype.InsertCOAData = function () {
                    var _this = this;
                    if (this.InsertCOA.COACode == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter COA Code";
                    }
                    else if (this.InsertCOA.COADescription == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter COA Description";
                    }
                    else if (this.InsertCOA.Dealer == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Dealer";
                    }
                    else if (this.InsertCOA.CountryID == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Country";
                    }
                    else if (this.InsertCOA.COACurrency == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Currency";
                    }
                    else if (this.InsertCOA.Status == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Status";
                    }
                    //else if (this.InsertCOA.StartDate == undefined) {
                    //}
                    else {
                        this.InsertCOA.StartDate = document.getElementById("txtFromDate").value;
                        this.InsertCOA.CreatedBy = this.UserID;
                        this.InsertCOA.ModifiedBy = this.UserID;
                        this.InsertCOA.DealerID = this.DealerID;
                        this.Service.PostInsertCOA(this.InsertCOA).then((function (response) {
                            if (response.data.Result != 0) {
                                _this.alert = 'COA inserted successfully';
                                $("#errorclose").hide();
                                $("#close").show();
                                //location.href = "#!/COAList"
                            }
                            else {
                                _this.alert = 'Oops Some Error Occured';
                                $("#errorclose").show();
                                $("#close").hide();
                            }
                        }));
                    }
                };
                COAController.prototype.EditCOAMasterData = function (data) {
                    var _this = this;
                    //this.InsertCOA.StartDate = (<HTMLInputElement>document.getElementById("txtFromDate")).value;            
                    this.Service.FindEdit(this.ID).then((function (response) {
                        _this.InsertCOA = _this.Service.getCOAEdit(response.data.Result);
                        _this.InsertCOA.Status = _this.InsertCOA.Status == "True" ? "1" : "2";
                        $("#txtFromDate").val(_this.InsertCOA.StartDate);
                    }));
                };
                COAController.prototype.UpdateCOAMasterData = function (data) {
                    var _this = this;
                    if (this.InsertCOA.COACode == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter COA Code";
                    }
                    else if (this.InsertCOA.COADescription == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter COA Description";
                    }
                    else if (this.InsertCOA.Dealer == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Dealer";
                    }
                    else if (this.InsertCOA.CountryID == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Country";
                    }
                    else if (this.InsertCOA.COACurrency == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Currency";
                    }
                    else if (this.InsertCOA.Status == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Status";
                    }
                    //else if (this.InsertCOA.StartDate == undefined) {
                    //}
                    else {
                        this.InsertCOA.StartDate = document.getElementById("txtFromDate").value;
                        this.InsertCOA.CreatedBy = this.UserID;
                        this.InsertCOA.ModifiedBy = this.UserID;
                        this.InsertCOA.DealerID = this.DealerID;
                        this.Service.PostUpdateCOA(this.InsertCOA).then((function (response) {
                            if (response.data.Result != 0) {
                                _this.alert = 'COA updated successfully';
                                $("#errorclose").hide();
                                $("#close").show();
                                location.href = "#!/COAList";
                            }
                            else {
                                _this.alert = 'Oops Some Error Occured';
                                $("#errorclose").show();
                                $("#close").hide();
                            }
                        }));
                    }
                };
                COAController.$inject = ["$cookieStore", "CurrencyService", "COAService", "$location", "CountryService", "$window"];
                return COAController;
            }());
            var COAComponentController = /** @class */ (function () {
                function COAComponentController() {
                    this.controller = COAController;
                    this.templateUrl = "/Scripts/App/Account/COA/Template/_COA.html";
                }
                COAComponentController.Name = "coacomponent";
                return COAComponentController;
            }());
            app.AddComponent(COAComponentController.Name, new COAComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=COAComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var COAController = /** @class */ (function (_super) {
            __extends(COAController, _super);
            function COAController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return COAController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.COAController = COAController;
        app.AddController("COAController", COAController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=COAController.js.map
//PostInsertCOA
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var COAService = /** @class */ (function (_super) {
            __extends(COAService, _super);
            function COAService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url; ///${"LeadAssessmentSubmit"}`;
                return _this;
            }
            COAService.prototype.PostInsertCOA = function (data) {
                var url = this.apiUrl + "/PostInsertCOA";
                // console.log(url);
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            COAService.prototype.FindEdit = function (data) {
                var config = {
                    params: {
                        ID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/CtrlCOAEdit",
                    Config: config
                });
            };
            COAService.prototype.getCOAEdit = function (data) {
                var obj = new model.InsertCOAModel();
                obj.ID = data.ID,
                    obj.COACode = data.COACode,
                    obj.COADescription = data.COADescription,
                    obj.Dealer = data.Dealer,
                    obj.COACurrency = data.COACurrency,
                    obj.AlternateCurrency = data.AlternateCurrency,
                    obj.Status = data.Status,
                    obj.StartDate = data.StartDate,
                    //obj.DealerID = data.DealerID,
                    obj.CreatedBy = data.CreatedBy,
                    obj.ModifiedBy = data.ModifiedBy,
                    obj.CountryID = data.Country,
                    obj.IsGlobal = data.IsGlobal;
                return obj;
            };
            COAService.prototype.FindDealer = function (data) {
                debugger;
                var config = {
                    params: {
                        UserId: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/Dealer_Name",
                    Config: config
                });
            };
            COAService.prototype.GetDealer = function (data) {
                var obj = new model.MyDealer();
                obj.DealerID = data.DealerID,
                    obj.DealerName = data.Dealername;
                return obj;
            };
            COAService.prototype.PostUpdateCOA = function (data) {
                var url = this.apiUrl + "/PostInsertCOA";
                // console.log(url);
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            COAService.$inject = ["$http", "$q"];
            return COAService;
        }(GCPL.Service.BaseService));
        Service.COAService = COAService;
        app.AddService("COAService", COAService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=COAService.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var VendConPerListController = /** @class */ (function () {
                function VendConPerListController(_ContactPersonListServiceA, _cookieStore, $location, _DeleteContactPersonservice) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.ContactPersonList = null;
                    this.alert = null;
                    this.ContactPersonID = null;
                    this.DealerID = null;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.ContactPersonListServiceA = _ContactPersonListServiceA;
                    this.DeleteContactPersonservice = _DeleteContactPersonservice;
                }
                VendConPerListController.prototype.$onInit = function () {
                    this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                VendConPerListController.prototype.Init = function () {
                    var _this = this;
                    // this.custnameget(this.CustomerID);
                    this.ContactPersonList = this.ContactPersonListServiceA.Find(this.DealerID, "Vendor").then((function (response) {
                        _this.ContactPersonList = _this.ContactPersonListServiceA.GetSearchContactPersonListA(response.data.Result);
                    }));
                };
                //delete
                VendConPerListController.prototype.DeleteContactPerson = function (ContactPersonID) {
                    var _this = this;
                    this.DeleteContactPersonservice.Find(ContactPersonID).then((function (response) {
                        _this.DeleteContactPersonservice.postContactPersonDelete(response.data.Result);
                        _this.Init();
                        alert("Record deleted successfully..");
                    }));
                };
                VendConPerListController.prototype.Close = function () {
                    this.Init();
                    // $("#myTable").show();  
                };
                VendConPerListController.$inject = ["ContactPersonListServiceA", "$cookieStore", "$location", "DeleteContactPersonservice"];
                return VendConPerListController;
            }());
            var VendConPerListControllerComponent = /** @class */ (function () {
                function VendConPerListControllerComponent() {
                    this.controller = VendConPerListController;
                    this.templateUrl = "/Scripts/App/Master/VendorContactPersonList/Template/VendConPerList.html";
                }
                VendConPerListControllerComponent.Name = "vendconperlistcontrollercomponent";
                return VendConPerListControllerComponent;
            }());
            app.AddComponent(VendConPerListControllerComponent.Name, new VendConPerListControllerComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VendConPerListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var VendConPerListController = /** @class */ (function (_super) {
            __extends(VendConPerListController, _super);
            function VendConPerListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return VendConPerListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.VendConPerListController = VendConPerListController;
        app.AddController("VendConPerListController", VendConPerListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VendConPerListController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var CustConPerListController = /** @class */ (function () {
                function CustConPerListController(_ContactPersonListServiceA, _cookieStore, $location, _DeleteContactPersonservice) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.CMRList = null;
                    this.DealerID = null;
                    this.UserID = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.ContactPersonList = null;
                    this.alert = null;
                    this.ContactPersonID = null;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.ContactPersonListServiceA = _ContactPersonListServiceA;
                    this.DeleteContactPersonservice = _DeleteContactPersonservice;
                }
                CustConPerListController.prototype.$onInit = function () {
                    this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                CustConPerListController.prototype.Init = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                CustConPerListController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.ContactPersonList = this.ContactPersonListServiceA.Find(this.DealerID, "Customer").then((function (response) {
                        _this.ContactPersonList = _this.ContactPersonListServiceA.GetSearchContactPersonListA(response.data.Result);
                        if (_this.ContactPersonList.length > 0) {
                            $("#nullDataDiv").hide();
                            _this.ContactPersonList.forEach(function (value, key) {
                                that.incre = parseInt(key) + 1;
                            });
                            _this.maxPages = (that.incre / that.numRecords);
                            _this.ShowBack = false;
                            _this.ShowNext = that.maxPages > 1 ? true : false;
                            _this.shownItems = _this.ContactPersonList.slice(0, that.numRecords);
                        }
                        else {
                            $("#nullDataDiv").show();
                        }
                    }));
                };
                CustConPerListController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                CustConPerListController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ContactPersonList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                CustConPerListController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ContactPersonList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                //delete
                CustConPerListController.prototype.DeleteContactPerson = function (ContactPersonID) {
                    var _this = this;
                    this.DeleteContactPersonservice.Find(ContactPersonID).then((function (response) {
                        _this.DeleteContactPersonservice.postContactPersonDelete(response.data.Result);
                        _this.Init();
                        alert("Record deleted successfully..");
                    }));
                };
                CustConPerListController.prototype.Close = function () {
                    this.Init();
                    // $("#myTable").show();  
                };
                CustConPerListController.$inject = ["ContactPersonListServiceA", "$cookieStore", "$location", "DeleteContactPersonservice"];
                return CustConPerListController;
            }());
            var CustConPerListControllerComponent = /** @class */ (function () {
                function CustConPerListControllerComponent() {
                    this.controller = CustConPerListController;
                    this.templateUrl = "/Scripts/App/Master/CustomerContactPersonList/Template/CustConPerList.html";
                }
                CustConPerListControllerComponent.Name = "custconperlistcontrollercomponent";
                return CustConPerListControllerComponent;
            }());
            app.AddComponent(CustConPerListControllerComponent.Name, new CustConPerListControllerComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustConPerListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var CustConPerListController = /** @class */ (function (_super) {
            __extends(CustConPerListController, _super);
            function CustConPerListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CustConPerListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.CustConPerListController = CustConPerListController;
        app.AddController("CustConPerListController", CustConPerListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustConPerListController.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var AccountAssignmentListModel = /** @class */ (function () {
            function AccountAssignmentListModel() {
            }
            return AccountAssignmentListModel;
        }());
        Model.AccountAssignmentListModel = AccountAssignmentListModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
(function (GCPL) {
    var Model;
    (function (Model) {
        var AccountAssignmentSubmitModel = /** @class */ (function () {
            function AccountAssignmentSubmitModel() {
            }
            return AccountAssignmentSubmitModel;
        }());
        Model.AccountAssignmentSubmitModel = AccountAssignmentSubmitModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
(function (GCPL) {
    var Model;
    (function (Model) {
        var AccountAssignmentDetailModel = /** @class */ (function () {
            function AccountAssignmentDetailModel() {
            }
            return AccountAssignmentDetailModel;
        }());
        Model.AccountAssignmentDetailModel = AccountAssignmentDetailModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
(function (GCPL) {
    var Model;
    (function (Model) {
        var TransactionNameModel = /** @class */ (function () {
            function TransactionNameModel() {
            }
            return TransactionNameModel;
        }());
        Model.TransactionNameModel = TransactionNameModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
(function (GCPL) {
    var Model;
    (function (Model) {
        var ItemSubTypeDto = /** @class */ (function () {
            function ItemSubTypeDto() {
            }
            return ItemSubTypeDto;
        }());
        Model.ItemSubTypeDto = ItemSubTypeDto;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
(function (GCPL) {
    var Model;
    (function (Model) {
        var AccountNameCodeModel = /** @class */ (function () {
            function AccountNameCodeModel() {
            }
            return AccountNameCodeModel;
        }());
        Model.AccountNameCodeModel = AccountNameCodeModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AccountAssignmentlistModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var AccountAssignmentListController = /** @class */ (function () {
                function AccountAssignmentListController(_Service, _cookieStore, $location, _window) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this._window = _window;
                    this.list = null;
                    this.Cookie = null;
                    this.Service = _Service;
                    this.Cookie = _cookieStore;
                }
                AccountAssignmentListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                AccountAssignmentListController.prototype.Init = function () {
                    var _this = this;
                    this.Service.Find().then((function (response) {
                        _this.list = _this.Service.List(response.data.Result);
                    }));
                };
                AccountAssignmentListController.prototype.Edit = function (data) {
                    this._window.location.href = "#!/AccountAssignmentMaster?id=" + data;
                };
                AccountAssignmentListController.$inject = ["AccountAssignmentListService", "$cookieStore", "$location", "$window"];
                return AccountAssignmentListController;
            }());
            var AccountAssignmentListComponentController = /** @class */ (function () {
                function AccountAssignmentListComponentController() {
                    this.controller = AccountAssignmentListController;
                    this.templateUrl = "/Scripts/App/AccountAssignment/AccountAssignmentList/Template/_AccountAssignmentList.html";
                }
                AccountAssignmentListComponentController.Name = "accountAssignmentList";
                return AccountAssignmentListComponentController;
            }());
            app.AddComponent(AccountAssignmentListComponentController.Name, new AccountAssignmentListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AccountAssignmentListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var AccountAssignmentListContoller = /** @class */ (function (_super) {
            __extends(AccountAssignmentListContoller, _super);
            function AccountAssignmentListContoller() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AccountAssignmentListContoller;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.AccountAssignmentListContoller = AccountAssignmentListContoller;
        app.AddController("AccountAssignmentListContoller", AccountAssignmentListContoller);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AccountAssignmentlistController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var AccountAssignmentListService = /** @class */ (function (_super) {
            __extends(AccountAssignmentListService, _super);
            function AccountAssignmentListService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/" + "GetAccountAssignmentList";
                _this.Cookie = _cookieStore;
                return _this;
            }
            AccountAssignmentListService.prototype.AutofillAccountName = function (data) {
                var config = {
                    params: {
                        AccountName: data.term,
                        Dealerid: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "AutofillAccountName",
                    Config: config
                });
            };
            AccountAssignmentListService.prototype.AutofillAccountCode = function (data) {
                var config = {
                    params: {
                        accountcode: data.term,
                        Dealerid: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "AutofillAccountCode",
                    Config: config
                });
            };
            AccountAssignmentListService.prototype.Find = function () {
                var config = {
                    params: {
                        DealerId: this.Cookie.get('UserInfo')['DealerID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            AccountAssignmentListService.prototype.FindDetail = function (data) {
                var config = {
                    params: {
                        DealerId: this.Cookie.get('UserInfo')['DealerID'],
                        HeaderId: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "GetAccountAssignmentDetailList",
                    Config: config
                });
            };
            AccountAssignmentListService.prototype.BindItemSubTypeddl = function (data) {
                var config = {
                    params: {
                        ItemTypeId: data,
                        DealerId: this.Cookie.get('UserInfo')['DealerID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "GetItemSubTypeDropdown",
                    Config: config
                });
            };
            AccountAssignmentListService.prototype.BindTransactionNameddl = function () {
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "GetTransactionForAccountAssignment"
                });
            };
            AccountAssignmentListService.prototype.Post = function (dto) {
                return this.ajaXUtility.Post({
                    Url: this.url + "/" + "PostAccountAssignmentMaster",
                    data: dto
                });
            };
            AccountAssignmentListService.prototype.List = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        id: item.id,
                        Isglobal: '',
                        Transactionid: item.Transactionid,
                        Title: item.Title,
                        TaxProcedureId: item.TaxProcedureId,
                        TaxProcedureName: item.TaxProcedureName,
                        ItemTypeId: item.ItemTypeId,
                        ItemType: item.ItemType,
                        ItemSubTypeId: item.ItemSubTypeId,
                        ItemSubType: item.ItemSubType,
                        GlDebitAccountId: '',
                        Debitaccountname: '',
                        debitGlAccountCode: '',
                        GlCreditAccountId: '',
                        creditaccountname: '',
                        creditGlAccountCode: '',
                        dealerid: '',
                        CreatedBy: '',
                        GroupID: ''
                    });
                }
                return list;
            };
            AccountAssignmentListService.prototype.GetGrid = function (data) {
                var list = new model.AccountAssignmentSubmitModel;
                list.list = data.list;
                list.header = data.header;
                return list;
            };
            AccountAssignmentListService.prototype.Dropdown = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        TransactionName: item.TransactionName,
                        Transactionid: item.Transactionid
                    });
                }
                return list;
            };
            AccountAssignmentListService.prototype.DropdownSubtype = function (data) {
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        id: item.id,
                        itemsubtype: item.itemsubtype
                    });
                }
                return list;
            };
            AccountAssignmentListService.prototype.GetAutofillAccountName = function (data) {
                var list = Array();
                for (var _i = 0, data_4 = data; _i < data_4.length; _i++) {
                    var item = data_4[_i];
                    list.push({
                        id: item.id,
                        AccountName: item.AccountName,
                        GlAccountCode: item.GlAccountCode,
                        GlobalGLID: item.GlobalGLID
                    });
                }
                return list;
            };
            AccountAssignmentListService.prototype.FindAccGroup = function () {
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "GetAccGroupList"
                });
            };
            AccountAssignmentListService.prototype.GetAccGroup = function (data) {
                var list = Array();
                for (var _i = 0, data_5 = data; _i < data_5.length; _i++) {
                    var item = data_5[_i];
                    list.push({
                        GroupID: item.id,
                        Description: item.description
                    });
                }
                return list;
            };
            AccountAssignmentListService.prototype.FindRule = function () {
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "GetAccRuleList"
                });
            };
            AccountAssignmentListService.prototype.GetRule = function (data) {
                var list = Array();
                for (var _i = 0, data_6 = data; _i < data_6.length; _i++) {
                    var item = data_6[_i];
                    list.push({
                        RuleID: item.ruleID,
                        Description: item.description
                    });
                }
                return list;
            };
            AccountAssignmentListService.$inject = ["$http", "$q", "$cookieStore"];
            return AccountAssignmentListService;
        }(GCPL.Service.BaseService));
        Service.AccountAssignmentListService = AccountAssignmentListService;
        //inject service
        app.AddService("AccountAssignmentListService", AccountAssignmentListService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AccountAssignmentlistService.js.map
//# sourceMappingURL=AccountAssignmentModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var Header = GCPL.Model.AccountAssignmentListModel;
            var Detail = GCPL.Model.AccountAssignmentDetailModel;
            var AccountAssignmentMasterController = /** @class */ (function () {
                function AccountAssignmentMasterController(_Service, _cookieStore, _FillItemType, _window, $location) {
                    this._cookieStore = _cookieStore;
                    this._window = _window;
                    this.$location = $location;
                    this.IsDisplayModalPopup = false;
                    this.AccGroup = null;
                    this.ItemType = null;
                    this.alert = null;
                    this.Rule = null;
                    this.Dropdownsubtype = null;
                    this.list = null;
                    this.GridList = null;
                    this.TransactionDropdown = null;
                    this.Header = null;
                    this.Detail = null;
                    this.Grid = null;
                    this.Id = null;
                    this.Cookie = null;
                    this.Service = _Service;
                    this.Header = new Header();
                    this.Detail = new Detail();
                    this.Cookie = _cookieStore;
                    this.FillItemType = _FillItemType;
                    this.GridList = new GCPL.Model.AccountAssignmentSubmitModel();
                    this.Grid = new Array();
                    this.Id = $location.search().id;
                    this.Header.dealerid = this.Cookie.get('UserInfo')['DealerID'];
                }
                AccountAssignmentMasterController.prototype.$onInit = function () {
                    this.Init();
                    //  this.Header.GroupID = "-1";
                    var that = this;
                    $("#txtDebitAccount").autocomplete({
                        source: function (request, res) {
                            that.Service.AutofillAccountName(request).then((function (response) {
                                var data = that.Service.GetAutofillAccountName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    console.log(item);
                                    return {
                                        label: item.AccountName,
                                        value: item.AccountName,
                                        id: item.id,
                                        GlAccountCode: item.GlAccountCode,
                                        GlobalGLID: item.GlobalGLID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedHSNCode = ui.item.id;
                            that.Detail.Glaccountname = ui.item.label;
                            that.Detail.Glaccountname = ui.item.label;
                            that.Detail.GlAccountCode = ui.item.GlAccountCode;
                            that.Detail.id = ui.item.id;
                            that.Detail.GlAccountId = ui.item.GlobalGLID;
                        },
                        change: function () {
                        }
                    });
                    $("#txtDebitAccCode").autocomplete({
                        source: function (request, res) {
                            that.Service.AutofillAccountCode(request).then((function (response) {
                                var data = that.Service.GetAutofillAccountName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    console.log(item);
                                    return {
                                        label: item.GlAccountCode,
                                        value: item.GlAccountCode,
                                        id: item.id,
                                        GlAccountName: item.AccountName,
                                        GlobalGLID: item.GlobalGLID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedHSNCode = ui.item.id;
                            that.Detail.GlAccountCode = ui.item.label;
                            that.Detail.GlAccountCode = ui.item.label;
                            that.Detail.Glaccountname = ui.item.GlAccountName;
                            that.Detail.id = ui.item.id;
                            that.Detail.GlAccountId = ui.item.GlobalGLID;
                        },
                        change: function () {
                        }
                    });
                };
                //Page Load Define Values//
                AccountAssignmentMasterController.prototype.Init = function () {
                    var _this = this;
                    this.Service.BindTransactionNameddl().then((function (response) {
                        _this.TransactionDropdown = _this.Service.Dropdown(response.data.Result);
                    }));
                    this.ItemType = this.FillItemType.Find().then((function (response) {
                        _this.ItemType = _this.FillItemType.GetItemType(response.data.Result);
                    }));
                    this.AccGroup = this.Service.FindAccGroup().then((function (response) {
                        _this.AccGroup = _this.Service.GetAccGroup(response.data.Result);
                    }));
                    this.Rule = this.Service.FindRule().then((function (response) {
                        _this.Rule = _this.Service.GetRule(response.data.Result);
                    }));
                    this.Service.FindDetail(this.Id).then((function (response) {
                        _this.GridList = _this.Service.GetGrid(response.data.Result);
                        _this.Grid = _this.GridList.list;
                        _this.Header = _this.GridList.header;
                        for (var i = 0; i < _this.Grid.length; i++) {
                            if (_this.Grid[i].GlAccountId === "275" ||
                                _this.Grid[i].GlAccountId === "276" ||
                                _this.Grid[i].GlAccountId === "277" ||
                                _this.Grid[i].GlAccountId === "278" ||
                                _this.Grid[i].GlAccountId === "279" ||
                                _this.Grid[i].GlAccountId === "280" ||
                                _this.Grid[i].GlAccountId === "281" ||
                                _this.Grid[i].GlAccountId === "282") {
                                _this.Grid[i].EditText = "";
                            }
                            else {
                                _this.Grid[i].EditText = "Edit";
                            }
                        }
                    }));
                };
                AccountAssignmentMasterController.prototype.OnModalBoxClose = function (item) {
                    this._window.location.href = "#!/AccountAssignmentList";
                };
                AccountAssignmentMasterController.prototype.GetItemSubType = function () {
                    var _this = this;
                    this.Service.BindItemSubTypeddl(this.Header.ItemTypeId).then((function (response) {
                        _this.Dropdownsubtype = _this.Service.DropdownSubtype(response.data.Result);
                    }));
                };
                AccountAssignmentMasterController.prototype.InsertAccountAssignment = function () {
                    console.log(this.Header.GroupID);
                    this.Header.Isglobal = '0';
                    this.Header.dealerid = this.Cookie.get('UserInfo')['DealerID'];
                    this.Header.TaxProcedureName = 'INTAX';
                    console.log(this.Header);
                    //this.Service.Post(this.Header).then((response => {
                    //    this.alert = "Created Successfully";
                    //}));
                };
                AccountAssignmentMasterController.prototype.Close = function () {
                    //this._window.location.href = "#!/AccountAssignmentMaster?id=" + this.Id;
                };
                AccountAssignmentMasterController.prototype.Add = function () {
                    var _this = this;
                    debugger;
                    var count = 0;
                    if (this.Detail.GlAccountId === "275" ||
                        this.Detail.GlAccountId === "276" ||
                        this.Detail.GlAccountId === "277" ||
                        this.Detail.GlAccountId === "278" ||
                        this.Detail.GlAccountId === "279" ||
                        this.Detail.GlAccountId === "280" ||
                        this.Detail.GlAccountId === "281" ||
                        this.Detail.GlAccountId === "282") {
                        count++;
                    }
                    if (count === 0) {
                        if (this.Detail.Postingkeyid == "1") {
                            this.Detail.PostingKeyName = "Debit";
                        }
                        else if (this.Detail.Postingkeyid == "2") {
                            this.Detail.PostingKeyName = "Credit";
                        }
                        if (this.Detail.RuleID == "1") {
                            this.Detail.RuleName = "Price Calculation";
                        }
                        else if (this.Detail.RuleID == "2") {
                            this.Detail.RuleName = "Calculated Amount - Paid or Received";
                        }
                        else if (this.Detail.RuleID == "3") {
                            this.Detail.RuleName = "Total Amounts with  GST";
                        }
                        else if (this.Detail.RuleID == "4") {
                            this.Detail.RuleName = "Tax Calculations";
                        }
                        else if (this.Detail.RuleID == "5") {
                            this.Detail.RuleName = "Total Price";
                        }
                        else if (this.Detail.RuleID == "6") {
                            this.Detail.RuleName = "MAP Calculation";
                        }
                        var len = 0;
                        var that = this;
                        if (this.Grid == null) {
                            len = 0;
                        }
                        else {
                            len = this.Grid.length;
                        }
                        if (this.Grid !== null && this.Grid !== 'undefined') {
                            //var index = this.Grid.findIndex(x => x.id == this.Detail.id);
                            var index = this.Grid.findIndex(function (x) { return x.id == _this.Detail.id; });
                            if (index !== -1) {
                                this.Grid[index] = this.Detail;
                            }
                            else {
                                this.Grid[index] = this.Detail;
                                var len_1 = this.Grid.length;
                                this.Detail.id = len_1 + 1;
                                this.Grid.push(this.Detail);
                            }
                            for (var i = 0; i < this.Grid.length; i++) {
                                if (this.Grid[i].GlAccountId === "275" ||
                                    this.Grid[i].GlAccountId === "276" ||
                                    this.Grid[i].GlAccountId === "277" ||
                                    this.Grid[i].GlAccountId === "278" ||
                                    this.Grid[i].GlAccountId === "279" ||
                                    this.Grid[i].GlAccountId === "280" ||
                                    this.Grid[i].GlAccountId === "281" ||
                                    this.Grid[i].GlAccountId === "282") {
                                    this.Grid[i].EditText = "";
                                }
                                else {
                                    this.Grid[i].EditText = "Edit";
                                }
                            }
                            this.Detail = null;
                            this.alert = "Account Added";
                        }
                        else {
                            this.Grid = new Array();
                            var len_2 = 0;
                            this.Detail.id = len_2 + 1;
                            this.Grid.push(this.Detail);
                            this.Detail = null;
                            for (var i = 0; i < this.Grid.length; i++) {
                                if (this.Grid[i].GlAccountId === "275" ||
                                    this.Grid[i].GlAccountId === "276" ||
                                    this.Grid[i].GlAccountId === "277" ||
                                    this.Grid[i].GlAccountId === "278" ||
                                    this.Grid[i].GlAccountId === "279" ||
                                    this.Grid[i].GlAccountId === "280" ||
                                    this.Grid[i].GlAccountId === "281" ||
                                    this.Grid[i].GlAccountId === "282") {
                                    this.Grid[i].EditText = "";
                                }
                                else {
                                    this.Grid[i].EditText = "Edit";
                                }
                            }
                            this.alert = "Account Added";
                        }
                    }
                    else {
                        this.alert = "You can not assign GST accounts";
                    }
                };
                AccountAssignmentMasterController.prototype.Submit = function () {
                    var _this = this;
                    debugger;
                    if (this.Header.Transactionid == undefined) {
                        this.alert = "Transaction Name is Required";
                    }
                    else if (this.Header.TaxProcedureId == undefined) {
                        this.alert = "Tax Procedure Name is Required";
                    }
                    else if (this.Header.ItemTypeId == undefined) {
                        this.alert = "Item Type  is Required";
                    }
                    else if (this.Header.ItemSubTypeId == undefined) {
                        this.alert = "Item Sub Type  is Required";
                    }
                    else if (this.Header.GroupID == undefined) {
                        this.alert = "Group Name is Required";
                    }
                    else {
                        // this.Header.id = this.Id;
                        if (this.Header.TaxProcedureId = "1") {
                            this.Header.TaxProcedureName = 'INTAX';
                        }
                        else {
                            this.Header.TaxProcedureName = "";
                        }
                        this.GridList.header = this.Header;
                        this.GridList.list = this.Grid;
                        console.log(this.GridList);
                        this.Service.Post(this.GridList).then(function (response) {
                            // this.IsDisplayModalPopup = true;
                            _this.alert = "Data Successfully Inserted";
                        });
                    }
                };
                AccountAssignmentMasterController.prototype.lineedit = function (data) {
                    console.log(this.Grid);
                    debugger;
                    for (var i = 0; i < this.Grid.length; i++) {
                        if (this.Grid[i].id === data) {
                            this.Detail = new GCPL.Model.AccountAssignmentDetailModel();
                            this.Detail.GlAccountCode = this.Grid[i].GlAccountCode;
                            this.Detail.Glaccountname = this.Grid[i].Glaccountname;
                            this.Detail.Postingkeyid = this.Grid[i].Postingkeyid;
                            this.Detail.PostingKeyName = this.Grid[i].PostingKeyName;
                            this.Detail.id = this.Grid[i].id;
                        }
                    }
                };
                AccountAssignmentMasterController.$inject = ["AccountAssignmentListService", "$cookieStore", "ItemTypeDropdownService", "$window", "$location"];
                return AccountAssignmentMasterController;
            }());
            var AccountAssignmentMasterComponentController = /** @class */ (function () {
                function AccountAssignmentMasterComponentController() {
                    this.controller = AccountAssignmentMasterController;
                    this.templateUrl = "/Scripts/App/AccountAssignment/AccountAssignmentMaster/Template/_AccountAssignmentMaster.html";
                }
                AccountAssignmentMasterComponentController.Name = "accountAssignmentMaster";
                return AccountAssignmentMasterComponentController;
            }());
            app.AddComponent(AccountAssignmentMasterComponentController.Name, new AccountAssignmentMasterComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AccountAssignmentMasterComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var AccountAssignmentMasterContoller = /** @class */ (function (_super) {
            __extends(AccountAssignmentMasterContoller, _super);
            function AccountAssignmentMasterContoller() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AccountAssignmentMasterContoller;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.AccountAssignmentMasterContoller = AccountAssignmentMasterContoller;
        app.AddController("AccountAssignmentMasterContoller", AccountAssignmentMasterContoller);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AccountAssignmentController.js.map
//# sourceMappingURL=AccountAssignmentServices.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var InsertGLSubGroupModel = /** @class */ (function () {
            function InsertGLSubGroupModel() {
            }
            return InsertGLSubGroupModel;
        }());
        Model.InsertGLSubGroupModel = InsertGLSubGroupModel;
        var GLAccountGroupDDL = /** @class */ (function () {
            function GLAccountGroupDDL() {
            }
            return GLAccountGroupDDL;
        }());
        Model.GLAccountGroupDDL = GLAccountGroupDDL;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLSubGroupModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var InsertGLSubGroup1 = GCPL.Model.InsertGLSubGroupModel;
            var GLSubGroupController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function GLSubGroupController(_cookieStore, _Service, $location, _window) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this._window = _window;
                    this.UserID = null;
                    this.DealerID = null;
                    this.alert = null;
                    this.editCOA = null;
                    this.Id = null;
                    this.GLGroupDropdown = null;
                    this.Cookie = null;
                    this.InsertGLSubGroup = null;
                    this.Cookie = _cookieStore;
                    this.Service = _Service;
                    this.InsertGLSubGroup = new InsertGLSubGroup1();
                    this.Id = $location.search().Id;
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                GLSubGroupController.prototype.Close = function () {
                    this._window.location.href = "#!/GLSubGroupList";
                };
                GLSubGroupController.prototype.$onInit = function () {
                    this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                //Page Load Define Values//
                GLSubGroupController.prototype.Init = function () {
                    if (this.Id !== null) {
                        this.EditGLSubGroup(this.Id);
                    }
                    else { }
                };
                GLSubGroupController.prototype.AccountGroup = function (data) {
                    var _this = this;
                    this.InsertGLSubGroup.GlTypeId = data;
                    this.GLGroupDropdown = this.Service.FindAcGroup(data, this.DealerID).then((function (response) {
                        _this.GLGroupDropdown = _this.Service.GetAcGroup(response.data.Result);
                    }));
                };
                GLSubGroupController.prototype.InsertGLSubGroupData = function () {
                    var _this = this;
                    if (this.InsertGLSubGroup.GlTypeId == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please select GL Type";
                    }
                    else if (this.InsertGLSubGroup.GlGroupId == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please select GL Account Group";
                    }
                    else if (this.InsertGLSubGroup.GlSubGroup == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please enter GL SubGroup";
                    }
                    else if (this.InsertGLSubGroup.IsActive == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Status";
                    }
                    //else if (this.InsertGLSubGroup.StartDate == undefined) {
                    //}
                    else {
                        this.InsertGLSubGroup.CreatedBy = this.UserID;
                        this.InsertGLSubGroup.ModifiedBy = this.UserID;
                        this.InsertGLSubGroup.DealerId = this.DealerID;
                        this.InsertGLSubGroup.IsGlobal = "0";
                        if (this.InsertGLSubGroup.GlTypeId == "1") {
                            this.InsertGLSubGroup.GlTypeName = "Balance Sheet";
                        }
                        else {
                            this.InsertGLSubGroup.GlTypeName = "P & L";
                        }
                        this.Service.PostInsertGLSubGroup(this.InsertGLSubGroup).then((function (response) {
                            if (response.data.Result != 0) {
                                _this.alert = 'GL SubGroup inserted successfully';
                                $("#errorclose").hide();
                                $("#close").show();
                            }
                            else {
                                _this.alert = 'Oops Some Error Occured';
                                $("#errorclose").show();
                                $("#close").hide();
                            }
                        }));
                    }
                };
                GLSubGroupController.prototype.EditGLSubGroup = function (data) {
                    var _this = this;
                    this.Service.FindEdit(this.Id).then((function (response) {
                        _this.InsertGLSubGroup = _this.Service.getCOAEdit(response.data.Result);
                        _this.InsertGLSubGroup.IsActive = _this.InsertGLSubGroup.IsActive == "True" ? "1" : "0";
                        _this.AccountGroup(_this.InsertGLSubGroup.GlTypeId);
                    }));
                };
                GLSubGroupController.$inject = ["$cookieStore", "GLSubGroupService", "$location", "$window"];
                return GLSubGroupController;
            }());
            var GLSubGroupComponentController = /** @class */ (function () {
                function GLSubGroupComponentController() {
                    this.controller = GLSubGroupController;
                    this.templateUrl = "/Scripts/App/Account/GLSubGroup/Template/_GLSubGroup.html";
                }
                GLSubGroupComponentController.Name = "glsubgroupcomponent";
                return GLSubGroupComponentController;
            }());
            app.AddComponent(GLSubGroupComponentController.Name, new GLSubGroupComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLSubGroupComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var GLSubGroupController = /** @class */ (function (_super) {
            __extends(GLSubGroupController, _super);
            function GLSubGroupController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GLSubGroupController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.GLSubGroupController = GLSubGroupController;
        app.AddController("GLSubGroupController", GLSubGroupController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLSubGroupController.js.map
//PostInsertGLSubGroup
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var GLSubGroupService = /** @class */ (function (_super) {
            __extends(GLSubGroupService, _super);
            function GLSubGroupService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url; ///${"LeadAssessmentSubmit"}`;
                return _this;
            }
            GLSubGroupService.prototype.PostInsertGLSubGroup = function (data) {
                var url = this.apiUrl + "/PostInsertGLSubGroup";
                // console.log(url);
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            GLSubGroupService.prototype.FindEdit = function (data) {
                var config = {
                    params: {
                        ID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/GetGLSubGroupEditFill",
                    Config: config
                });
            };
            GLSubGroupService.prototype.getCOAEdit = function (data) {
                var obj = new model.InsertGLSubGroupModel();
                obj.Id = data.Id,
                    obj.GlTypeId = data.GlTypeId,
                    obj.GlTypeName = data.GlTypeName,
                    obj.GlGroupId = data.GlGroupId,
                    obj.GlSubGroup = data.GlSubGroup,
                    obj.IsActive = data.IsActive,
                    obj.WhenEntered = data.WhenEntered,
                    obj.WhenModified = data.WhenModified,
                    obj.CreatedBy = data.CreatedBy,
                    obj.ModifiedBy = data.ModifiedBy,
                    obj.DealerId = data.DealerId,
                    obj.IsGlobal = data.IsGlobal,
                    obj.GlTypeGroup = data.GlTypeGroup;
                return obj;
            };
            GLSubGroupService.prototype.FindAcGroup = function (data, DealerID) {
                var config = {
                    params: {
                        GlTypeId: data,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/CtrlGLSubGroupddl",
                    Config: config
                });
            };
            GLSubGroupService.prototype.GetAcGroup = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        Id: item.Id,
                        GlTypeGroup: item.GlTypeGroup
                    });
                }
                return list;
            };
            GLSubGroupService.prototype.PostUpdateCOA = function (data) {
                var url = this.apiUrl + "/PostInsertGLSubGroup";
                // console.log(url);
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            GLSubGroupService.$inject = ["$http", "$q"];
            return GLSubGroupService;
        }(GCPL.Service.BaseService));
        Service.GLSubGroupService = GLSubGroupService;
        app.AddService("GLSubGroupService", GLSubGroupService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLSubGroupService.js.map
//# sourceMappingURL=GLSubGroupListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var GLSubGroupListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function GLSubGroupListController(_Service, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.COAList = null;
                    this.DealerID = null;
                    this.Cookie = null;
                    this.Service = _Service;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                GLSubGroupListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                GLSubGroupListController.prototype.Init = function () {
                    var _this = this;
                    this.COAList = this.Service.FindCOAList(this.DealerID).then((function (response) {
                        _this.COAList = _this.Service.GetCOAList(response.data.Result);
                    }));
                };
                GLSubGroupListController.$inject = ["GLSubGroupListService", "$cookieStore"];
                return GLSubGroupListController;
            }());
            var GLSubGroupListComponentController = /** @class */ (function () {
                function GLSubGroupListComponentController() {
                    this.controller = GLSubGroupListController;
                    this.templateUrl = "/Scripts/App/Account/GLSubGroupList/Template/_GLSubGroupList.html";
                }
                GLSubGroupListComponentController.Name = "glsubgrouplistcomponent";
                return GLSubGroupListComponentController;
            }());
            app.AddComponent(GLSubGroupListComponentController.Name, new GLSubGroupListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=GLSubGroupListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var GLSubGroupListController = /** @class */ (function (_super) {
            __extends(GLSubGroupListController, _super);
            function GLSubGroupListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GLSubGroupListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.GLSubGroupListController = GLSubGroupListController;
        app.AddController("GLSubGroupListController", GLSubGroupListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLSubGroupListController.js.map
//PostInsertCOA
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var GLSubGroupListService = /** @class */ (function (_super) {
            __extends(GLSubGroupListService, _super);
            function GLSubGroupListService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url; ///${"LeadAssessmentSubmit"}`;
                return _this;
            }
            GLSubGroupListService.prototype.FindCOAList = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/GLGroupList",
                    Config: config
                });
            };
            GLSubGroupListService.prototype.GetCOAList = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        Id: item.Id,
                        GlTypeId: item.GlTypeId,
                        GlTypeName: item.GlTypeName,
                        GlGroupId: item.GlGroupId,
                        GlSubGroup: item.GlSubGroup,
                        IsActive: item.IsActive == "True" ? "Active" : "Inactive",
                        WhenEntered: item.WhenEntered,
                        WhenModified: item.WhenModified,
                        CreatedBy: item.CreatedBy,
                        ModifiedBy: item.ModifiedBy,
                        IsGlobal: item.IsGlobal,
                        DealerId: item.DealerId,
                        GlTypeGroup: item.GlTypeGroup
                    });
                }
                return list;
            };
            GLSubGroupListService.$inject = ["$http", "$q"];
            return GLSubGroupListService;
        }(GCPL.Service.BaseService));
        Service.GLSubGroupListService = GLSubGroupListService;
        app.AddService("GLSubGroupListService", GLSubGroupListService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLSubGroupListService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var InsertItemType = /** @class */ (function () {
            function InsertItemType() {
            }
            return InsertItemType;
        }());
        Model.InsertItemType = InsertItemType;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ItemTypeModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var UserModel = GCPL.Model.InsertItemType;
            var ItemTypeController = /** @class */ (function () {
                function ItemTypeController(_ItemTypeservice, _cookieStore, $location) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.alert = null;
                    this.InsertItemType = null;
                    this.Cookie = null;
                    this.ItemTypeID = null;
                    this.DealerID = null;
                    this.UserID = null;
                    this.showAddUserTitle = true;
                    this.showBtnSubmit = true;
                    this.InsertItemType = new UserModel();
                    this.ItemTypeservice = _ItemTypeservice;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.ItemTypeID = $location.search().ItemTypeID;
                }
                ItemTypeController.prototype.$onInit = function () {
                    this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                ItemTypeController.prototype.Init = function () {
                    var _this = this;
                    this.showAddUserTitle = true;
                    this.showBtnSubmit = true;
                    //Edit
                    if (this.ItemTypeID != null) {
                        this.showBtnSubmit = false;
                        this.showAddUserTitle = false;
                        this.ItemTypeservice.EditData(this.ItemTypeID).then((function (response) {
                            _this.InsertItemType = _this.ItemTypeservice.GetEditData(response.data.Result);
                        }));
                    }
                };
                ItemTypeController.prototype.ShowHidePopUp = function (Message) {
                    $("#errorclose").show();
                    $("#close").hide();
                    this.alert = Message;
                };
                ItemTypeController.prototype.InsertItemTypeMethod = function () {
                    var _this = this;
                    if (this.InsertItemType.Code == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter Code";
                    }
                    else if (this.InsertItemType.Description == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter Description";
                    }
                    else if (this.InsertItemType.Status == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Status";
                    }
                    else {
                        this.InsertItemType.DealerID = this.DealerID;
                        this.InsertItemType.UserID = this.UserID;
                        this.InsertItemType.IsGlobal = "0";
                        this.InsertItemType.Operation = this.showBtnSubmit == true ? "Insert" : "Update";
                        this.InsertItemType.ItemTypeID = this.showBtnSubmit == true ? "" : this.ItemTypeID;
                        this.ItemTypeservice.PostItemType(this.InsertItemType).then((function (response) {
                            if (response.data.Result != 0) {
                                _this.alert = "Data Successfully Saved";
                                $("#errorclose").hide();
                                $("#close").show();
                            }
                            else {
                                _this.alert = 'Oops Some Error Occured';
                                $("#errorclose").show();
                                $("#close").hide();
                            }
                        }));
                    }
                };
                ItemTypeController.prototype.Close = function () {
                    location.href = "#!/ItemTypeList";
                };
                ItemTypeController.prototype.ErrorClose = function () {
                    //  location.href = "#!/UserMaster";
                };
                ItemTypeController.$inject = ["ItemTypeServices", "$cookieStore", "$location"];
                return ItemTypeController;
            }());
            var ItemTypeContentComponent = /** @class */ (function () {
                function ItemTypeContentComponent() {
                    this.controller = ItemTypeController;
                    this.templateUrl = "/Scripts/App/Spares/ItemType/Template/ItemType.html";
                }
                ItemTypeContentComponent.Name = "itemtypecontentcomponent";
                return ItemTypeContentComponent;
            }());
            app.AddComponent(ItemTypeContentComponent.Name, new ItemTypeContentComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ItemTypeComponent.js.map
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ItemTypeController = /** @class */ (function () {
            function ItemTypeController() {
                console.log("ItemTypeController initialized...");
            }
            return ItemTypeController;
        }());
        Controller.ItemTypeController = ItemTypeController;
        app.AddController("ItemTypeController", ItemTypeController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ItemTypeController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/// <reference path="../../../../typings/angularjs/angular.d.ts" />
//BE
//insert and update
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var ItemTypeServices = /** @class */ (function (_super) {
            __extends(ItemTypeServices, _super);
            function ItemTypeServices($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                //this.apiUrl = `${this.url}/${"InsertServiceCallctrl"}`;
                _this.apiUrl = _this.url + "/" + "ItemTypectrl";
                return _this;
            }
            ItemTypeServices.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            ItemTypeServices.prototype.PostItemType = function (data) {
                var url = this.apiUrl;
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            ItemTypeServices.prototype.EditData = function (data) {
                var config = {
                    params: {
                        ItemTypeID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            ItemTypeServices.prototype.GetEditData = function (data) {
                var obj = new model.InsertItemType();
                obj.Code = data.Code;
                obj.Description = data.Description;
                obj.Status = data.Status;
                return obj;
            };
            ItemTypeServices.$inject = ["$http", "$q"];
            return ItemTypeServices;
        }(GCPL.Service.BaseService));
        Service.ItemTypeServices = ItemTypeServices;
        app.AddService("ItemTypeServices", ItemTypeServices);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ItemTypeService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var ItemTypeListModel = /** @class */ (function () {
            function ItemTypeListModel() {
            }
            return ItemTypeListModel;
        }());
        Model.ItemTypeListModel = ItemTypeListModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ItemTypeListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ItemTypeListController = /** @class */ (function () {
                function ItemTypeListController(_ItemTypeListService, _cookieStore, $location) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.ItemTypeList = null;
                    this.alert = null;
                    this.ContactPersonID = null;
                    this.DealerID = null;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.ItemTypeListService = _ItemTypeListService;
                }
                ItemTypeListController.prototype.$onInit = function () {
                    this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                ItemTypeListController.prototype.Init = function () {
                    var _this = this;
                    // this.custnameget(this.CustomerID);
                    this.ItemTypeList = this.ItemTypeListService.GetItemTypeList(this.DealerID).then((function (response) {
                        _this.ItemTypeList = _this.ItemTypeListService.ItemTypeListData(response.data.Result);
                        console.log(_this.ItemTypeList);
                    }));
                };
                //delete
                //DeleteContactPerson(ContactPersonID): void {
                //    this.DeleteContactPersonservice.Find(ContactPersonID).then((response => {
                //        this.DeleteContactPersonservice.postContactPersonDelete(response.data.Result);
                //        this.Init();
                //        alert("Record deleted successfully..");
                //    }));
                //}
                ItemTypeListController.prototype.Close = function () {
                    this.Init();
                    // $("#myTable").show();  
                };
                ItemTypeListController.$inject = ["ItemTypeListService", "$cookieStore", "$location"];
                return ItemTypeListController;
            }());
            var ItemTypeListControllerComponent = /** @class */ (function () {
                function ItemTypeListControllerComponent() {
                    this.controller = ItemTypeListController;
                    this.templateUrl = "/Scripts/App/Spares/ItemTypeList/Template/ItemTypeList.html";
                }
                ItemTypeListControllerComponent.Name = "itemtypelistcontrollercomponent";
                return ItemTypeListControllerComponent;
            }());
            app.AddComponent(ItemTypeListControllerComponent.Name, new ItemTypeListControllerComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ItemTypeListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ItemTypeListController = /** @class */ (function (_super) {
            __extends(ItemTypeListController, _super);
            function ItemTypeListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ItemTypeListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ItemTypeListController = ItemTypeListController;
        app.AddController("ItemTypeListController", ItemTypeListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ItemTypeListController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var ItemTypeListService = /** @class */ (function (_super) {
            __extends(ItemTypeListService, _super);
            function ItemTypeListService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url; ///${"CtrlContactPersonGridFill"}`;
                return _this;
            }
            ItemTypeListService.prototype.GetItemTypeList = function (DealerID) {
                var config = {
                    params: {
                        DealerID: DealerID,
                        Name: ""
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/ItemTypectrl",
                    Config: config
                });
            };
            ItemTypeListService.prototype.ItemTypeListData = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        ItemTypeID: item.ItemTypeID,
                        Code: item.Code,
                        Description: item.Description,
                        Status: item.Status,
                        DealerName: item.DealerName,
                        CreatedBy: item.CreatedBy,
                        ModifiedBy: item.ModifiedBy,
                        IsGlobal: item.IsGlobal
                    });
                }
                return list;
            };
            ItemTypeListService.$inject = ["$http", "$q"];
            return ItemTypeListService;
        }(GCPL.Service.BaseService));
        Service.ItemTypeListService = ItemTypeListService;
        app.AddService("ItemTypeListService", ItemTypeListService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ItemTypeListService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var InsertItemSubType = /** @class */ (function () {
            function InsertItemSubType() {
            }
            return InsertItemSubType;
        }());
        Model.InsertItemSubType = InsertItemSubType;
        var ItemTypeDDL = /** @class */ (function () {
            function ItemTypeDDL() {
            }
            return ItemTypeDDL;
        }());
        Model.ItemTypeDDL = ItemTypeDDL;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ItemSubTypeModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var UserModel = GCPL.Model.InsertItemSubType;
            var ItemSubTypeController = /** @class */ (function () {
                function ItemSubTypeController(_ItemTypeservice, _cookieStore, $location) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.alert = null;
                    this.InsertItemSubType = null;
                    this.ItemTypeDDL = null;
                    this.Cookie = null;
                    this.ItemSubTypeID = null;
                    this.DealerID = null;
                    this.UserID = null;
                    this.showAddUserTitle = true;
                    this.showBtnSubmit = true;
                    this.InsertItemSubType = new UserModel();
                    this.ItemSubTypeservice = _ItemTypeservice;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.ItemSubTypeID = $location.search().ItemSubTypeID;
                }
                ItemSubTypeController.prototype.$onInit = function () {
                    this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                ItemSubTypeController.prototype.Init = function () {
                    var _this = this;
                    this.showAddUserTitle = true;
                    this.showBtnSubmit = true;
                    this.ItemSubTypeservice.FindDDData(parseInt(this.DealerID)).then((function (response) {
                        _this.ItemTypeDDL = _this.ItemSubTypeservice.GetDDData(response.data.Result);
                    }));
                    this.InsertItemSubType.ItemTypeID = "";
                    //Edit
                    if (this.ItemSubTypeID != null) {
                        this.showBtnSubmit = false;
                        this.showAddUserTitle = false;
                        this.ItemSubTypeservice.EditData(this.ItemSubTypeID).then((function (response) {
                            _this.InsertItemSubType = _this.ItemSubTypeservice.GetEditData(response.data.Result);
                        }));
                    }
                };
                ItemSubTypeController.prototype.ShowHidePopUp = function (Message) {
                    $("#errorclose").show();
                    $("#close").hide();
                    this.alert = Message;
                };
                ItemSubTypeController.prototype.InsertItemSubTypeMethod = function () {
                    var _this = this;
                    if (this.InsertItemSubType.ItemTypeID == undefined || this.InsertItemSubType.ItemTypeID == "") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Item Type";
                    }
                    else if (this.InsertItemSubType.ItemSubTypeCode == undefined || this.InsertItemSubType.ItemSubTypeCode == "") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter Code";
                    }
                    else if (this.InsertItemSubType.ItemSubType == undefined || this.InsertItemSubType.ItemSubType == "") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter ItemSubType";
                    }
                    else if (this.InsertItemSubType.Status == undefined || this.InsertItemSubType.Status == "") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Status";
                    }
                    else {
                        this.InsertItemSubType.DealerID = this.DealerID;
                        this.InsertItemSubType.UserID = this.UserID;
                        this.InsertItemSubType.IsGlobal = "0";
                        this.InsertItemSubType.Operation = this.showBtnSubmit == true ? "Insert" : "Update";
                        this.InsertItemSubType.ItemSubTypeID = this.showBtnSubmit == true ? "" : this.ItemSubTypeID;
                        this.ItemSubTypeservice.PostItemSubType(this.InsertItemSubType).then((function (response) {
                            if (response.data.Result != 0) {
                                _this.alert = "Data Successfully Saved";
                                $("#errorclose").hide();
                                $("#close").show();
                            }
                            else {
                                _this.alert = 'Oops Some Error Occured';
                                $("#errorclose").show();
                                $("#close").hide();
                            }
                        }));
                    }
                };
                ItemSubTypeController.prototype.Close = function () {
                    location.href = "#!/ItemSubTypeList";
                };
                ItemSubTypeController.prototype.ErrorClose = function () {
                    //  location.href = "#!/UserMaster";
                };
                ItemSubTypeController.$inject = ["ItemSubTypeServices", "$cookieStore", "$location"];
                return ItemSubTypeController;
            }());
            var ItemSubTypeContentComponent = /** @class */ (function () {
                function ItemSubTypeContentComponent() {
                    this.controller = ItemSubTypeController;
                    this.templateUrl = "/Scripts/App/Spares/ItemSubType/Template/ItemSubType.html";
                }
                ItemSubTypeContentComponent.Name = "itemsubtypecontentcomponent";
                return ItemSubTypeContentComponent;
            }());
            app.AddComponent(ItemSubTypeContentComponent.Name, new ItemSubTypeContentComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ItemSubTypeComponent.js.map
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ItemSubTypeController = /** @class */ (function () {
            function ItemSubTypeController() {
                console.log("ItemSubTypeController initialized...");
            }
            return ItemSubTypeController;
        }());
        Controller.ItemSubTypeController = ItemSubTypeController;
        app.AddController("ItemSubTypeController", ItemSubTypeController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ItemSubTypeController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/// <reference path="../../../../typings/angularjs/angular.d.ts" />
//BE
//insert and update
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var ItemSubTypeServices = /** @class */ (function (_super) {
            __extends(ItemSubTypeServices, _super);
            function ItemSubTypeServices($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                //this.apiUrl = `${this.url}/${"InsertServiceCallctrl"}`;
                _this.apiUrl = _this.url + "/" + "ItemSubType";
                return _this;
            }
            ItemSubTypeServices.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            ItemSubTypeServices.prototype.PostItemSubType = function (data) {
                var url = this.apiUrl;
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            ItemSubTypeServices.prototype.EditData = function (data) {
                var config = {
                    params: {
                        ItemSubTypeID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            ItemSubTypeServices.prototype.GetEditData = function (data) {
                var obj = new model.InsertItemSubType();
                obj.ItemTypeID = data.ItemTypeID;
                obj.ItemSubTypeCode = data.ItemSubTypeCode;
                obj.ItemSubType = data.ItemSubType;
                obj.Status = data.Status;
                return obj;
            };
            ItemSubTypeServices.prototype.FindDDData = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            ItemSubTypeServices.prototype.GetDDData = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        ID: item.ItemTypeID,
                        ItemType: item.Description
                    });
                }
                return list;
            };
            ItemSubTypeServices.$inject = ["$http", "$q"];
            return ItemSubTypeServices;
        }(GCPL.Service.BaseService));
        Service.ItemSubTypeServices = ItemSubTypeServices;
        app.AddService("ItemSubTypeServices", ItemSubTypeServices);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ItemSubTypeService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var ItemSubTypeListModel = /** @class */ (function () {
            function ItemSubTypeListModel() {
            }
            return ItemSubTypeListModel;
        }());
        Model.ItemSubTypeListModel = ItemSubTypeListModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ItemSubTypeListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ItemSubTypeListController = /** @class */ (function () {
                function ItemSubTypeListController(_ItemSubTypeListService, _cookieStore, $location) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.ItemSubTypeList = null;
                    this.alert = null;
                    this.ContactPersonID = null;
                    this.DealerID = null;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.ItemSubTypeListService = _ItemSubTypeListService;
                }
                ItemSubTypeListController.prototype.$onInit = function () {
                    this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                ItemSubTypeListController.prototype.Init = function () {
                    var _this = this;
                    // this.custnameget(this.CustomerID);
                    this.ItemSubTypeList = this.ItemSubTypeListService.GetItemSubTypeList(this.DealerID).then((function (response) {
                        _this.ItemSubTypeList = _this.ItemSubTypeListService.ItemSubTypeListData(response.data.Result);
                    }));
                };
                //delete
                //DeleteContactPerson(ContactPersonID): void {
                //    this.DeleteContactPersonservice.Find(ContactPersonID).then((response => {
                //        this.DeleteContactPersonservice.postContactPersonDelete(response.data.Result);
                //        this.Init();
                //        alert("Record deleted successfully..");
                //    }));
                //}
                ItemSubTypeListController.prototype.Close = function () {
                    this.Init();
                    // $("#myTable").show();  
                };
                ItemSubTypeListController.$inject = ["ItemSubTypeListService", "$cookieStore", "$location"];
                return ItemSubTypeListController;
            }());
            var ItemSubTypeListControllerComponent = /** @class */ (function () {
                function ItemSubTypeListControllerComponent() {
                    this.controller = ItemSubTypeListController;
                    this.templateUrl = "/Scripts/App/Spares/ItemSubTypeList/Template/ItemSubTypeList.html";
                }
                ItemSubTypeListControllerComponent.Name = "itemsubtypelistcontrollercomponent";
                return ItemSubTypeListControllerComponent;
            }());
            app.AddComponent(ItemSubTypeListControllerComponent.Name, new ItemSubTypeListControllerComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ItemSubTypeListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ItemSubTypeListController = /** @class */ (function (_super) {
            __extends(ItemSubTypeListController, _super);
            function ItemSubTypeListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ItemSubTypeListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ItemSubTypeListController = ItemSubTypeListController;
        app.AddController("ItemSubTypeListController", ItemSubTypeListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ItemSubTypeListController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var ItemSubTypeListService = /** @class */ (function (_super) {
            __extends(ItemSubTypeListService, _super);
            function ItemSubTypeListService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url; ///${"CtrlContactPersonGridFill"}`;
                return _this;
            }
            ItemSubTypeListService.prototype.GetItemSubTypeList = function (DealerID) {
                var config = {
                    params: {
                        DealerID: DealerID,
                        Name: ""
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/ItemSubType",
                    Config: config
                });
            };
            ItemSubTypeListService.prototype.ItemSubTypeListData = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        ItemSubTypeID: item.ItemSubTypeID,
                        ItemSubType: item.ItemSubType,
                        ItemSubTypeCode: item.ItemSubTypeCode,
                        ItemType: item.ItemType,
                        Status: item.Status,
                        DealerName: item.DealerName,
                        CreatedBy: item.CreatedBy,
                        ModifiedBy: item.ModifiedBy,
                        IsGlobal: item.IsGlobal
                    });
                }
                return list;
            };
            ItemSubTypeListService.$inject = ["$http", "$q"];
            return ItemSubTypeListService;
        }(GCPL.Service.BaseService));
        Service.ItemSubTypeListService = ItemSubTypeListService;
        app.AddService("ItemSubTypeListService", ItemSubTypeListService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ItemSubTypeListService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var InsertGLGroup = /** @class */ (function () {
            function InsertGLGroup() {
            }
            return InsertGLGroup;
        }());
        Model.InsertGLGroup = InsertGLGroup;
        //export class GLGroupDDL {
        //    constructor() { }
        //    ID: string;
        //    ItemType: string;
        //}
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLGroupModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var UserModel = GCPL.Model.InsertGLGroup;
            var GLGroupController = /** @class */ (function () {
                function GLGroupController(_GLGroupservice, _cookieStore, $location) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.alert = null;
                    this.InsertGLGroup = null;
                    //ItemTypeDDL = null;
                    this.Cookie = null;
                    this.GLGroupID = null;
                    this.DealerID = null;
                    this.UserID = null;
                    this.showAddUserTitle = true;
                    this.showBtnSubmit = true;
                    this.InsertGLGroup = new UserModel();
                    this.GLGroupservice = _GLGroupservice;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.GLGroupID = $location.search().GLGroupID;
                }
                GLGroupController.prototype.$onInit = function () {
                    this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                GLGroupController.prototype.Init = function () {
                    var _this = this;
                    this.showAddUserTitle = true;
                    this.showBtnSubmit = true;
                    //this.GLGroupservice.FindDDData().then((response => {
                    //    this.GLGroupDDL = this.GLGroupservice.GetDDData(response.data.Result);
                    //}));
                    //this.InsertGLGroup.GLGroupID = "";
                    //Edit
                    if (this.GLGroupID != null) {
                        this.showBtnSubmit = false;
                        this.showAddUserTitle = false;
                        this.GLGroupservice.EditData(this.GLGroupID).then((function (response) {
                            _this.InsertGLGroup = _this.GLGroupservice.GetEditData(response.data.Result);
                        }));
                    }
                };
                GLGroupController.prototype.ShowHidePopUp = function (Message) {
                    $("#errorclose").show();
                    $("#close").hide();
                    this.alert = Message;
                };
                GLGroupController.prototype.InsertGLGroupMethod = function () {
                    var _this = this;
                    if (this.InsertGLGroup.GLTypeID == undefined || this.InsertGLGroup.GLTypeID == "") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select GL Type";
                    }
                    else if (this.InsertGLGroup.GLTypeGroup == undefined || this.InsertGLGroup.GLTypeGroup == "") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter GL Account Group";
                    }
                    else if (this.InsertGLGroup.Status == undefined || this.InsertGLGroup.Status == "") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Status";
                    }
                    else {
                        this.InsertGLGroup.DealerID = this.DealerID;
                        this.InsertGLGroup.UserID = this.UserID;
                        this.InsertGLGroup.IsGlobal = "0";
                        this.InsertGLGroup.Operation = this.showBtnSubmit == true ? "Insert" : "Update";
                        this.InsertGLGroup.GLGroupID = this.showBtnSubmit == true ? "" : this.GLGroupID;
                        this.InsertGLGroup.GLTypeName = this.InsertGLGroup.GLTypeID == "1" ? "Balance Sheet" : "P & L";
                        this.GLGroupservice.PostGLGroup(this.InsertGLGroup).then((function (response) {
                            if (response.data.Result != 0) {
                                _this.alert = "Data Successfully Saved";
                                $("#errorclose").hide();
                                $("#close").show();
                            }
                            else {
                                _this.alert = 'Oops Some Error Occured';
                                $("#errorclose").show();
                                $("#close").hide();
                            }
                        }));
                    }
                };
                GLGroupController.prototype.Close = function () {
                    location.href = "#!/GLGroupList";
                };
                GLGroupController.prototype.ErrorClose = function () {
                    //  location.href = "#!/UserMaster";
                };
                GLGroupController.$inject = ["GLGroupServices", "$cookieStore", "$location"];
                return GLGroupController;
            }());
            var GLGroupContentComponent = /** @class */ (function () {
                function GLGroupContentComponent() {
                    this.controller = GLGroupController;
                    this.templateUrl = "/Scripts/App/Account/GLGroup/Template/GLGroup.html";
                }
                GLGroupContentComponent.Name = "glgroupcontentcomponent";
                return GLGroupContentComponent;
            }());
            app.AddComponent(GLGroupContentComponent.Name, new GLGroupContentComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLGroupComponent.js.map
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var GLGroupController = /** @class */ (function () {
            function GLGroupController() {
                console.log("GLGroupController initialized...");
            }
            return GLGroupController;
        }());
        Controller.GLGroupController = GLGroupController;
        app.AddController("GLGroupController", GLGroupController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLGroupController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/// <reference path="../../../../typings/angularjs/angular.d.ts" />
//BE
//insert and update
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var GLGroupServices = /** @class */ (function (_super) {
            __extends(GLGroupServices, _super);
            function GLGroupServices($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                //this.apiUrl = `${this.url}/${"InsertServiceCallctrl"}`;
                _this.apiUrl = _this.url + "/" + "GLGroup";
                return _this;
            }
            GLGroupServices.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            GLGroupServices.prototype.PostGLGroup = function (data) {
                var url = this.apiUrl;
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            GLGroupServices.prototype.EditData = function (data) {
                var config = {
                    params: {
                        GLGroupID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            GLGroupServices.prototype.GetEditData = function (data) {
                var obj = new model.InsertGLGroup();
                obj.GLTypeID = data.GLTypeID;
                obj.GLTypeGroup = data.GLTypeGroup;
                obj.Status = data.Status;
                return obj;
            };
            GLGroupServices.$inject = ["$http", "$q"];
            return GLGroupServices;
        }(GCPL.Service.BaseService));
        Service.GLGroupServices = GLGroupServices;
        app.AddService("GLGroupServices", GLGroupServices);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLGroupService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var GLGroupListModel = /** @class */ (function () {
            function GLGroupListModel() {
            }
            return GLGroupListModel;
        }());
        Model.GLGroupListModel = GLGroupListModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLGroupListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var GLGroupListController = /** @class */ (function () {
                function GLGroupListController(_GLGroupListService, _cookieStore, $location) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.GLGroupList = null;
                    this.alert = null;
                    this.ContactPersonID = null;
                    this.DealerID = null;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.GLGroupListService = _GLGroupListService;
                }
                GLGroupListController.prototype.$onInit = function () {
                    this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                GLGroupListController.prototype.Init = function () {
                    var _this = this;
                    // this.custnameget(this.CustomerID);
                    this.GLGroupList = this.GLGroupListService.GetGLGroupList(this.DealerID).then((function (response) {
                        _this.GLGroupList = _this.GLGroupListService.GLGroupListData(response.data.Result);
                    }));
                };
                //delete
                //DeleteContactPerson(ContactPersonID): void {
                //    this.DeleteContactPersonservice.Find(ContactPersonID).then((response => {
                //        this.DeleteContactPersonservice.postContactPersonDelete(response.data.Result);
                //        this.Init();
                //        alert("Record deleted successfully..");
                //    }));
                //}
                GLGroupListController.prototype.Close = function () {
                    this.Init();
                    // $("#myTable").show();  
                };
                GLGroupListController.$inject = ["GLGroupListService", "$cookieStore", "$location"];
                return GLGroupListController;
            }());
            var GLGroupListControllerComponent = /** @class */ (function () {
                function GLGroupListControllerComponent() {
                    this.controller = GLGroupListController;
                    this.templateUrl = "/Scripts/App/Account/GLGroupList/Template/GLGroupList.html";
                }
                GLGroupListControllerComponent.Name = "glgrouplistcontrollercomponent";
                return GLGroupListControllerComponent;
            }());
            app.AddComponent(GLGroupListControllerComponent.Name, new GLGroupListControllerComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLGroupListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var GLGroupListController = /** @class */ (function (_super) {
            __extends(GLGroupListController, _super);
            function GLGroupListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GLGroupListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.GLGroupListController = GLGroupListController;
        app.AddController("GLGroupListController", GLGroupListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLGroupListController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var GLGroupListService = /** @class */ (function (_super) {
            __extends(GLGroupListService, _super);
            function GLGroupListService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url; ///${"CtrlContactPersonGridFill"}`;
                return _this;
            }
            GLGroupListService.prototype.GetGLGroupList = function (DealerID) {
                var config = {
                    params: {
                        DealerID: DealerID,
                        Name: ""
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/GLGroup",
                    Config: config
                });
            };
            GLGroupListService.prototype.GLGroupListData = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        GLGroupID: item.GLGroupID,
                        GLTypeName: item.GLTypeName,
                        GLTypeGroup: item.GLTypeGroup,
                        Status: item.Status,
                        DealerName: item.DealerName,
                        CreatedBy: item.CreatedBy,
                        ModifiedBy: item.ModifiedBy,
                        IsGlobal: item.IsGlobal
                    });
                }
                return list;
            };
            GLGroupListService.$inject = ["$http", "$q"];
            return GLGroupListService;
        }(GCPL.Service.BaseService));
        Service.GLGroupListService = GLGroupListService;
        app.AddService("GLGroupListService", GLGroupListService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLGroupListService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var InsertGLMaster = /** @class */ (function () {
            function InsertGLMaster() {
            }
            return InsertGLMaster;
        }());
        Model.InsertGLMaster = InsertGLMaster;
        var GLgroup = /** @class */ (function () {
            function GLgroup() {
            }
            return GLgroup;
        }());
        Model.GLgroup = GLgroup;
        var subgroup = /** @class */ (function () {
            function subgroup() {
            }
            return subgroup;
        }());
        Model.subgroup = subgroup;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLMasterModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var GLMaster = GCPL.Model.InsertGLMaster;
            var GlMasterContoller = /** @class */ (function () {
                function GlMasterContoller(_Insertservice, _cookieStore, _groupservice, _subgroupservice, _Editservice, $location, _COAService) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.InsertGLMaster = null;
                    this.alert = null;
                    this.DealerID = null;
                    this.Glgroup = null;
                    this.SubGlgroup = null;
                    this.GlTypeId = null;
                    this.GlGroupId = null;
                    this.UserID = null;
                    this.GlMasterEdit = null;
                    this.Id = null;
                    this.COAList = null;
                    this.Cookie = null;
                    this.Type = null;
                    this.Type = $location.search().Type;
                    this.Insertservice = _Insertservice;
                    this.groupservice = _groupservice;
                    this.subgroupservice = _subgroupservice;
                    this.InsertGLMaster = new GLMaster();
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.Editservice = _Editservice;
                    this.Id = $location.search().Id;
                    this.Type = $location.search().Type;
                    this.COAService = _COAService;
                }
                GlMasterContoller.prototype.$onInit = function () {
                    var _this = this;
                    this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                    this.COAList = this.COAService.FindCOAList(this.DealerID, "").then((function (response) {
                        _this.COAList = _this.COAService.GetCOAList(response.data.Result);
                    }));
                };
                //Page Load Define Values//
                GlMasterContoller.prototype.Init = function () {
                    var _this = this;
                    debugger;
                    //Editglmaster(data): void {
                    if (this.Id != null) {
                        this.Editservice.Find(this.Id).then((function (response) {
                            _this.InsertGLMaster = _this.Editservice.GetEdit(response.data.Result);
                            console.log("this.InsertGLMaster");
                            console.log(_this.InsertGLMaster);
                            if (Boolean(_this.InsertGLMaster.IsActive) == true) {
                                _this.InsertGLMaster.IsActive = "1";
                            }
                            else {
                                _this.InsertGLMaster.IsActive = "0";
                            }
                            if (_this.InsertGLMaster.ManualPosting = 'No') {
                                _this.InsertGLMaster.ManualPosting = "1";
                            }
                            else {
                                _this.InsertGLMaster.ManualPosting = "2";
                            }
                            _this.Glgroup = _this.groupservice.Find(_this.InsertGLMaster.GlTypeId).then((function (response) {
                                _this.Glgroup = _this.groupservice.GetGLGroup(response.data.Result);
                            }));
                            _this.SubGlgroup = _this.subgroupservice.Find(_this.InsertGLMaster.GlGroupId).then((function (response) {
                                _this.SubGlgroup = _this.subgroupservice.GetsubGLGroup(response.data.Result);
                            }));
                        }));
                        //$("#ddlGLType").prop("disabled", true);
                        //$("#ddlGroup").prop("disabled", true);
                        //$("#ddlGroup").prop("disabled", true);
                        //$("#ddlSubgroup").prop("disabled", true);
                        //$("#ddlGST").prop("disabled", true);
                        //$("#ManualPosting").prop("disabled", true);
                    }
                    else {
                        //$("#ddlGLType").prop("disabled", false);
                        //$("#ddlGroup").prop("disabled", false);
                        //$("#ddlGroup").prop("disabled", false);
                        //$("#ddlSubgroup").prop("disabled", false);
                        //$("#ddlGST").prop("disabled", false);
                        //$("#ManualPosting").prop("disabled", false);
                    }
                };
                GlMasterContoller.prototype.Group = function () {
                    var _this = this;
                    this.Glgroup = this.groupservice.Find(this.InsertGLMaster.GlTypeId).then((function (response) {
                        _this.Glgroup = _this.groupservice.GetGLGroup(response.data.Result);
                    }));
                };
                GlMasterContoller.prototype.Groupsub = function () {
                    var _this = this;
                    this.SubGlgroup = this.subgroupservice.Find(this.InsertGLMaster.GlGroupId).then((function (response) {
                        _this.SubGlgroup = _this.subgroupservice.GetsubGLGroup(response.data.Result);
                    }));
                };
                GlMasterContoller.prototype.Submit = function () {
                    var _this = this;
                    debugger;
                    if (this.InsertGLMaster.AccountName == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter AccountName ";
                    }
                    else if (this.InsertGLMaster.IsActive == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter Status";
                    }
                    else {
                        this.InsertGLMaster.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                        this.InsertGLMaster.CreatedBy = this.UserID;
                        if (this.InsertGLMaster.GlTypeId == "1") {
                            this.InsertGLMaster.GlTypeName = 'Balance Sheet';
                        }
                        else {
                            this.InsertGLMaster.GlTypeName = 'P & L';
                        }
                        if (this.InsertGLMaster.PostingKeyId = "1") {
                            this.InsertGLMaster.PostingKeyName = 'Debit';
                        }
                        else if (this.InsertGLMaster.PostingKeyId = "2") {
                            this.InsertGLMaster.PostingKeyName = 'Credit';
                        }
                        else {
                            this.InsertGLMaster.PostingKeyName = 'Both';
                        }
                        this.InsertGLMaster.IsGlobal = "0";
                        this.Insertservice.PostGl(this.InsertGLMaster).then((function (response) {
                            if (response.data.Result != null) {
                                _this.alert = " data is Successfully Inserted";
                                $("#errorclose").hide();
                                $("#close").show();
                            }
                            else {
                                _this.alert = 'Oops Some Error Occured';
                                $("#errorclose").hide();
                                $("#close").show();
                            }
                        }));
                    }
                };
                GlMasterContoller.prototype.Close = function () {
                    location.href = "#!/GLListMaster";
                };
                GlMasterContoller.prototype.ErrorClose = function () {
                    //  location.href = "#!/UserMaster";
                };
                GlMasterContoller.$inject = ["InsertGLServies", "$cookieStore", "GLGroupService", "subGLGroupService",
                    "GLEditService", "$location", "COAListService"];
                return GlMasterContoller;
            }());
            var GlMasterComponent = /** @class */ (function () {
                function GlMasterComponent() {
                    this.controller = GlMasterContoller;
                    this.templateUrl = "/Scripts/App/Account/GLMaster/Template/_GLMaster.html";
                }
                GlMasterComponent.Name = "glMasterComponent";
                return GlMasterComponent;
            }());
            app.AddComponent(GlMasterComponent.Name, new GlMasterComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLMasterComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var GlMasterContoller = /** @class */ (function (_super) {
            __extends(GlMasterContoller, _super);
            function GlMasterContoller() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GlMasterContoller;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.GlMasterContoller = GlMasterContoller;
        app.AddController("GlMasterContoller", GlMasterContoller);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLMasterController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var InsertGLServies = /** @class */ (function (_super) {
            __extends(InsertGLServies, _super);
            function InsertGLServies($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                //this.apiUrl = `${this.url}/${"InsertServiceCallctrl"}`;
                _this.apiUrl = _this.url + "/" + "InsertGLMaster";
                return _this;
            }
            InsertGLServies.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            InsertGLServies.prototype.PostGl = function (data) {
                var url = this.apiUrl;
                // console.log(url);
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            InsertGLServies.$inject = ["$http", "$q"];
            return InsertGLServies;
        }(GCPL.Service.BaseService));
        Service.InsertGLServies = InsertGLServies;
        app.AddService("InsertGLServies", InsertGLServies);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var GLGroupService = /** @class */ (function (_super) {
            __extends(GLGroupService, _super);
            function GLGroupService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.Cookie = _cookieStore;
                _this.apiUrl = _this.url + "/" + "AccounrfillGLgroupctrl";
                return _this;
            }
            GLGroupService.prototype.Find = function (data) {
                var config = {
                    params: {
                        GlTypeId: data,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            GLGroupService.prototype.GetGLGroup = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        id: item.id,
                        GlTypeGroup: item.GlTypeGroup,
                        GlTypeId: item.GlTypeId,
                        DealerID: item.DealerID,
                        IsActive: item.IsActive
                    });
                }
                return list;
            };
            GLGroupService.$inject = ["$http", "$q", "$cookieStore"];
            return GLGroupService;
        }(GCPL.Service.BaseService));
        Service.GLGroupService = GLGroupService;
        //inject service
        app.AddService("GLGroupService", GLGroupService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var subGLGroupService = /** @class */ (function (_super) {
            __extends(subGLGroupService, _super);
            function subGLGroupService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.Cookie = _cookieStore;
                _this.apiUrl = _this.url + "/" + "AccountGlgroupddlctrl";
                return _this;
            }
            subGLGroupService.prototype.Find = function (data) {
                var config = {
                    params: {
                        GlGroupId: data,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            subGLGroupService.prototype.GetsubGLGroup = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        GlSubGroup: item.GlSubGroup,
                        GlGroupId: item.GlGroupId,
                        DealerID: item.DealerID,
                        IsActive: item.IsActive,
                        id: item.id,
                    });
                }
                return list;
            };
            subGLGroupService.$inject = ["$http", "$q", "$cookieStore"];
            return subGLGroupService;
        }(GCPL.Service.BaseService));
        Service.subGLGroupService = subGLGroupService;
        //inject service
        app.AddService("subGLGroupService", subGLGroupService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var GLEditService = /** @class */ (function (_super) {
            __extends(GLEditService, _super);
            function GLEditService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "GiMasterEditCtrl";
                return _this;
            }
            GLEditService.prototype.Find = function (data) {
                var config = {
                    params: {
                        Id: data,
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            GLEditService.prototype.GetEdit = function (data) {
                var obj = new model.InsertGLMaster();
                obj.Id = data.Id;
                obj.DealerID = data.DealerID,
                    obj.IsActive = data.IsActive,
                    obj.AccountName = data.AccountName,
                    obj.CreatedBy = data.CreatedBy,
                    obj.GlAccountCode = data.GlAccountCode,
                    obj.GlGroupId = data.GlGroupId,
                    obj.GlSubGroupId = data.GlSubGroupId,
                    obj.GlTypeId = data.GlTypeId,
                    obj.ManualPosting = data.ManualPosting,
                    obj.WhenModified = data.WhenModified,
                    obj.WhenEntered = data.WhenEntered,
                    obj.PostingKeyName = data.PostingKeyName,
                    //obj.PostingKeyId = data.PostingKeyId,
                    obj.ModifiedBy = data.ModifiedBy,
                    obj.WhenModified = data.WhenModified,
                    obj.WhenEntered = data.WhenEntered,
                    obj.PostingKeyName = data.PostingKeyName,
                    obj.PostingKeyId = data.PostingKeyId,
                    //obj.IsActive = ((data.IsActive == "1") ? "Active" : "Inactive"),
                    //obj.IsActive = ((data.IsActive == "True") ? "1" : "0"),
                    obj.GlSubGroup = obj.GlSubGroup,
                    obj.GlTypeGroup = obj.GlTypeGroup,
                    obj.DealerID = data.DealerID,
                    obj.IsGlobal = data.IsGlobal,
                    obj.COAID = data.COAID;
                return obj;
            };
            GLEditService.$inject = ["$http", "$q"];
            return GLEditService;
        }(GCPL.Service.BaseService));
        Service.GLEditService = GLEditService;
        app.AddService("GLEditService", GLEditService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLMasterServices.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var GLMasterlist = /** @class */ (function () {
            function GLMasterlist() {
            }
            return GLMasterlist;
        }());
        Model.GLMasterlist = GLMasterlist;
        var GLGroup = /** @class */ (function () {
            function GLGroup() {
            }
            return GLGroup;
        }());
        Model.GLGroup = GLGroup;
        var GLSubGroup = /** @class */ (function () {
            function GLSubGroup() {
            }
            return GLSubGroup;
        }());
        Model.GLSubGroup = GLSubGroup;
        var GLSearchModel = /** @class */ (function () {
            function GLSearchModel() {
            }
            return GLSearchModel;
        }());
        Model.GLSearchModel = GLSearchModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLlistModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var GLSearch = GCPL.Model.GLSearchModel;
            var GlListContoller = /** @class */ (function () {
                function GlListContoller(_Listservice, _cookieStore, _window, _groupservice, _subgroupservice) {
                    this._cookieStore = _cookieStore;
                    this._window = _window;
                    this.GLddlSubGroup = null;
                    this.GLList = null;
                    this.GLGroup = null;
                    this.GLSubGroup = null;
                    this.DealerID = null;
                    this.id = null;
                    this.GLDto = null;
                    this.GLSearchModel = null;
                    this.Cookie = null;
                    this.groupservice = _groupservice;
                    this.subgroupservice = _subgroupservice;
                    this.GLSearchModel = new GLSearch();
                    this.Listservice = _Listservice;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.GLDto = new GCPL.Model.GLMasterlist();
                }
                GlListContoller.prototype.$onInit = function () {
                    this.Init();
                    this.SearchGL();
                };
                //Page Load Define Values//
                GlListContoller.prototype.Init = function () {
                };
                GlListContoller.prototype.Group = function () {
                    var _this = this;
                    debugger;
                    this.GLGroup = this.groupservice.Find(this.GLDto.GlTypeId).then((function (response) {
                        _this.GLGroup = _this.groupservice.GetGLGroup(response.data.Result);
                    }));
                };
                GlListContoller.prototype.Groupsub = function () {
                    var _this = this;
                    this.GLSubGroup = this.subgroupservice.Find(this.GLDto.GlGroupId).then((function (response) {
                        _this.GLSubGroup = _this.subgroupservice.GetsubGLGroup(response.data.Result);
                    }));
                };
                //GLsubgroup(): void {
                //    this.GLddlSubGroup = this.Listservice.Findddl().then((response => {
                //        this.GLddlSubGroup = this.Listservice.GLddlSubGroup(response.data.Result);
                //    }));
                //  }
                GlListContoller.prototype.SearchGL = function () {
                    var _this = this;
                    //this.GLDto.GlTypeGroup = '';
                    //this.GLDto.GlSubGroup = '';
                    //this.GLDto.AccountName = '';
                    //this.GLDto.GlAccountCode = '';
                    //this.GLDto.GlTypeName = '';
                    this.GLList = this.Listservice.Find(this.GLDto).then((function (response) {
                        _this.GLList = _this.Listservice.GetList(response.data.Result);
                    }));
                };
                GlListContoller.prototype.Clear = function () {
                    this.GLDto.AccountName = "";
                    this.GLDto.GlAccountCode = "";
                    this.GLDto.GlTypeId = "";
                    this.GLDto.GlGroupId = "";
                    this.GLDto.GlSubGroupId = "";
                };
                GlListContoller.prototype.EditWO = function (data) {
                    this.GLDto = new GCPL.Model.GLMasterlist();
                    this.GLDto.AccountName = data.AccountName;
                    this.GLDto.GlAccountCode = data.GlAccountCode;
                    this.GLDto.GlTypeName = data.GlTypeName;
                    this.GLDto.GlTypeGroup = data.GlTypeGroup;
                    this.GLDto.GlSubGroup = data.GlSubGroup;
                    this.GLDto.IsActive = data.IsActive;
                };
                GlListContoller.prototype.Change = function (data) {
                    this._window.location.href = "#!/GLMaster?Id=" + data + "&Type=Change";
                };
                GlListContoller.prototype.Close = function () {
                    this.GLDto = null;
                    // location.href = "#!/GLListMaster";
                };
                GlListContoller.prototype.ErrorClose = function () {
                    //  location.href = "#!/GLListMaster";
                };
                GlListContoller.$inject = ["glListServies", "$cookieStore", "$window", "GLGroupService", "subGLGroupService"];
                return GlListContoller;
            }());
            var GlListComponent = /** @class */ (function () {
                function GlListComponent() {
                    this.controller = GlListContoller;
                    this.templateUrl = "/Scripts/App/Account/GLMasterlist/Template/_GLlist.html";
                }
                GlListComponent.Name = "glListComponent";
                return GlListComponent;
            }());
            app.AddComponent(GlListComponent.Name, new GlListComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLlistComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var GlListContoller = /** @class */ (function (_super) {
            __extends(GlListContoller, _super);
            function GlListContoller() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GlListContoller;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.GlListContoller = GlListContoller;
        app.AddController("GlListContoller", GlListContoller);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLlistController.js.map
//List
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var glListServies = /** @class */ (function (_super) {
            __extends(glListServies, _super);
            function glListServies($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url; ///${"InsertPPRTypeCtrl"}
                _this.Cookie = _cookieStore;
                return _this;
            }
            glListServies.prototype.Find = function (data) {
                var url = this.apiUrl + "/GLMasterCtrl";
                var GlGroupId;
                var GlSubGroupId;
                var AccountName;
                var GlAccountCode;
                var GlTypeId;
                debugger;
                if (data.GlGroupId == undefined || data.GlGroupId == null) {
                    GlGroupId = "";
                }
                else {
                    GlGroupId = data.GlGroupId;
                }
                if (data.GlSubGroupId == undefined || data.GlSubGroupId == null) {
                    GlSubGroupId = "";
                }
                else {
                    GlSubGroupId = data.GlSubGroupId;
                }
                if (data.AccountName == undefined || data.AccountName == null) {
                    AccountName = "";
                }
                else {
                    AccountName = data.AccountName;
                }
                if (data.GlAccountCode == undefined || data.GlAccountCode == null) {
                    GlAccountCode = "";
                }
                else {
                    GlAccountCode = data.GlAccountCode;
                }
                if (data.GlTypeId == undefined || data.GlTypeId == null) {
                    GlTypeId = "";
                }
                else {
                    GlTypeId = data.GlTypeId;
                }
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        GlTypeGroup: GlGroupId,
                        GlSubGroup: GlSubGroupId,
                        AccountName: AccountName,
                        GlAccountCode: GlAccountCode,
                        GlTypeName: GlTypeId
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            glListServies.prototype.GetList = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        Id: item.Id,
                        DealerID: item.DealerID,
                        IsActive: item.IsActive,
                        AccountName: item.AccountName,
                        CreatedBy: item.CreatedBy,
                        GlAccountCode: item.GlAccountCode,
                        GlGroupId: item.GlGroupId,
                        GlSubGroupId: item.GlSubGroupId,
                        GlTypeId: item.GlTypeId,
                        ManualPosting: item.ManualPosting,
                        WhenModified: item.WhenModified,
                        PostingKeyName: item.PostingKeyName,
                        ModifiedBy: item.ModifiedBy,
                        WhenEntered: item.WhenEntered,
                        PostingKeyId: item.PostingKeyId,
                        GlTypeName: item.GlTypeName,
                        GlSubGroup: item.GlSubGroup,
                        GlTypeGroup: item.GlTypeGroup,
                        IsGlobal: item.IsGlobal,
                        COAName: item.COAName
                    });
                }
                return list;
            };
            glListServies.prototype.Findddl = function () {
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/AccountGlgroupddlctrl"
                });
            };
            glListServies.prototype.GLddlSubGroup = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        GlSubGroup: item.GlSubGroup,
                        GlGroupId: item.GlGroupId,
                        DealerID: item.DealerID,
                        IsActive: item.IsActive,
                        id: item.id,
                    });
                }
                return list;
            };
            glListServies.$inject = ["$http", "$q", "$cookieStore"];
            return glListServies;
        }(GCPL.Service.BaseService));
        Service.glListServies = glListServies;
        app.AddService("glListServies", glListServies);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLlistservices.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var TrailBalance = /** @class */ (function () {
            function TrailBalance() {
            }
            return TrailBalance;
        }());
        Model.TrailBalance = TrailBalance;
        var TrailBalanceReport = /** @class */ (function () {
            function TrailBalanceReport() {
            }
            return TrailBalanceReport;
        }());
        Model.TrailBalanceReport = TrailBalanceReport;
        var DealerDetails = /** @class */ (function () {
            function DealerDetails() {
            }
            return DealerDetails;
        }());
        Model.DealerDetails = DealerDetails;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TrialBalanceModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var TrialBalanceController = /** @class */ (function (_super) {
            __extends(TrialBalanceController, _super);
            function TrialBalanceController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TrialBalanceController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.TrialBalanceController = TrialBalanceController;
        app.AddController("TrialBalanceController", TrialBalanceController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TrialBalanceController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var Model = GCPL.Model.TrailBalance;
            var TrialBalanceController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function TrialBalanceController(_TrailBalanceReportService) {
                    this.TrailBalance = null;
                    this.TrailBalanceReport = null;
                    this.DealerDetail = null;
                    this.TotalDebitamount = 0;
                    this.TotalCreditamount = 0;
                    this.alert = null;
                    this.TrailBalanceReportService = _TrailBalanceReportService;
                    this.TrailBalance = new Model();
                }
                TrialBalanceController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                TrialBalanceController.prototype.Init = function () {
                    var _this = this;
                    this.DealerDetail = this.TrailBalanceReportService.FindDealerDetails().then((function (response) {
                        _this.DealerDetail = _this.TrailBalanceReportService.GetDealerDetails(response.data.Result);
                    }));
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                    //this.GetTrailBalance();
                };
                TrialBalanceController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                TrialBalanceController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                TrialBalanceController.prototype.clear = function () {
                    this.TrailBalanceReport = null;
                    this.TrailBalance = null;
                    this.TotalCreditamount = 0;
                    this.TotalDebitamount = 0;
                    document.getElementById("txtFromDate").value = '';
                    document.getElementById("txtToDate").value = '';
                    this.Init();
                };
                TrialBalanceController.prototype.GetTrailBalance = function () {
                    var _this = this;
                    debugger;
                    var that = this;
                    this.TotalCreditamount = 0;
                    this.TotalDebitamount = 0;
                    this.TrailBalance.FromDate = document.getElementById("txtFromDate").value;
                    this.TrailBalance.ToDate = document.getElementById("txtToDate").value;
                    if (this.TrailBalance.FromDate == "") {
                        //this.alert = "Please select From Date";
                        $("#lblfromdate").show();
                    }
                    else if (this.TrailBalance.ToDate == "") {
                        $("#lblTodate").show();
                    }
                    this.TrailBalanceReport = this.TrailBalanceReportService.FindTrailBalanceReport(this.TrailBalance).then((function (response) {
                        _this.TrailBalanceReport = _this.TrailBalanceReportService.GetTrailBalance(response.data.Result);
                        console.log(_this.TrailBalanceReport);
                        _this.TrailBalanceReport.forEach(function (value, key) {
                            value.DebitAmount = value.DebitAmount == null ? 0 : value.DebitAmount;
                            value.CreditAmount = value.CreditAmount == null ? 0 : value.CreditAmount;
                            if (value.PostingType === 'Debit') {
                                that.TotalDebitamount += parseFloat(value.DebitAmount);
                            }
                            if (value.PostingType === 'Credit') {
                                that.TotalCreditamount += parseFloat(value.DebitAmount);
                            }
                            $("#lblfromdate").hide();
                            $("#lblTodate").hide();
                        });
                    }));
                };
                TrialBalanceController.$inject = ["TrailBalanceReportService"];
                return TrialBalanceController;
            }());
            var TrialBalanceComponentController = /** @class */ (function () {
                function TrialBalanceComponentController() {
                    this.controller = TrialBalanceController;
                    this.templateUrl = "/Scripts/App/Account/TrialBalance/Template/_TrialBalance.html";
                }
                TrialBalanceComponentController.Name = "trialBalaceComponent";
                return TrialBalanceComponentController;
            }());
            app.AddComponent(TrialBalanceComponentController.Name, new TrialBalanceComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TrialBalanceComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var TrailBalanceReportService = /** @class */ (function (_super) {
            __extends(TrailBalanceReportService, _super);
            function TrailBalanceReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            TrailBalanceReportService.prototype.FindTrailBalanceReport = function (data) {
                var url = this.apiUrl + "/TrailBalancectrl";
                var Fromdate;
                var ToDate;
                if (data.FromDate !== undefined) {
                    Fromdate = data.FromDate;
                }
                else {
                    Fromdate = '';
                }
                if (data.ToDate !== undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        FromDate: Fromdate,
                        ToDate: ToDate,
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            TrailBalanceReportService.prototype.GetTrailBalance = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        AccountName: item.AccountName,
                        CreditAmount: item.CreditAmount,
                        DebitAmount: item.DebitAmount,
                        PostingType: item.PostingType,
                        GLAccountID: item.GlAccountID,
                        GlAccountCode: item.GlAccountCode
                    });
                }
                return list;
            };
            TrailBalanceReportService.prototype.FindDealerDetails = function () {
                var url = this.apiUrl + "/GetDealerDetailsByIdctrl";
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            TrailBalanceReportService.prototype.GetDealerDetails = function (data) {
                var obj = new model.DealerDetails();
                //for (let item of data) {
                //    list.push({
                obj.Address = data.Address;
                obj.DealerName = data.DealerName;
                obj.MobileNo = data.MobileNo;
                //});
                //}
                return obj;
            };
            TrailBalanceReportService.$inject = ["$http", "$q", "$cookieStore"];
            return TrailBalanceReportService;
        }(GCPL.Service.BaseService));
        Service.TrailBalanceReportService = TrailBalanceReportService;
        app.AddService("TrailBalanceReportService", TrailBalanceReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TrialBalanceService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var InsertJrEntries = /** @class */ (function () {
            function InsertJrEntries() {
            }
            return InsertJrEntries;
        }());
        Model.InsertJrEntries = InsertJrEntries;
        var MyTransactionModel = /** @class */ (function () {
            function MyTransactionModel() {
            }
            return MyTransactionModel;
        }());
        Model.MyTransactionModel = MyTransactionModel;
        var JrDetailModel = /** @class */ (function () {
            function JrDetailModel() {
            }
            return JrDetailModel;
        }());
        Model.JrDetailModel = JrDetailModel;
        var JrHeaderModel = /** @class */ (function () {
            function JrHeaderModel() {
            }
            return JrHeaderModel;
        }());
        Model.JrHeaderModel = JrHeaderModel;
        var PostData = /** @class */ (function () {
            function PostData() {
            }
            return PostData;
        }());
        Model.PostData = PostData;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=JournalEntryModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var InsertJournalEntry1 = GCPL.Model.InsertJrEntries;
            var InsertJournalHeader1 = GCPL.Model.InsertJrEntries;
            var JournalEntryController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function JournalEntryController(_cookieStore, _CurrencyService, _Service, _window) {
                    this._cookieStore = _cookieStore;
                    this._window = _window;
                    this.Tempcart = null;
                    this.UserID = null;
                    this.DealerID = null;
                    this.Currency = null;
                    this.Currency1 = null;
                    this.Transaction = null;
                    this.AccountCode = null;
                    this.Data = null;
                    this.Some = null;
                    this.alert = null;
                    this.Cookie = null;
                    this.InsertJournalEntry = null;
                    this.InsertJournalHeader = null;
                    this.Cookie = _cookieStore;
                    this.Currencyservice = _CurrencyService;
                    this.Service = _Service;
                    this.InsertJournalEntry = new InsertJournalEntry1();
                    this.InsertJournalHeader = new InsertJournalHeader1();
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.Data = new GCPL.Model.PostData();
                    this.Some = new GCPL.Model.JrHeaderModel();
                }
                JournalEntryController.prototype.Close = function () {
                    this._window.location.href = "#!/JournalEntryList";
                };
                JournalEntryController.prototype.$onInit = function () {
                    this.Init();
                    var that = this;
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd/mm/yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtYear").datepicker({
                        dateFormat: 'yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                JournalEntryController.prototype.selectFromDate = function (e) {
                    document.getElementById("hfFromDate").value = e;
                };
                //Page Load Define Values//
                JournalEntryController.prototype.Init = function () {
                    var _this = this;
                    var n = new Date();
                    var y = n.getFullYear();
                    var m = n.getMonth() + 1;
                    var d = n.getDate();
                    $("#txtFromDate").val(d.toString() + "/" + m.toString() + "/" + y.toString());
                    var n = new Date();
                    var y = n.getFullYear();
                    var m = n.getMonth() + 1;
                    var d = n.getDate();
                    $("#txtYear").val(y.toString());
                    var n = new Date();
                    var y = n.getFullYear();
                    var m = n.getMonth() + 1;
                    var d = n.getDate();
                    var h = n.getHours();
                    var mm = n.getMinutes();
                    var s = n.getSeconds();
                    var ms = n.getMilliseconds();
                    this.InsertJournalEntry.UserId = this.UserID;
                    var today = new Date();
                    var date = today.toDateString();
                    var now = today.toTimeString();
                    document.getElementById('date').innerHTML = date + " " + now;
                    this.Currency = this.Currencyservice.Find().then((function (response) {
                        _this.Currency = _this.Currencyservice.GetCurrency(response.data.Result);
                        var that = _this;
                        _this.Currency.forEach(function (value, key) {
                            that.InsertJournalHeader.BuCurrency = "99";
                        });
                    }));
                    this.Currency1 = this.Currencyservice.Find().then((function (response) {
                        _this.Currency1 = _this.Currencyservice.GetCurrency(response.data.Result);
                        var that = _this;
                        _this.Currency1.forEach(function (value, key) {
                            that.InsertJournalHeader.BuCurrency = "99";
                            //that.InsertJournalEntry.CurrencyName = value.Currency;
                        });
                    }));
                    this.Transaction = this.Service.Find().then((function (response) {
                        _this.Transaction = _this.Service.GetTransaction(response.data.Result);
                    }));
                    //var current = 0;
                    //$('#AddNextElement').click(function (e) {
                    //    var $el = (current == 0) ? $("#FirstElement") : $("#NextElement" + current);
                    //    current++;
                    //    $('<div id="NextElement' + current + '">' + current + '</div>').insertAfter($el);
                    //});
                    $('#AddNextElement').on('click', function () {
                        var id = $(".addr:last").attr('id');
                        var num = parseInt(id);
                        var appendDiv = jQuery($(".addr:last")[0].outerHTML);
                        appendDiv.attr('id', ++num).insertAfter(".addr:last");
                    });
                    var that = this;
                    $("#txtDebitAccount").autocomplete({
                        source: function (request, res) {
                            that.Service.AutofillAccountName(request).then((function (response) {
                                var data = that.Service.GetAutofillAccountName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.AccountName,
                                        value: item.AccountName,
                                        id: item.id,
                                        GlAccountCode: item.GlAccountCode,
                                        GlobalGLID: item.GlobalGLID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedHSNCode = ui.item.id;
                            //that.InsertJournalEntry.Debitaccountname = ui.item.label;
                            //that.InsertJournalEntry.Debitaccountname = ui.item.label;
                            that.InsertJournalEntry.GlAccount = ui.item.GlAccountCode;
                            that.InsertJournalEntry.GlAccountId = ui.item.GlobalGLID;
                            that.InsertJournalEntry.GlobalGLID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    $("#txtCreditAccCode").autocomplete({
                        source: function (request, res) {
                            that.Service.AutofillAccountCode(request).then((function (response) {
                                var data = that.Service.GetAutofillAccountName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    console.log(item);
                                    return {
                                        label: item.GlAccountCode,
                                        value: item.GlAccountCode,
                                        id: item.id,
                                        GlAccountName: item.AccountName
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedHSNCode = ui.item.id;
                            that.InsertJournalEntry.GlAccount = ui.item.label;
                            that.InsertJournalEntry.GlAccount = ui.item.label;
                            that.InsertJournalEntry.GlAccountName = ui.item.GlAccountName;
                            that.InsertJournalEntry.GlAccountId = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                };
                JournalEntryController.prototype.btnAddClick = function () {
                    this.Tempcart = this.FindSelectedQty(this.Tempcart);
                    debugger;
                    var that = this;
                    if (that.InsertJournalEntry.Type == "1") {
                        that.InsertJournalEntry.Type = "Debit";
                    }
                    else {
                        that.InsertJournalEntry.Type = "Credit";
                    }
                    console.log(this.Tempcart);
                    this.InsertJournalEntry = null;
                };
                JournalEntryController.prototype.FindSelectedQty = function (listOfExistinglySelectedQty) {
                    debugger;
                    var that = this;
                    var listOfSelectedQty = [];
                    if (listOfExistinglySelectedQty != null) {
                        listOfExistinglySelectedQty.push(this.InsertJournalEntry);
                        return listOfExistinglySelectedQty;
                    }
                    else {
                        listOfSelectedQty.push(this.InsertJournalEntry);
                        return listOfSelectedQty;
                    }
                };
                JournalEntryController.prototype.Submit = function () {
                    var _this = this;
                    if (this.InsertJournalHeader.BuCurrency == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Currency";
                    }
                    else {
                        debugger;
                        this.Some.BuCurrency = this.InsertJournalHeader.BuCurrency;
                        this.Some.Year = document.getElementById("txtYear").value;
                        this.Some.Date = document.getElementById("txtFromDate").value;
                        this.Some.Purpose = this.InsertJournalHeader.Purpose;
                        this.Some.UserId = this.UserID;
                        this.Some.CreatedBy = this.UserID;
                        this.Some.ModifiedBy = this.UserID;
                        this.Some.DealerId = this.DealerID;
                        this.Some.TransactionId = '1002';
                        this.Data.Header = this.Some;
                        this.Data.Detail = this.Tempcart;
                        this.Service.PostInsertJournalEntries(this.Data).then(function (response) {
                            if (response.data.Result != null) {
                                if (response.data.Result == 0) {
                                    _this.alert = 'Your total Credit and Debit amount does not match';
                                    $("#errorclose").show();
                                    $("#close").hide();
                                }
                                else {
                                    _this.alert = 'Your Journal Entry is saved sucessfully with number ' + response.data.Result;
                                    $("#errorclose").hide();
                                    $("#close").show();
                                    _this.InsertJournalEntry = null;
                                    _this.Tempcart = null;
                                }
                            }
                            else {
                                _this.alert = 'Oops Some Error Occured';
                                $("#errorclose").show();
                                $("#close").hide();
                                //this.IsDisplayModalPopupError = true;
                            }
                        });
                    }
                };
                JournalEntryController.$inject = ["$cookieStore", "CurrencyService", "JournalEntryService", "$window"];
                return JournalEntryController;
            }());
            var JournalEntryComponentController = /** @class */ (function () {
                function JournalEntryComponentController() {
                    this.controller = JournalEntryController;
                    this.templateUrl = "/Scripts/App/JournalEntry/Template/_JournalEntry.html";
                }
                JournalEntryComponentController.Name = "journalentrycomponent";
                return JournalEntryComponentController;
            }());
            app.AddComponent(JournalEntryComponentController.Name, new JournalEntryComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=JournalEntryComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var JournalEntryController = /** @class */ (function (_super) {
            __extends(JournalEntryController, _super);
            function JournalEntryController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return JournalEntryController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.JournalEntryController = JournalEntryController;
        app.AddController("JournalEntryController", JournalEntryController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=JournalEntryController.js.map
//PostInsertCOA
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var JournalEntryService = /** @class */ (function (_super) {
            __extends(JournalEntryService, _super);
            function JournalEntryService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url; ///${"LeadAssessmentSubmit"}`;
                _this.Cookie = _cookieStore;
                return _this;
            }
            JournalEntryService.prototype.AutofillAccountName = function (data) {
                var config = {
                    params: {
                        AccountName: data.term,
                        Dealerid: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "AutofillAccountName",
                    Config: config
                });
            };
            JournalEntryService.prototype.AutofillAccountCode = function (data) {
                var config = {
                    params: {
                        accountcode: data.term,
                        Dealerid: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "AutofillAccountCode",
                    Config: config
                });
            };
            JournalEntryService.prototype.GetAutofillAccountName = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        id: item.id,
                        AccountName: item.AccountName,
                        GlAccountCode: item.GlAccountCode,
                        GlobalGLID: item.GlobalGLID
                    });
                }
                return list;
            };
            JournalEntryService.prototype.Find = function () {
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/GetTransactionForAccountAssignment"
                });
            };
            JournalEntryService.prototype.GetTransaction = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        Transactionid: item.Transactionid,
                        TransactionName: item.TransactionName
                    });
                }
                return list;
            };
            JournalEntryService.prototype.PostInsertJournalEntries = function (data) {
                var url = this.apiUrl + "/PostInsertJournalEntries";
                // console.log(url);
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            JournalEntryService.$inject = ["$http", "$q", "$cookieStore"];
            return JournalEntryService;
        }(GCPL.Service.BaseService));
        Service.JournalEntryService = JournalEntryService;
        app.AddService("JournalEntryService", JournalEntryService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=JournalEntryService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var JRListModel = /** @class */ (function () {
            function JRListModel() {
            }
            return JRListModel;
        }());
        Model.JRListModel = JRListModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=JournalEntryListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var JournalEntryListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function JournalEntryListController(_Service, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.JRList = null;
                    this.DealerID = null;
                    this.UserID = null;
                    this.Cookie = null;
                    this.Service = _Service;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                }
                JournalEntryListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                JournalEntryListController.prototype.Init = function () {
                    var _this = this;
                    this.JRList = this.Service.FindJournalEntryList(this.UserID).then((function (response) {
                        _this.JRList = _this.Service.GetJournalEntryList(response.data.Result);
                        console.log(_this.JRList);
                    }));
                };
                JournalEntryListController.$inject = ["JournalEntryListService", "$cookieStore"];
                return JournalEntryListController;
            }());
            var JournalEntryListComponentController = /** @class */ (function () {
                function JournalEntryListComponentController() {
                    this.controller = JournalEntryListController;
                    this.templateUrl = "/Scripts/App/Account/JournalEntryList/Template/_JournalEntryList.html";
                }
                JournalEntryListComponentController.Name = "journalentrylistcomponent";
                return JournalEntryListComponentController;
            }());
            app.AddComponent(JournalEntryListComponentController.Name, new JournalEntryListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=JournalEntryListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var JournalEntryListController = /** @class */ (function (_super) {
            __extends(JournalEntryListController, _super);
            function JournalEntryListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return JournalEntryListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.JournalEntryListController = JournalEntryListController;
        app.AddController("JournalEntryListController", JournalEntryListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=JournalEntryListController.js.map
//PostInsertJournalEntry
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var JournalEntryListService = /** @class */ (function (_super) {
            __extends(JournalEntryListService, _super);
            function JournalEntryListService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url; ///${"LeadAssessmentSubmit"}`;
                return _this;
            }
            JournalEntryListService.prototype.FindJournalEntryList = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/CtrlJournalEntryGridFill",
                    Config: config
                });
            };
            JournalEntryListService.prototype.GetJournalEntryList = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        Id: item.Id,
                        AccountName: item.AccountName,
                        Currency: item.Currency,
                        Purpose: item.Purpose,
                        Amount: item.Amount,
                        PostingType: item.PostingType,
                        Date: item.Date,
                        AccountDocumentNo: item.AccountDocumentNo,
                        PostedBy: item.PostedBy
                    });
                }
                return list;
            };
            JournalEntryListService.$inject = ["$http", "$q"];
            return JournalEntryListService;
        }(GCPL.Service.BaseService));
        Service.JournalEntryListService = JournalEntryListService;
        app.AddService("JournalEntryListService", JournalEntryListService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=JournalEntryListService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var CustomerReturnReport = /** @class */ (function () {
            function CustomerReturnReport() {
            }
            return CustomerReturnReport;
        }());
        Model.CustomerReturnReport = CustomerReturnReport;
        var CustomerReturnReportParam = /** @class */ (function () {
            function CustomerReturnReportParam() {
            }
            return CustomerReturnReportParam;
        }());
        Model.CustomerReturnReportParam = CustomerReturnReportParam;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerReturnReportModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var cutomerreturnparem1 = GCPL.Model.CustomerReturnReportParam;
            var CustomerReturnReportController = /** @class */ (function () {
                function CustomerReturnReportController(_CustomerRetunReportService, _Autofillservice) {
                    this.CustomerReturnReport = null;
                    this.numRecords = 10;
                    this.NoOfRds = 10;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.page = 0;
                    this.cutomerreturnparem = null;
                    this.CustomerRetunReportService = _CustomerRetunReportService;
                    this.CustomerAutofill = _Autofillservice;
                    this.cutomerreturnparem = new cutomerreturnparem1();
                }
                CustomerReturnReportController.prototype.$onInit = function () {
                    this.Init();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                //Page Load Define Values//
                CustomerReturnReportController.prototype.Init = function () {
                    var that = this;
                    $("#txtCustomer").autocomplete({
                        source: function (request, res) {
                            that.CustomerAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.cutomerreturnparem.CustomerID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    //this.cutomerreturnparem.Fromdate = (<HTMLInputElement>document.getElementById("txtFromDate")).value;
                    //this.cutomerreturnparem.ToDate = (<HTMLInputElement>document.getElementById("txtToDate")).value;
                    //this.CustomerReturnReport = this.CustomerRetunReportService.FindReturnReport(this.cutomerreturnparem).then((response => {
                    //    this.CustomerReturnReport = this.CustomerRetunReportService.GetReturnReport(response.data.Result);
                    //}));
                    this.cutomerreturnparem.FromDate = document.getElementById("txtFromDate").value;
                    this.cutomerreturnparem.ToDate = document.getElementById("txtToDate").value;
                    //this.CustomerReturnReport = this.CustomerRetunReportService.FindReturnReport(this.cutomerreturnparem).then((response => {
                    //    this.CustomerReturnReport = this.CustomerRetunReportService.GetReturnReport(response.data.Result);
                    //}));
                    this.FillGrid(this.numRecords);
                };
                CustomerReturnReportController.prototype.customerreturn = function () {
                    this.numRecords = this.NoOfRds;
                    //this.CustomerReturnReport = this.CustomerRetunReportService.FindReturnReport(this.cutomerreturnparem).then((response => {
                    //    this.CustomerReturnReport = this.CustomerRetunReportService.GetReturnReport(response.data.Result);
                    //}));
                    this.FillGrid(this.numRecords);
                };
                CustomerReturnReportController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.cutomerreturnparem.FromDate = document.getElementById("txtFromDate").value;
                    this.cutomerreturnparem.ToDate = document.getElementById("txtToDate").value;
                    this.CustomerReturnReport = this.CustomerRetunReportService.FindReturnReport(this.cutomerreturnparem).then((function (response) {
                        _this.CustomerReturnReport = _this.CustomerRetunReportService.GetReturnReport(response.data.Result);
                        _this.CustomerReturnReport.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.CustomerReturnReport.slice(0, that.numRecords);
                    }));
                };
                CustomerReturnReportController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                CustomerReturnReportController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.CustomerReturnReport.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                CustomerReturnReportController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.CustomerReturnReport.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                //clear() {
                //    this.cutomerreturnparem = null;
                //    this.cutomerreturnparem.FromDate = "";
                //    this.cutomerreturnparem.ToDate = "";
                //    this.CustomerReturnReport = null;
                //}
                CustomerReturnReportController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                CustomerReturnReportController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                CustomerReturnReportController.$inject = ["CustomerRetunReportService", "CustomeraAtofillService"];
                return CustomerReturnReportController;
            }());
            var CustomerReturnReportComponent = /** @class */ (function () {
                function CustomerReturnReportComponent() {
                    this.controller = CustomerReturnReportController;
                    this.templateUrl = "/Scripts/App/Reports/CustomerReturnReport/Template/_CustomerReturnReport.html";
                }
                CustomerReturnReportComponent.Name = "customerReturnReport";
                return CustomerReturnReportComponent;
            }());
            app.AddComponent(CustomerReturnReportComponent.Name, new CustomerReturnReportComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerReturnReportComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var CustomerReturnController = /** @class */ (function (_super) {
            __extends(CustomerReturnController, _super);
            function CustomerReturnController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CustomerReturnController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.CustomerReturnController = CustomerReturnController;
        app.AddController("CustomerReturnController", CustomerReturnController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerReturnController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var CustomerRetunReportService = /** @class */ (function (_super) {
            __extends(CustomerRetunReportService, _super);
            function CustomerRetunReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            CustomerRetunReportService.prototype.FindReturnReport = function (data) {
                var url = this.apiUrl + "/CustomerReturnReportctrl";
                var CustomerID;
                var Fromdate;
                var ToDate;
                var custreturnno;
                if (data.CustomerID !== undefined) {
                    CustomerID = data.CustomerID;
                }
                else {
                    CustomerID = '';
                }
                if (data.FromDate !== undefined) {
                    Fromdate = data.FromDate;
                }
                else {
                    Fromdate = '';
                }
                if (data.ToDate !== undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                if (data.CustomerReturnNo !== undefined) {
                    custreturnno = data.CustomerReturnNo;
                }
                else {
                    custreturnno = '';
                }
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        CustomerID: CustomerID,
                        FromDate: Fromdate,
                        ToDate: ToDate,
                        CustomerReturnNo: custreturnno
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            CustomerRetunReportService.prototype.GetReturnReport = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        CustomerName: item.CustomerName,
                        CustomerReturnDate: item.CustomerReturnDate,
                        CustomerReturnNo: item.CustomerReturnNo,
                        Description: item.Description,
                        ReturnQty: item.ReturnQty
                    });
                }
                return list;
            };
            CustomerRetunReportService.$inject = ["$http", "$q", "$cookieStore"];
            return CustomerRetunReportService;
        }(GCPL.Service.BaseService));
        Service.CustomerRetunReportService = CustomerRetunReportService;
        app.AddService("CustomerRetunReportService", CustomerRetunReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerReturnReportService.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var VendConPerController = /** @class */ (function () {
                function VendConPerController(_ContactPersonListServiceA, _cookieStore, $location, _ContactPersonListService, _InsertContactPersonservice, _EditContactPersonservice, _DeleteContactPersonservice, _CPgetCustNameservice, _CustomerStatus, _Custnameservice, _VenderListService, _Vendorservice, _VendorNameSer) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.VendermasterList = null;
                    this.ContactPersonList = null;
                    this.search = null;
                    this.customerid = null;
                    this.CID = null;
                    this.VID = null;
                    this.CustomerID = null;
                    this.CustName = null;
                    this.VendName = null;
                    this.InsContactPerson = null;
                    this.alert = null;
                    this.ContactPersonEdit = null;
                    this.ContactPersonID = null;
                    this.ContactPersonDelete = null;
                    this.DealerID = null;
                    this.custnamegetmodel = null;
                    this.StatusDropDown = null;
                    this.IsDisable = true;
                    this.IsEdit = false;
                    this.ContactStateDropDown = null;
                    this.ContactDistrictDropDown = null;
                    this.CountryDropDown = null;
                    this.SelectedContactStateID = null;
                    this.Cookie = _cookieStore;
                    this.CustomerID = $location.search().CustomerID;
                    this.CID = this.CustomerID;
                    this.CustName = $location.search().CustomerName;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.VID = this.VendorID;
                    this.VendorID = $location.search().VendorID;
                    this.ContactID = $location.search().ContactID;
                    // this.VendName = $location.search().VendorName;
                    this.Statusservice = _CustomerStatus;
                    //this.CustomerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.ContactPersonListService = _ContactPersonListService;
                    this.ContactPersonListServiceA = _ContactPersonListServiceA;
                    this.InsertContactPersonservice = _InsertContactPersonservice;
                    this.EditContactPersonservice = _EditContactPersonservice;
                    this.DeleteContactPersonservice = _DeleteContactPersonservice;
                    this.CPgetCustNameservice = _CPgetCustNameservice;
                    this.Custnameservice = _Custnameservice;
                    this.InsContactPerson = new GCPL.Model.InsertContactPersonModel();
                    this.VenderListService = _VenderListService;
                    this.VendornameAutofill = _Vendorservice;
                    this.VendorNameSer = _VendorNameSer;
                }
                VendConPerController.prototype.$onInit = function () {
                    var _this = this;
                    this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                    if ((this.VendorID == null || this.VendorID == undefined) && (this.ContactID == null || this.ContactID == undefined)) {
                        this.IsDisable = false;
                    }
                    if (this.VendorID != null || this.VendorID != undefined) {
                        this.VendorNameSer.Find(this.VendorID).then((function (res) {
                            _this.InsContactPerson.VendorName = res.data.Result.VendorName;
                        }));
                    }
                    this.CountryDropDown = this.ContactPersonListServiceA.FindCountry().then((function (response) {
                        _this.CountryDropDown = _this.ContactPersonListServiceA.GetCountryName(response.data.Result);
                    }));
                    this.ContactStateDropDown = this.ContactPersonListServiceA.FindState().then((function (response) {
                        _this.ContactStateDropDown = _this.ContactPersonListServiceA.ContactStateName(response.data.Result);
                        //this.SelectedContactStateID = this.ContactStateDropDown[0].Region_Code.toString();
                        //this.ContactDistrictDropDown = this.ContactPersonListServiceA.FindDistrict(this.ContactStateDropDown.ContactStateID).then((response => {
                        //    this.ContactDistrictDropDown = this.ContactPersonListServiceA.DistrictName(response.data.Result);
                        //}));
                        //console.log(this.ContactStateDropDown.ContactStateID);       
                        //this.ContactDistrictDropDown = this.ContactPersonListServiceA.FindDistrict(this.ContactStateDropDown.ContactStateID).then((response => {
                        //        this.ContactDistrictDropDown = this.ContactPersonListServiceA.DistrictName(response.data.Result);
                        //    }));
                        // this.ContactDistrict1();
                    }));
                    if (this.ContactID != null && this.ContactID != undefined) {
                        this.IsEdit = true;
                        this.EditContactPerson(this.ContactID);
                    }
                };
                VendConPerController.prototype.Init = function () {
                    //if (this.CustomerID == undefined) {
                    //    this.custnameget(this.VendorID);
                    //    this.ContactPersonList = this.ContactPersonListServiceA.Find(this.VendorID, this.CustomerID).then((response => {
                    //        this.ContactPersonList = this.ContactPersonListServiceA.GetSearchContactPersonListA(response.data.Result);
                    //    }));
                    //}
                    //else {
                    //    this.custnameget(this.CustomerID);
                    //    this.ContactPersonList = this.ContactPersonListServiceA.Find(this.VendorID, this.CustomerID).then((response => {
                    //        this.ContactPersonList = this.ContactPersonListServiceA.GetSearchContactPersonListA(response.data.Result);
                    //    }));
                    //}
                    var _this = this;
                    this.StatusDropDown = this.Statusservice.Find().then((function (response) {
                        _this.StatusDropDown = _this.Statusservice.GetCustomerStatus(response.data.Result);
                    }));
                    //if (this.VendorID != null || this.VendorID != undefined) {               
                    //    let Ven = this.VendorID;
                    //    this.IsDisable = true;
                    //    let that = this;
                    //    this.VendermasterList = this.VenderListService.Find(this.DealerID).then((response => {
                    //        this.VendermasterList = this.VenderListService.GetVenderlist(response.data.Result);                    
                    //        this.VendermasterList.forEach(function (value, key) {                                                         
                    //            if (value.VendorID == Ven) {                            
                    //                that.InsContactPerson.VendorID = value.VendorID;
                    //                that.InsContactPerson.VendorName = value.VendorName;                           
                    //            }
                    //        });
                    //    }));
                    //}
                };
                VendConPerController.prototype.AutoFill = function () {
                    var that = this;
                    $("#txtVendorName").autocomplete({
                        source: function (request, res) {
                            that.VendornameAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.VendornameAutofill.GetVendorName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.VendorName,
                                        value: item.VendorName,
                                        id: item.VendorID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.VendorID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                };
                VendConPerController.prototype.ContactDistrict1 = function (data) {
                    var _this = this;
                    this.ContactDistrictDropDown = this.ContactPersonListServiceA.FindDistrict(data).then((function (response) {
                        _this.ContactDistrictDropDown = _this.ContactPersonListServiceA.DistrictName(response.data.Result);
                    }));
                };
                VendConPerController.prototype.change = function () {
                };
                VendConPerController.prototype.SearchContactPersonList = function () {
                    var _this = this;
                    if (this.CustomerID == 0) {
                        this.search.VendorID = this.VendorID;
                        this.ContactPersonList = this.ContactPersonListService.Find(this.search).then((function (response) {
                            _this.ContactPersonList = _this.ContactPersonListService.GetSearchContactPersonList(response.data.Result);
                        }));
                    }
                    else {
                        this.search.CustomerID = this.CustomerID;
                        this.ContactPersonList = this.ContactPersonListService.Find(this.search).then((function (response) {
                            _this.ContactPersonList = _this.ContactPersonListService.GetSearchContactPersonList(response.data.Result);
                        }));
                    }
                };
                //insert
                VendConPerController.prototype.InsertContactPerson = function () {
                    var _this = this;
                    if (this.InsContactPerson.VendorName == undefined || this.InsContactPerson.VendorName == "" || this.InsContactPerson.VendorName == null) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter Vendor Name";
                    }
                    else if (this.InsContactPerson.ContactPerson == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Contact Person";
                    }
                    else if (this.IsValidEmail(this.InsContactPerson.Email).Result == "False") {
                        this.ShowHidePopUp(this.IsValidEmail(this.InsContactPerson.Email).Message);
                    }
                    else if (this.IsValidMobile(this.InsContactPerson.MobileNo).Result == "False") {
                        this.ShowHidePopUp(this.IsValidMobile(this.InsContactPerson.MobileNo).Message);
                    }
                    //else if (this.IsValidMobile1(this.InsContactPerson.PhoneNo).Result == "False") {
                    //    this.ShowHidePopUp(this.IsValidMobile(this.InsContactPerson.PhoneNo).Message);
                    //}
                    else if (this.IsValidPhone(this.InsContactPerson.LandLineNo).Result == "False") {
                        this.ShowHidePopUp(this.IsValidPhone(this.InsContactPerson.LandLineNo).Message);
                    }
                    //else if (this.InsContactPerson.Designation == undefined) {             
                    //    $("#errorclose").show();
                    //    $("#close").hide();
                    //    this.alert = "Please Select Designation";
                    //}
                    else if (this.InsContactPerson.status == undefined || this.InsContactPerson.status == "") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Status";
                    }
                    else if (this.InsContactPerson.ContactStateID == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select State";
                    }
                    else if (this.InsContactPerson.ContactDistrictID == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select District";
                    }
                    else {
                        this.InsContactPerson.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                        this.InsContactPerson.VendorID = this.VendorID;
                        this.InsContactPerson.CustomerID = this.CustomerID;
                        this.InsContactPerson.ContactPersonID = this.ContactID;
                        this.InsertContactPersonservice.PostContactPerson(this.InsContactPerson).then((function (response) {
                            if (response.data.Result != null) {
                                _this.alert = 'Contact Data is saved successfully with Contact Person No ' + response.data.Result;
                                $("#errorclose").hide();
                                $("#close").show();
                            }
                            else {
                                //this.IsDisplayModalPopupError = true;
                                _this.alert = 'Oops Some Error Occured';
                                $("#errorclose").hide();
                                $("#close").show();
                            }
                        }));
                    }
                };
                //edit
                VendConPerController.prototype.EditContactPerson = function (data) {
                    var _this = this;
                    this.EditContactPersonservice.Find(data).then((function (response) {
                        _this.InsContactPerson = _this.EditContactPersonservice.getContactPersonEdit(response.data.Result);
                        if (_this.InsContactPerson.status == "True") {
                            _this.InsContactPerson.status = "1";
                        }
                        else {
                            _this.InsContactPerson.status = "0";
                        }
                        //console.log(this.InsContactPerson);
                        _this.ContactDistrict1(_this.InsContactPerson.ContactStateID);
                    }));
                };
                //delete
                VendConPerController.prototype.DeleteContactPerson = function (ContactPersonID) {
                    var _this = this;
                    this.DeleteContactPersonservice.Find(ContactPersonID).then((function (response) {
                        _this.InsContactPerson = _this.DeleteContactPersonservice.postContactPersonDelete(response.data.Result);
                        _this.Init();
                        alert("Record deleted successfully..");
                    }));
                };
                //getname
                VendConPerController.prototype.custnameget = function (data) {
                    var _this = this;
                    this.CPgetCustNameservice.Find(data).then((function (response) {
                        _this.InsContactPerson = _this.CPgetCustNameservice.getCPname(response.data.Result);
                        //console.log(this.InsContactPerson);
                    }));
                };
                //Success Message Display
                //OnModalBoxClose(item): void {
                //    this.IsDisplayModalPopup = false;
                //    this.IsDisplayModalPopupError = false;
                //    //location.href = "#!/ContactPerson?CustomerID=" + this.CustomerID;
                //    //location.href = "#!/ContactPerson?VendorID=" + this.VendorID;
                //}
                VendConPerController.prototype.Close = function () {
                    //this.Init();
                    //$("#myTable").show();
                    location.href = "#!/VendConPerList";
                };
                //ErrorClose(): void {
                //    location.href = "#!/ContactPerson";
                //}
                VendConPerController.prototype.IsValidEmail = function (value) {
                    //var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
                    var EMAIL_REGEXP = /^[+a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/i;
                    if (value == undefined || value == "") {
                        return { Result: "False", Message: 'Please Enter Email ID' };
                    }
                    else if (!EMAIL_REGEXP.test(value)) {
                        return { Result: "False", Message: 'Please Enter Valid Email' };
                    }
                    else {
                        return { Result: "True", Message: 'Success' };
                    }
                };
                VendConPerController.prototype.IsValidMobile = function (value) {
                    var re = /^[A-Za-z]+$/;
                    if (value == undefined || value == "") {
                        return { Result: "False", Message: 'Please Enter Mobile No' };
                    }
                    else if (isNaN(value)) {
                        return { Result: "False", Message: 'Please Enter Valid Mobile No' };
                    }
                    else if (value.length != 10) {
                        return { Result: "False", Message: 'Mobile No must be 10 digit' };
                    }
                    else {
                        return { Result: "True", Message: 'Success' };
                    }
                };
                VendConPerController.prototype.IsValidMobile1 = function (value) {
                    var re = /^[A-Za-z]+$/;
                    if (value == undefined || value == "") {
                        return { Result: "True", Message: 'Success' };
                    }
                    else if (isNaN(value)) {
                        return { Result: "False", Message: 'Please Enter Valid Mobile No' };
                    }
                    else if (value.length != 10) {
                        return { Result: "False", Message: 'Mobile No must be 10 digit' };
                    }
                    else {
                        return { Result: "True", Message: 'Success' };
                    }
                };
                VendConPerController.prototype.IsValidPhone = function (value) {
                    var re = /^\+?\d{2}[- ]?\d{3}[- ]?\d{6}$/;
                    if (value == undefined || value == "") {
                        return { Result: "True", Message: 'Success' };
                    }
                    else if (isNaN(value)) {
                        return { Result: "False", Message: 'Please Enter Valid Phone No' };
                    }
                    else if (value.length != 11) {
                        return { Result: "False", Message: 'Phone No must have 11 digits' };
                    }
                    else {
                        return { Result: "True", Message: 'Success' };
                    }
                };
                VendConPerController.prototype.ShowHidePopUp = function (Message) {
                    $("#errorclose").show();
                    $("#close").hide();
                    this.alert = Message;
                };
                VendConPerController.$inject = ["ContactPersonListServiceA", "$cookieStore", "$location", "ContactPersonListService", "InsertContactPersonservice",
                    "EditContactPersonservice", "DeleteContactPersonservice", "CPgetCustNameservice", "CustomerStatusService",
                    "ServiceCallCustomerNameService", "VendermasterListService", "VendorMasterAutofillService", "VenderEditService"];
                return VendConPerController;
            }());
            var VendConPerControllerComponent = /** @class */ (function () {
                function VendConPerControllerComponent() {
                    this.controller = VendConPerController;
                    this.templateUrl = "/Scripts/App/Master/VendorContactPerson/Template/VendConPer.html";
                }
                VendConPerControllerComponent.Name = "vendconpercontrollercomponent";
                return VendConPerControllerComponent;
            }());
            app.AddComponent(VendConPerControllerComponent.Name, new VendConPerControllerComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VendConPerComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var VendConPerController = /** @class */ (function (_super) {
            __extends(VendConPerController, _super);
            function VendConPerController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return VendConPerController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.VendConPerController = VendConPerController;
        app.AddController("VendConPerController", VendConPerController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VendConPerController.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var AccountNameCodeModelnew = /** @class */ (function () {
            function AccountNameCodeModelnew() {
            }
            return AccountNameCodeModelnew;
        }());
        Model.AccountNameCodeModelnew = AccountNameCodeModelnew;
        var Bankmaster = /** @class */ (function () {
            function Bankmaster() {
            }
            return Bankmaster;
        }());
        Model.Bankmaster = Bankmaster;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BankModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var BankMaster = GCPL.Model.Bankmaster;
            var BankController = /** @class */ (function () {
                function BankController($location, _Cservice, _Sservice, _CurrencyService, _Service, _cookieStore, _service, _DNservice, _Editservice) {
                    this.$location = $location;
                    this._cookieStore = _cookieStore;
                    this.CountryDropDown = null;
                    this.StateDropDown = null;
                    this.Currency = null;
                    this.Transaction = null;
                    this.AccountCode = null;
                    this.AccountName = null;
                    this.alert = null;
                    this.DealerID = null;
                    this.Bankmodel = null;
                    this.InsertBankglMaster = null;
                    this.DistributorName = null;
                    this.EntityId = null;
                    this.GroupEntityId = null;
                    this.BankMasterEdit = null;
                    this.ID = null;
                    this.Cookie = null;
                    this.Cservice = _Cservice;
                    this.Sservice = _Sservice;
                    this.Currencyservice = _CurrencyService;
                    this.Service = _Service;
                    this.Cookie = _cookieStore;
                    this.insertservice = _service;
                    this.Distributorservice = _DNservice;
                    this.Editservice = _Editservice;
                    this.InsertBankglMaster = new BankMaster();
                    this.EntityId = this.Cookie.get('UserInfo')['BusinessEntityID'];
                    //this.GroupEntityId = this.Cookie.get('UserInfo')['GroupEntityID'];
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.ID = $location.search().ID;
                }
                BankController.prototype.$onInit = function () {
                    this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                //Page Load Define Values//
                BankController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtAccount").autocomplete({
                        source: function (request, res) {
                            that.Service.AutofillAccountName(request).then((function (response) {
                                var data = that.Service.GetAutofillAccountName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.AccountName,
                                        value: item.AccountName,
                                        id: item.id,
                                        GlAccountCode: item.GlAccountCode
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            //event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedHSNCode = ui.item.id;
                            //that.InsertJournalEntry.Debitaccountname = ui.item.label;
                            //that.InsertJournalEntry.Debitaccountname = ui.item.label; 
                            that.InsertBankglMaster.GlAccountCode = ui.item.GlAccountCode;
                            that.InsertBankglMaster.GlAccountID = ui.item.id;
                            that.InsertBankglMaster.AccountName = ui.item.value;
                            $("#txtglacccode").val(that.InsertBankglMaster.GlAccountCode);
                            $("#txttext").focus();
                        },
                        change: function () {
                        }
                    });
                    $("#txtglacccode").autocomplete({
                        source: function (request, res) {
                            that.Service.AutofillAccountCode(request).then((function (response) {
                                var data = that.Service.GetAutofillAccountName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    console.log(item);
                                    return {
                                        label: item.GlAccountCode,
                                        value: item.GlAccountCode,
                                        id: item.id,
                                        GlAccountName: item.AccountName
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedHSNCode = ui.item.id;
                            that.InsertBankglMaster.AccountName = ui.item.GlAccountName;
                            that.InsertBankglMaster.GlAccountID = ui.item.id;
                            that.InsertBankglMaster.GlAccountCode = ui.item.value;
                            $("#txtAccount").val(that.InsertBankglMaster.AccountName);
                            $("#txttext").focus();
                        },
                        change: function () {
                        }
                    });
                    this.CountryDropDown = this.Cservice.Find().then((function (response) {
                        _this.CountryDropDown = _this.Cservice.GetCountryName(response.data.Result);
                    }));
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                    this.Currency = this.Currencyservice.Find().then((function (response) {
                        _this.Currency = _this.Currencyservice.GetCurrency(response.data.Result);
                    }));
                    this.DistributorName = this.Distributorservice.Find(this.DealerID).then((function (response) {
                        _this.DistributorName = _this.Distributorservice.GetDistributorName(response.data.Result);
                    }));
                    this.Editservice.Find(this.ID).then((function (response) {
                        _this.InsertBankglMaster = _this.Editservice.GetEdit(response.data.Result);
                    }));
                };
                BankController.prototype.Submite = function () {
                    var _this = this;
                    if (this.InsertBankglMaster.BankName == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter  Name";
                    }
                    else if (this.InsertBankglMaster.BankAccno == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter  BankAccno";
                    }
                    else if (this.InsertBankglMaster.State == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter State";
                    }
                    else if (this.InsertBankglMaster.BankAccType == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter Acc Type";
                    }
                    else if (this.InsertBankglMaster.Branch == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter Branch";
                    }
                    else if (this.InsertBankglMaster.Country == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter Country";
                    }
                    else if (this.InsertBankglMaster.Address == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter Address";
                    }
                    else if (this.IsValidPincode(this.InsertBankglMaster.Pin).Result == "False") {
                        this.ShowHidePopUp(this.IsValidPincode(this.InsertBankglMaster.Pin).Message);
                    }
                    else if (this.InsertBankglMaster.Currency == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter Currency";
                    }
                    else if (this.InsertBankglMaster.AccountName == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter AccountName";
                    }
                    else if (this.InsertBankglMaster.IsActive == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter Status";
                    }
                    else {
                        this.InsertBankglMaster.BEID = this.EntityId;
                        this.InsertBankglMaster.DealerID = this.DealerID;
                        this.insertservice.Postbankmaster(this.InsertBankglMaster).then((function (response) {
                            if (response.data.Result != null) {
                                _this.alert = "Data Successfully Saved";
                                $("#errorclose").hide();
                                $("#close").show();
                            }
                            else {
                                _this.alert = 'Oops Some Error Occured';
                                $("#errorclose").hide();
                                $("#close").show();
                            }
                        }));
                    }
                };
                BankController.prototype.Close = function () {
                    location.href = "#!/BankAccountList";
                };
                BankController.prototype.ErrorClose = function () {
                    //location.href = "#!/BankAccount";
                };
                BankController.prototype.IsValidPincode = function (value) {
                    var re = /^[A-Za-z]+$/;
                    if (value == undefined || value == "") {
                        return { Result: "False", Message: 'Please Enter Pincode' };
                    }
                    else if (isNaN(value)) {
                        return { Result: "False", Message: 'Please Enter Valid Pincode' };
                    }
                    else if (value.length != 6) {
                        return { Result: "False", Message: 'Pincode must be 6 digit' };
                    }
                    else {
                        return { Result: "True", Message: 'Success' };
                    }
                };
                BankController.prototype.ShowHidePopUp = function (Message) {
                    $("#errorclose").show();
                    $("#close").hide();
                    this.alert = Message;
                };
                BankController.$inject = ["$location", "CountryService", "StateService", "CurrencyService", "autofillaccountService", "$cookieStore",
                    "InsertbankServies", "DistributorNameServices", "BankEditService"];
                return BankController;
            }());
            var BankComponent = /** @class */ (function () {
                function BankComponent() {
                    this.controller = BankController;
                    this.templateUrl = "/Scripts/App/Account/Bank/Template/_Bank.html";
                }
                BankComponent.Name = "bankComponent";
                return BankComponent;
            }());
            app.AddComponent(BankComponent.Name, new BankComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BankComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var BankController = /** @class */ (function (_super) {
            __extends(BankController, _super);
            function BankController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return BankController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.BankController = BankController;
        app.AddController("BankController", BankController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BankController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var autofillaccountService = /** @class */ (function (_super) {
            __extends(autofillaccountService, _super);
            function autofillaccountService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url; ///${"LeadAssessmentSubmit"}`;
                _this.Cookie = _cookieStore;
                return _this;
            }
            autofillaccountService.prototype.AutofillAccountName = function (data) {
                var config = {
                    params: {
                        AccountName: data.term,
                        Dealerid: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "AutofillAccountName",
                    Config: config
                });
            };
            autofillaccountService.prototype.AutofillAccountCode = function (data) {
                var config = {
                    params: {
                        accountcode: data.term,
                        Dealerid: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "AutofillAccountCode",
                    Config: config
                });
            };
            autofillaccountService.prototype.GetAutofillAccountName = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        id: item.id,
                        AccountName: item.AccountName,
                        GlAccountCode: item.GlAccountCode
                    });
                }
                return list;
            };
            autofillaccountService.$inject = ["$http", "$q", "$cookieStore"];
            return autofillaccountService;
        }(GCPL.Service.BaseService));
        Service.autofillaccountService = autofillaccountService;
        app.AddService("autofillaccountService", autofillaccountService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//insert
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var InsertbankServies = /** @class */ (function (_super) {
            __extends(InsertbankServies, _super);
            function InsertbankServies($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                //this.apiUrl = `${this.url}/${"InsertServiceCallctrl"}`;
                _this.apiUrl = _this.url + "/" + "insertBankGLMasterctrl";
                return _this;
            }
            InsertbankServies.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            InsertbankServies.prototype.Postbankmaster = function (data) {
                var url = this.apiUrl;
                // console.log(url);
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            InsertbankServies.$inject = ["$http", "$q"];
            return InsertbankServies;
        }(GCPL.Service.BaseService));
        Service.InsertbankServies = InsertbankServies;
        app.AddService("InsertbankServies", InsertbankServies);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//listnew
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var BankMasterListServies = /** @class */ (function (_super) {
            __extends(BankMasterListServies, _super);
            function BankMasterListServies($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url; ///${"InsertPPRTypeCtrl"}
                _this.Cookie = _cookieStore;
                return _this;
            }
            BankMasterListServies.prototype.Find = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/insertBankGLMasterctrl",
                    Config: config
                });
            };
            BankMasterListServies.prototype.GetBankList = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        ID: item.ID,
                        BankName: item.BankName,
                        BankAccno: item.BankAccno,
                        BankAccType: item.BankAccType,
                        Branch: item.Branch,
                        Address: item.Address,
                        Country: item.Country,
                        State: item.State,
                        Currency: item.Currency,
                        BEname: item.BEname,
                        IsActive: ((item.IsActive == "1") ? "Active" : "InActive"),
                        ///IsActive: item.IsActive,
                        WhenEntered: item.WhenEntered,
                        AccountName: item.AccountName,
                        Text: item.Text,
                        DealerID: item.DealerID,
                        BEID: item.BEID,
                        GlAccountID: item.GlAccountID,
                        GlAccountCode: item.GlAccountCode,
                        Name: item.Name,
                        Pin: item.Pin
                    });
                }
                return list;
            };
            BankMasterListServies.$inject = ["$http", "$q", "$cookieStore"];
            return BankMasterListServies;
        }(GCPL.Service.BaseService));
        Service.BankMasterListServies = BankMasterListServies;
        app.AddService("BankMasterListServies", BankMasterListServies);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var BankEditService = /** @class */ (function (_super) {
            __extends(BankEditService, _super);
            function BankEditService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "insertBankGLMasterctrl";
                return _this;
            }
            BankEditService.prototype.Find = function (data) {
                var config = {
                    params: {
                        ID: data,
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            BankEditService.prototype.GetEdit = function (data) {
                var obj = new model.Bankmaster();
                console.log("data");
                console.log(data);
                obj.BankName = data.BankName,
                    obj.BankAccno = data.BankAccno,
                    obj.BankAccType = data.BankAccType,
                    obj.Branch = data.Branch,
                    obj.Address = data.Address,
                    obj.Country = data.Country,
                    obj.State = data.State,
                    obj.Currency = data.Currency,
                    obj.BEname = data.BEname,
                    obj.IsActive = data.IsActive,
                    obj.WhenEntered = data.WhenEntered,
                    obj.AccountName = data.AccountName,
                    obj.Text = data.Text,
                    obj.ID = data.ID,
                    obj.DealerID = data.DealerID,
                    obj.BEID = data.BEID,
                    obj.GlAccountID = data.GlAccountID,
                    obj.Pin = data.Pin,
                    obj.GlAccountCode = data.GlAccountCode;
                console.log("obj");
                console.log(obj);
                return obj;
            };
            BankEditService.$inject = ["$http", "$q"];
            return BankEditService;
        }(GCPL.Service.BaseService));
        Service.BankEditService = BankEditService;
        app.AddService("BankEditService", BankEditService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//namespace GCPL.Service {
//    import app = GCPL.app;
//    import model = GCPL.Model;
//    import JournalEntryModel = GCPL.Model.InsertJrEntries;
//    export interface IJournalEntryService {
//        AutofillAccountName(data): ng.IPromise<Utility.Ajax.IResponse>;
//        AutofillAccountCode(data): ng.IPromise<Utility.Ajax.IResponse>;
//        GetAutofillAccountName(data: any): Array<model.AccountNameCodeModel>;
//        Find(): ng.IPromise<Utility.Ajax.IResponse>;
//        GetTransaction(data: any): Array<model.MyTransactionModel>;
//        PostInsertJournalEntries(data: any): ng.IPromise<Utility.Ajax.IResponse>;
//    }
//    export class JournalEntryService extends GCPL.Service.BaseService implements IJournalEntryService {
//        private apiUrl: string = "";
//        private Cookie: any = null;
//        static $inject = ["$http", "$q", "$cookieStore"];
//        constructor(private $http: ng.IHttpService, private $q: ng.IQService, private _cookieStore: any) {
//            super($http, $q);
//            this.apiUrl = `${this.url}`;///${"LeadAssessmentSubmit"}`;
//            this.Cookie = _cookieStore;
//        }
//        AutofillAccountName(data): ng.IPromise<Utility.Ajax.IResponse> {
//            let config = {
//                params: {
//                    AccountName: data.term,
//                    Dealerid: this.Cookie.get('UserInfo')['DealerID']
//                }
//            };
//            return this.ajaXUtility.Get({
//                Url: `${this.url}/${"AutofillAccountName"}`,
//                Config: config
//            });
//        }
//        AutofillAccountCode(data): ng.IPromise<Utility.Ajax.IResponse> {
//            let config = {
//                params: {
//                    accountcode: data.term,
//                    Dealerid: this.Cookie.get('UserInfo')['DealerID']
//                }
//            };
//            return this.ajaXUtility.Get({
//                Url: `${this.url}/${"AutofillAccountCode"}`,
//                Config: config
//            });
//        }
//        GetAutofillAccountName(data: any): Array<model.AccountNameCodeModel> {
//            let list = Array<model.AccountNameCodeModel>();
//            for (let item of data) {
//                list.push({
//                    id: item.id,
//                    AccountName: item.AccountName,
//                    GlAccountCode: item.GlAccountCode
//                });
//            }
//            return list;
//        }
//        Find(): ng.IHttpPromise<model.MyTransactionModel> {
//            return this.ajaXUtility.Get(
//                {
//                    Url: this.apiUrl + "/GetTransactionForAccountAssignment"
//                });
//        }
//        GetTransaction(data: any): Array<model.MyTransactionModel> {
//            let list = Array<model.MyTransactionModel>();
//            for (let item of data) {
//                list.push({
//                    AccessModuleID: item.Transactionid,
//                    Title: item.TransactionName
//                });
//            }
//            return list;
//        }
//        PostInsertJournalEntries(data: any): ng.IPromise<Utility.Ajax.IResponse> {
//            let url = this.apiUrl + "/PostInsertJournalEntries";
//            // console.log(url);
//            return this.$http.post(url, data);
//        }
//    }
//    app.AddService("JournalEntryService", JournalEntryService);
//}
//# sourceMappingURL=BankServices.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var Bankmasterlist = /** @class */ (function () {
            function Bankmasterlist() {
            }
            return Bankmasterlist;
        }());
        Model.Bankmasterlist = Bankmasterlist;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BankListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var BankListController = /** @class */ (function () {
                function BankListController(_List) {
                    this.BankList = null;
                    this.List = _List;
                }
                BankListController.prototype.$onInit = function () {
                    var _this = this;
                    this.Init();
                    this.BankList = this.List.Find().then((function (response) {
                        _this.BankList = _this.List.GetBankList(response.data.Result);
                        console.log("this.BankList");
                        console.log(_this.BankList);
                    }));
                };
                //Page Load Define Values//
                BankListController.prototype.Init = function () {
                };
                BankListController.$inject = ["BankMasterListServies"];
                return BankListController;
            }());
            var BankListComponent = /** @class */ (function () {
                function BankListComponent() {
                    this.controller = BankListController;
                    this.templateUrl = "/Scripts/App/Account/BankList/Template/_BankList.html";
                }
                BankListComponent.Name = "bankListComponent";
                return BankListComponent;
            }());
            app.AddComponent(BankListComponent.Name, new BankListComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BankListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var BankListController = /** @class */ (function (_super) {
            __extends(BankListController, _super);
            function BankListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return BankListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.BankListController = BankListController;
        app.AddController("BankListController", BankListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BankListController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var BankViewController = /** @class */ (function () {
                function BankViewController($location, _Cservice, _Sservice, _CurrencyService, _Service, _cookieStore, _service, _DNservice, _Editservice) {
                    this.$location = $location;
                    this._cookieStore = _cookieStore;
                    this.CountryDropDown = null;
                    this.StateDropDown = null;
                    this.Currency = null;
                    this.Transaction = null;
                    this.AccountCode = null;
                    this.AccountName = null;
                    this.alert = null;
                    this.DealerID = null;
                    this.Bankmodel = null;
                    this.InsertBankglMaster = null;
                    this.DistributorName = null;
                    this.EntityId = null;
                    this.GroupEntityId = null;
                    this.BankMasterEdit = null;
                    this.ID = null;
                    this.Cookie = null;
                    this.Cservice = _Cservice;
                    this.Sservice = _Sservice;
                    this.Currencyservice = _CurrencyService;
                    this.Service = _Service;
                    this.Cookie = _cookieStore;
                    this.insertservice = _service;
                    this.Distributorservice = _DNservice;
                    this.Editservice = _Editservice;
                    this.EntityId = this.Cookie.get('UserInfo')['BusinessEntityID'];
                    //this.GroupEntityId = this.Cookie.get('UserInfo')['GroupEntityID'];
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.ID = $location.search().ID;
                }
                BankViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                BankViewController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtAccount").autocomplete({
                        source: function (request, res) {
                            that.Service.AutofillAccountName(request).then((function (response) {
                                var data = that.Service.GetAutofillAccountName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.AccountName,
                                        value: item.AccountName,
                                        id: item.id,
                                        GlAccountCode: item.GlAccountCode
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            //event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedHSNCode = ui.item.id;
                            //that.InsertJournalEntry.Debitaccountname = ui.item.label;
                            //that.InsertJournalEntry.Debitaccountname = ui.item.label;                   
                            that.InsertBankglMaster.GlAccountCode = ui.item.GlAccountCode;
                            that.InsertBankglMaster.GlAccountID = ui.item.id;
                            $("#txtglacccode").focus();
                        },
                        change: function () {
                        }
                    });
                    $("#txtglacccode").autocomplete({
                        source: function (request, res) {
                            that.Service.AutofillAccountCode(request).then((function (response) {
                                var data = that.Service.GetAutofillAccountName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    console.log(item);
                                    return {
                                        label: item.GlAccountCode,
                                        value: item.GlAccountCode,
                                        id: item.id,
                                        GlAccountName: item.AccountName
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedHSNCode = ui.item.id;
                            that.InsertBankglMaster.AccountName = ui.item.GlAccountName;
                        },
                        change: function () {
                        }
                    });
                    this.CountryDropDown = this.Cservice.Find().then((function (response) {
                        _this.CountryDropDown = _this.Cservice.GetCountryName(response.data.Result);
                    }));
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                    this.Currency = this.Currencyservice.Find().then((function (response) {
                        _this.Currency = _this.Currencyservice.GetCurrency(response.data.Result);
                    }));
                    this.DistributorName = this.Distributorservice.Find(this.DealerID).then((function (response) {
                        _this.DistributorName = _this.Distributorservice.GetDistributorName(response.data.Result);
                    }));
                    this.Editservice.Find(this.ID).then((function (response) {
                        _this.InsertBankglMaster = _this.Editservice.GetEdit(response.data.Result);
                        console.log("InsertBankglMaster");
                        console.log(_this.InsertBankglMaster);
                    }));
                };
                BankViewController.prototype.Submite = function () {
                    //if (this.InsertBankglMaster.Name == undefined) {
                    //    $("#errorclose").show();
                    //    $("#close").hide();
                    //    this.alert = "Please Enter  Name";
                    //}
                    var _this = this;
                    //else if (this.InsertUser.Email == undefined) {
                    //    $("#errorclose").show();
                    //    $("#close").hide();
                    //    this.alert = "Please Enter Vaild Email ID";
                    //}
                    //else if (this.InsertUser.PhoneNo == undefined) {
                    //    $("#errorclose").show();
                    //    $("#close").hide();
                    //    this.alert = "Please Enter PhoneNo";
                    //}
                    //else if (this.InsertBankglMaster.RoleID == undefined) {
                    //    $("#errorclose").show();
                    //    $("#close").hide();
                    //    this.alert = "Please Enter RoleName";
                    //}
                    //else if (this.InsertBankglMaster.Password == undefined) {
                    //    $("#errorclose").show();
                    //    $("#close").hide();
                    //    this.alert = "Please Enter Password";
                    //}
                    //else if (this.InsertBankglMaster.DesignationID == undefined) {
                    //    $("#errorclose").show();
                    //    $("#close").hide();
                    //    this.alert = "Please Enter Designations";
                    //}
                    //else if (this.InsertBankglMaster.FunctionalTeamID == undefined) {
                    //    $("#errorclose").show();
                    //    $("#close").hide();
                    //    this.alert = "Please Enter FunctionalTeam";
                    //}
                    if (this.InsertBankglMaster.IsActive == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter Status";
                    }
                    else {
                        this.InsertBankglMaster.BEID = this.EntityId;
                        this.InsertBankglMaster.DealerID = this.DealerID;
                        this.insertservice.Postbankmaster(this.InsertBankglMaster).then((function (response) {
                            if (response.data.Result != null) {
                                _this.alert = "Data Successfully inserted";
                                $("#errorclose").hide();
                                $("#close").show();
                            }
                            else {
                                _this.alert = 'Oops Some Error Occured';
                                $("#errorclose").hide();
                                $("#close").show();
                            }
                        }));
                    }
                };
                BankViewController.prototype.Close = function () {
                    location.href = "#!/BankAccountList";
                };
                BankViewController.prototype.ErrorClose = function () {
                    //  location.href = "#!/UserMaster";
                };
                BankViewController.$inject = ["$location", "CountryService", "StateService", "CurrencyService", "autofillaccountService", "$cookieStore",
                    "InsertbankServies", "DistributorNameServices", "BankEditService"];
                return BankViewController;
            }());
            var BankViewComponent = /** @class */ (function () {
                function BankViewComponent() {
                    this.controller = BankViewController;
                    this.templateUrl = "/Scripts/App/Account/Bankview/Template/_Bankview.html";
                }
                BankViewComponent.Name = "bankViewComponent";
                return BankViewComponent;
            }());
            app.AddComponent(BankViewComponent.Name, new BankViewComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=Bankviewcomponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var BankViewController = /** @class */ (function (_super) {
            __extends(BankViewController, _super);
            function BankViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return BankViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.BankViewController = BankViewController;
        app.AddController("BankViewController", BankViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BankviewController.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var JRViewHeader = /** @class */ (function () {
            function JRViewHeader() {
            }
            return JRViewHeader;
        }());
        Model.JRViewHeader = JRViewHeader;
        var JRViewDetail = /** @class */ (function () {
            function JRViewDetail() {
            }
            return JRViewDetail;
        }());
        Model.JRViewDetail = JRViewDetail;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=JournalEntryViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var InsertJournalEntryViewHeader1 = GCPL.Model.JRViewHeader;
            var InsertJournalEntryViewDetail1 = GCPL.Model.JRViewDetail;
            var JournalEntryViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function JournalEntryViewController(_cookieStore, _CurrencyService, _Service, $location, _JEService) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.UserID = null;
                    this.DealerID = null;
                    this.Currency1 = null;
                    this.Transaction = null;
                    this.AccountCode = null;
                    this.GetJEViewHeader = null;
                    this.JRList = null;
                    this.Id = null;
                    this.Cookie = null;
                    this.InsertJournalEntryViewHeader = null;
                    this.InsertJournalEntryViewDetail = null;
                    this.Cookie = _cookieStore;
                    this.Currencyservice = _CurrencyService;
                    this.Service = _Service;
                    this.JEService = _JEService;
                    this.InsertJournalEntryViewHeader = new InsertJournalEntryViewHeader1();
                    this.InsertJournalEntryViewDetail = new InsertJournalEntryViewDetail1();
                    this.Id = $location.search().Id;
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                JournalEntryViewController.prototype.$onInit = function () {
                    this.Init();
                    var that = this;
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd/mm/yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtYear").datepicker({
                        dateFormat: 'yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                };
                JournalEntryViewController.prototype.selectFromDate = function (e) {
                    document.getElementById("hfFromDate").value = e;
                };
                //Page Load Define Values//
                JournalEntryViewController.prototype.Init = function () {
                    //var n = new Date();
                    //var y = n.getFullYear();
                    //var m = n.getMonth() + 1;
                    //var d = n.getDate();
                    var _this = this;
                    //$("#txtFromDate").val(d.toString() + "/" + m.toString() + "/" + y.toString());
                    //var n = new Date();
                    //var y = n.getFullYear();
                    //var m = n.getMonth() + 1;
                    //var d = n.getDate();
                    //$("#txtYear").val(y.toString());
                    //var n = new Date();
                    //var y = n.getFullYear();
                    //var m = n.getMonth() + 1;
                    //var d = n.getDate();
                    //var h = n.getHours();
                    //var mm = n.getMinutes();
                    //var s = n.getSeconds();
                    //var ms = n.getMilliseconds();
                    //this.InsertJournalEntryViewHeader.UserId = this.UserID;
                    var today = new Date();
                    var date = today.toDateString();
                    var now = today.toTimeString();
                    document.getElementById('date').innerHTML = date + " " + now;
                    this.GetJEViewHeader = this.JEService.Find(this.Id, this.DealerID).then((function (response) {
                        _this.GetJEViewHeader = _this.JEService.GetData(response.data.Result);
                    }));
                    this.JRList = this.JEService.FindJournalEntryList(this.Id, this.DealerID).then((function (response) {
                        _this.JRList = _this.JEService.GetJournalEntryList(response.data.Result);
                    }));
                };
                JournalEntryViewController.$inject = ["$cookieStore", "CurrencyService", "JournalEntryService", "$location", "JournalEntryViewService"];
                return JournalEntryViewController;
            }());
            var JournalEntryViewComponentController = /** @class */ (function () {
                function JournalEntryViewComponentController() {
                    this.controller = JournalEntryViewController;
                    this.templateUrl = "/Scripts/App/Account/JournalEntryView/Template/_JournalEntryView.html";
                }
                JournalEntryViewComponentController.Name = "journalentryviewcomponent";
                return JournalEntryViewComponentController;
            }());
            app.AddComponent(JournalEntryViewComponentController.Name, new JournalEntryViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=JournalEntryViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var JournalEntryViewController = /** @class */ (function (_super) {
            __extends(JournalEntryViewController, _super);
            function JournalEntryViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return JournalEntryViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.JournalEntryViewController = JournalEntryViewController;
        app.AddController("JournalEntryViewController", JournalEntryViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=JournalEntryViewController.js.map
//PostInsertJournalEntry
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var JournalEntryViewService = /** @class */ (function (_super) {
            __extends(JournalEntryViewService, _super);
            function JournalEntryViewService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url; ///${"LeadAssessmentSubmit"}`;
                return _this;
            }
            JournalEntryViewService.prototype.FindJournalEntryList = function (Id, DealerID) {
                var config = {
                    params: {
                        Id: Id,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/GetJEDetailsData",
                    Config: config
                });
            };
            JournalEntryViewService.prototype.GetJournalEntryList = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        AccountName: item.AccountName,
                        GLCode: item.GLCode,
                        Amount: item.Amount,
                        PostingType: item.PostingType,
                    });
                }
                return list;
            };
            JournalEntryViewService.prototype.Find = function (Id, DealerID) {
                var config = {
                    params: {
                        Id: Id,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/GetJEHeaderData",
                    Config: config
                });
            };
            JournalEntryViewService.prototype.GetData = function (data) {
                var obj = new model.JRViewHeader();
                obj.Date = data.Date;
                obj.Year = data.Year;
                obj.BuCurrency = data.BuCurrency;
                obj.Purpose = data.Purpose;
                obj.UserId = data.UserId;
                return obj;
            };
            JournalEntryViewService.$inject = ["$http", "$q"];
            return JournalEntryViewService;
        }(GCPL.Service.BaseService));
        Service.JournalEntryViewService = JournalEntryViewService;
        app.AddService("JournalEntryViewService", JournalEntryViewService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=JournalEntryViewService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var PLStateModel = /** @class */ (function () {
            function PLStateModel() {
            }
            return PLStateModel;
        }());
        Model.PLStateModel = PLStateModel;
        var PLStateCalParam = /** @class */ (function () {
            function PLStateCalParam() {
                this.RevTotal = 0;
                this.COSTotal = 0;
                this.ExpTotal = 0;
                this.IDATotal = 0;
                this.EITTotal = 0;
                this.GM = 0; //Gross Margin
                this.EBITDA = 0; //Earnings before Interest, Depreciation & Amortisation (EBITDA)
                this.EBT = 0; //Earnings before taxes and extraordinary items
                this.NIEAT = 0; //Net Income, Earnings after taxes (EAT)
            }
            return PLStateCalParam;
        }());
        Model.PLStateCalParam = PLStateCalParam;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PLStateModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var PLStateController = /** @class */ (function (_super) {
            __extends(PLStateController, _super);
            function PLStateController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PLStateController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.PLStateController = PLStateController;
        app.AddController("PLStateController", PLStateController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PLStateController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var PLStateController = /** @class */ (function () {
                function PLStateController(_PLStateService, _cookieStore, $location) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.alert = null;
                    this.ContactPersonID = null;
                    this.FromDate = null;
                    this.ToDate = null;
                    this.DealerID = null;
                    this.PLStateCalParam = null;
                    this.PlStateListRevenue = null;
                    this.PlStateListCOS = null;
                    this.PlStateListExp = null;
                    this.PlStateListIDA = null;
                    this.PlStateListEIT = null;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.PLStateService = _PLStateService;
                    this.PLStateCalParam = new GCPL.Model.PLStateCalParam();
                }
                PLStateController.prototype.$onInit = function () {
                    var that = this;
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                    // this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                PLStateController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                PLStateController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                PLStateController.prototype.Clear = function () {
                    this.FromDate = "";
                    this.ToDate = "";
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    this.PLStateCalParam.GM = 0;
                    this.PLStateCalParam.EBITDA = 0;
                    this.PLStateCalParam.EBT = 0;
                    this.PLStateCalParam.NIEAT = 0;
                };
                PLStateController.prototype.SearchData = function () {
                    this.FromDate = document.getElementById("txtFromDate").value;
                    this.ToDate = document.getElementById("txtToDate").value;
                    this.Init();
                };
                PLStateController.prototype.SearchDataA = function () {
                    this.FromDate = document.getElementById("txtFromDate").value;
                    this.ToDate = document.getElementById("txtToDate").value;
                    this.Init();
                };
                PLStateController.prototype.Init = function () {
                    var _this = this;
                    this.PLStateCalParam.GM = 0;
                    this.PLStateCalParam.EBITDA = 0;
                    this.PLStateCalParam.EBT = 0;
                    this.PLStateCalParam.NIEAT = 0;
                    var that = this;
                    this.PlStateListRevenue = this.PLStateService.PLStateList(this.FromDate, this.ToDate, this.DealerID, "Revenue").then((function (response) {
                        _this.PlStateListRevenue = _this.PLStateService.PLStateData(response.data.Result);
                        that.PLStateCalParam.RevTotal = _this.CalculateTotal(_this.PlStateListRevenue);
                        debugger;
                        _this.PlStateListCOS = _this.PLStateService.PLStateList(_this.FromDate, _this.ToDate, _this.DealerID, "Cost of Sales").then((function (response) {
                            _this.PlStateListCOS = _this.PLStateService.PLStateData(response.data.Result);
                            that.PLStateCalParam.COSTotal = _this.CalculateTotal(_this.PlStateListCOS);
                            debugger;
                            _this.PlStateListExp = _this.PLStateService.PLStateList(_this.FromDate, _this.ToDate, _this.DealerID, "Expences").then((function (response) {
                                _this.PlStateListExp = _this.PLStateService.PLStateData(response.data.Result);
                                that.PLStateCalParam.ExpTotal = _this.CalculateTotal(_this.PlStateListExp);
                                _this.PlStateListIDA = _this.PLStateService.PLStateList(_this.FromDate, _this.ToDate, _this.DealerID, "12,21").then((function (response) {
                                    _this.PlStateListIDA = _this.PLStateService.PLStateData(response.data.Result); // Interest, Depreciation & Amortisation
                                    that.PLStateCalParam.IDATotal = _this.CalculateTotal(_this.PlStateListIDA);
                                    _this.PlStateListEIT = _this.PLStateService.PLStateList(_this.FromDate, _this.ToDate, _this.DealerID, "32,34").then((function (response) {
                                        _this.PlStateListEIT = _this.PLStateService.PLStateData(response.data.Result); //Extraordinary Items & Income Taxes
                                        that.PLStateCalParam.EITTotal = _this.CalculateTotal(_this.PlStateListEIT);
                                        _this.PLStateCalParam.GM = _this.PLStateCalParam.RevTotal - _this.PLStateCalParam.COSTotal;
                                        _this.PLStateCalParam.EBITDA = _this.PLStateCalParam.GM - _this.PLStateCalParam.ExpTotal;
                                        _this.PLStateCalParam.EBT = _this.PLStateCalParam.EBITDA - _this.PLStateCalParam.IDATotal;
                                        _this.PLStateCalParam.NIEAT = _this.PLStateCalParam.EBT - _this.PLStateCalParam.EITTotal;
                                    }));
                                }));
                            }));
                        }));
                    }));
                    debugger;
                };
                //delete
                //DeleteContactPerson(ContactPersonID): void {
                //    this.DeleteContactPersonservice.Find(ContactPersonID).then((response => {
                //        this.DeleteContactPersonservice.postContactPersonDelete(response.data.Result);
                //        this.Init();
                //        alert("Record deleted successfully..");
                //    }));
                //}
                PLStateController.prototype.CalculateTotal = function (data) {
                    var total = 0;
                    data.forEach(function (value, key) {
                        total += parseFloat(value.Amount);
                    });
                    return total;
                };
                PLStateController.prototype.Close = function () {
                    this.Init();
                    // $("#myTable").show();  
                };
                PLStateController.$inject = ["PLStateService", "$cookieStore", "$location"];
                return PLStateController;
            }());
            var PLStateControllerComponent = /** @class */ (function () {
                function PLStateControllerComponent() {
                    this.controller = PLStateController;
                    this.templateUrl = "/Scripts/App/Account/PLStatement/Template/PLState.html";
                }
                PLStateControllerComponent.Name = "plstatecontrollercomponent";
                return PLStateControllerComponent;
            }());
            app.AddComponent(PLStateControllerComponent.Name, new PLStateControllerComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PLStateComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var PLStateService = /** @class */ (function (_super) {
            __extends(PLStateService, _super);
            function PLStateService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url; ///${"CtrlContactPersonGridFill"}`;
                return _this;
            }
            PLStateService.prototype.PLStateList = function (FromDate, ToDate, DealerID, Group) {
                var config = {
                    params: {
                        FromDate: FromDate,
                        ToDate: ToDate,
                        DealerID: DealerID,
                        Group: Group
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/PLStatement",
                    Config: config
                });
            };
            PLStateService.prototype.PLStateData = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        AccountName: item.AccountName,
                        Amount: item.Amount
                    });
                }
                return list;
            };
            PLStateService.$inject = ["$http", "$q"];
            return PLStateService;
        }(GCPL.Service.BaseService));
        Service.PLStateService = PLStateService;
        app.AddService("PLStateService", PLStateService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PLStateService.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var AccountDocumentDetailsService = /** @class */ (function (_super) {
            __extends(AccountDocumentDetailsService, _super);
            function AccountDocumentDetailsService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            AccountDocumentDetailsService.prototype.FindAccountDocumentDetails = function (data, type) {
                debugger;
                var url = this.apiUrl + "/AccountDocumentctrl";
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        accountdocumentno: data,
                        Type: type
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            AccountDocumentDetailsService.prototype.GetAccountDocumentDetails = function (data) {
                var obj = new model.AccountDocumentHeaderDetails;
                //for (let item of data) {
                //    list.push({
                //    });
                //}
                obj.AccountDocumentNo = data.AccountDocumentNo;
                obj.Date = data.Date;
                obj.Id = data.Id;
                obj.RefDocumentNo = data.RefDocumentNo;
                obj.UserName = data.UserName;
                obj.Year = data.Year;
                obj.documentlist = data.documentlist;
                obj.postingname = data.postingname;
                return obj;
            };
            AccountDocumentDetailsService.$inject = ["$http", "$q", "$cookieStore"];
            return AccountDocumentDetailsService;
        }(GCPL.Service.BaseService));
        Service.AccountDocumentDetailsService = AccountDocumentDetailsService;
        app.AddService("AccountDocumentDetailsService", AccountDocumentDetailsService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AccountDocumentDetailsService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var AccountDocumentHeaderDetails = /** @class */ (function () {
            function AccountDocumentHeaderDetails() {
            }
            return AccountDocumentHeaderDetails;
        }());
        Model.AccountDocumentHeaderDetails = AccountDocumentHeaderDetails;
        var AccountDocumentDetails = /** @class */ (function () {
            function AccountDocumentDetails() {
            }
            return AccountDocumentDetails;
        }());
        Model.AccountDocumentDetails = AccountDocumentDetails;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AccountDocumentDetailsModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var TrialBalanceDocumentAccountController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function TrialBalanceDocumentAccountController(_AccountDocumentDetailsService, $location) {
                    this.$location = $location;
                    //TrailBalance: GCPL.Model.TrailBalance = null;
                    this.AccountDocumentDetails = null;
                    this.DealerDetail = null;
                    this.TotalDebitamount = 0;
                    this.TotalCreditamount = 0;
                    this.alert = null;
                    this.AccountDocumentNo = null;
                    this.Type = null;
                    this.AccountDocumentDetailsService = _AccountDocumentDetailsService;
                    //this.TrailBalance = new Model();
                    this.AccountDocumentNo = $location.search().AccountDocumentNo;
                    this.Type = $location.search().Type;
                }
                TrialBalanceDocumentAccountController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                TrialBalanceDocumentAccountController.prototype.Init = function () {
                    this.GetTrailBalance();
                };
                TrialBalanceDocumentAccountController.prototype.GetTrailBalance = function () {
                    var _this = this;
                    debugger;
                    this.AccountDocumentDetails = this.AccountDocumentDetailsService.FindAccountDocumentDetails(this.AccountDocumentNo, this.Type).then((function (response) {
                        _this.AccountDocumentDetails = _this.AccountDocumentDetailsService.GetAccountDocumentDetails(response.data.Result);
                    }));
                };
                TrialBalanceDocumentAccountController.$inject = ["AccountDocumentDetailsService", "$location"];
                return TrialBalanceDocumentAccountController;
            }());
            var TrialBalanceDocumentAccountComponentController = /** @class */ (function () {
                function TrialBalanceDocumentAccountComponentController() {
                    this.controller = TrialBalanceDocumentAccountController;
                    this.templateUrl = "/Scripts/App/Account/AccountDocumentsDetails/Template/__AccountDocumentDetails.html";
                }
                TrialBalanceDocumentAccountComponentController.Name = "trialBalaceAccountDocumentComponent";
                return TrialBalanceDocumentAccountComponentController;
            }());
            app.AddComponent(TrialBalanceDocumentAccountComponentController.Name, new TrialBalanceDocumentAccountComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AccountDocumentDetailsComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var AccountDocumentDetailsController = /** @class */ (function (_super) {
            __extends(AccountDocumentDetailsController, _super);
            function AccountDocumentDetailsController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AccountDocumentDetailsController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.AccountDocumentDetailsController = AccountDocumentDetailsController;
        app.AddController("AccountDocumentDetailsController", AccountDocumentDetailsController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AccountDocumentDetailsController.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var TrailBalanceDetails = /** @class */ (function () {
            function TrailBalanceDetails() {
            }
            return TrailBalanceDetails;
        }());
        Model.TrailBalanceDetails = TrailBalanceDetails;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TrailBalanceDetailsModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var Model = GCPL.Model.TrailBalance;
            var TrialBalanceDetailsController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function TrialBalanceDetailsController(_TrailBalanceDetailsService, $location, _window) {
                    this.$location = $location;
                    this._window = _window;
                    this.TrailBalance = null;
                    this.TrailBalanceDetails = null;
                    this.DealerDetail = null;
                    this.TotalDebitamount = 0;
                    this.TotalCreditamount = 0;
                    this.alert = null;
                    this.GlAccountID = null;
                    this.TrailBalanceDetailsService = _TrailBalanceDetailsService;
                    this.TrailBalance = new Model();
                    this.GlAccountID = $location.search().GLID;
                    //  this.PostingType = $location.search().PostingType;
                }
                TrialBalanceDetailsController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                TrialBalanceDetailsController.prototype.Init = function () {
                    this.GetTrailBalance();
                };
                TrialBalanceDetailsController.prototype.GetTrailBalance = function () {
                    var _this = this;
                    this.TrailBalanceDetails = this.TrailBalanceDetailsService.FindTrailBalanceDetails(this.GlAccountID).then((function (response) {
                        _this.TrailBalanceDetails = _this.TrailBalanceDetailsService.GetTrailBalanceDetails(response.data.Result);
                        //this.TrailBalanceReport.forEach(function (value, key) {
                        //});
                        console.log(_this.TrailBalanceDetails);
                    }));
                };
                TrialBalanceDetailsController.prototype.AccountDoc = function (data) {
                    console.log(data);
                    if (data.RefDocumentNo != null && data.TransactionID == "101") {
                        this._window.location.href = "/#!/GoodsReceiptView?RefDocumentNo=" + data.RefDocumentNo;
                    }
                    else if (data.RefDocumentNo != null && data.TransactionID == "102") {
                        this._window.location.href = "/#!/GoodsReceiptReversalView?RefDocumentNo=" + data.RefDocumentNo;
                    }
                    else if (data.RefDocumentNo != null && data.TransactionID == "105") {
                        this._window.location.href = "/#!/DispositionDocumentView?RefDocumentNo=" + data.RefDocumentNo;
                    }
                    //else if (data.RefDocumentNo != null && data.TransactionID == "106") {
                    //    this._window.location.href = "/#!/CustomerReturnView?RefDocumentNo=" + data.RefDocumentNo;
                    //}
                    //else if (data.RefDocumentNo != null && data.TransactionID == "103") {
                    //    this._window.location.href = "/#!/DispositionDocumentView?RefDocumentNo=" + data.RefDocumentNo;
                    //}
                    else if (data.RefDocumentNo != null && data.TransactionID == "201") {
                        this._window.location.href = "/#!/BillingView?RefDocumentNo=" + data.RefDocumentNo;
                    }
                    else if (data.RefDocumentNo != null && data.TransactionID == "202") {
                        this._window.location.href = "/#!/CustomerReturnView?RefDocumentNo=" + data.RefDocumentNo;
                    }
                    //else if (data.RefDocumentNo != null && data.TransactionID == "901") {
                    //    this._window.location.href = "/#!/GoodsReceiptReversalView?RefDocumentNo=" + data.RefDocumentNo;
                    //}
                    //else if (data.RefDocumentNo != null && data.TransactionID == "907") {
                    //    this._window.location.href = "/#!/CustomerReturnView?RefDocumentNo=" + data.RefDocumentNo;
                    //}
                    //else if (data.RefDocumentNo != null && data.TransactionID == "908") {
                    //    this._window.location.href = "/#!/CustomerReturnView?RefDocumentNo=" + data.RefDocumentNo;
                    //}
                    //else if (data.RefDocumentNo != null && data.TransactionID == "801") {
                    //    this._window.location.href = "/#!/CustomerReturnView?RefDocumentNo=" + data.RefDocumentNo;
                    //}
                    else if (data.RefDocumentNo != null && data.TransactionID == "301") {
                        this._window.location.href = "/#!/DebitNoteView?RefDocumentNo=" + data.RefDocumentNo;
                    }
                    else if (data.RefDocumentNo != null && data.TransactionID == "300") {
                        this._window.location.href = "/#!/CreditNoteView?RefDocumentNo=" + data.RefDocumentNo;
                    }
                    //else if (data.RefDocumentNo != null && data.TransactionID == "1002") {
                    //    this._window.location.href = "/#!/BillingView?RefDocumentNo=" + data.RefDocumentNo;
                    //}
                };
                TrialBalanceDetailsController.$inject = ["TrailBalanceDetailsService", "$location", "$window"];
                return TrialBalanceDetailsController;
            }());
            var TrialBalanceDetailsComponentController = /** @class */ (function () {
                function TrialBalanceDetailsComponentController() {
                    this.controller = TrialBalanceDetailsController;
                    this.templateUrl = "/Scripts/App/Account/TrailBalanceDetails/Template/_TrailBalanceDetails.html";
                }
                TrialBalanceDetailsComponentController.Name = "trialBalaceDetailsComponent";
                return TrialBalanceDetailsComponentController;
            }());
            app.AddComponent(TrialBalanceDetailsComponentController.Name, new TrialBalanceDetailsComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TrailBalanceDetailsComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var TrailBalanceDetailsService = /** @class */ (function (_super) {
            __extends(TrailBalanceDetailsService, _super);
            function TrailBalanceDetailsService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            TrailBalanceDetailsService.prototype.FindTrailBalanceDetails = function (data) {
                debugger;
                var url = this.apiUrl + "/TrailBalancectrl";
                var GLId;
                if (data !== undefined) {
                    GLId = data;
                }
                else {
                    GLId = '';
                }
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        GLID: GLId
                        // PostingType: PostingType
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            TrailBalanceDetailsService.prototype.GetTrailBalanceDetails = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        AccountDocumentNo: item.AccountDocumentNo,
                        Amount: item.Amount,
                        Date: item.Date,
                        PostingKey: item.PostingKey == "1" ? "Debit" : "Credit",
                        RefDocumentNo: item.RefDocumentNo,
                        TransactionName: item.TransactionName,
                        User: item.User,
                        Year: item.Year,
                        Type: item.Type,
                        GLAccountCode: item.GLAccountCode,
                        TransactionID: item.TransactionID
                    });
                }
                return list;
            };
            TrailBalanceDetailsService.$inject = ["$http", "$q", "$cookieStore"];
            return TrailBalanceDetailsService;
        }(GCPL.Service.BaseService));
        Service.TrailBalanceDetailsService = TrailBalanceDetailsService;
        app.AddService("TrailBalanceDetailsService", TrailBalanceDetailsService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TrailBalanceDetailsService.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var TrailBalanceDetailsController = /** @class */ (function (_super) {
            __extends(TrailBalanceDetailsController, _super);
            function TrailBalanceDetailsController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TrailBalanceDetailsController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.TrailBalanceDetailsController = TrailBalanceDetailsController;
        app.AddController("TrailBalanceDetailsController", TrailBalanceDetailsController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TrailBalanceDetailsController.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var BalSheetModel = /** @class */ (function () {
            function BalSheetModel() {
            }
            return BalSheetModel;
        }());
        Model.BalSheetModel = BalSheetModel;
        var BalSheetCalParam = /** @class */ (function () {
            function BalSheetCalParam() {
                this.FixedTotal = 0;
                this.CurrTotal = 0;
                this.ShortTotal = 0;
                this.LongTotal = 0;
                this.EquTotal = 0;
                this.AssetTotal = 0;
                this.LiabilitesTotal = 0;
            }
            return BalSheetCalParam;
        }());
        Model.BalSheetCalParam = BalSheetCalParam;
        var DealerData = /** @class */ (function () {
            function DealerData() {
            }
            return DealerData;
        }());
        Model.DealerData = DealerData;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BalSheetModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var BalSheetController = /** @class */ (function (_super) {
            __extends(BalSheetController, _super);
            function BalSheetController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return BalSheetController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.BalSheetController = BalSheetController;
        app.AddController("BalSheetController", BalSheetController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BalSheetController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var BalSheetController = /** @class */ (function () {
                function BalSheetController(_BalSheetService, _cookieStore, $location) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.alert = null;
                    this.ContactPersonID = null;
                    //FromDate = null;
                    this.AsOnDate = null;
                    this.DealerID = null;
                    this.BalSheetCalParam = null;
                    this.BalSheetListCurrent = null;
                    this.BalSheetListFixed = null;
                    this.BalSheetListShort = null;
                    this.BalSheetListLong = null;
                    this.BalSheetListEquity = null;
                    this.IsShow = false;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.BalSheetService = _BalSheetService;
                    this.BalSheetCalParam = new GCPL.Model.BalSheetCalParam();
                    this.DealerData = new GCPL.Model.DealerData();
                }
                BalSheetController.prototype.$onInit = function () {
                    var _this = this;
                    var that = this;
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                    // this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                    this.BalSheetService.Find(this.DealerID).then((function (response) {
                        _this.DealerData = _this.BalSheetService.GetData(response.data.Result);
                    }));
                };
                BalSheetController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                BalSheetController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                BalSheetController.prototype.Clear = function () {
                    this.IsShow = false;
                    //this.FromDate = "";
                    this.AsOnDate = "";
                    //(<HTMLInputElement>document.getElementById("txtFromDate")).value = "";
                    document.getElementById("txtToDate").value = "";
                };
                BalSheetController.prototype.SearchData = function () {
                    // this.FromDate = (<HTMLInputElement>document.getElementById("txtFromDate")).value;
                    this.AsOnDate = document.getElementById("txtToDate").value;
                    if (this.AsOnDate != null && this.AsOnDate != undefined && this.AsOnDate != "") {
                        this.IsShow = true;
                        this.Init();
                    }
                };
                BalSheetController.prototype.Init = function () {
                    var _this = this;
                    this.BalSheetCalParam.AssetTotal = 0;
                    this.BalSheetCalParam.LiabilitesTotal = 0;
                    var that = this;
                    this.BalSheetListCurrent = this.BalSheetService.BalSheetList(this.AsOnDate, this.DealerID, "Current Assets").then((function (response) {
                        _this.BalSheetListCurrent = _this.BalSheetService.BalSheetData(response.data.Result);
                        that.BalSheetCalParam.CurrTotal = _this.CalculateTotal(_this.BalSheetListCurrent);
                        _this.BalSheetListFixed = _this.BalSheetService.BalSheetList(_this.AsOnDate, _this.DealerID, "Fixed Assets").then((function (response) {
                            _this.BalSheetListFixed = _this.BalSheetService.BalSheetData(response.data.Result);
                            that.BalSheetCalParam.FixedTotal = _this.CalculateTotal(_this.BalSheetListFixed);
                            _this.BalSheetListShort = _this.BalSheetService.BalSheetList(_this.AsOnDate, _this.DealerID, "Short Term Liability").then((function (response) {
                                _this.BalSheetListShort = _this.BalSheetService.BalSheetData(response.data.Result);
                                that.BalSheetCalParam.ShortTotal = _this.CalculateTotal(_this.BalSheetListShort);
                                _this.BalSheetListLong = _this.BalSheetService.BalSheetList(_this.AsOnDate, _this.DealerID, "Long Term Liability").then((function (response) {
                                    _this.BalSheetListLong = _this.BalSheetService.BalSheetData(response.data.Result); // Interest, Depreciation & Amortisation
                                    that.BalSheetCalParam.LongTotal = _this.CalculateTotal(_this.BalSheetListLong);
                                    _this.BalSheetListEquity = _this.BalSheetService.BalSheetList(_this.AsOnDate, _this.DealerID, "Equity").then((function (response) {
                                        _this.BalSheetListEquity = _this.BalSheetService.BalSheetData(response.data.Result); //Extraordinary Items & Income Taxes
                                        that.BalSheetCalParam.EquTotal = _this.CalculateTotal(_this.BalSheetListEquity);
                                        _this.BalSheetCalParam.AssetTotal = that.BalSheetCalParam.FixedTotal + that.BalSheetCalParam.CurrTotal;
                                        _this.BalSheetCalParam.LiabilitesTotal = that.BalSheetCalParam.ShortTotal + that.BalSheetCalParam.LongTotal + that.BalSheetCalParam.EquTotal;
                                    }));
                                }));
                            }));
                        }));
                    }));
                };
                //delete
                //DeleteContactPerson(ContactPersonID): void {
                //    this.DeleteContactPersonservice.Find(ContactPersonID).then((response => {
                //        this.DeleteContactPersonservice.postContactPersonDelete(response.data.Result);
                //        this.Init();
                //        alert("Record deleted successfully..");
                //    }));
                //}
                BalSheetController.prototype.CalculateTotal = function (data) {
                    var total = 0;
                    data.forEach(function (value, key) {
                        total += parseFloat(value.Amount);
                    });
                    return total;
                };
                BalSheetController.prototype.Close = function () {
                    this.Init();
                    // $("#myTable").show();  
                };
                BalSheetController.$inject = ["BalSheetService", "$cookieStore", "$location"];
                return BalSheetController;
            }());
            var BalSheetControllerComponent = /** @class */ (function () {
                function BalSheetControllerComponent() {
                    this.controller = BalSheetController;
                    this.templateUrl = "/Scripts/App/Account/BalanceSheet/Template/BalSheet.html";
                }
                BalSheetControllerComponent.Name = "balsheetcontrollercomponent";
                return BalSheetControllerComponent;
            }());
            app.AddComponent(BalSheetControllerComponent.Name, new BalSheetControllerComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BalSheetComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var BalSheetService = /** @class */ (function (_super) {
            __extends(BalSheetService, _super);
            function BalSheetService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url; ///${"CtrlContactPersonGridFill"}`;
                return _this;
            }
            BalSheetService.prototype.BalSheetList = function (AsOnDate, DealerID, Group) {
                var config = {
                    params: {
                        AsOnDate: AsOnDate,
                        DealerID: DealerID,
                        Group: Group
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/BalanceSheet",
                    Config: config
                });
            };
            BalSheetService.prototype.BalSheetData = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        AccountName: item.AccountName,
                        Amount: item.Amount
                    });
                }
                return list;
            };
            BalSheetService.prototype.Find = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                // console.log(config);
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/BalanceSheet",
                    Config: config
                });
            };
            BalSheetService.prototype.GetData = function (data) {
                var obj = new model.DealerData();
                obj.CompanyName = data.CompanyName;
                obj.Address = data.Address;
                obj.CIN = data.CIN;
                return obj;
            };
            BalSheetService.$inject = ["$http", "$q"];
            return BalSheetService;
        }(GCPL.Service.BaseService));
        Service.BalSheetService = BalSheetService;
        app.AddService("BalSheetService", BalSheetService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BalSheetService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var GoodsReceiptReversalHeader = /** @class */ (function () {
            function GoodsReceiptReversalHeader() {
            }
            return GoodsReceiptReversalHeader;
        }());
        Model.GoodsReceiptReversalHeader = GoodsReceiptReversalHeader;
        var GoodsReceiptReversalDetails = /** @class */ (function () {
            function GoodsReceiptReversalDetails() {
            }
            return GoodsReceiptReversalDetails;
        }());
        Model.GoodsReceiptReversalDetails = GoodsReceiptReversalDetails;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GoodsReceiptReversalViewModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var GoodsReceiptReversalViewController = /** @class */ (function (_super) {
            __extends(GoodsReceiptReversalViewController, _super);
            function GoodsReceiptReversalViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GoodsReceiptReversalViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.GoodsReceiptReversalViewController = GoodsReceiptReversalViewController;
        app.AddController("GoodsReceiptReversalViewController", GoodsReceiptReversalViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GoodsReceiptReversalViewController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var GoodReceiptReversalService = /** @class */ (function (_super) {
            __extends(GoodReceiptReversalService, _super);
            function GoodReceiptReversalService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            GoodReceiptReversalService.prototype.FindGoodReceiptReversalView = function (data) {
                debugger;
                var url = this.apiUrl + "/GoodsReceiptReversalViewctrl";
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        RefrenceNo: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            GoodReceiptReversalService.prototype.GetGoodReceiptReversalView = function (data) {
                var obj = new model.GoodsReceiptReversalHeader;
                obj.GoodsReceiptReversal = data.GoodsReceiptReversal;
                obj.GoodsReversalNo = data.GoodsReversalNo;
                obj.PONumber = data.PONumber;
                return obj;
            };
            GoodReceiptReversalService.$inject = ["$http", "$q", "$cookieStore"];
            return GoodReceiptReversalService;
        }(GCPL.Service.BaseService));
        Service.GoodReceiptReversalService = GoodReceiptReversalService;
        app.AddService("GoodReceiptReversalService", GoodReceiptReversalService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GoodsReceiptReversalViewService.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var GoodsReceiptReversalViewController = /** @class */ (function () {
                function GoodsReceiptReversalViewController(_IGoodReceiptReversalViewService, $location) {
                    this.$location = $location;
                    this.GoodsReversal = null;
                    this.RefrenceNo = null;
                    this.ICustomerReturnViewService = _IGoodReceiptReversalViewService;
                    this.RefrenceNo = $location.search().RefDocumentNo;
                }
                GoodsReceiptReversalViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                GoodsReceiptReversalViewController.prototype.Init = function () {
                    var _this = this;
                    this.ICustomerReturnViewService.FindGoodReceiptReversalView(this.RefrenceNo).then((function (response) {
                        _this.GoodsReversal = _this.ICustomerReturnViewService.GetGoodReceiptReversalView(response.data.Result);
                    }));
                };
                GoodsReceiptReversalViewController.$inject = ["GoodReceiptReversalService", "$location"];
                return GoodsReceiptReversalViewController;
            }());
            var GoodsReceiptReversalViewComponentController = /** @class */ (function () {
                function GoodsReceiptReversalViewComponentController() {
                    this.controller = GoodsReceiptReversalViewController;
                    this.templateUrl = "/Scripts/App/AccountDocumentView/GoodsRecieptReversalView/Template/_GoodsReceiptReversalView.html";
                }
                GoodsReceiptReversalViewComponentController.Name = "goodsreceiptreversalview";
                return GoodsReceiptReversalViewComponentController;
            }());
            app.AddComponent(GoodsReceiptReversalViewComponentController.Name, new GoodsReceiptReversalViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=GoodsReceiptReversalViewComponent.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var GoodsReceiptViewDto = /** @class */ (function () {
            function GoodsReceiptViewDto() {
            }
            return GoodsReceiptViewDto;
        }());
        Model.GoodsReceiptViewDto = GoodsReceiptViewDto;
        var GoodsReceiptViewDetailsDto = /** @class */ (function () {
            function GoodsReceiptViewDetailsDto() {
            }
            return GoodsReceiptViewDetailsDto;
        }());
        Model.GoodsReceiptViewDetailsDto = GoodsReceiptViewDetailsDto;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GoodsReceiptViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var GoodsReceiptViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function GoodsReceiptViewController(_GoodReceiptViewService, $location, _StockvarianceReportService, _FillPoType) {
                    this.$location = $location;
                    this.GoodReceiptView = null;
                    this.RefrenceNo = null;
                    this.PoType = null;
                    this.WarehouseList = null;
                    this.GoodReceiptViewService = _GoodReceiptViewService;
                    this.StockvarianceReportService = _StockvarianceReportService;
                    this.RefrenceNo = $location.search().RefDocumentNo;
                    this.FillPoType = _FillPoType;
                }
                GoodsReceiptViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                GoodsReceiptViewController.prototype.Init = function () {
                    var _this = this;
                    this.GoodReceiptView = this.GoodReceiptViewService.FindGoodReceiptView(this.RefrenceNo).then((function (response) {
                        _this.GoodReceiptView = _this.GoodReceiptViewService.GetGoodReceiptView(response.data.Result);
                    }));
                    this.PoType = this.FillPoType.Find().then((function (response) {
                        _this.PoType = _this.FillPoType.GetPoType(response.data.Result);
                    }));
                    this.WarehouseList = this.StockvarianceReportService.Find().then((function (response) {
                        _this.WarehouseList = _this.StockvarianceReportService.GetWarehouseName(response.data.Result);
                    }));
                };
                GoodsReceiptViewController.$inject = ["GoodReceiptViewService", "$location", "StockvarianceReportService", "PoTypeDropdownService"];
                return GoodsReceiptViewController;
            }());
            var GoodsReceiptViewComponentController = /** @class */ (function () {
                function GoodsReceiptViewComponentController() {
                    this.controller = GoodsReceiptViewController;
                    this.templateUrl = "/Scripts/App/AccountDocumentView/GoodsRecieptView/Template/_GoodsReceiptView.html";
                }
                GoodsReceiptViewComponentController.Name = "goodsReceiptViewComponent";
                return GoodsReceiptViewComponentController;
            }());
            app.AddComponent(GoodsReceiptViewComponentController.Name, new GoodsReceiptViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GoodsReceiptViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var GoodReceiptViewService = /** @class */ (function (_super) {
            __extends(GoodReceiptViewService, _super);
            function GoodReceiptViewService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            GoodReceiptViewService.prototype.FindGoodReceiptView = function (data) {
                debugger;
                var url = this.apiUrl + "/GoodsReceiptViewctrl";
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        RefrenceNo: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            GoodReceiptViewService.prototype.GetGoodReceiptView = function (data) {
                var obj = new model.GoodsReceiptViewDto;
                obj.GoodReceiptNo = data.GoodReceiptNo;
                obj.GRDetailsList = data.GRDetails;
                obj.GRType = data.GRType;
                obj.InvoiceNo = data.InvoiceNo;
                obj.VendorName = data.VendorName;
                obj.PONumber = data.PONumber;
                obj.Address1 = data.Address1;
                obj.WHName = data.WHName;
                obj.WHID = data.WHID;
                return obj;
            };
            GoodReceiptViewService.$inject = ["$http", "$q", "$cookieStore"];
            return GoodReceiptViewService;
        }(GCPL.Service.BaseService));
        Service.GoodReceiptViewService = GoodReceiptViewService;
        app.AddService("GoodReceiptViewService", GoodReceiptViewService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GoodsReceiptViewService.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var GoodsReceiptViewController = /** @class */ (function (_super) {
            __extends(GoodsReceiptViewController, _super);
            function GoodsReceiptViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GoodsReceiptViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.GoodsReceiptViewController = GoodsReceiptViewController;
        app.AddController("GoodsReceiptViewController", GoodsReceiptViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GoodsReceiptViewController.js.map
//# sourceMappingURL=BillingViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var InsertSOBilling = GCPL.Model.SalesOrderBillingDTO;
            var BillingViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function BillingViewController(_BillingViewComponentService, $location, _cookieStore, _CreatePIService) {
                    this.$location = $location;
                    this._cookieStore = _cookieStore;
                    this.insertBilling = null;
                    this.RefrenceNo = null;
                    this.Cookie = null;
                    this.WHName = null;
                    this.insertBilling = new InsertSOBilling();
                    this.SOBillingDetails = _BillingViewComponentService;
                    this.RefrenceNo = $location.search().RefDocumentNo;
                    this.CreatePIService = _CreatePIService;
                    //this.DealerState = this.Cookie.get('UserInfo')['RegionStateId'];
                }
                BillingViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                BillingViewController.prototype.Init = function () {
                    var _this = this;
                    this.SOBillingDetails.FindSOBillingDetails(this.RefrenceNo).then((function (response) {
                        _this.insertBilling = _this.SOBillingDetails.SOBillingDetails(response.data.Result);
                        debugger;
                        _this.WHName = _this.CreatePIService.Find().then((function (response) {
                            _this.WHName = _this.CreatePIService.GetWarehouseName(response.data.Result);
                        }));
                    }));
                };
                BillingViewController.$inject = ["BillingViewComponentService", "$location", "$cookieStore", "CreatePIServiceComponentService"];
                return BillingViewController;
            }());
            var BillingViewComponentController = /** @class */ (function () {
                function BillingViewComponentController() {
                    this.controller = BillingViewController;
                    this.templateUrl = "/Scripts/App/AccountDocumentView/BillingView/Template/_BillingView.html";
                }
                BillingViewComponentController.Name = "billingviewcomponent";
                return BillingViewComponentController;
            }());
            app.AddComponent(BillingViewComponentController.Name, new BillingViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BillingViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var BillingViewController = /** @class */ (function (_super) {
            __extends(BillingViewController, _super);
            function BillingViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return BillingViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.BillingViewController = BillingViewController;
        app.AddController("BillingViewController", BillingViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BillingViewController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var BillingViewComponentService = /** @class */ (function (_super) {
            __extends(BillingViewComponentService, _super);
            function BillingViewComponentService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            BillingViewComponentService.prototype.FindSOBillingDetails = function (data) {
                var config = {
                    params: {
                        RefrenceNo: data,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/BillingViewctrl",
                    Config: config
                });
            };
            BillingViewComponentService.prototype.SOBillingDetails = function (data) {
                var obj = new model.SalesOrderBillingDTO();
                obj.DealerId = this.Cookie.get('UserInfo')['DealerID'];
                obj.CustomerName = data.CustomerName;
                obj.Address1 = data.Address1;
                obj.Address2 = data.Address2;
                obj.Address3 = data.Address3;
                obj.SalesOrderNo = data.SONo;
                obj.BillNumber = data.BillNumber;
                obj.Date = data.Date;
                obj.SalesOrderID = data.SalesOrderID;
                obj.CustomerId = data.CustomerId;
                obj.PaymentTermID = data.PaymentTermID;
                obj.salestypeId = data.salestypeId;
                obj.ShipToName = data.ShipToName;
                obj.DAddress1 = data.DAddress1;
                obj.DAddress2 = data.DAddress2;
                obj.SOBilingList = data.SOBilingList;
                obj.CustomerState = data.CustomerState;
                obj.WHID = data.WHID;
                obj.DueDate = data.DueDate;
                obj.TotalCGST = data.TotalCGST;
                obj.TotalSGST = data.TotalSGST;
                obj.TotalIGST = data.TotalIGST;
                obj.TaxAmt = data.TaxAmt;
                obj.TotNetAmt = data.NetAmount;
                obj.InvoiceTotalPrice = data.InvoiceTotalPrice;
                obj.UOMName = data.UOMName;
                //obj.InvoiceTotalPrice = data.BalanceAmount;
                //obj.ShipTOID = data.ShipTOID;
                return obj;
            };
            BillingViewComponentService.prototype.FindDueDate = function (data) {
                var config = {
                    params: {
                        DeliveryDate: data.Date,
                        tncIDs: data.PaymentTermID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/CreateSalesOrderctrl",
                    Config: config
                });
            };
            BillingViewComponentService.prototype.GetDueDate = function (data) {
                var obj = new model.SalesOrderBillingDTO;
                obj.DueDate = data;
                return obj;
            };
            BillingViewComponentService.prototype.FindSOBillingList = function (data) {
                // 
                var config = {
                    params: {
                        SalesOrderId: data.SalesOrderId,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SOBillingList",
                    Config: config
                });
            };
            BillingViewComponentService.prototype.SOBillingList = function (data) {
                var list = Array();
                //for (let item of data) {
                //}
                return list;
            };
            BillingViewComponentService.prototype.FindSOBillingChngQty = function (data) {
                return this.ajaXUtility.Post({
                    Url: this.apiUrl + "/SOBillingChangeqty",
                    data: data
                });
            };
            BillingViewComponentService.prototype.SOBillingChngQty = function (data) {
                var obj = new model.SOBillingListDTO();
                obj.SOBilingList = data.SOBilingList;
                obj.SOBilling = data.SOBilling;
                obj.TotalCGSTValue = data.TotalCGSTValue;
                obj.TotalSGSTValue = data.TotalSGSTValue;
                obj.TotalIGSTValue = data.TotalIGSTValue;
                obj.TotalUGSTValue = data.TotalUGSTValue;
                obj.TaxAmount = data.TaxAmount;
                obj.InvoiceAmount = data.InvoiceAmount;
                obj.TotalNetAmount = data.TotalNetAmount;
                ////obj.DealerID = this.Cookie.get('UserInfo')['DealerID']
                ////obj.CustomerName = data.CustomerName;
                //obj.TaxAmt = data.TaxAmt;
                //obj.TotalCGST = data.TotalCGST;
                //obj.TotalSGST = data.TotalSGST;
                //obj.TotalIGST = data.TotalIGST;
                //obj.TotNetAmt = data.TotNetAmt;
                //obj.InvoiceTotalPrice = data.InvoiceTotalPrice;
                //obj.CGSTValue = data.CGSTValue;
                //obj.SGSTValue = data.SGSTValue;
                //obj.IGSTValue = data.IGSTValue;
                //obj.NetAmount = data.NetAmount;
                return obj;
            };
            BillingViewComponentService.prototype.InsertBillDetails = function (data) {
                var url = this.apiUrl + "/SOBillingInsert";
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            BillingViewComponentService.$inject = ["$http", "$q", "$cookieStore"];
            return BillingViewComponentService;
        }(GCPL.Service.BaseService));
        Service.BillingViewComponentService = BillingViewComponentService;
        //inject service
        app.AddService("BillingViewComponentService", BillingViewComponentService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BillingViewService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var GoodsReceiptReversalHeader = /** @class */ (function () {
            function GoodsReceiptReversalHeader() {
            }
            return GoodsReceiptReversalHeader;
        }());
        Model.GoodsReceiptReversalHeader = GoodsReceiptReversalHeader;
        var GoodsReceiptReversalDetails = /** @class */ (function () {
            function GoodsReceiptReversalDetails() {
            }
            return GoodsReceiptReversalDetails;
        }());
        Model.GoodsReceiptReversalDetails = GoodsReceiptReversalDetails;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GoodsReceiptReversalViewModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var GoodsReceiptReversalViewController = /** @class */ (function (_super) {
            __extends(GoodsReceiptReversalViewController, _super);
            function GoodsReceiptReversalViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GoodsReceiptReversalViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.GoodsReceiptReversalViewController = GoodsReceiptReversalViewController;
        app.AddController("GoodsReceiptReversalViewController", GoodsReceiptReversalViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GoodsReceiptReversalViewController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var GoodReceiptReversalService = /** @class */ (function (_super) {
            __extends(GoodReceiptReversalService, _super);
            function GoodReceiptReversalService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            GoodReceiptReversalService.prototype.FindGoodReceiptReversalView = function (data) {
                debugger;
                var url = this.apiUrl + "/GoodsReceiptReversalViewctrl";
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        RefrenceNo: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            GoodReceiptReversalService.prototype.GetGoodReceiptReversalView = function (data) {
                var obj = new model.GoodsReceiptReversalHeader;
                obj.GoodsReceiptReversal = data.GoodsReceiptReversal;
                obj.GoodsReversalNo = data.GoodsReversalNo;
                obj.PONumber = data.PONumber;
                return obj;
            };
            GoodReceiptReversalService.$inject = ["$http", "$q", "$cookieStore"];
            return GoodReceiptReversalService;
        }(GCPL.Service.BaseService));
        Service.GoodReceiptReversalService = GoodReceiptReversalService;
        app.AddService("GoodReceiptReversalService", GoodReceiptReversalService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GoodsReceiptReversalViewService.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var GoodsReceiptReversalViewController = /** @class */ (function () {
                function GoodsReceiptReversalViewController(_IGoodReceiptReversalViewService, $location) {
                    this.$location = $location;
                    this.GoodsReversal = null;
                    this.RefrenceNo = null;
                    this.ICustomerReturnViewService = _IGoodReceiptReversalViewService;
                    this.RefrenceNo = $location.search().RefDocumentNo;
                }
                GoodsReceiptReversalViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                GoodsReceiptReversalViewController.prototype.Init = function () {
                    var _this = this;
                    this.ICustomerReturnViewService.FindGoodReceiptReversalView(this.RefrenceNo).then((function (response) {
                        _this.GoodsReversal = _this.ICustomerReturnViewService.GetGoodReceiptReversalView(response.data.Result);
                    }));
                };
                GoodsReceiptReversalViewController.$inject = ["GoodReceiptReversalService", "$location"];
                return GoodsReceiptReversalViewController;
            }());
            var GoodsReceiptReversalViewComponentController = /** @class */ (function () {
                function GoodsReceiptReversalViewComponentController() {
                    this.controller = GoodsReceiptReversalViewController;
                    this.templateUrl = "/Scripts/App/AccountDocumentView/GoodsRecieptReversalView/Template/_GoodsReceiptReversalView.html";
                }
                GoodsReceiptReversalViewComponentController.Name = "goodsreceiptreversalview";
                return GoodsReceiptReversalViewComponentController;
            }());
            app.AddComponent(GoodsReceiptReversalViewComponentController.Name, new GoodsReceiptReversalViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=GoodsReceiptReversalViewComponent.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var ARBalanceGridviewReport = /** @class */ (function () {
            function ARBalanceGridviewReport() {
            }
            return ARBalanceGridviewReport;
        }());
        Model.ARBalanceGridviewReport = ARBalanceGridviewReport;
        var ARBalanceParaModelnew = /** @class */ (function () {
            function ARBalanceParaModelnew() {
            }
            return ARBalanceParaModelnew;
        }());
        Model.ARBalanceParaModelnew = ARBalanceParaModelnew;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ARBalanceModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ARSerchmodel = GCPL.Model.ARBalanceParaModelnew;
            var ARBalanceController = /** @class */ (function () {
                function ARBalanceController(_Custnameservice, _cookieStore, _ARBalanceservice, _PaymentModeddlservice, _SoStatusListservice) {
                    this._cookieStore = _cookieStore;
                    this.StatusData = null;
                    this.SelectedCustomerID = null;
                    this.DealerID = null;
                    this.ARBalanceList = null;
                    this.CustomerName = null;
                    this.SearchPara = null;
                    this.Cookie = null;
                    this.Custnameservice = _Custnameservice;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.ARBalanceService = _ARBalanceservice;
                    this.SearchPara = new ARSerchmodel();
                    this.ARBalanceList = Array();
                    this.PaymentModeddlServices = _PaymentModeddlservice;
                    this.SoStatusListservice = _SoStatusListservice;
                }
                ARBalanceController.prototype.$onInit = function () {
                    // this.Init();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                    this.Init();
                };
                ARBalanceController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                ARBalanceController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                ARBalanceController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtCustomerName").autocomplete({
                        source: function (request, res) {
                            that.Custnameservice.FilterAutoComplete(request).then((function (response) {
                                var data = that.Custnameservice.GetCustomerName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID,
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.SearchPara.CustomerID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    this.StatusData = this.SoStatusListservice.FindStatus().then((function (response) {
                        _this.StatusData = _this.SoStatusListservice.GetSOStatus(response.data.Result);
                    }));
                };
                ARBalanceController.prototype.Search = function () {
                    var _this = this;
                    if (this.SearchPara.CustomerName == "") {
                        this.SearchPara.CustomerID = "";
                    }
                    this.SearchPara.FromDate = document.getElementById("txtFromDate").value;
                    this.SearchPara.DealerID = this.DealerID;
                    this.ARBalanceList = this.ARBalanceService.FindReportARPayment(this.SearchPara).then((function (response) {
                        _this.ARBalanceList = _this.ARBalanceService.GetPaymenListGridReport(response.data.Result);
                        var abc = 0, pqr = 0;
                        _this.ARBalanceList.forEach(function AddFunction(element, index, array) {
                            if (element.TotalAmount == undefined || element.TotalAmount == null || element.TotalAmount == "") {
                                element.TotalAmount = "0";
                            }
                            if (element.PaidAmount == undefined || element.PaidAmount == null || element.PaidAmount == "") {
                                element.PaidAmount = "0";
                            }
                            abc = abc + parseFloat(element.TotalAmount);
                            pqr = pqr + parseFloat(element.PaidAmount);
                        });
                        $("#lblTotalAmount").text(abc.toFixed(2));
                        $("#lblTotalAmtReceive").text(pqr.toFixed(2));
                    }));
                };
                ARBalanceController.prototype.Clear = function () {
                    $("#lblTotalAmtReceive").val("");
                    $("#lblTotalAmount").val("");
                    $("#txtCustomerName").val("");
                    document.getElementById("txtFromDate").value = "";
                    //this.SearchPara.CustomerID = "";
                    //this.SearchPara.BillNo = "";
                    this.SearchPara.Status = "";
                    this.SearchPara.DocumentType = "";
                    this.SearchPara.FromDate = "";
                    this.SearchPara.ToDate = "";
                    this.SearchPara.CustomerID = "";
                    this.SearchPara.PoNo = "";
                    this.ARBalanceList.TotalInvoiceAmount = "";
                    this.ARBalanceList.RecievedAmount = "";
                };
                ARBalanceController.$inject = ["ServiceCallCustomerNameService", "$cookieStore", "ARBalanceService", "PaymentModeddlService", "SalesOrderListService"];
                return ARBalanceController;
            }());
            var ARBalanceComponentController = /** @class */ (function () {
                function ARBalanceComponentController() {
                    this.controller = ARBalanceController;
                    this.templateUrl = "/Scripts/App/Account/ARBalance/Template/ARBalance.html";
                }
                ARBalanceComponentController.Name = "arbalancecomponent";
                return ARBalanceComponentController;
            }());
            app.AddComponent(ARBalanceComponentController.Name, new ARBalanceComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ARBalanceComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ARBalanceController = /** @class */ (function (_super) {
            __extends(ARBalanceController, _super);
            function ARBalanceController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ARBalanceController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ARBalanceController = ARBalanceController;
        app.AddController("ARBalanceController", ARBalanceController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ARBalanceController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var ARBalanceService = /** @class */ (function (_super) {
            __extends(ARBalanceService, _super);
            function ARBalanceService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/" + "ARBalance";
                _this.Cookie = _cookieStore;
                return _this;
            }
            ARBalanceService.prototype.FindReportARPayment = function (data) {
                var config = {
                    params: {
                        CustomerID: data.CustomerID != undefined ? data.CustomerID : "",
                        DealerID: data.DealerID != undefined ? data.DealerID : "",
                        PoNo: data.PoNo != undefined ? data.PoNo : "",
                        FromDate: data.FromDate != undefined ? data.FromDate : "",
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            ARBalanceService.prototype.GetPaymenListGridReport = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        BalanceAmount: item.BalanceAmount,
                        CustomerName: item.CustomerName,
                        Date: item.Date,
                        DocumentNo: item.DocumentNo,
                        DocumentType: item.DocumentType,
                        PaidAmount: item.PaidAmount,
                        Status: item.Status,
                        Tax: item.Tax,
                        TotalAmount: item.TotalAmount,
                        NetAmount: item.NetAmount,
                        AccountDocumentNo: item.AccountDocumentNo,
                        Type: item.Type
                    });
                }
                return list;
            };
            ARBalanceService.$inject = ["$http", "$q", "$cookieStore"];
            return ARBalanceService;
        }(GCPL.Service.BaseService));
        Service.ARBalanceService = ARBalanceService;
        app.AddService("ARBalanceService", ARBalanceService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ARBalanceService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var APBalanceGridviewReport = /** @class */ (function () {
            function APBalanceGridviewReport() {
            }
            return APBalanceGridviewReport;
        }());
        Model.APBalanceGridviewReport = APBalanceGridviewReport;
        var APBalanceParaModelnew = /** @class */ (function () {
            function APBalanceParaModelnew() {
            }
            return APBalanceParaModelnew;
        }());
        Model.APBalanceParaModelnew = APBalanceParaModelnew;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=APBalanceModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ARSerchmodel = GCPL.Model.APBalanceParaModelnew;
            var APBalanceController = /** @class */ (function () {
                function APBalanceController(_Custnameservice, _cookieStore, _APBalanceservice, _PaymentModeddlservice, _SoStatusListservice, _Vendorservice) {
                    this._cookieStore = _cookieStore;
                    this.StatusData = null;
                    this.SelectedCustomerID = null;
                    this.DealerID = null;
                    this.APBalanceList = null;
                    this.CustomerName = null;
                    this.SearchPara = null;
                    this.Cookie = null;
                    this.Custnameservice = _Custnameservice;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.APBalanceService = _APBalanceservice;
                    this.SearchPara = new ARSerchmodel();
                    this.APBalanceList = Array();
                    this.PaymentModeddlServices = _PaymentModeddlservice;
                    this.SoStatusListservice = _SoStatusListservice;
                    this.VendornameAutofill = _Vendorservice;
                }
                APBalanceController.prototype.$onInit = function () {
                    // this.Init();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                    this.Init();
                };
                APBalanceController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                APBalanceController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                APBalanceController.prototype.Init = function () {
                    var _this = this;
                    //AutoFillSupplier(): void {
                    var that = this;
                    $("#txtVendorName").autocomplete({
                        source: function (request, res) {
                            that.VendornameAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.VendornameAutofill.GetVendorName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.VendorName,
                                        value: item.VendorName,
                                        id: item.VendorID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedItemID = ui.item.id;
                            that.SearchPara.VendorID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    //}
                    this.StatusData = this.SoStatusListservice.FindStatus().then((function (response) {
                        _this.StatusData = _this.SoStatusListservice.GetSOStatus(response.data.Result);
                    }));
                };
                APBalanceController.prototype.Search = function () {
                    var _this = this;
                    if (this.SearchPara.VendorName == "") {
                        this.SearchPara.VendorID = "";
                    }
                    this.SearchPara.FromDate = document.getElementById("txtFromDate").value;
                    this.SearchPara.DealerID = this.DealerID;
                    this.APBalanceList = this.APBalanceService.FindReportARPayment(this.SearchPara).then((function (response) {
                        _this.APBalanceList = _this.APBalanceService.GetPaymenListGridReport(response.data.Result);
                        var abc = 0, pqr = 0;
                        _this.APBalanceList.forEach(function AddFunction(element, index, array) {
                            if (element.Amount == undefined || element.Amount == null || element.Amount == "") {
                                element.Amount = "0";
                            }
                            if (element.PaidAmount == undefined || element.PaidAmount == null || element.PaidAmount == "") {
                                element.PaidAmount = "0";
                            }
                            abc = abc + parseFloat(element.Amount);
                            pqr = pqr + parseFloat(element.PaidAmount);
                        });
                        $("#lblTotalAmount").text(abc.toFixed(2));
                        $("#lblTotalAmtReceive").text(pqr.toFixed(2));
                    }));
                };
                APBalanceController.prototype.Clear = function () {
                    $("#lblTotalAmtReceive").val("");
                    $("#lblTotalAmount").val("");
                    $("#txtCustomerName").val("");
                    document.getElementById("txtFromDate").value = "";
                    //this.SearchPara.CustomerID = "";
                    //this.SearchPara.BillNo = "";
                    this.SearchPara.Status = "";
                    this.SearchPara.DocumentType = "";
                    this.SearchPara.FromDate = "";
                    this.SearchPara.ToDate = "";
                    this.SearchPara.VendorID = "";
                    this.SearchPara.PoNo = "";
                    this.APBalanceList.TotalInvoiceAmount = "";
                    this.APBalanceList.RecievedAmount = "";
                };
                APBalanceController.$inject = ["ServiceCallCustomerNameService", "$cookieStore", "APBalanceService", "PaymentModeddlService", "SalesOrderListService", "VendorMasterAutofillService"];
                return APBalanceController;
            }());
            var APBalanceComponentController = /** @class */ (function () {
                function APBalanceComponentController() {
                    this.controller = APBalanceController;
                    this.templateUrl = "/Scripts/App/Account/APBalance/Template/APBalance.html";
                }
                APBalanceComponentController.Name = "apbalancecomponent";
                return APBalanceComponentController;
            }());
            app.AddComponent(APBalanceComponentController.Name, new APBalanceComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=APBalanceComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var APBalanceController = /** @class */ (function (_super) {
            __extends(APBalanceController, _super);
            function APBalanceController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return APBalanceController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.APBalanceController = APBalanceController;
        app.AddController("APBalanceController", APBalanceController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=APBalanceController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var APBalanceService = /** @class */ (function (_super) {
            __extends(APBalanceService, _super);
            function APBalanceService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/" + "APBalance";
                _this.Cookie = _cookieStore;
                return _this;
            }
            APBalanceService.prototype.FindReportARPayment = function (data) {
                var config = {
                    params: {
                        VendorID: data.VendorID != undefined ? data.VendorID : "",
                        DealerID: data.DealerID != undefined ? data.DealerID : "",
                        PoNo: data.PoNo != undefined ? data.PoNo : "",
                        FromDate: data.FromDate != undefined ? data.FromDate : "",
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            APBalanceService.prototype.GetPaymenListGridReport = function (data) {
                var list = Array();
                var PT = "";
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    if (item.PostingType == "1") {
                        PT = "Debit";
                    }
                    else if (item.PostingType == "2") {
                        PT = "Credit";
                    }
                    else if (item.PostingType == "3") {
                        PT = "Both";
                    }
                    list.push({
                        Type: item.Type,
                        PostingType: PT,
                        Date: item.Date,
                        WhenEntered: item.WhenEntered,
                        AccountDocumentNo: item.AccountDocumentNo,
                        DocumentNo: item.DocumentNo,
                        VendorName: item.VendorName,
                        Amount: item.Amount,
                        AccountCode: item.AccountCode,
                        AccountName: item.AccountName
                    });
                }
                return list;
            };
            APBalanceService.$inject = ["$http", "$q", "$cookieStore"];
            return APBalanceService;
        }(GCPL.Service.BaseService));
        Service.APBalanceService = APBalanceService;
        app.AddService("APBalanceService", APBalanceService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=APBalanceService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var SearchParam = /** @class */ (function () {
            function SearchParam() {
            }
            return SearchParam;
        }());
        Model.SearchParam = SearchParam;
        var GLBalanceList = /** @class */ (function () {
            function GLBalanceList() {
            }
            return GLBalanceList;
        }());
        Model.GLBalanceList = GLBalanceList;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLBalanceModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var GLBalanceController = /** @class */ (function () {
                function GLBalanceController(_GLBalanceService, _cookieStore, $location, _Service) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.alert = null;
                    this.ContactPersonID = null;
                    //FromDate = null;
                    this.AsOnDate = null;
                    this.DealerID = null;
                    this.SearchParam = null;
                    this.IsShow = false;
                    this.GLBalanceList = null;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.GLBalanceService = _GLBalanceService;
                    this.GLService = _Service;
                    this.SearchParam = new GCPL.Model.SearchParam();
                }
                GLBalanceController.prototype.$onInit = function () {
                    var that = this;
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                    // this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                GLBalanceController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                GLBalanceController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                GLBalanceController.prototype.Clear = function () {
                    this.SearchParam.AccountName = "";
                    this.SearchParam.AccountCode = "";
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    this.SearchParam.FromDate = "";
                    this.SearchParam.ToDate = "";
                    this.IsShow = false;
                };
                GLBalanceController.prototype.SearchData = function () {
                    var _this = this;
                    this.SearchParam.FromDate = document.getElementById("txtFromDate").value;
                    this.SearchParam.ToDate = document.getElementById("txtToDate").value;
                    //if (this.SearchParam.AccountName == undefined || this.SearchParam.AccountName == null || this.SearchParam.AccountName == "") {             
                    //    $("#errorclose").show();
                    //    $("#close").hide();
                    //    this.alert = "Please Select GL Account or GL Code";
                    //}
                    //else if (this.SearchParam.AccountCode == undefined || this.SearchParam.AccountCode == null || this.SearchParam.AccountCode == "") {             
                    //    $("#errorclose").show();
                    //    $("#close").hide();
                    //    this.alert = "Please Select GL Account or GL Code";
                    //}
                    //else {               
                    this.IsShow = true;
                    this.GLBalanceList = this.GLBalanceService.FindGLBalanceDetails(this.SearchParam, this.DealerID).then((function (response) {
                        _this.GLBalanceList = _this.GLBalanceService.GetGLBalanceDetails(response.data.Result);
                    }));
                    //   }    
                };
                GLBalanceController.prototype.Init = function () {
                };
                GLBalanceController.prototype.ChangeAccCode = function () {
                    var that = this;
                    $("#txtAccountCode").autocomplete({
                        source: function (request, res) {
                            that.GLService.AutofillAccountCode(request).then((function (response) {
                                var data = that.GLService.GetAutofillAccountName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.GlAccountCode,
                                        value: item.GlAccountCode,
                                        id: item.id,
                                        GlAccountName: item.AccountName
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.SearchParam.AccountCode = ui.item.value;
                            that.SearchParam.AccountName = ui.item.GlAccountName;
                            $("#txtAccountName").focus();
                        },
                        change: function () {
                        }
                    });
                };
                GLBalanceController.prototype.ChangeAccName = function () {
                    var that = this;
                    $("#txtAccountName").autocomplete({
                        source: function (request, res) {
                            that.GLService.AutofillAccountName(request).then((function (response) {
                                var data = that.GLService.GetAutofillAccountName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.AccountName,
                                        value: item.AccountName,
                                        id: item.id,
                                        GlAccountCode: item.GlAccountCode
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.SearchParam.AccountCode = ui.item.GlAccountCode;
                            that.SearchParam.AccountName = ui.item.value;
                            $("#txtAccountCode").focus();
                        },
                        change: function () {
                        }
                    });
                };
                GLBalanceController.prototype.Close = function () {
                    this.Init();
                    // $("#myTable").show();  
                };
                GLBalanceController.$inject = ["GLBalanceService", "$cookieStore", "$location", "JournalEntryService"];
                return GLBalanceController;
            }());
            var GLBalanceControllerComponent = /** @class */ (function () {
                function GLBalanceControllerComponent() {
                    this.controller = GLBalanceController;
                    this.templateUrl = "/Scripts/App/Account/GLBalance/Template/GLBalance.html";
                }
                GLBalanceControllerComponent.Name = "glbalancecontrollercomponent";
                return GLBalanceControllerComponent;
            }());
            app.AddComponent(GLBalanceControllerComponent.Name, new GLBalanceControllerComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLBalanceComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var GLBalanceController = /** @class */ (function (_super) {
            __extends(GLBalanceController, _super);
            function GLBalanceController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GLBalanceController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.GLBalanceController = GLBalanceController;
        app.AddController("GLBalanceController", GLBalanceController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLBalanceController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var GLBalanceService = /** @class */ (function (_super) {
            __extends(GLBalanceService, _super);
            function GLBalanceService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url; ///${"CtrlContactPersonGridFill"}`;
                return _this;
            }
            GLBalanceService.prototype.BalSheetList = function (AsOnDate, DealerID, Group) {
                var config = {
                    params: {
                        AsOnDate: AsOnDate,
                        DealerID: DealerID,
                        Group: Group
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/BalanceSheet",
                    Config: config
                });
            };
            GLBalanceService.prototype.BalSheetData = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        AccountName: item.AccountName,
                        Amount: item.Amount
                    });
                }
                return list;
            };
            GLBalanceService.prototype.Find = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                // console.log(config);
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/BalanceSheet",
                    Config: config
                });
            };
            GLBalanceService.prototype.GetData = function (data) {
                var obj = new model.DealerData();
                obj.CompanyName = data.CompanyName;
                obj.Address = data.Address;
                obj.CIN = data.CIN;
                return obj;
            };
            GLBalanceService.prototype.FindGLBalanceDetails = function (data, DealerID) {
                var url = this.apiUrl + "/GLBalance";
                var config = {
                    params: {
                        FromDate: data.FromDate,
                        ToDate: data.ToDate,
                        AccountName: data.AccountName,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            GLBalanceService.prototype.GetGLBalanceDetails = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        AccDocNo: item.AccDocNo,
                        Amount: item.Amount,
                        Date: item.Date,
                        PostKey: (item.PostKey == 1 ? "Debit" : "Credit"),
                        AccName: item.AccName,
                        AccCode: item.AccCode,
                        Type: item.Type
                    });
                }
                return list;
            };
            GLBalanceService.$inject = ["$http", "$q"];
            return GLBalanceService;
        }(GCPL.Service.BaseService));
        Service.GLBalanceService = GLBalanceService;
        app.AddService("GLBalanceService", GLBalanceService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GLBalanceService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var DispositionView = /** @class */ (function () {
            function DispositionView() {
            }
            return DispositionView;
        }());
        Model.DispositionView = DispositionView;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DispositionDocumentViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var DispositionDocumentViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function DispositionDocumentViewController($location, _DispositionViewService) {
                    this.$location = $location;
                    this.RefrenceNo = null;
                    this.DispositionView = null;
                    this.RefrenceNo = $location.search().RefDocumentNo;
                    this.DispositionViewService = _DispositionViewService;
                }
                DispositionDocumentViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                DispositionDocumentViewController.prototype.Init = function () {
                    var _this = this;
                    this.DispositionViewService.FindDisposition(this.RefrenceNo).then((function (response) {
                        _this.DispositionView = _this.DispositionViewService.GetDispositionView(response.data.Result);
                        console.log(_this.DispositionView);
                    }));
                };
                DispositionDocumentViewController.$inject = ["$location", "DispositionViewService"];
                return DispositionDocumentViewController;
            }());
            var DispositionDocumentViewComponentController = /** @class */ (function () {
                function DispositionDocumentViewComponentController() {
                    this.controller = DispositionDocumentViewController;
                    this.templateUrl = "/Scripts/App/AccountDocumentView/DispositionDocumentView/Template/_DispositionDocumentView.html";
                }
                DispositionDocumentViewComponentController.Name = "dispositiondocumentview";
                return DispositionDocumentViewComponentController;
            }());
            app.AddComponent(DispositionDocumentViewComponentController.Name, new DispositionDocumentViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=DispositionDocumentViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var DispositionDocumentViewController = /** @class */ (function (_super) {
            __extends(DispositionDocumentViewController, _super);
            function DispositionDocumentViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return DispositionDocumentViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.DispositionDocumentViewController = DispositionDocumentViewController;
        app.AddController("DispositionDocumentViewController", DispositionDocumentViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DispositionDocumentViewController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var DispositionViewService = /** @class */ (function (_super) {
            __extends(DispositionViewService, _super);
            function DispositionViewService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            DispositionViewService.prototype.FindDisposition = function (data) {
                debugger;
                var url = this.apiUrl + "/DispositionViewctrl";
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        RefrenceNo: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            DispositionViewService.prototype.GetDispositionView = function (data) {
                var obj = new model.DispositionView;
                obj.currentStock = data.currentStock;
                obj.Description = data.Description;
                obj.DistributoreComment = data.DistributoreComment;
                obj.QtyDispose = data.QtyDispose;
                obj.ReasonName = data.ReasonName;
                obj.StockDispositionNo = data.StockDispositionNo;
                obj.UOMName = data.UOMName;
                obj.WareHouseID = data.WareHouseID;
                obj.WHName = data.WHName;
                return obj;
            };
            DispositionViewService.$inject = ["$http", "$q", "$cookieStore"];
            return DispositionViewService;
        }(GCPL.Service.BaseService));
        Service.DispositionViewService = DispositionViewService;
        app.AddService("DispositionViewService", DispositionViewService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DispositionDocumentViewService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var CustomerReturnView = /** @class */ (function () {
            function CustomerReturnView() {
            }
            return CustomerReturnView;
        }());
        Model.CustomerReturnView = CustomerReturnView;
        var CustomerReturnDetailsViewDto = /** @class */ (function () {
            function CustomerReturnDetailsViewDto() {
            }
            return CustomerReturnDetailsViewDto;
        }());
        Model.CustomerReturnDetailsViewDto = CustomerReturnDetailsViewDto;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerReturnViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var CustomerReturnViewController = /** @class */ (function () {
                function CustomerReturnViewController(_ICustomerReturnViewService, $location) {
                    this.$location = $location;
                    this.CustomerReturn = null;
                    this.RefrenceNo = null;
                    this.ICustomerReturnViewService = _ICustomerReturnViewService;
                    this.RefrenceNo = $location.search().RefDocumentNo;
                }
                CustomerReturnViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                CustomerReturnViewController.prototype.Init = function () {
                    var _this = this;
                    this.ICustomerReturnViewService.FindCustomerretrunView(this.RefrenceNo).then((function (response) {
                        _this.CustomerReturn = _this.ICustomerReturnViewService.GetCustomerretrunView(response.data.Result);
                    }));
                };
                CustomerReturnViewController.$inject = ["CustomerReturnViewService", "$location"];
                return CustomerReturnViewController;
            }());
            var CustomerReturnViewComponentController = /** @class */ (function () {
                function CustomerReturnViewComponentController() {
                    this.controller = CustomerReturnViewController;
                    this.templateUrl = "/Scripts/App/AccountDocumentView/CustomerReturnView/Template/_CustomerReturnView.html";
                }
                CustomerReturnViewComponentController.Name = "customerreturnviewcomponent";
                return CustomerReturnViewComponentController;
            }());
            app.AddComponent(CustomerReturnViewComponentController.Name, new CustomerReturnViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=CustomerReturnViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var CustomerReturnViewController = /** @class */ (function (_super) {
            __extends(CustomerReturnViewController, _super);
            function CustomerReturnViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CustomerReturnViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.CustomerReturnViewController = CustomerReturnViewController;
        app.AddController("CustomerReturnViewController", CustomerReturnViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerReturnViewController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var CustomerReturnViewService = /** @class */ (function (_super) {
            __extends(CustomerReturnViewService, _super);
            function CustomerReturnViewService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            CustomerReturnViewService.prototype.FindCustomerretrunView = function (data) {
                debugger;
                var url = this.apiUrl + "/CustomerReturnViewctrl";
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        RefrenceNo: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            CustomerReturnViewService.prototype.GetCustomerretrunView = function (data) {
                var obj = new model.CustomerReturnView;
                obj.BillNumber = data.BillNumber;
                obj.BillDate = data.BillDate;
                obj.BillReturnDate = data.BillReturnDate;
                obj.CustomerName = data.CustomerName;
                obj.customerReturnDetail = data.customerReturnDetail;
                obj.CustomerReturnNo = data.CustomerReturnNo;
                obj.CustReturnDate = data.CustReturnDate;
                obj.SalesOrderNo = data.SalesOrderNo;
                obj.SODate = data.SODate;
                return obj;
            };
            CustomerReturnViewService.$inject = ["$http", "$q", "$cookieStore"];
            return CustomerReturnViewService;
        }(GCPL.Service.BaseService));
        Service.CustomerReturnViewService = CustomerReturnViewService;
        app.AddService("CustomerReturnViewService", CustomerReturnViewService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerReturnViewService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var CreditNoteHeaderModel = /** @class */ (function () {
            function CreditNoteHeaderModel() {
            }
            return CreditNoteHeaderModel;
        }());
        Model.CreditNoteHeaderModel = CreditNoteHeaderModel;
        var CreditNoteDetailsModel = /** @class */ (function () {
            function CreditNoteDetailsModel() {
            }
            return CreditNoteDetailsModel;
        }());
        Model.CreditNoteDetailsModel = CreditNoteDetailsModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreditNoteViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var CreditNoteViewController = /** @class */ (function () {
                function CreditNoteViewController(_ICreditNoteViewService, $location) {
                    this.$location = $location;
                    this.CreditNoteView = null;
                    this.RefrenceNo = null;
                    this.ICreditNoteViewService = _ICreditNoteViewService;
                    this.RefrenceNo = $location.search().RefDocumentNo;
                }
                CreditNoteViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                CreditNoteViewController.prototype.Init = function () {
                    var _this = this;
                    this.ICreditNoteViewService.FindCreditNote(this.RefrenceNo).then((function (response) {
                        _this.CreditNoteView = _this.ICreditNoteViewService.GetCreditNote(response.data.Result);
                    }));
                };
                CreditNoteViewController.$inject = ["CreditNoteViewService", "$location"];
                return CreditNoteViewController;
            }());
            var CreditNoteViewComponentController = /** @class */ (function () {
                function CreditNoteViewComponentController() {
                    this.controller = CreditNoteViewController;
                    this.templateUrl = "/Scripts/App/AccountDocumentView/CreditNoteView/Template/_CreditNoteView.html";
                }
                CreditNoteViewComponentController.Name = "creditnoteviewcomponent";
                return CreditNoteViewComponentController;
            }());
            app.AddComponent(CreditNoteViewComponentController.Name, new CreditNoteViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreditNoteViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var CreditNoteViewController = /** @class */ (function (_super) {
            __extends(CreditNoteViewController, _super);
            function CreditNoteViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CreditNoteViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.CreditNoteViewController = CreditNoteViewController;
        app.AddController("CreditNoteViewController", CreditNoteViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreditNoteViewController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var CreditNoteViewService = /** @class */ (function (_super) {
            __extends(CreditNoteViewService, _super);
            function CreditNoteViewService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            CreditNoteViewService.prototype.FindCreditNote = function (data) {
                debugger;
                var url = this.apiUrl + "/CreditNoteViewctrl";
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        RefrenceNo: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            CreditNoteViewService.prototype.GetCreditNote = function (data) {
                var obj = new model.CreditNoteHeaderModel;
                obj.billno = data.billno;
                obj.amount = data.amount;
                obj.cgstqtyvalue = data.cgstqtyvalue;
                obj.CreditNoteDetails = data.CreditNoteDetails;
                obj.creditnoteno = data.creditnoteno;
                obj.Customername = data.Customername;
                obj.date = data.date;
                obj.igstqtyvalue = data.igstqtyvalue;
                obj.invoiceamount = data.invoiceamount;
                obj.sgstqtyvalue = data.sgstqtyvalue;
                obj.totaltax = data.totaltax;
                obj.Comments = data.Comments;
                return obj;
            };
            CreditNoteViewService.$inject = ["$http", "$q", "$cookieStore"];
            return CreditNoteViewService;
        }(GCPL.Service.BaseService));
        Service.CreditNoteViewService = CreditNoteViewService;
        app.AddService("CreditNoteViewService", CreditNoteViewService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreditNoteViewService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var GoodsReceiptReversalHeader = /** @class */ (function () {
            function GoodsReceiptReversalHeader() {
            }
            return GoodsReceiptReversalHeader;
        }());
        Model.GoodsReceiptReversalHeader = GoodsReceiptReversalHeader;
        var GoodsReceiptReversalDetails = /** @class */ (function () {
            function GoodsReceiptReversalDetails() {
            }
            return GoodsReceiptReversalDetails;
        }());
        Model.GoodsReceiptReversalDetails = GoodsReceiptReversalDetails;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GoodsReceiptReversalViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var GoodsReceiptReversalViewController = /** @class */ (function () {
                function GoodsReceiptReversalViewController(_IGoodReceiptReversalViewService, $location) {
                    this.$location = $location;
                    this.GoodsReversal = null;
                    this.RefrenceNo = null;
                    this.ICustomerReturnViewService = _IGoodReceiptReversalViewService;
                    this.RefrenceNo = $location.search().RefDocumentNo;
                }
                GoodsReceiptReversalViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                GoodsReceiptReversalViewController.prototype.Init = function () {
                    var _this = this;
                    this.ICustomerReturnViewService.FindGoodReceiptReversalView(this.RefrenceNo).then((function (response) {
                        _this.GoodsReversal = _this.ICustomerReturnViewService.GetGoodReceiptReversalView(response.data.Result);
                    }));
                };
                GoodsReceiptReversalViewController.$inject = ["GoodReceiptReversalService", "$location"];
                return GoodsReceiptReversalViewController;
            }());
            var GoodsReceiptReversalViewComponentController = /** @class */ (function () {
                function GoodsReceiptReversalViewComponentController() {
                    this.controller = GoodsReceiptReversalViewController;
                    this.templateUrl = "/Scripts/App/AccountDocumentView/GoodsRecieptReversalView/Template/_GoodsReceiptReversalView.html";
                }
                GoodsReceiptReversalViewComponentController.Name = "goodsreceiptreversalview";
                return GoodsReceiptReversalViewComponentController;
            }());
            app.AddComponent(GoodsReceiptReversalViewComponentController.Name, new GoodsReceiptReversalViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=GoodsReceiptReversalViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var GoodsReceiptReversalViewController = /** @class */ (function (_super) {
            __extends(GoodsReceiptReversalViewController, _super);
            function GoodsReceiptReversalViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GoodsReceiptReversalViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.GoodsReceiptReversalViewController = GoodsReceiptReversalViewController;
        app.AddController("GoodsReceiptReversalViewController", GoodsReceiptReversalViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GoodsReceiptReversalViewController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var GoodReceiptReversalService = /** @class */ (function (_super) {
            __extends(GoodReceiptReversalService, _super);
            function GoodReceiptReversalService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            GoodReceiptReversalService.prototype.FindGoodReceiptReversalView = function (data) {
                debugger;
                var url = this.apiUrl + "/GoodsReceiptReversalViewctrl";
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        RefrenceNo: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            GoodReceiptReversalService.prototype.GetGoodReceiptReversalView = function (data) {
                var obj = new model.GoodsReceiptReversalHeader;
                obj.GoodsReceiptReversal = data.GoodsReceiptReversal;
                obj.GoodsReversalNo = data.GoodsReversalNo;
                obj.PONumber = data.PONumber;
                return obj;
            };
            GoodReceiptReversalService.$inject = ["$http", "$q", "$cookieStore"];
            return GoodReceiptReversalService;
        }(GCPL.Service.BaseService));
        Service.GoodReceiptReversalService = GoodReceiptReversalService;
        app.AddService("GoodReceiptReversalService", GoodReceiptReversalService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=GoodsReceiptReversalViewService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var DebitNoteView = /** @class */ (function () {
            function DebitNoteView() {
            }
            return DebitNoteView;
        }());
        Model.DebitNoteView = DebitNoteView;
        var DebitNoteDetailsView = /** @class */ (function () {
            function DebitNoteDetailsView() {
            }
            return DebitNoteDetailsView;
        }());
        Model.DebitNoteDetailsView = DebitNoteDetailsView;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DebitNoteViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var DebitNoteViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function DebitNoteViewController($location, _DebitNoteViewService) {
                    this.$location = $location;
                    this.RefrenceNo = null;
                    this.DebitNoteview = null;
                    this.RefrenceNo = $location.search().RefDocumentNo;
                    this.DebitNoteViewService = _DebitNoteViewService;
                }
                DebitNoteViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                DebitNoteViewController.prototype.Init = function () {
                    var _this = this;
                    this.DebitNoteViewService.FindDebitNoteView(this.RefrenceNo).then((function (response) {
                        _this.DebitNoteview = _this.DebitNoteViewService.GetDebitNoteView(response.data.Result);
                    }));
                };
                DebitNoteViewController.$inject = ["$location", "DebitNoteViewService"];
                return DebitNoteViewController;
            }());
            var DebitNoteViewComponentController = /** @class */ (function () {
                function DebitNoteViewComponentController() {
                    this.controller = DebitNoteViewController;
                    this.templateUrl = "/Scripts/App/AccountDocumentView/DebitNoteView/Template/_DebitNoteView.html";
                }
                DebitNoteViewComponentController.Name = "debitNoteViewComponent";
                return DebitNoteViewComponentController;
            }());
            app.AddComponent(DebitNoteViewComponentController.Name, new DebitNoteViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=DebitNoteViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var DebitNoteViewController = /** @class */ (function (_super) {
            __extends(DebitNoteViewController, _super);
            function DebitNoteViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return DebitNoteViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.DebitNoteViewController = DebitNoteViewController;
        app.AddController("DebitNoteViewController", DebitNoteViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DebitNoteViewController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var DebitNoteViewService = /** @class */ (function (_super) {
            __extends(DebitNoteViewService, _super);
            function DebitNoteViewService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            DebitNoteViewService.prototype.FindDebitNoteView = function (data) {
                debugger;
                var url = this.apiUrl + "/DebitNoteViewctrl";
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        RefrenceNo: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            DebitNoteViewService.prototype.GetDebitNoteView = function (data) {
                var obj = new model.DebitNoteView;
                obj.CGST = data.CGST;
                obj.CGSTQtyValue = data.CGSTQtyValue;
                obj.CustomerName = data.CustomerName;
                obj.Date = data.Date;
                obj.DebitAmount = data.DebitAmount;
                obj.DebiteNoteNo = data.DebiteNoteNo;
                obj.DebitNoteDetails = data.DebitNoteDetails;
                obj.IGST = data.IGST;
                obj.IGSTQtyValue = data.IGSTQtyValue;
                obj.InvoiveAmount = data.InvoiveAmount;
                obj.InvoiveNO = data.InvoiveNO;
                obj.SGST = data.SGST;
                obj.SGSTQtyValue = data.SGSTQtyValue;
                obj.TotalTax = data.TotalTax;
                obj.Comments = data.Comments;
                return obj;
            };
            DebitNoteViewService.$inject = ["$http", "$q", "$cookieStore"];
            return DebitNoteViewService;
        }(GCPL.Service.BaseService));
        Service.DebitNoteViewService = DebitNoteViewService;
        app.AddService("DebitNoteViewService", DebitNoteViewService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DebitNoteViewService.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var VendorInvoiceViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function VendorInvoiceViewController(_VIVService, _cookieStore, _window, $location) {
                    this._cookieStore = _cookieStore;
                    this._window = _window;
                    this.$location = $location;
                    this.VendorInvoiceNo = null;
                    this.Cookie = null;
                    this.HeaderData = new GCPL.Model.VendorInvoiceViewHeader();
                    this.DetailData = new GCPL.Model.VendorInvoiceViewDetail();
                    this.VIVService = _VIVService;
                    this.VendorInvoiceNo = $location.search().VendorInvoiceNo;
                }
                VendorInvoiceViewController.prototype.$onInit = function () {
                    var _this = this;
                    this.VIVService.FindHeader(this.VendorInvoiceNo, "Header").then((function (response) {
                        _this.HeaderData = _this.VIVService.GetHeader(response.data.Result);
                    }));
                    this.VIVService.FindDetail(this.VendorInvoiceNo, "Detail").then((function (response) {
                        _this.DetailData = _this.VIVService.GetDetail(response.data.Result);
                    }));
                };
                VendorInvoiceViewController.$inject = ["VendorInvoiceViewService", "$cookieStore", "$window", "$location"];
                return VendorInvoiceViewController;
            }());
            var VendorInvoiceViewComponentController = /** @class */ (function () {
                function VendorInvoiceViewComponentController() {
                    this.controller = VendorInvoiceViewController;
                    this.templateUrl = "/Scripts/App/AccountDocumentView/VendorInvoiceView/Template/_VendorInvoiceView.html";
                }
                VendorInvoiceViewComponentController.Name = "vendorinvoiceview";
                return VendorInvoiceViewComponentController;
            }());
            app.AddComponent(VendorInvoiceViewComponentController.Name, new VendorInvoiceViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VendorInvoiceViewComponent.js.map
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var VendorInvoiceViewContoller = /** @class */ (function () {
            function VendorInvoiceViewContoller() {
            }
            return VendorInvoiceViewContoller;
        }());
        Controller.VendorInvoiceViewContoller = VendorInvoiceViewContoller;
        app.AddController("VendorInvoiceViewContoller", VendorInvoiceViewContoller);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VendorInvoiceViewController.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var VendorInvoiceViewHeader = /** @class */ (function () {
            function VendorInvoiceViewHeader() {
            }
            return VendorInvoiceViewHeader;
        }());
        Model.VendorInvoiceViewHeader = VendorInvoiceViewHeader;
        var VendorInvoiceViewDetail = /** @class */ (function () {
            function VendorInvoiceViewDetail() {
            }
            return VendorInvoiceViewDetail;
        }());
        Model.VendorInvoiceViewDetail = VendorInvoiceViewDetail;
        var VendorInvoiceViewList = /** @class */ (function () {
            function VendorInvoiceViewList() {
            }
            return VendorInvoiceViewList;
        }());
        Model.VendorInvoiceViewList = VendorInvoiceViewList;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VendorInvoiceViewModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var VendorInvoiceViewService = /** @class */ (function (_super) {
            __extends(VendorInvoiceViewService, _super);
            function VendorInvoiceViewService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/" + "";
                _this.Cookie = _cookieStore;
                return _this;
            }
            VendorInvoiceViewService.prototype.FindHeader = function (VendorInvoiceNo, Operation) {
                var config = {
                    params: {
                        VendorInvoiceNo: VendorInvoiceNo,
                        Dealerid: this.Cookie.get('UserInfo')['DealerID'],
                        Operation: Operation
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "VendorInvoiceView",
                    Config: config
                });
            };
            VendorInvoiceViewService.prototype.FindDetail = function (VendorInvoiceNo, Operation) {
                var config = {
                    params: {
                        VendorInvoiceNo: VendorInvoiceNo,
                        Dealerid: this.Cookie.get('UserInfo')['DealerID'],
                        Operation: Operation
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "VendorInvoiceView",
                    Config: config
                });
            };
            VendorInvoiceViewService.prototype.GetHeader = function (data) {
                var obj = new model.VendorInvoiceViewHeader;
                obj = data;
                return obj;
            };
            VendorInvoiceViewService.prototype.GetDetail = function (data) {
                var obj = new model.VendorInvoiceViewDetail;
                obj = data;
                return obj;
            };
            VendorInvoiceViewService.$inject = ["$http", "$q", "$cookieStore"];
            return VendorInvoiceViewService;
        }(GCPL.Service.BaseService));
        Service.VendorInvoiceViewService = VendorInvoiceViewService;
        //inject service
        app.AddService("VendorInvoiceViewService", VendorInvoiceViewService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VendorInvoiceViewService.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var StockMovementViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function StockMovementViewController($location, _ItemAutoservice, _WareHouse, _GridFill, _cookieStore, _StMoVw, _UOMServices, _window) {
                    this.$location = $location;
                    this._cookieStore = _cookieStore;
                    this._window = _window;
                    this.StockMovementModel = null;
                    this.QtyChange = null;
                    //IsDisplayModalPopup: boolean = false;
                    this.Description = null;
                    this.TOWareHousename = null;
                    this.FromWareHousename = null;
                    this.ToWHID = null;
                    this.FromWHID = null;
                    this.alert = null;
                    this.grid = null;
                    this.itemDesctription = null;
                    this.Itemid = null;
                    this.QTY = null;
                    this.Stock = null;
                    this.UOM = null;
                    this.UOMBase = null;
                    this.StockMovementNo = null;
                    this.Cookie = null;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.WareHouse = _WareHouse;
                    this.GridFill = _GridFill;
                    this.StMoVw = _StMoVw;
                    this.UOMServices = _UOMServices;
                    this.StockMovementModel = new GCPL.Model.StockMovementViewModel();
                    this.Cookie = _cookieStore;
                    debugger;
                    this.StockMovementNo = $location.search().StockMovementNo;
                    console.log(this.StockMovementNo);
                }
                StockMovementViewController.prototype.$onInit = function () {
                    this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                StockMovementViewController.prototype.Init = function () {
                    //let that=this;
                    //this.TOWareHousename = this.WareHouse.Find().then((response => {
                    //    this.TOWareHousename = this.WareHouse.GetWareHouse(response.data.Result);
                    //}));
                    var _this = this;
                    //this.FromWareHousename = this.WareHouse.Find().then((response => {
                    //    this.FromWareHousename = this.WareHouse.GetWareHouse(response.data.Result);
                    //}));
                    //this.UOMBase = this.UOMServices.Find().then((response => {
                    //    this.UOMBase = this.UOMServices.GetUOM(response.data.Result);
                    //}));
                    this.StMoVw.FindData(this.StockMovementNo).then((function (response) {
                        _this.StockMovementModel = _this.StMoVw.GetData(response.data.Result);
                    }));
                };
                StockMovementViewController.prototype.Close = function () {
                    location.href = "#!/StockMovement";
                };
                StockMovementViewController.prototype.ErrorClose = function () {
                    location.href = "#!/StockMovementMaster";
                };
                StockMovementViewController.prototype.ShowHidePopUp = function (Message) {
                    $("#errorclose").show();
                    $("#close").hide();
                    this.alert = Message;
                };
                StockMovementViewController.prototype.IsValidNumber = function (value) {
                    if (isNaN(value)) {
                        return { Result: "False", Message: 'Qty should be a number' };
                    }
                    else {
                        return { Result: "True", Message: 'Success' };
                    }
                };
                StockMovementViewController.$inject = ["$location", "itemDescriptionService", "StockListWarehousenameService", "StockGridService", "$cookieStore", "StockMovementViewService", "UOMddlService", "$window"];
                return StockMovementViewController;
            }());
            var StockMovementViewComponentController = /** @class */ (function () {
                function StockMovementViewComponentController() {
                    this.controller = StockMovementViewController;
                    this.templateUrl = "/Scripts/App/AccountDocumentView/StockMovementView/Template/StockMovementView.html";
                }
                StockMovementViewComponentController.Name = "stockmovementviewcomponent";
                return StockMovementViewComponentController;
            }());
            app.AddComponent(StockMovementViewComponentController.Name, new StockMovementViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StockMovementViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StockMovementViewController = /** @class */ (function (_super) {
            __extends(StockMovementViewController, _super);
            function StockMovementViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StockMovementViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StockMovementViewController = StockMovementViewController;
        app.AddController("StockMovementViewController", StockMovementViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StockMovementViewController.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var StockMovementViewModel = /** @class */ (function () {
            function StockMovementViewModel() {
            }
            return StockMovementViewModel;
        }());
        Model.StockMovementViewModel = StockMovementViewModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StockMovementViewModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var StockMovementViewService = /** @class */ (function (_super) {
            __extends(StockMovementViewService, _super);
            function StockMovementViewService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/" + "StockMovementView";
                _this.Cookie = _cookieStore;
                return _this;
            }
            StockMovementViewService.prototype.FindData = function (data) {
                var config = {
                    params: {
                        Dealerid: this.Cookie.get('UserInfo')['DealerID'],
                        StockMovementNo: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            StockMovementViewService.prototype.GetData = function (data) {
                var obj = new model.StockMovementViewModel();
                obj.StockMovementNo = data.StockMovementNo;
                obj.CreatedBy = data.CreatedBy;
                obj.Date = data.Date;
                obj.ToWH = data.ToWH;
                obj.FromWH = data.FromWH;
                obj.UOM = data.UOM;
                obj.Description = data.Description;
                obj.Quantity = data.Quantity;
                obj.Code = data.Code;
                return obj;
            };
            StockMovementViewService.$inject = ["$http", "$q", "$cookieStore"];
            return StockMovementViewService;
        }(GCPL.Service.BaseService));
        Service.StockMovementViewService = StockMovementViewService;
        //inject service
        app.AddService("StockMovementViewService", StockMovementViewService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StockMovementViewService.js.map
//# sourceMappingURL=VIVViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var SubmitDTO = GCPL.Model.SumbitVendorInvoiceModel;
            var DebitNoteHeader = GCPL.Model.DebitNoteHeader;
            var detail = GCPL.Model.DebitNoteGridDTO;
            var Submitp = GCPL.Model.Paymentnumber;
            var VendorInvoiceViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function VendorInvoiceViewController(_ggrid, _cookieStore, _Autofillservice, _service, _PoTotalPriceService, _window, $location) {
                    this._cookieStore = _cookieStore;
                    this._window = _window;
                    this.$location = $location;
                    this.IsDisplayModalPopup = false;
                    this.alert = null;
                    this.isDebit = false;
                    this.Submitp = null;
                    this.Grid = null;
                    this.Grid2 = null;
                    this.GridDebit = null;
                    this.DebitNoteHeader = null;
                    this.detail = null;
                    this.isSelected = false;
                    this.ReceiptQty = null;
                    this.SubmitDebitNote = null;
                    this.InvoiceQty = null;
                    this.bpad = null;
                    this.SearchTerm = null;
                    this.InvoiceValue = null;
                    this.POSGST = null;
                    this.POSGST1 = null;
                    this.InvoiveSGST = null;
                    this.FromRowCount = 0;
                    this.POCGST = null;
                    this.POCGST1 = null;
                    this.Alert = null;
                    this.InvoiveCGST = null;
                    this.POIGST = null;
                    this.POIGST1 = null;
                    this.scstpercent = null;
                    this.cgstpercent = null;
                    this.Igstpercent = null;
                    this.InvoiveIGST = null;
                    this.POItemTotal = null;
                    this.InvoiveItemTotal = null;
                    this.SubmitVendorInvoice = null;
                    this.GetHeaderData = null;
                    this.IsPageLoad = 0;
                    this.poqty = null;
                    this.PoItemTotal = null;
                    this.GRItemTotal = null;
                    this.InvoiceItemTotal = null;
                    this.getdata = null;
                    this.SubmitDTO = null;
                    this.Total = null;
                    this.Cookie = null;
                    this.Id = null;
                    this.GGrid = _ggrid;
                    this.SubmitDTO = new SubmitDTO();
                    this.Cookie = _cookieStore;
                    this.CustomerVenderAutofill = _Autofillservice;
                    this.DebitNoteHeader = new DebitNoteHeader();
                    this.detail = new detail();
                    this.Submitp = new Submitp();
                    this.Service = _service;
                    this.PoTotalPriceService = _PoTotalPriceService;
                    this.SubmitDTO.VendorInvoiceId = $location.search().id;
                    this.Grid = new GCPL.Model.VendorInvoiceGrid();
                }
                VendorInvoiceViewController.prototype.selectPODelvDate = function (e) {
                    document.getElementById("txtBillDate").value = e;
                };
                VendorInvoiceViewController.prototype.selectbaselineeDate = function (e) {
                    document.getElementById("txtBaseDate").value = e;
                };
                VendorInvoiceViewController.prototype.$onInit = function () {
                    this.Init();
                    $("#txtBillDate").datepicker({
                        dateFormat: 'dd M yy',
                        changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectPODelvDate
                    });
                    $("#txtBaseDate").datepicker({
                        dateFormat: 'dd M yy',
                        changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectbaselineeDate
                    });
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                //OnModalBoxClose(item): void {
                //    this.IsDisplayModalPopup = false;
                //    this.Init();
                //}
                //Page Load Define Values//
                VendorInvoiceViewController.prototype.Init = function () {
                    var _this = this;
                    console.log(this.SubmitDTO.VendorInvoiceId);
                    if (this.SubmitDTO.VendorInvoiceId == null) {
                        this.GGrid.Find2(this.SubmitDTO.BillNumber, this.SubmitDTO.PoNumber, this.FromRowCount).then((function (response) {
                            _this.GridDebit = _this.CustomerVenderAutofill.GetGrid(response.data.Result);
                        }));
                    }
                    else {
                        //alert();
                        debugger;
                        console.log(this.SubmitDTO.VendorInvoiceId);
                        this.GGrid.FindHeader(this.SubmitDTO.VendorInvoiceId).then((function (response) {
                            _this.getdata = _this.CustomerVenderAutofill.GetData(response.data.Result);
                            console.log(_this.getdata);
                            _this.SubmitDTO.PoNumber = _this.getdata.header.PoNumber;
                            _this.SubmitDTO.BaseLineDate = _this.getdata.header.BaseLineDate;
                            _this.SubmitDTO.BillNumber = _this.getdata.header.BillNumber;
                            _this.SubmitDTO.BillDate = _this.getdata.header.BillDate;
                            document.getElementById("txtBillDate").value = _this.SubmitDTO.BillDate;
                            document.getElementById("txtBaseLine").value = _this.SubmitDTO.BaseLineDate;
                            _this.GetHeaderData = _this.PoTotalPriceService.FindPOHeader(_this.SubmitDTO.PoNumber).then((function (response) {
                                _this.GetHeaderData = _this.PoTotalPriceService.GetPoHeader(response.data.Result);
                            }));
                            //this.SubmitDTO.Submitlist = this.getdata.list;
                            _this.Grid.list = _this.getdata.list;
                            console.log('hi');
                            console.log(_this.Grid.list);
                            for (var i = 0; i < _this.Grid.list.length; i++) {
                                if (_this.Grid.list[i].InvoiveItemTotal === _this.Grid.list[i].GRItemTotal) {
                                    _this.Grid.list[i].Color = "width:60px;color:Green";
                                }
                                else {
                                    _this.Grid.list[i].Color = "width:60px;color:red";
                                }
                            }
                        }));
                    }
                    $("#DivReversal").hide();
                    $("#btnsubmitdiv").hide();
                };
                VendorInvoiceViewController.prototype.ChkIgnore = function () {
                    this.View();
                };
                VendorInvoiceViewController.prototype.View = function () {
                    var _this = this;
                    if (this.isSelected == false) {
                        $("#DivReversal").hide();
                    }
                    if (this.isSelected == true) {
                        $("#DivReversal").show();
                        var count = 1;
                        if (this.SubmitDTO.BillNumber == null) {
                            this.SubmitDTO.BillNumber = '';
                        }
                        if (this.SubmitDTO.PoNumber == null) {
                            this.SubmitDTO.PoNumber = '';
                        }
                        this.GGrid.Find2(this.SubmitDTO.BillNumber, this.SubmitDTO.PoNumber, this.FromRowCount).then((function (response) {
                            _this.GridDebit = _this.CustomerVenderAutofill.GetGrid(response.data.Result);
                        }));
                    }
                    var count = 1;
                    if (this.SubmitDTO.BillNumber == null) {
                        this.SubmitDTO.BillNumber = '';
                    }
                    if (this.SubmitDTO.PoNumber == null) {
                        this.SubmitDTO.PoNumber = '';
                    }
                    this.GGrid.Find(this.SubmitDTO.BillNumber, this.SubmitDTO.PoNumber, this.FromRowCount, this.isSelected).then((function (response) {
                        console.log(response.data.Result);
                        _this.Grid = _this.GGrid.GetGrid(response.data.Result);
                        for (var i = 0; i < _this.Grid.list.length; i++) {
                            _this.Grid.list[i].Index = count++;
                            _this.Grid.list[i].Color = "width:60px;color:red";
                            _this.SubmitDTO.VendorId = _this.Grid.list[i].VendorId;
                            _this.Grid.list[i].InvoiceQty = _this.Grid.list[i].ReceiptQty.toString();
                            _this.Grid.list[i].InvoiceValue = _this.Grid.list[i].bpad;
                            _this.Grid.list[i].InvoiveSGST = _this.Grid.list[i].POSGST;
                            _this.Grid.list[i].InvoiveCGST = _this.Grid.list[i].POCGST;
                            _this.Grid.list[i].InvoiveIGST = _this.Grid.list[i].POIGST;
                            _this.Grid.list[i].InvoiveUGST = _this.Grid.list[i].POUGST;
                            _this.Grid.list[i].InvoiveItemTotal = _this.Grid.list[i].GRItemTotal;
                            _this.Grid.list[i].Color = "width:60px;color:Green";
                        }
                    }));
                    this.GetHeaderData = this.PoTotalPriceService.FindPOHeader(this.SubmitDTO.PoNumber).then((function (response) {
                        _this.GetHeaderData = _this.PoTotalPriceService.GetPoHeader(response.data.Result);
                        console.log(_this.GetHeaderData);
                    }));
                };
                VendorInvoiceViewController.prototype.Compare = function (data) {
                    var _this = this;
                    console.log(data);
                    if (this.SubmitDTO.PoNumber === '0') {
                        $("#DIvViewWithPo").hide();
                        $("#DIvViewWithoutPo").show();
                        this.ReceiptQty = data.ReceiptQty;
                        this.InvoiceQty = data.InvoiceQty;
                        if (this.ReceiptQty == this.InvoiceQty) {
                            $("#Chk").show();
                            $("#Cross").hide();
                        }
                        else {
                            $("#Chk").hide();
                            $("#Cross").show();
                        }
                    }
                    else {
                        if (this.isSelected == false) {
                        }
                        if (this.isSelected == true) {
                            var count = 1;
                            if (this.SubmitDTO.BillNumber == null) {
                                this.SubmitDTO.BillNumber = '';
                            }
                            if (this.SubmitDTO.PoNumber == null) {
                                this.SubmitDTO.PoNumber = '';
                            }
                            this.GGrid.Find2(this.SubmitDTO.BillNumber, this.SubmitDTO.PoNumber, this.FromRowCount).then((function (response) {
                                _this.GridDebit = _this.CustomerVenderAutofill.GetGrid(response.data.Result);
                                console.log(_this.GridDebit);
                            }));
                        }
                        $("#DIvViewWithPo").show();
                        $("#DIvViewWithoutPo").hide();
                        this.ReceiptQty = data.ReceiptQty;
                        this.InvoiceQty = data.InvoiceQty;
                        this.poqty = data.poqty;
                        if (this.ReceiptQty == this.InvoiceQty) {
                            $("#Chk1").show();
                            $("#Cross1").hide();
                        }
                        else {
                            $("#Chk1").hide();
                            $("#Cross1").show();
                        }
                        this.bpad = data.bpad;
                        this.InvoiceValue = data.InvoiceValue;
                        if (this.bpad == this.InvoiceValue) {
                            $("#Chk2").show();
                            $("#Cross2").hide();
                        }
                        else {
                            $("#Chk2").hide();
                            $("#Cross2").show();
                        }
                        this.POSGST = data.POSGST;
                        this.POSGST1 = data.POSGST1;
                        this.InvoiveSGST = data.InvoiveSGST;
                        this.scstpercent = data.sgst;
                        this.cgstpercent = data.cgst;
                        this.Igstpercent = data.igst;
                        if (this.POSGST == this.InvoiveSGST) {
                            $("#Chk3").show();
                            $("#Cross3").hide();
                        }
                        else {
                            $("#Chk3").hide();
                            $("#Cross3").show();
                        }
                        this.POCGST = data.POCGST;
                        this.POCGST1 = data.POCGST1;
                        this.InvoiveCGST = data.InvoiveCGST;
                        if (this.POCGST == this.InvoiveCGST) {
                            $("#Chk4").show();
                            $("#Cross4").hide();
                        }
                        else {
                            $("#Chk4").hide();
                            $("#Cross4").show();
                        }
                        this.POIGST = data.POIGST;
                        this.POIGST1 = data.POIGST1;
                        this.InvoiveIGST = data.InvoiveIGST;
                        if (this.POIGST == this.InvoiveIGST) {
                            $("#Chk5").show();
                            $("#Cross5").hide();
                        }
                        else {
                            $("#Chk5").hide();
                            $("#Cross5").show();
                        }
                        this.PoItemTotal;
                        //this.POUGST = data.POUGST;
                        //this.InvoiveUGST = data.InvoiveUGST;
                        //if (this.POUGST == this.InvoiveUGST) {
                        //    $("#Chk6").show();
                        //    $("#Cross6").hide();
                        //}
                        //else {
                        //    $("#Chk6").hide();
                        //    $("#Cross6").show();
                        //}
                        this.POItemTotal = data.POItemTotal;
                        this.InvoiveItemTotal = data.InvoiveItemTotal;
                        this.GRItemTotal = data.GRItemTotal;
                        if (this.GRItemTotal == this.InvoiveItemTotal) {
                            $("#Chk7").show();
                            $("#Cross7").hide();
                        }
                        else {
                            $("#Chk7").hide();
                            $("#Cross7").show();
                        }
                    }
                };
                VendorInvoiceViewController.prototype.Calculate = function () {
                    //WithOut pO
                    if (this.SubmitDTO.PoNumber === '0') {
                        $("#DIVWithoutPo").show();
                        $("#DIVwithPO").hide();
                        var count = 0;
                        for (var i = 0; i < this.Grid.list.length; i++) {
                            if (this.Grid.list[i].ReceiptQty === Number(this.Grid.list[i].InvoiceQty)) {
                                this.Grid.list[i].ResultClass = 'fa fa-check';
                                this.Grid.list[i].ResultColor = 'Green';
                                count++;
                            }
                            else {
                                this.Grid.list[i].ResultClass = 'fa fa-times';
                                this.Grid.list[i].ResultColor = 'red';
                            }
                        }
                        if (this.Grid.list.length == count) {
                            this.SubmitDTO.IsBlocked = 0;
                            this.SubmitDTO.Status = 1;
                            this.Alert = 'All values are correct click on the Sumit button and release it for the payment';
                        }
                        else {
                            this.SubmitDTO.IsBlocked = 1;
                            this.SubmitDTO.Status = 2;
                            this.Alert = 'The values does not match if you still want to save this invoice click on the Sumit button but it will be blocked or go back and correct the wrong value';
                        }
                    }
                    //With pO
                    else {
                        $("#DIVWithoutPo").hide();
                        $("#DIVwithPO").show();
                        var count = 0;
                        for (var i = 0; i < this.Grid.list.length; i++) {
                            if (this.Grid.list[i].ReceiptQty == Number(this.Grid.list[i].InvoiceQty) &&
                                this.Grid.list[i].bpad == this.Grid.list[i].InvoiceValue &&
                                this.Grid.list[i].POSGST == this.Grid.list[i].InvoiveSGST &&
                                this.Grid.list[i].POCGST == this.Grid.list[i].InvoiveCGST &&
                                this.Grid.list[i].POIGST == this.Grid.list[i].InvoiveIGST &&
                                this.Grid.list[i].GRItemTotal == this.Grid.list[i].InvoiveItemTotal
                            //this.Grid.list[i].POUGST == this.Grid.list[i].InvoiveUGST &&
                            /*     this.Grid.list[i].POItemTotal == this.Grid.list[i].InvoiveItemTotal*/ ) {
                                this.Grid.list[i].ResultClass = 'fa fa-check';
                                this.Grid.list[i].ResultColor = 'Green';
                                count++;
                            }
                            else {
                                this.Grid.list[i].ResultClass = 'fa fa-times';
                                this.Grid.list[i].ResultColor = 'red';
                            }
                        }
                        if (this.Grid.list.length == count) {
                            this.SubmitDTO.IsBlocked = 0;
                            this.SubmitDTO.Status = 1;
                            this.Alert = 'All values are correct click on the Sumit button and release it for the payment';
                        }
                        else {
                            this.SubmitDTO.IsBlocked = 1;
                            this.SubmitDTO.Status = 2;
                            this.Alert = 'The values does not match if you still want to save this invoice click on the Sumit button but it will be blocked or go back and correct the wrong value';
                        }
                    }
                };
                //will apply later... pagination
                VendorInvoiceViewController.prototype.bindViewMore = function () {
                    var i;
                    i = this.FromRowCount;
                    this.FromRowCount = i + 10;
                    //this.Grid = this.GGrid.Find(this.BillNumber, this.PoNumber, this.FromRowCount).then((response => {
                    //    this.Grid = this.GGrid.GetGrid(response.data.Result);
                    //}));
                };
                VendorInvoiceViewController.prototype.Submit = function () {
                    var _this = this;
                    this.SubmitDTO.BillDate = document.getElementById("txtBillDate").value;
                    if (this.SubmitDTO.BillNumber === undefined || this.SubmitDTO.BillNumber === "") {
                        this.alert = 'Please Enter Bill Number';
                        this.IsPageLoad = 0;
                        $("#errorclose").show();
                        $("#close").hide();
                    }
                    else if (this.SubmitDTO.BaseLineDate === undefined || this.SubmitDTO.BaseLineDate === "") {
                        this.alert = 'Please Enter BaseLineDate';
                        this.IsPageLoad = 0;
                        $("#errorclose").show();
                        $("#close").hide();
                    }
                    else {
                        this.SubmitDTO.UserID = this.Cookie.get('UserInfo')['UserID'];
                        this.SubmitDTO.DealerId = this.Cookie.get('UserInfo')['DealerID'];
                        this.SubmitDTO.Submitlist = this.Grid.list;
                        if (this.Grid.header != undefined || this.Grid.header != null) {
                            this.SubmitDTO.TotalCGST = this.Grid.header.TotalCGST;
                            this.SubmitDTO.TotalSGST = this.Grid.header.TotalSGST;
                            this.SubmitDTO.TotalIGST = this.Grid.header.TotalIGST;
                            this.SubmitDTO.TotalInvoiveAmount = this.Grid.header.TotalInvoiveAmount;
                        }
                        this.SubmitVendorInvoice = this.GGrid.SubmitPO(this.SubmitDTO).then((function (response) {
                            _this.Submitp = _this.Service.SubmitResult(response.data.Result);
                            _this.alert = 'Your Invoice is saved sucessfully with Document number ' + _this.Submitp.Paymentnumber;
                            $("#errorclose").hide();
                            $("#close").show();
                            //this.SubmitDTO = null;
                            //this.GetHeaderData = null;
                            //this.Grid = null;
                            $("#btnsubmitdiv").hide();
                            if (_this.SubmitDTO.IsBlocked == 0) {
                                var sum = 0;
                                var sum1 = 0;
                                var poqty;
                                //if (this.GridDebit.List.length > 0) {
                                //    for (var i = 0; i < this.GridDebit.List.length; i++) {
                                //        sum = (sum + this.GridDebit.List[i].DetitNoteQTY) * (-1);
                                //    }
                                //    for (var i = 0; i < this.Grid.list.length; i++) {
                                //        sum1 = sum1 + parseInt(this.Grid.list[i].ReceiptQty);
                                //        poqty = this.Grid.list[i].poqty;
                                //    }
                                //    if (sum === (sum1 + poqty)) {
                                //        this.SubmitDTO.postatus = 5;
                                //    }
                                //    else {
                                //        this.SubmitDTO.postatus = 4;
                                //    }
                                //    this.Debit();
                                //}
                            }
                        }));
                    }
                };
                VendorInvoiceViewController.prototype.okClick = function () {
                    $("#btnsubmitdiv").show();
                };
                VendorInvoiceViewController.prototype.Debit = function () {
                    var _this = this;
                    this.GGrid.Find2('', this.SubmitDTO.PoNumber, this.FromRowCount).then((function (response) {
                        _this.GridDebit = _this.CustomerVenderAutofill.GetGrid(response.data.Result);
                        _this.CalculateDebit();
                    }));
                };
                VendorInvoiceViewController.prototype.ErrorClose = function () {
                    location.href = "#!/VendorInvoice";
                };
                VendorInvoiceViewController.prototype.CalculateDebit = function () {
                    var _this = this;
                    this.DebitNoteHeader.TotalSGST = 0;
                    this.CustomerVenderAutofill.FindChange(this.GridDebit.List).then((function (response) {
                        _this.Total = _this.CustomerVenderAutofill.GetTotalPrice(response.data.Result);
                        _this.GridDebit.List = _this.Total.List;
                        _this.DebitNoteHeader.TotalSGST = _this.Total.Header.TotalSGST;
                        _this.DebitNoteHeader.TotalNetAmount = _this.Total.Header.TotalNetAmount;
                        _this.DebitNoteHeader.TotalIGST = _this.Total.Header.TotalIGST;
                        _this.DebitNoteHeader.TotalCGST = _this.Total.Header.TotalCGST;
                        _this.DebitNoteHeader.TaxAmount = _this.Total.Header.TaxAmount;
                        _this.DebitNoteHeader.InvoiceAmount = _this.Total.Header.InvoiceAmount;
                        for (var i = 0; i < _this.Total.List.length; i++) {
                            _this.DebitNoteHeader.TotalSGST = _this.DebitNoteHeader.TotalSGST + _this.Total.List[i].sgstValue;
                            _this.DebitNoteHeader.TotalIGST = _this.DebitNoteHeader.TotalIGST + _this.Total.List[i].igstValue;
                            _this.DebitNoteHeader.TotalCGST = _this.DebitNoteHeader.TotalCGST + _this.Total.List[i].cgstValue;
                            _this.DebitNoteHeader.TotalNetAmount = _this.DebitNoteHeader.TotalNetAmount + _this.Total.List[i].NetPriceAmount;
                        }
                        _this.DebitNoteHeader.TaxAmount = _this.DebitNoteHeader.TotalSGST + _this.DebitNoteHeader.TotalIGST + _this.DebitNoteHeader.TotalCGST;
                        _this.DebitNoteHeader.InvoiceAmount = _this.DebitNoteHeader.TotalNetAmount + _this.DebitNoteHeader.TaxAmount;
                        _this.DebitNoteHeader.DealerID = _this.Cookie.get('UserInfo')['DealerID'];
                        _this.DebitNoteHeader.UserID = _this.Cookie.get('UserInfo')['UserID'];
                        _this.DebitNoteHeader.List = _this.GridDebit.List;
                        _this.DebitNoteHeader.TransactionType = 2;
                        _this.DebitNoteHeader.SearchType = 'Vendor';
                        _this.DebitNoteHeader.CustomerVendorId = _this.SubmitDTO.VendorId;
                        _this.DebitNoteHeader.BillNo = _this.SubmitDTO.BillNumber;
                        _this.DebitNoteHeader.RefrenceDocumentNumber = _this.Submitp.Paymentnumber.toString();
                        _this.DebitNoteHeader.IsManual = false;
                        _this.SubmitDebitNote = _this.CustomerVenderAutofill.SubmitDebitNote(_this.DebitNoteHeader).then((function (response) {
                            _this.SubmitDebitNote = _this.CustomerVenderAutofill.SubmitResult(response.data.Result);
                        }));
                    }));
                };
                VendorInvoiceViewController.prototype.DebitClick = function () {
                    this._window.location.href = "#!/VendorInvoiceList";
                };
                VendorInvoiceViewController.prototype.CalculateItemTotal = function () {
                    for (var i = 0; i < this.Grid.list.length; i++) {
                        this.Grid.list[i].InvoiveItemTotal = (Number(this.Grid.list[i].InvoiceQty) * Number(this.Grid.list[i].InvoiceValue)) + Number(this.Grid.list[i].InvoiveIGST) + Number(this.Grid.list[i].InvoiveCGST) + Number(this.Grid.list[i].InvoiveSGST) + Number(this.Grid.list[i].InvoiveUGST);
                        if (this.Grid.list[i].InvoiveItemTotal === this.Grid.list[i].GRItemTotal) {
                            this.Grid.list[i].Color = "width:60px;color:Green";
                        }
                        else {
                            this.Grid.list[i].Color = "width:60px;color:red";
                        }
                    }
                };
                VendorInvoiceViewController.$inject = ["VendorInvoiceGridService", "$cookieStore", "CustomerVenderAutofillService", "VendorPaymentService", "PoTotalPriceService", "$window", "$location"];
                return VendorInvoiceViewController;
            }());
            var VendorInvoiceViewComponentController = /** @class */ (function () {
                function VendorInvoiceViewComponentController() {
                    this.controller = VendorInvoiceViewController;
                    this.templateUrl = "/Scripts/App/Reports/VendorInVoiceView/Template/_VIVView.html";
                }
                VendorInvoiceViewComponentController.Name = "vendorViewInvoice";
                return VendorInvoiceViewComponentController;
            }());
            app.AddComponent(VendorInvoiceViewComponentController.Name, new VendorInvoiceViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VIVViewComponent.js.map
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var VIViewContoller = /** @class */ (function () {
            function VIViewContoller() {
            }
            return VIViewContoller;
        }());
        Controller.VIViewContoller = VIViewContoller;
        app.AddController("VIViewContoller", VIViewContoller);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VIVViewController.js.map
//# sourceMappingURL=VIVViewService.js.map
//# sourceMappingURL=AdvanceTransactionviewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var Insert = GCPL.Model.ARAdvancePaymentModel;
            var Edit = GCPL.Model.EditARAdvancePaymentModel;
            var AdvanceController = /** @class */ (function () {
                function AdvanceController(_Autofillservice, _PaymentModeddlservice, _InsertServices, _cookieStore, $location) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.PaymentMode = null;
                    this.alert = null;
                    this.Cookie = null;
                    this.Id = null;
                    this.CheckARPayment = null;
                    this.EditPayment = null;
                    this.CustomerAutofill = _Autofillservice;
                    this.PaymentModeddlServices = _PaymentModeddlservice;
                    this.CheckARPayment = new Insert();
                    this.EditPayment = new Edit();
                    this.InsertServices = _InsertServices;
                    this.Cookie = _cookieStore;
                    this.Id = $location.search().id;
                }
                AdvanceController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                AdvanceController.prototype.Init = function () {
                    var _this = this;
                    debugger;
                    this.PaymentModeddlServices.FindEdit(this.Id).then((function (response) {
                        _this.EditPayment = _this.PaymentModeddlServices.GetEdit(response.data.Result);
                        console.log("EditPayment");
                        console.log(_this.EditPayment);
                    }));
                };
                //this.PaymentMode = this.PaymentModeddlServices.Find().then((response => {
                //    this.PaymentMode = this.PaymentModeddlServices.GetPaymentMode(response.data.Result);
                //}));
                //let that = this;
                //$("#txtCustomerName").autocomplete({
                //    //  source:['1a0','anjali','archana'],
                //    source: function (request, res) {
                //        that.CustomerAutofill.FilterAutoComplete(request).then((response => {
                //            let data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                //            res($.map(data, function (item, index) {
                //                return {
                //                    label: item.CustomerName,
                //                    value: item.CustomerName,
                //                    id: item.CustomerID
                //                }
                //            }));
                //        }));
                //    },
                //    minLength: 2,
                //    focus: (event, ui) => {
                //        event.preventDefault();
                //    },
                //    select: function (e, ui) {
                //        let SelectedCustomerID = ui.item.id;
                //        that.CheckARPayment.CustomerID = ui.item.id;
                //    },
                //    change: function () {
                //    }
                AdvanceController.prototype.submit = function () {
                    var _this = this;
                    this.CheckARPayment.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.CheckARPayment.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.InsertServices.PostARPayment(this.CheckARPayment).then((function (response) {
                        if (response.data.Result != null) {
                            _this.alert = "Data Save Successfully Saved";
                        }
                        else {
                            _this.alert = "Oops Some Error Occured";
                        }
                    }));
                };
                AdvanceController.prototype.Close = function () {
                    location.href = "/#!/AdvancePaymentList";
                };
                AdvanceController.$inject = ["CustomeraAtofillService", "PaymentModeddlService", "InsertArAdvancePaymentServies", "$cookieStore", "$location"];
                return AdvanceController;
            }());
            var AdvanceComponentComponentController = /** @class */ (function () {
                function AdvanceComponentComponentController() {
                    this.controller = AdvanceController;
                    this.templateUrl = "/Scripts/App/Sales/AdvanceTransactionView/Template/_AdvanceTransactionview.html";
                }
                AdvanceComponentComponentController.Name = "advancecomponentviewpage";
                return AdvanceComponentComponentController;
            }());
            app.AddComponent(AdvanceComponentComponentController.Name, new AdvanceComponentComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AdvanceTransactionviewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var AdvanceTransactionviewController = /** @class */ (function (_super) {
            __extends(AdvanceTransactionviewController, _super);
            function AdvanceTransactionviewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AdvanceTransactionviewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.AdvanceTransactionviewController = AdvanceTransactionviewController;
        app.AddController("AdvanceTransactionviewController", AdvanceTransactionviewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AdvanceTransactionviewController.js.map
//# sourceMappingURL=AdvanceTransactionviewService.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var CreditNoteListController = /** @class */ (function () {
                function CreditNoteListController(_CreditNoteListService, _IUserNameService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.CreditNoteList = null;
                    this.DealerID = null;
                    this.Description = null;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.CreditNoteListSearch = null;
                    this.Cookie = null;
                    this.CreditNoteListService = _CreditNoteListService;
                    this.UserNameService = _IUserNameService;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.CreditNoteListSearch = new GCPL.Model.CreditNoteListSearchmodel();
                    this.CreditNoteList = Array();
                }
                CreditNoteListController.prototype.$onInit = function () {
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                    this.Init();
                };
                CreditNoteListController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                CreditNoteListController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                CreditNoteListController.prototype.Init = function () {
                    this.Search();
                };
                CreditNoteListController.prototype.Search = function () {
                    this.CreditNoteListSearch.FromDate = document.getElementById("txtFromDate").value;
                    this.CreditNoteListSearch.ToDate = document.getElementById("txtToDate").value;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                CreditNoteListController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.CreditNoteListService.Find(this.CreditNoteListSearch).then((function (response) {
                        console.log(response);
                        _this.CreditNoteList = _this.CreditNoteListService.GetCreditNoteListGrid(response.data.Result);
                        _this.CreditNoteList.forEach(function (value, key) {
                            that.incre = key + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.CreditNoteList.slice(0, that.numRecords);
                    }));
                };
                CreditNoteListController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                CreditNoteListController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.CreditNoteList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                CreditNoteListController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.CreditNoteList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                CreditNoteListController.prototype.Clear = function () {
                    this.CreditNoteListSearch.FromDate = '';
                    this.CreditNoteListSearch.ToDate = '';
                    this.CreditNoteListSearch.CreatedBy = '';
                    $("#txtUserName").val("");
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    //this.GRListService.FindGRStatus().then((response => {
                    //    this.GetGRStatus = this.GRListService.GetGRStatus(response.data.Result);
                    //    //this.Search();
                    //}));
                };
                CreditNoteListController.prototype.AutoSearch = function () {
                    var that = this;
                    $("#txtUserName").autocomplete({
                        source: function (request, res) {
                            that.UserNameService.FilterAutoComplete(request).then((function (response) {
                                var data = that.UserNameService.GetUserName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Name,
                                        value: item.Name,
                                        id: item.UserID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.CreditNoteListSearch.CreatedBy = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                };
                CreditNoteListController.$inject = ["CreditNoteListService", "UserNameService", "$cookieStore"];
                return CreditNoteListController;
            }());
            var CreditNoteListComponentController = /** @class */ (function () {
                function CreditNoteListComponentController() {
                    this.controller = CreditNoteListController;
                    this.templateUrl = "/Scripts/App/Reports/CreditNoteList/Template/CreditNoteList.html";
                }
                //static Name: string = "aaa"
                CreditNoteListComponentController.Name = "creditnotelistcomponent";
                return CreditNoteListComponentController;
            }());
            app.AddComponent(CreditNoteListComponentController.Name, new CreditNoteListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreditNoteListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var CreditNoteListController = /** @class */ (function (_super) {
            __extends(CreditNoteListController, _super);
            function CreditNoteListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CreditNoteListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.CreditNoteListController = CreditNoteListController;
        app.AddController("CreditNoteListController", CreditNoteListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreditNoteListController.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var CreditNoteListGrid = /** @class */ (function () {
            function CreditNoteListGrid() {
            }
            return CreditNoteListGrid;
        }());
        Model.CreditNoteListGrid = CreditNoteListGrid;
        var CreditNoteListSearchmodel = /** @class */ (function () {
            function CreditNoteListSearchmodel() {
            }
            return CreditNoteListSearchmodel;
        }());
        Model.CreditNoteListSearchmodel = CreditNoteListSearchmodel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreditNoteListModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var CreditNoteListService = /** @class */ (function (_super) {
            __extends(CreditNoteListService, _super);
            function CreditNoteListService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            CreditNoteListService.prototype.Find = function (data) {
                var url = this.apiUrl + "/CreditNoteSubmit";
                var config = {
                    params: {
                        CreatedBy: data.CreatedBy == undefined ? "" : data.CreatedBy,
                        FromDate: data.FromDate,
                        ToDate: data.ToDate,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            CreditNoteListService.prototype.GetCreditNoteListGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        Date: item.Date,
                        BillNo: item.BillNo,
                        Amount: item.Amount,
                        CreditNoteNo: item.CreditNoteNo,
                        CustomerName: item.CustomerName,
                        TotalTax: item.TotalTax,
                        InvoiceAmount: item.InvoiceAmount,
                        CreatedBy: item.CreatedBy
                    });
                }
                return list;
            };
            CreditNoteListService.prototype.FindList = function () {
                var url = this.apiUrl + "/CreditNoteSubmit";
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            CreditNoteListService.prototype.GetCreditNoteListView = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        Date: item.Date,
                        BillNo: item.BillNo,
                        Amount: item.Amount,
                        CreditNoteNo: item.CreditNoteNo,
                        CustomerName: item.CustomerName,
                        TotalTax: item.TotalTax,
                        InvoiceAmount: item.InvoiceAmount,
                        CreatedBy: item.CreatedBy
                    });
                }
                return list;
            };
            CreditNoteListService.$inject = ["$http", "$q", "$cookieStore"];
            return CreditNoteListService;
        }(GCPL.Service.BaseService));
        Service.CreditNoteListService = CreditNoteListService;
        app.AddService("CreditNoteListService", CreditNoteListService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreditNoteListService.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var DebitNoteListController = /** @class */ (function () {
                function DebitNoteListController(_DebitNoteListService, _IUserNameService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.DebitNoteList = null;
                    this.DealerID = null;
                    this.Description = null;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.DebitNoteListSearch = null;
                    this.Cookie = null;
                    this.DebitNoteListService = _DebitNoteListService;
                    this.UserNameService = _IUserNameService;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.DebitNoteListSearch = new GCPL.Model.DebitNoteListSearchmodel();
                    this.DebitNoteList = Array();
                }
                DebitNoteListController.prototype.$onInit = function () {
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                    this.Init();
                };
                DebitNoteListController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                DebitNoteListController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                DebitNoteListController.prototype.Init = function () {
                    this.Search();
                };
                DebitNoteListController.prototype.Search = function () {
                    this.DebitNoteListSearch.FromDate = document.getElementById("txtFromDate").value;
                    this.DebitNoteListSearch.ToDate = document.getElementById("txtToDate").value;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                DebitNoteListController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.DebitNoteListService.Find(this.DebitNoteListSearch).then((function (response) {
                        console.log(response);
                        _this.DebitNoteList = _this.DebitNoteListService.GetDebitNoteListGrid(response.data.Result);
                        _this.DebitNoteList.forEach(function (value, key) {
                            that.incre = key + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.DebitNoteList.slice(0, that.numRecords);
                    }));
                };
                DebitNoteListController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                DebitNoteListController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.DebitNoteList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                DebitNoteListController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.DebitNoteList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                DebitNoteListController.prototype.Clear = function () {
                    this.DebitNoteListSearch.FromDate = '';
                    this.DebitNoteListSearch.ToDate = '';
                    this.DebitNoteListSearch.CreatedBy = '';
                    $("#txtUserName").val("");
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    //this.GRListService.FindGRStatus().then((response => {
                    //    this.GetGRStatus = this.GRListService.GetGRStatus(response.data.Result);
                    //    //this.Search();
                    //}));
                };
                DebitNoteListController.prototype.AutoSearch = function () {
                    var that = this;
                    $("#txtUserName").autocomplete({
                        source: function (request, res) {
                            that.UserNameService.FilterAutoComplete(request).then((function (response) {
                                var data = that.UserNameService.GetUserName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Name,
                                        value: item.Name,
                                        id: item.UserID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.DebitNoteListSearch.CreatedBy = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                };
                DebitNoteListController.$inject = ["DebitNoteListService", "UserNameService", "$cookieStore"];
                return DebitNoteListController;
            }());
            var DebitNoteListComponentController = /** @class */ (function () {
                function DebitNoteListComponentController() {
                    this.controller = DebitNoteListController;
                    this.templateUrl = "/Scripts/App/Reports/DebitNoteList/Template/DebitNoteList.html";
                }
                //static Name: string = "aaa"
                DebitNoteListComponentController.Name = "debitnotelistcomponent";
                return DebitNoteListComponentController;
            }());
            app.AddComponent(DebitNoteListComponentController.Name, new DebitNoteListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DebitNoteListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var DebitNoteListController = /** @class */ (function (_super) {
            __extends(DebitNoteListController, _super);
            function DebitNoteListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return DebitNoteListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.DebitNoteListController = DebitNoteListController;
        app.AddController("DebitNoteListController", DebitNoteListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DebitNoteListController.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var DebitNoteListGrid = /** @class */ (function () {
            function DebitNoteListGrid() {
            }
            return DebitNoteListGrid;
        }());
        Model.DebitNoteListGrid = DebitNoteListGrid;
        var DebitNoteListSearchmodel = /** @class */ (function () {
            function DebitNoteListSearchmodel() {
            }
            return DebitNoteListSearchmodel;
        }());
        Model.DebitNoteListSearchmodel = DebitNoteListSearchmodel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DebitNoteListModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var DebitNoteListService = /** @class */ (function (_super) {
            __extends(DebitNoteListService, _super);
            function DebitNoteListService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            DebitNoteListService.prototype.Find = function (data) {
                var url = this.apiUrl + "/DebitNoteSubmit";
                var Createby, fromdte, todte;
                //if (true) {
                //    Createby
                //}
                debugger;
                var config = {
                    params: {
                        CreatedBy: data.CreatedBy == undefined ? "" : data.CreatedBy,
                        FromDate: data.FromDate == undefined ? "" : data.FromDate,
                        ToDate: data.ToDate == undefined ? "" : data.ToDate,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            DebitNoteListService.prototype.GetDebitNoteListGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        Date: item.Date,
                        InvoiceNo: item.InvoiceNo,
                        DebitAmount: item.DebitAmount,
                        DebitNoteNo: item.DebitNoteNo,
                        CustomerName: item.CustomerName,
                        TotalTax: item.TotalTax,
                        InvoiceAmount: item.InvoiceAmount,
                        CreatedBy: item.CreatedBy
                    });
                }
                return list;
            };
            DebitNoteListService.prototype.FindList = function () {
                var url = this.apiUrl + "/DebitNoteSubmit";
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            DebitNoteListService.prototype.GetDebitNoteList = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        Date: item.Date,
                        InvoiceNo: item.InvoiceNo,
                        DebitAmount: item.DebitAmount,
                        DebitNoteNo: item.DebitNoteNo,
                        CustomerName: item.CustomerName,
                        TotalTax: item.TotalTax,
                        InvoiceAmount: item.InvoiceAmount,
                        CreatedBy: item.CreatedBy
                    });
                }
                return list;
            };
            DebitNoteListService.$inject = ["$http", "$q", "$cookieStore"];
            return DebitNoteListService;
        }(GCPL.Service.BaseService));
        Service.DebitNoteListService = DebitNoteListService;
        app.AddService("DebitNoteListService", DebitNoteListService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DebitNoteListService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var InsertSalesPrice = /** @class */ (function () {
            function InsertSalesPrice() {
            }
            return InsertSalesPrice;
        }());
        Model.InsertSalesPrice = InsertSalesPrice;
        var SalesPriceForCustomer = /** @class */ (function () {
            function SalesPriceForCustomer() {
            }
            return SalesPriceForCustomer;
        }());
        Model.SalesPriceForCustomer = SalesPriceForCustomer;
        var SalesPrice = /** @class */ (function () {
            function SalesPrice() {
            }
            return SalesPrice;
        }());
        Model.SalesPrice = SalesPrice;
        var SalesPriceList = /** @class */ (function () {
            function SalesPriceList() {
            }
            return SalesPriceList;
        }());
        Model.SalesPriceList = SalesPriceList;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesPriceForCustomerModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var SalesPriceForCustomerController = /** @class */ (function (_super) {
            __extends(SalesPriceForCustomerController, _super);
            function SalesPriceForCustomerController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SalesPriceForCustomerController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.SalesPriceForCustomerController = SalesPriceForCustomerController;
        app.AddController("SalesPriceForCustomerController", SalesPriceForCustomerController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesPriceForCustomerController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var data = GCPL.Model.SalesPriceForCustomer;
            var insert = GCPL.Model.InsertSalesPrice;
            var SalesPriceForCustomerController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function SalesPriceForCustomerController(_ISalesPriceForCustomerService, _Autofillservice, _cookieStore, $location) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.InsertSalesPrice = null;
                    this.DSP = null;
                    this.SalesPrice = null;
                    this.alert = null;
                    this.chkdata = null;
                    this.Cookie = null;
                    this.SalesPriceForCustomer = null;
                    this.ISalesPriceForCustomerService = _ISalesPriceForCustomerService;
                    this.CustomerAutofill = _Autofillservice;
                    this.SalesPriceForCustomer = new data();
                    this.SalesPrice = new GCPL.Model.SalesPrice();
                    this.InsertSalesPrice = new insert();
                    this.Cookie = _cookieStore;
                    this.InsertSalesPrice.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.InsertSalesPrice.CustomerID = $location.search().CustomerID;
                    this.InsertSalesPrice.CustomerName = $location.search().CustomerName;
                }
                SalesPriceForCustomerController.prototype.$onInit = function () {
                    $("#btnSubmit").hide();
                    this.Init();
                };
                //Page Load Define Values//
                SalesPriceForCustomerController.prototype.Init = function () {
                    var _this = this;
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.FromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.TODate
                    });
                    this.ISalesPriceForCustomerService.FindBSP(this.InsertSalesPrice.CustomerID).then((function (response) {
                        _this.SalesPriceForCustomerList = _this.ISalesPriceForCustomerService.GetBSP(response.data.Result);
                        $("#btnSubmit").show();
                    }));
                    var that = this;
                    $("#txtCustomerName").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.CustomerAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.InsertSalesPrice.CustomerID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                };
                SalesPriceForCustomerController.prototype.ChangeMargin = function (data) {
                    debugger;
                    console.log(data);
                    data.DSP = data.BasicSalesPrice - (data.DealerMargin * (data.BasicSalesPrice / 100));
                };
                SalesPriceForCustomerController.prototype.GetData = function () {
                    debugger;
                };
                SalesPriceForCustomerController.prototype.FromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                SalesPriceForCustomerController.prototype.TODate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                SalesPriceForCustomerController.prototype.insert = function () {
                    var _this = this;
                    debugger;
                    //this.InsertSalesPrice.FromDate = (<HTMLInputElement>document.getElementById("txtFromDate")).value;
                    //this.InsertSalesPrice.ToDate = (<HTMLInputElement>document.getElementById("txtToDate")).value;
                    if (this.InsertSalesPrice.CustomerID == undefined) {
                        this.alert = 'Please Enter Customer Name';
                    }
                    //else if (this.InsertSalesPrice.FromDate == "") {
                    //    this.alert = 'Please Select From Date';
                    //}
                    //else if (this.InsertSalesPrice.ToDate == "") {
                    //    this.alert = 'Please Select From Date';
                    //}
                    else {
                        for (var i = 0; i < this.SalesPriceForCustomerList.length; i++) {
                            var that = this;
                            //this.SalesPriceForCustomerList[i].FromDate = that.InsertSalesPrice.FromDate;
                            //this.SalesPriceForCustomerList[i].ToDate = that.InsertSalesPrice.ToDate;
                            this.SalesPriceForCustomerList[i].CustomerID = that.InsertSalesPrice.CustomerID;
                            this.SalesPriceForCustomerList[i].DealerID = this.InsertSalesPrice.DealerID;
                        }
                        this.SalesPriceForCustomerList = this.FindSelectedcheckbox();
                        this.SalesPrice.list = this.SalesPriceForCustomerList; //this.SalesPriceForCustomerList;
                        console.log(this.SalesPrice.list);
                        this.ISalesPriceForCustomerService.Post(this.SalesPrice).then(function (response) {
                            if (response.data.Result != null) {
                                _this.InsertSalesPrice = null;
                                _this.SalesPriceForCustomerList = null;
                                $("#txtCustomerName").val("");
                                $("#btnSubmit").hide();
                                _this.alert = 'Your Sales Price For Customer is saved sucessfully';
                            }
                            else {
                                _this.alert = 'Oops Some Error Occured';
                            }
                        });
                    }
                };
                SalesPriceForCustomerController.prototype.Close = function () {
                    location.href = "/#!/SalesPriceForCustomerList";
                };
                SalesPriceForCustomerController.prototype.FindSelectedcheckbox = function () {
                    debugger;
                    var listOfSelectedRole = [];
                    $.each(this.SalesPriceForCustomerList, function (key, item) {
                        if (item.chkdata == true) {
                            listOfSelectedRole.push(item);
                        }
                    });
                    return listOfSelectedRole;
                };
                SalesPriceForCustomerController.$inject = ["SalesPriceForCustomerService", "CustomeraAtofillService", "$cookieStore", "$location"];
                return SalesPriceForCustomerController;
            }());
            var SalesPriceForCustomerComponentController = /** @class */ (function () {
                function SalesPriceForCustomerComponentController() {
                    this.controller = SalesPriceForCustomerController;
                    this.templateUrl = "/Scripts/App/SalesPriceForCustomer/Template/_SalesPriceForCustomer.html";
                }
                SalesPriceForCustomerComponentController.Name = "salesPriceForCustomer";
                return SalesPriceForCustomerComponentController;
            }());
            app.AddComponent(SalesPriceForCustomerComponentController.Name, new SalesPriceForCustomerComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesPriceForCustomerComponent.js.map
//WarehouseName dropdown
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var SalesPriceForCustomerService = /** @class */ (function (_super) {
            __extends(SalesPriceForCustomerService, _super);
            function SalesPriceForCustomerService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            SalesPriceForCustomerService.prototype.Post = function (data) {
                var url = this.apiUrl + "/SalesPriceForCustomer";
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            SalesPriceForCustomerService.prototype.FindBSP = function (data) {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        CustomerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SalesPriceForCustomer",
                    Config: config
                });
            };
            SalesPriceForCustomerService.prototype.GetBSP = function (data) {
                //
                //let obj = new model.SalesPriceForCustomer();
                //obj.BasicSalesPrice = data.BasicSalesPrice;
                //obj.DealerMargin = data.DealerMargin;
                //obj.Description = data.Description;
                //obj.DSP = data.DSP;
                //obj.MRP = data.MRP;
                //return obj;
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        BasicSalesPrice: item.BasicSalesPrice,
                        DealerMargin: item.DealerMargin,
                        Description: item.Description,
                        DSP: item.DSP,
                        MRP: item.MRP,
                        CustomerID: item.CustomerID,
                        ItemID: item.ItemID,
                        FromDate: item.FromDate,
                        ToDate: item.ToDate,
                        DealerID: item.DealerID,
                        chkdata: item.chkdata,
                        ID: item.ID
                    });
                }
                return list;
            };
            SalesPriceForCustomerService.prototype.Find = function (data) {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SalesPriceForCustomer",
                    Config: config
                });
            };
            SalesPriceForCustomerService.prototype.GetBasicPrice = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        CustomerName: item.CustomerName,
                        CustomerType: item.CustomerType,
                        CustomerID: item.CustomerID
                    });
                }
                return list;
            };
            SalesPriceForCustomerService.$inject = ["$http", "$q", "$cookieStore"];
            return SalesPriceForCustomerService;
        }(GCPL.Service.BaseService));
        Service.SalesPriceForCustomerService = SalesPriceForCustomerService;
        app.AddService("SalesPriceForCustomerService", SalesPriceForCustomerService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesPriceForCustomerService.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var SalesPriceForCustomerListController = /** @class */ (function (_super) {
            __extends(SalesPriceForCustomerListController, _super);
            function SalesPriceForCustomerListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SalesPriceForCustomerListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.SalesPriceForCustomerListController = SalesPriceForCustomerListController;
        app.AddController("SalesPriceForCustomerListController", SalesPriceForCustomerListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesPriceForCustomerListController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var data = GCPL.Model.SalesPriceForCustomer;
            var SalesPriceForCustomerListController = /** @class */ (function () {
                function SalesPriceForCustomerListController(_ISalesPriceForCustomerService, _Autofillservice, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.SalesPrice = null;
                    this.Cookie = null;
                    this.DealerID = null;
                    this.SalesPriceForCustomer = null;
                    this.ISalesPriceForCustomerService = _ISalesPriceForCustomerService;
                    this.CustomerAutofill = _Autofillservice;
                    this.SalesPriceForCustomer = new data();
                    this.SalesPrice = new GCPL.Model.SalesPrice();
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                SalesPriceForCustomerListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                SalesPriceForCustomerListController.prototype.Init = function () {
                    var _this = this;
                    this.ISalesPriceForCustomerService.Find(this.DealerID).then((function (response) {
                        _this.SalesPriceForCustomerList = _this.ISalesPriceForCustomerService.GetBasicPrice(response.data.Result);
                        console.log(_this.SalesPriceForCustomerList);
                    }));
                };
                SalesPriceForCustomerListController.$inject = ["SalesPriceForCustomerService", "CustomeraAtofillService", "$cookieStore"];
                return SalesPriceForCustomerListController;
            }());
            var SalesPriceForCustomerListComponentController = /** @class */ (function () {
                function SalesPriceForCustomerListComponentController() {
                    this.controller = SalesPriceForCustomerListController;
                    this.templateUrl = "/Scripts/App/SalesPriceForCustomerList/Template/_BasicSalesPriceForCustomerList.html";
                }
                SalesPriceForCustomerListComponentController.Name = "salesPriceForCustomerList";
                return SalesPriceForCustomerListComponentController;
            }());
            app.AddComponent(SalesPriceForCustomerListComponentController.Name, new SalesPriceForCustomerListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesPriceForCustomerListComponent.js.map
//# sourceMappingURL=ClaimModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ClaimController = /** @class */ (function (_super) {
            __extends(ClaimController, _super);
            function ClaimController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ClaimController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ClaimController = ClaimController;
        app.AddController("ClaimController", ClaimController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ClaimController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ClaimController = /** @class */ (function () {
                function ClaimController() {
                }
                ClaimController.prototype.$onInit = function () {
                    this.Init();
                };
                ClaimController.prototype.Init = function () {
                };
                ClaimController.$inject = [];
                return ClaimController;
            }());
            var ClaimComponentController = /** @class */ (function () {
                function ClaimComponentController() {
                    this.controller = ClaimController;
                    this.templateUrl = "/Scripts/App/Sales/Claim/Template/_Claim.html";
                }
                ClaimComponentController.Name = "claimcomponent";
                return ClaimComponentController;
            }());
            app.AddComponent(ClaimComponentController.Name, new ClaimComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ClaimComponent.js.map
//# sourceMappingURL=ClaimService.js.map
//# sourceMappingURL=ClaimListModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ClaimListController = /** @class */ (function (_super) {
            __extends(ClaimListController, _super);
            function ClaimListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ClaimListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ClaimListController = ClaimListController;
        app.AddController("ClaimListController", ClaimListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ClaimListController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ClaimListController = /** @class */ (function () {
                function ClaimListController() {
                }
                ClaimListController.prototype.$onInit = function () {
                    this.Init();
                };
                ClaimListController.prototype.Init = function () {
                };
                ClaimListController.$inject = [];
                return ClaimListController;
            }());
            var ClaimListComponentController = /** @class */ (function () {
                function ClaimListComponentController() {
                    this.controller = ClaimListController;
                    this.templateUrl = "/Scripts/App/Sales/ClaimList/Template/_ClaimList.html";
                }
                ClaimListComponentController.Name = "claimlistcomponent";
                return ClaimListComponentController;
            }());
            app.AddComponent(ClaimListComponentController.Name, new ClaimListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ClaimListComponent.js.map
//# sourceMappingURL=ClaimListService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var AccRuleListModel = /** @class */ (function () {
            function AccRuleListModel() {
            }
            return AccRuleListModel;
        }());
        Model.AccRuleListModel = AccRuleListModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
(function (GCPL) {
    var Model;
    (function (Model) {
        var AccGroupListModel = /** @class */ (function () {
            function AccGroupListModel() {
            }
            return AccGroupListModel;
        }());
        Model.AccGroupListModel = AccGroupListModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AccRuleListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var AccRuleListController = /** @class */ (function () {
                function AccRuleListController(_Service, _cookieStore, $location, _window) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this._window = _window;
                    this.list = null;
                    this.Cookie = null;
                    this.Service = _Service;
                    this.Cookie = _cookieStore;
                }
                AccRuleListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                AccRuleListController.prototype.Init = function () {
                    var _this = this;
                    this.Service.Find().then((function (response) {
                        _this.list = _this.Service.List(response.data.Result);
                    }));
                };
                AccRuleListController.$inject = ["AccRuleListService", "$cookieStore", "$location", "$window"];
                return AccRuleListController;
            }());
            var AccRuleListComponentController = /** @class */ (function () {
                function AccRuleListComponentController() {
                    this.controller = AccRuleListController;
                    this.templateUrl = "/Scripts/App/Account/AccRuleList/Template/_AccRuleList.html";
                }
                AccRuleListComponentController.Name = "accRuleList";
                return AccRuleListComponentController;
            }());
            app.AddComponent(AccRuleListComponentController.Name, new AccRuleListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AccRuleListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var AccRuleListContoller = /** @class */ (function (_super) {
            __extends(AccRuleListContoller, _super);
            function AccRuleListContoller() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AccRuleListContoller;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.AccRuleListContoller = AccRuleListContoller;
        app.AddController("AccRuleListContoller", AccRuleListContoller);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AccRuleListController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var AccRuleListService = /** @class */ (function (_super) {
            __extends(AccRuleListService, _super);
            function AccRuleListService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                //  this.apiUrl = `${this.url}/${"GetAccountAssignmentList"}`;
                _this.Cookie = _cookieStore;
                return _this;
            }
            AccRuleListService.prototype.Find = function () {
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "GetAccRuleList"
                });
            };
            AccRuleListService.prototype.List = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        ruleno: item.ruleno,
                        description: item.description,
                        formula: item.formula
                    });
                }
                return list;
            };
            AccRuleListService.prototype.Find1 = function () {
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "GetAccGroupList"
                });
            };
            AccRuleListService.prototype.List1 = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        accgroup: item.accgroup,
                        description: item.description
                    });
                }
                return list;
            };
            AccRuleListService.$inject = ["$http", "$q", "$cookieStore"];
            return AccRuleListService;
        }(GCPL.Service.BaseService));
        Service.AccRuleListService = AccRuleListService;
        //inject service
        app.AddService("AccRuleListService", AccRuleListService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AccRuleListService.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var AccGroupListController = /** @class */ (function () {
                function AccGroupListController(_Service, _cookieStore, $location, _window) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this._window = _window;
                    this.list = null;
                    this.Cookie = null;
                    this.Service = _Service;
                    this.Cookie = _cookieStore;
                }
                AccGroupListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                AccGroupListController.prototype.Init = function () {
                    var _this = this;
                    this.Service.Find1().then((function (response) {
                        _this.list = _this.Service.List1(response.data.Result);
                    }));
                };
                AccGroupListController.$inject = ["AccRuleListService", "$cookieStore", "$location", "$window"];
                return AccGroupListController;
            }());
            var AccGroupListComponentController = /** @class */ (function () {
                function AccGroupListComponentController() {
                    this.controller = AccGroupListController;
                    this.templateUrl = "/Scripts/App/Account/AccGroupMaster/Template/_AccGroupList.html";
                }
                AccGroupListComponentController.Name = "accGroupList";
                return AccGroupListComponentController;
            }());
            app.AddComponent(AccGroupListComponentController.Name, new AccGroupListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AccGroupComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var AccGroupListContoller = /** @class */ (function (_super) {
            __extends(AccGroupListContoller, _super);
            function AccGroupListContoller() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AccGroupListContoller;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.AccGroupListContoller = AccGroupListContoller;
        app.AddController("AccGroupListContoller", AccGroupListContoller);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AccGroupListController.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var WarehouseSOModel = /** @class */ (function () {
            function WarehouseSOModel() {
            }
            return WarehouseSOModel;
        }());
        Model.WarehouseSOModel = WarehouseSOModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WarehouseSalesOfficeModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var WarehouseSalesOfficeController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function WarehouseSalesOfficeController(_cookieStore, _Service, $location, _Cservice, _Sservice, _Dservice) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.WarehouseSODetails = null;
                    this.alert = null;
                    this.CountryDropDown = null;
                    this.StateDropDown = null;
                    this.SelectedStateID = null;
                    this.DistrictDropDown = null;
                    this.WarehouseDropDown = null;
                    this.DealerID = null;
                    this.ID = null;
                    this.FindWSOList = null;
                    this.SalesOfficddl = null;
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.Service = _Service;
                    this.Cservice = _Cservice;
                    this.Sservice = _Sservice;
                    this.Districtservice = _Dservice;
                    this.ID = $location.search().ID;
                    this.WarehouseSODetails = new GCPL.Model.WarehouseSOModel();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                WarehouseSalesOfficeController.prototype.$onInit = function () {
                    this.Init();
                    this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                //Page Load Define Values//
                WarehouseSalesOfficeController.prototype.Init = function () {
                    //this.CountryDropDown = this.Cservice.Find().then((response => {
                    //    this.CountryDropDown = this.Cservice.GetCountryName(response.data.Result);
                    //    //this.GroupEntityviewDetails.ConsigneeCategoryID = this.ConsigneeCategoryDropDown[0].ConsigneeCategoryID.toString();
                    //    let that = this;
                    //    this.CountryDropDown.forEach(function (value, key) {
                    //        that.WarehouseSODetails.CountryID = "99";
                    //        //that.GroupEntityviewDetails.Currency = "99";
                    //    });
                    var _this = this;
                    //}));
                    //this.StateDropDown = this.Sservice.Find().then((response => {
                    //    this.StateDropDown = this.Sservice.GetStateName(response.data.Result);
                    //    this.WarehouseSODetails.StateCode = this.StateDropDown[0].Region_Code.toString();
                    //}));
                    this.SalesOfficddl = this.Service.FindSalesOffic().then((function (response) {
                        _this.SalesOfficddl = _this.Service.GetSalesOffic(response.data.Result);
                        //if (this.SalesOfficddl[0].SalesOfficID == "0") {
                        //    this.SalesOfficddl.splice(0, 1);
                        //}
                    }));
                    this.WarehouseDropDown = this.Service.FindWHName(this.DealerID).then((function (response) {
                        _this.WarehouseDropDown = _this.Service.GetWHName(response.data.Result);
                    }));
                    this.FindWSOList = this.Service.Find().then((function (response) {
                        _this.FindWSOList = _this.Service.GetWarehouseSalesOfficeList(response.data.Result);
                    }));
                };
                WarehouseSalesOfficeController.prototype.District = function (data) {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(data).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                        //this.GroupEntityviewDetails.District = this.DistrictDropDown[0].District.toString();
                    }));
                };
                WarehouseSalesOfficeController.prototype.InsertWarehouseSO = function () {
                    var _this = this;
                    if (this.SalesOfficddl.SalesOfficID == "0" || this.SalesOfficddl.SalesOfficID == null || this.SalesOfficddl.SalesOfficID == "") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Sales Office ";
                    }
                    else if (this.WarehouseSODetails.WHID == "0" || this.WarehouseSODetails.WHID == null || this.WarehouseSODetails.WHID == "") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select WareHouse";
                    }
                    else if (this.WarehouseSODetails.IsActive === "Select" || this.WarehouseSODetails.IsActive === undefined || this.WarehouseSODetails.IsActive === "") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Status";
                    }
                    else {
                        if (this.WarehouseSODetails.ID == undefined) {
                            this.WarehouseSODetails.ID = 0;
                        }
                        this.WarehouseSODetails.DealerID = this.DealerID;
                        this.WarehouseSODetails.SalesOffice = this.SalesOfficddl.SalesOfficID;
                        this.Service.InsertWarehouseSalesOffice(this.WarehouseSODetails).then((function (response) {
                            _this.FindWSOList = _this.Service.Find().then((function (response) {
                                _this.FindWSOList = _this.Service.GetWarehouseSalesOfficeList(response.data.Result);
                            }));
                            $("myModalAddNew").hide();
                            if (response.data.Result != null) {
                                _this.alert = " Sales Office is Successfully Assigned to Warehouse";
                                $("#errorclose").hide();
                                $("#close").show();
                                $('#myModalAddNew').click();
                            }
                            else {
                                _this.alert = 'Oops Some Error Occured';
                                $("#errorclose").hide();
                                $("#close").show();
                            }
                        }));
                    }
                };
                WarehouseSalesOfficeController.prototype.Close = function () {
                    this.SalesOfficddl.SalesOfficID = '';
                    this.WarehouseSODetails.SalesOffice = '';
                    this.WarehouseSODetails.WHID = '';
                    this.WarehouseSODetails.IsActive = '';
                };
                WarehouseSalesOfficeController.prototype.EditWarehouseSO = function (data) {
                    var _this = this;
                    this.Service.EditFind(data).then((function (response) {
                        _this.WarehouseSODetails = _this.Service.GetWarehouseSalesOfficeEdit(response.data.Result);
                        _this.SalesOfficddl.SalesOfficID = _this.WarehouseSODetails.SalesOffice;
                        console.log(_this.WarehouseSODetails);
                        if (_this.WarehouseSODetails.IsActive == "Active") {
                            _this.WarehouseSODetails.IsActive = "1";
                        }
                        else {
                            _this.WarehouseSODetails.IsActive = "0";
                        }
                        _this.District(_this.WarehouseSODetails.State);
                        $("myModalAddNew").show();
                    }));
                };
                WarehouseSalesOfficeController.$inject = ["$cookieStore", "WarehouseSalesOfficeService", "$location", "CountryService", "StateService", "DistrictService"];
                return WarehouseSalesOfficeController;
            }());
            var WarehouseSalesOfficeComponentController = /** @class */ (function () {
                function WarehouseSalesOfficeComponentController() {
                    this.controller = WarehouseSalesOfficeController;
                    this.templateUrl = "/Scripts/App/CostumerConfiguration/Warehouse_SalesOffice/Template/_WarehouseSalesOffice.html";
                }
                WarehouseSalesOfficeComponentController.Name = "warehousesalesoffice";
                return WarehouseSalesOfficeComponentController;
            }());
            app.AddComponent(WarehouseSalesOfficeComponentController.Name, new WarehouseSalesOfficeComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WarehouseSalesOfficeComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var WarehouseSalesOfficeController = /** @class */ (function (_super) {
            __extends(WarehouseSalesOfficeController, _super);
            function WarehouseSalesOfficeController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return WarehouseSalesOfficeController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.WarehouseSalesOfficeController = WarehouseSalesOfficeController;
        app.AddController("WarehouseSalesOfficeController", WarehouseSalesOfficeController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WarehouseSalesOfficeController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var WarehouseSalesOfficeService = /** @class */ (function (_super) {
            __extends(WarehouseSalesOfficeService, _super);
            function WarehouseSalesOfficeService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            WarehouseSalesOfficeService.prototype.Find = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/WarehouseSalesOfficelist",
                    Config: config
                });
            };
            WarehouseSalesOfficeService.prototype.GetWarehouseSalesOfficeList = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        ID: item.ID,
                        Country: item.Country,
                        State: item.State,
                        District: item.District,
                        IsActive: item.IsActive,
                        WHID: item.WHID,
                        DealerID: item.DealerID,
                        SalesOffice: item.SalesOffice
                    });
                }
                return list;
            };
            WarehouseSalesOfficeService.prototype.InsertWarehouseSalesOffice = function (data) {
                var url = this.apiUrl + "/WarehouseSalesOfficelist";
                // console.log(url);
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            WarehouseSalesOfficeService.prototype.EditFind = function (data) {
                var config = {
                    params: {
                        ID: data,
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/WarehouseSalesOfficelist",
                    Config: config
                });
            };
            WarehouseSalesOfficeService.prototype.GetWarehouseSalesOfficeEdit = function (data) {
                debugger;
                var obj = new model.WarehouseSOModel();
                obj.ID = data.ID;
                obj.Country = data.Country;
                obj.State = data.State;
                obj.District = data.District;
                obj.IsActive = data.IsActive;
                obj.WHID = data.WHID;
                obj.DealerID = data.DealerID;
                obj.SalesOffice = data.SalesOffice;
                return obj;
            };
            WarehouseSalesOfficeService.prototype.FindWHName = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/Warehouseddlctrl",
                    Config: config
                });
            };
            WarehouseSalesOfficeService.prototype.GetWHName = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        WHID: item.WHID,
                        WHName: item.WHName
                    });
                }
                return list;
            };
            WarehouseSalesOfficeService.prototype.FindSalesOffic = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SalesOfficectrl",
                    Config: config
                });
            };
            WarehouseSalesOfficeService.prototype.GetSalesOffic = function (data) {
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        SalesOffic: item.SalesOffice,
                        SalesOfficID: item.SalesOfficeID
                    });
                }
                return list;
            };
            WarehouseSalesOfficeService.$inject = ["$http", "$q", "$cookieStore"];
            return WarehouseSalesOfficeService;
        }(GCPL.Service.BaseService));
        Service.WarehouseSalesOfficeService = WarehouseSalesOfficeService;
        app.AddService("WarehouseSalesOfficeService", WarehouseSalesOfficeService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WarehouseSalesOfficeService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var CustomerLedgerModel = /** @class */ (function () {
            function CustomerLedgerModel() {
            }
            return CustomerLedgerModel;
        }());
        Model.CustomerLedgerModel = CustomerLedgerModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerLedgerModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var CustomerLedgerController = /** @class */ (function () {
                function CustomerLedgerController(_Service, _cookieStore, $location, _window, _Autofillservice) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this._window = _window;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.list = null;
                    this.CustomerName = null;
                    this.Fromdate = null;
                    this.Todate = null;
                    this.CustomerId = null;
                    this.Cookie = null;
                    this.Service = _Service;
                    this.CustomerAutofill = _Autofillservice;
                    this.Cookie = _cookieStore;
                }
                CustomerLedgerController.prototype.$onInit = function () {
                    this.Init();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                CustomerLedgerController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                CustomerLedgerController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                CustomerLedgerController.prototype.Init = function () {
                    var that = this;
                    $("#txtCustomer").autocomplete({
                        source: function (request, res) {
                            that.CustomerAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.CustomerId = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    this.Search();
                };
                CustomerLedgerController.prototype.Search = function () {
                    this.Fromdate = document.getElementById("txtFromDate").value;
                    this.Todate = document.getElementById("txtToDate").value;
                    if (this.CustomerId == null) {
                        this.CustomerId = '';
                    }
                    if (this.Fromdate == null && this.Fromdate == null) {
                        this.Fromdate = '';
                        this.Todate = '';
                    }
                    this.FillGrid(this.numRecords);
                    //this.Service.Find(this.CustomerId, this.Fromdate, this.Todate).then((response => {
                    //    this.list = this.Service.List(response.data.Result);
                    //}));
                };
                CustomerLedgerController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.Service.Find(this.CustomerId, this.Fromdate, this.Todate).then((function (response) {
                        _this.list = _this.Service.List(response.data.Result);
                        _this.list.forEach(function (value, key) {
                            that.incre = key + 1;
                        });
                        debugger;
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.list.slice(0, that.numRecords);
                    }));
                };
                CustomerLedgerController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                CustomerLedgerController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.list.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                CustomerLedgerController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.list.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                CustomerLedgerController.prototype.Clear = function () {
                    //this.CustomerName = null;
                    this.Fromdate = null;
                    this.Todate = null;
                    this.CustomerId = null;
                    document.getElementById("txtFromDate").value = null;
                    document.getElementById("txtToDate").value = null;
                    document.getElementById("txtCustomer").value = null;
                    this.Init();
                    this.Search();
                };
                CustomerLedgerController.prototype.downloadCSV = function (csv, filename) {
                    var csvFile;
                    var downloadLink;
                    // CSV file
                    csvFile = new Blob([csv], { type: "text/csv" });
                    // Download link
                    downloadLink = document.createElement("a");
                    // File name
                    downloadLink.download = filename;
                    // Create a link to the file
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    // Hide download link
                    downloadLink.style.display = "none";
                    // Add the link to DOM
                    document.body.appendChild(downloadLink);
                    // Click download link
                    downloadLink.click();
                };
                CustomerLedgerController.prototype.exportTableToCSV = function () {
                    var csv = [];
                    var today = new Date();
                    var rows = document.querySelectorAll("table tr");
                    for (var i = 0; i < rows.length; i++) {
                        var row = [], cols = rows[i].querySelectorAll("td span, th");
                        for (var j = 0; j < cols.length; j++)
                            row.push(cols[j].innerHTML);
                        csv.push(row.join(","));
                    }
                    // Download CSV file
                    this.downloadCSV(csv.join("\n"), 'CustomerLedger_' + today + '_Download.csv');
                };
                CustomerLedgerController.$inject = ["CustomerLedgerService", "$cookieStore", "$location", "$window", "CustomeraAtofillService"];
                return CustomerLedgerController;
            }());
            var CustomerLedgerComponentController = /** @class */ (function () {
                function CustomerLedgerComponentController() {
                    this.controller = CustomerLedgerController;
                    this.templateUrl = "/Scripts/App/Reports/CustomerLedgerReport/Template/_CustomerLedgetReport.html";
                }
                CustomerLedgerComponentController.Name = "customerLedgerReport";
                return CustomerLedgerComponentController;
            }());
            app.AddComponent(CustomerLedgerComponentController.Name, new CustomerLedgerComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerLedgerComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var CustomerLedgerController = /** @class */ (function (_super) {
            __extends(CustomerLedgerController, _super);
            function CustomerLedgerController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CustomerLedgerController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.CustomerLedgerController = CustomerLedgerController;
        app.AddController("CustomerLedgerController", CustomerLedgerController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerLedgerController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var CustomerLedgerService = /** @class */ (function (_super) {
            __extends(CustomerLedgerService, _super);
            function CustomerLedgerService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                //  this.apiUrl = `${this.url}/${"GetAccountAssignmentList"}`;
                _this.Cookie = _cookieStore;
                return _this;
            }
            CustomerLedgerService.prototype.Find = function (CustomerName, Fromdate, Todate) {
                var config = {
                    params: {
                        dealerid: this.Cookie.get('UserInfo')['DealerID'],
                        Customerid: CustomerName,
                        fromdate: Fromdate,
                        todate: Todate
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "GetCustomerLedger", Config: config
                });
            };
            CustomerLedgerService.prototype.List = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        customername: item.customername,
                        salesorderno: item.salesorderno,
                        soprice: item.soprice,
                        BillNumber: item.BillNumber,
                        TotalInvoiceAmount: item.TotalInvoiceAmount,
                        settlementamount: item.settlementamount,
                        balanceamount: item.balanceamount,
                        duedate: item.duedate,
                        age: item.age,
                        SoDate: item.SoDate,
                        BillDate: item.BillDate
                    });
                }
                return list;
            };
            CustomerLedgerService.$inject = ["$http", "$q", "$cookieStore"];
            return CustomerLedgerService;
        }(GCPL.Service.BaseService));
        Service.CustomerLedgerService = CustomerLedgerService;
        //inject service
        app.AddService("CustomerLedgerService", CustomerLedgerService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerLedgerService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var CustomerLedgerDetailModel = /** @class */ (function () {
            function CustomerLedgerDetailModel() {
            }
            return CustomerLedgerDetailModel;
        }());
        Model.CustomerLedgerDetailModel = CustomerLedgerDetailModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerLedgerDetailModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var CustomerLedgerController = /** @class */ (function () {
                function CustomerLedgerController(_Service, _cookieStore, $location, _window, _Autofillservice, _ItemAutoservice) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this._window = _window;
                    this.list = null;
                    this.CustomerName = null;
                    this.Fromdate = null;
                    this.Todate = null;
                    this.ItemID = null;
                    this.Cookie = null;
                    this.Service = _Service;
                    this.CustomerAutofill = _Autofillservice;
                    this.Cookie = _cookieStore;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                }
                CustomerLedgerController.prototype.$onInit = function () {
                    this.Init();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                CustomerLedgerController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                CustomerLedgerController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                CustomerLedgerController.prototype.Init = function () {
                    var that = this;
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            that.ItemDescriptionAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.ItemID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    $("#txtCustomer").autocomplete({
                        source: function (request, res) {
                            that.CustomerAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.CustomerName = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    this.Search();
                };
                CustomerLedgerController.prototype.AutoSearch = function () {
                };
                CustomerLedgerController.prototype.Search = function () {
                    var _this = this;
                    this.Fromdate = document.getElementById("txtFromDate").value;
                    this.Todate = document.getElementById("txtToDate").value;
                    if (this.CustomerName == null) {
                        this.CustomerName = '';
                    }
                    if (this.ItemID == null) {
                        this.ItemID = '';
                    }
                    if (this.Fromdate == null && this.Fromdate == null) {
                        this.Fromdate = '';
                        this.Todate = '';
                    }
                    this.Service.Find(this.CustomerName, this.Fromdate, this.Todate, this.ItemID).then((function (response) {
                        _this.list = _this.Service.List(response.data.Result);
                    }));
                };
                CustomerLedgerController.prototype.Clear = function () {
                    this.CustomerName = '';
                    this.ItemID = '';
                    this.Fromdate = '';
                    this.Todate = '';
                    document.getElementById("txtFromDate").value = null;
                    document.getElementById("txtToDate").value = null;
                    this.Init();
                    this.Search();
                };
                CustomerLedgerController.$inject = ["CustomerLedgerDetailService", "$cookieStore", "$location", "$window", "CustomeraAtofillService", "itemDescriptionService"];
                return CustomerLedgerController;
            }());
            var CustomerLedgerComponentController = /** @class */ (function () {
                function CustomerLedgerComponentController() {
                    this.controller = CustomerLedgerController;
                    this.templateUrl = "/Scripts/App/Reports/CustomerLedgerDetailReport/Template/_CustomerLedgerDetail.html";
                }
                CustomerLedgerComponentController.Name = "customerLedgerDetailReport";
                return CustomerLedgerComponentController;
            }());
            app.AddComponent(CustomerLedgerComponentController.Name, new CustomerLedgerComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerLedgerDetailComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var CustomerLedgerDetailController = /** @class */ (function (_super) {
            __extends(CustomerLedgerDetailController, _super);
            function CustomerLedgerDetailController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CustomerLedgerDetailController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.CustomerLedgerDetailController = CustomerLedgerDetailController;
        app.AddController("CustomerLedgerDetailController", CustomerLedgerDetailController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerLedgerDetailController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var CustomerLedgerDetailService = /** @class */ (function (_super) {
            __extends(CustomerLedgerDetailService, _super);
            function CustomerLedgerDetailService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                //  this.apiUrl = `${this.url}/${"GetAccountAssignmentList"}`;
                _this.Cookie = _cookieStore;
                return _this;
            }
            CustomerLedgerDetailService.prototype.Find = function (CustomerName, Fromdate, Todate, ItemId) {
                var config = {
                    params: {
                        dealerid: this.Cookie.get('UserInfo')['DealerID'],
                        Customerid: CustomerName,
                        fromdate: Fromdate,
                        todate: Todate,
                        ItemId: ItemId
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "GetCustomerLedgerDetail", Config: config
                });
            };
            CustomerLedgerDetailService.prototype.List = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        customername: item.customername,
                        salesorderno: item.salesorderno,
                        soprice: item.soprice,
                        BillNumber: item.BillNumber,
                        TotalInvoiceAmount: item.TotalInvoiceAmount,
                        settlementamount: item.settlementamount,
                        balanceamount: item.balanceamount,
                        duedate: item.duedate,
                        age: item.age,
                        ItemDesription: item.ItemDesription,
                        SoDate: item.SoDate,
                        BillDate: item.BillDate
                    });
                }
                return list;
            };
            CustomerLedgerDetailService.$inject = ["$http", "$q", "$cookieStore"];
            return CustomerLedgerDetailService;
        }(GCPL.Service.BaseService));
        Service.CustomerLedgerDetailService = CustomerLedgerDetailService;
        //inject service
        app.AddService("CustomerLedgerDetailService", CustomerLedgerDetailService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerLedgerDtailService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var InsertPaymentVoucher = /** @class */ (function () {
            function InsertPaymentVoucher() {
            }
            return InsertPaymentVoucher;
        }());
        Model.InsertPaymentVoucher = InsertPaymentVoucher;
        var PurposeddlModel = /** @class */ (function () {
            function PurposeddlModel() {
            }
            return PurposeddlModel;
        }());
        Model.PurposeddlModel = PurposeddlModel;
        var PaymentddlModel = /** @class */ (function () {
            function PaymentddlModel() {
            }
            return PaymentddlModel;
        }());
        Model.PaymentddlModel = PaymentddlModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=NonPOPaymentsModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var InsertPaymentVoucher1 = GCPL.Model.InsertPaymentVoucher;
            var NonPOPaymentsController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function NonPOPaymentsController(_cookieStore, _Service, _window) {
                    this._cookieStore = _cookieStore;
                    this._window = _window;
                    this.alert = null;
                    this.Purposeddl = null;
                    this.PaymentModeddl = null;
                    this.UserName = null;
                    this.UserID = null;
                    this.DealerID = null;
                    this.InsertPaymentVoucher = null;
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.Service = _Service;
                    this.InsertPaymentVoucher = new InsertPaymentVoucher1();
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                NonPOPaymentsController.prototype.$onInit = function () {
                    this.Init();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd/mm/yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    //$("#txtToDate").datepicker({
                    //    dateFormat: 'dd M yy', changeMonth: true,
                    //    changeYear: true,
                    //    onSelect: this.selectToDate
                    //});
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                NonPOPaymentsController.prototype.selectFromDate = function (e) {
                    document.getElementById("hfFromDate").value = e;
                };
                //selectToDate(e) {
                //    (<HTMLInputElement>document.getElementById("txtToDate")).value = e;
                //}
                //Page Load Define Values//
                NonPOPaymentsController.prototype.Init = function () {
                    var _this = this;
                    var n = new Date();
                    var y = n.getFullYear();
                    var m = n.getMonth() + 1;
                    var d = n.getDate();
                    $("#txtFromDate").val(d.toString() + "/" + m.toString() + "/" + y.toString());
                    this.Purposeddl = this.Service.FindPurpose().then((function (response) {
                        _this.Purposeddl = _this.Service.GetPurpose(response.data.Result);
                    }));
                    this.PaymentModeddl = this.Service.FindPaymentMode().then((function (response) {
                        _this.PaymentModeddl = _this.Service.GetPaymentMode(response.data.Result);
                    }));
                    this.UserName = this.Service.FindUserName(this.UserID).then((function (response) {
                        _this.UserName = _this.Service.GetUserName(response.data.Result);
                        _this.InsertPaymentVoucher.LoginName = _this.UserName.Name;
                    }));
                };
                NonPOPaymentsController.prototype.NetPayment = function () {
                    debugger;
                    if (this.InsertPaymentVoucher.TDSAmount == undefined || this.InsertPaymentVoucher.TDSAmount == null) {
                        this.InsertPaymentVoucher.NetPayment = this.InsertPaymentVoucher.TotalAmount;
                    }
                    else {
                        this.InsertPaymentVoucher.NetPayment = this.InsertPaymentVoucher.TotalAmount - this.InsertPaymentVoucher.TDSAmount;
                    }
                };
                NonPOPaymentsController.prototype.Submit = function () {
                    var _this = this;
                    this.InsertPaymentVoucher.UserID = this.UserID;
                    this.InsertPaymentVoucher.DealerID = this.DealerID;
                    this.InsertPaymentVoucher.Date = document.getElementById("txtFromDate").value;
                    //this.InsertPaymentVoucher.ToDate = (<HTMLInputElement>document.getElementById("txtToDate")).value;
                    this.Service.PostInsertNonPOPayments(this.InsertPaymentVoucher).then((function (response) {
                        if (response.data.Result != null) {
                            if (response.data.Result == 0) {
                                _this.alert = 'Your total Credit and Debit amount does not match';
                                $("#errorclose").show();
                                $("#close").hide();
                            }
                            else {
                                _this.alert = 'Your Payment Voucher is saved sucessfully with number ' + response.data.Result;
                                $("#errorclose").hide();
                                $("#close").show();
                                _this.InsertPaymentVoucher = null;
                                _this.UserName = _this.Service.FindUserName(_this.UserID).then((function (response) {
                                    _this.UserName = _this.Service.GetUserName(response.data.Result);
                                    _this.InsertPaymentVoucher.LoginName = _this.UserName.Name;
                                }));
                                //this._window.location.href = "/#!/PaymentVoucherList";
                            }
                        }
                        else {
                            _this.alert = 'Oops Some Error Occured';
                            $("#errorclose").show();
                            $("#close").hide();
                            //this.IsDisplayModalPopupError = true;
                        }
                    }));
                };
                NonPOPaymentsController.prototype.Close = function () {
                    //this.insert = null;
                    //location.href = "#!/Segment2";
                    this._window.location.href = "/#!/PaymentVoucherList";
                };
                NonPOPaymentsController.$inject = ["$cookieStore", "NonPOPaymentsService", "$window"];
                return NonPOPaymentsController;
            }());
            var NonPOPaymentsComponentController = /** @class */ (function () {
                function NonPOPaymentsComponentController() {
                    this.controller = NonPOPaymentsController;
                    this.templateUrl = "/Scripts/App/Account/NonPOPayments/Template/_NonPOPayments.html";
                }
                NonPOPaymentsComponentController.Name = "nonpopayments";
                return NonPOPaymentsComponentController;
            }());
            app.AddComponent(NonPOPaymentsComponentController.Name, new NonPOPaymentsComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=NonPOPaymentsComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var NonPOPaymentsController = /** @class */ (function (_super) {
            __extends(NonPOPaymentsController, _super);
            function NonPOPaymentsController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return NonPOPaymentsController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.NonPOPaymentsController = NonPOPaymentsController;
        app.AddController("NonPOPaymentsController", NonPOPaymentsController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=NonPOPaymentsController.js.map
//PostInsertCOA
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var NonPOPaymentsService = /** @class */ (function (_super) {
            __extends(NonPOPaymentsService, _super);
            function NonPOPaymentsService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            NonPOPaymentsService.prototype.FindPurpose = function () {
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/PaymentVoucher_Purposeddl"
                });
            };
            NonPOPaymentsService.prototype.GetPurpose = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        ID: item.ID,
                        Purpose: item.Purpose,
                        DebitAccount: item.DebitAccount
                    });
                }
                return list;
            };
            NonPOPaymentsService.prototype.FindPaymentMode = function () {
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/PaymentVoucher_Pmodeddl"
                });
            };
            NonPOPaymentsService.prototype.GetPaymentMode = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        ID: item.ID,
                        PaymentMode: item.PaymentMode,
                        CreditAccount: item.CreditAccount
                    });
                }
                return list;
            };
            NonPOPaymentsService.prototype.FindUserName = function (data) {
                var config = {
                    params: {
                        UserID: data,
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/GetUserName",
                    Config: config
                });
            };
            NonPOPaymentsService.prototype.GetUserName = function (data) {
                debugger;
                var obj = new model.ISalesEmployeeModel();
                obj.UserID = data.UserID;
                obj.Name = data.Name;
                return obj;
            };
            NonPOPaymentsService.prototype.PostInsertNonPOPayments = function (data) {
                var url = this.apiUrl + "/PostInsertPaymentVouchers";
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            NonPOPaymentsService.$inject = ["$http", "$q", "$cookieStore"];
            return NonPOPaymentsService;
        }(GCPL.Service.BaseService));
        Service.NonPOPaymentsService = NonPOPaymentsService;
        app.AddService("NonPOPaymentsService", NonPOPaymentsService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=NonPOPaymentsService.js.map
//# sourceMappingURL=NonPOPaymentsListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var NonPOPaymentsListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function NonPOPaymentsListController(_Service, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.PVList = null;
                    this.DealerID = null;
                    this.Cookie = null;
                    this.Service = _Service;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                NonPOPaymentsListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                NonPOPaymentsListController.prototype.Init = function () {
                    var _this = this;
                    this.PVList = this.Service.FindPVList(this.DealerID).then((function (response) {
                        _this.PVList = _this.Service.GetPVList(response.data.Result);
                        console.log(_this.PVList);
                    }));
                };
                NonPOPaymentsListController.$inject = ["NonPOPaymentsListService", "$cookieStore"];
                return NonPOPaymentsListController;
            }());
            var NonPOPaymentsListComponentController = /** @class */ (function () {
                function NonPOPaymentsListComponentController() {
                    this.controller = NonPOPaymentsListController;
                    this.templateUrl = "/Scripts/App/Account/NonPOPaymentsList/Template/_NonPOPaymentsList.html";
                }
                NonPOPaymentsListComponentController.Name = "nonpopaymentlist";
                return NonPOPaymentsListComponentController;
            }());
            app.AddComponent(NonPOPaymentsListComponentController.Name, new NonPOPaymentsListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=NonPOPaymentsListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var NonPOPaymentsListController = /** @class */ (function (_super) {
            __extends(NonPOPaymentsListController, _super);
            function NonPOPaymentsListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return NonPOPaymentsListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.NonPOPaymentsListController = NonPOPaymentsListController;
        app.AddController("NonPOPaymentsListController", NonPOPaymentsListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=NonPOPaymentsListController.js.map
//PostInsertJournalEntry
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var NonPOPaymentsListService = /** @class */ (function (_super) {
            __extends(NonPOPaymentsListService, _super);
            function NonPOPaymentsListService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url; ///${"LeadAssessmentSubmit"}`;
                return _this;
            }
            NonPOPaymentsListService.prototype.FindPVList = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/PaymentVoucher_Purposeddl",
                    Config: config
                });
            };
            NonPOPaymentsListService.prototype.GetPVList = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        Id: item.ID,
                        Date: item.Date,
                        LoginName: item.LoginName,
                        Purpose: item.Purpose,
                        PaymentMode: item.PaymentMode,
                        Amount: item.Amount,
                        TDSDeduction: item.TDSDeduction,
                        AccountDocumentNo: item.AccountDocumentNo,
                        NetPayment: item.NetPayment,
                        Name: item.Name,
                        Comment: item.Comment
                    });
                }
                return list;
            };
            NonPOPaymentsListService.$inject = ["$http", "$q"];
            return NonPOPaymentsListService;
        }(GCPL.Service.BaseService));
        Service.NonPOPaymentsListService = NonPOPaymentsListService;
        app.AddService("NonPOPaymentsListService", NonPOPaymentsListService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=NonPOPaymentsListService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var ViewPVModel = /** @class */ (function () {
            function ViewPVModel() {
            }
            return ViewPVModel;
        }());
        Model.ViewPVModel = ViewPVModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=NonPOPaymentsViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var NonPOPaymentsViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function NonPOPaymentsViewController(_cookieStore, _Service, $location, _SService) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.GetPVViewHeader = null;
                    this.Purposeddl = null;
                    this.PaymentModeddl = null;
                    this.Id = null;
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.Service = _Service;
                    this.SService = _SService;
                    this.Id = $location.search().Id;
                }
                NonPOPaymentsViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                NonPOPaymentsViewController.prototype.Init = function () {
                    var _this = this;
                    this.GetPVViewHeader = this.Service.Find(this.Id).then((function (response) {
                        _this.GetPVViewHeader = _this.Service.GetData(response.data.Result);
                        _this.Purposeddl = _this.SService.FindPurpose().then((function (response) {
                            _this.Purposeddl = _this.SService.GetPurpose(response.data.Result);
                        }));
                        _this.PaymentModeddl = _this.SService.FindPaymentMode().then((function (response) {
                            _this.PaymentModeddl = _this.SService.GetPaymentMode(response.data.Result);
                        }));
                    }));
                };
                NonPOPaymentsViewController.$inject = ["$cookieStore", "NonPOPaymentsViewService", "$location", "NonPOPaymentsService"];
                return NonPOPaymentsViewController;
            }());
            var NonPOPaymentsViewComponentController = /** @class */ (function () {
                function NonPOPaymentsViewComponentController() {
                    this.controller = NonPOPaymentsViewController;
                    this.templateUrl = "/Scripts/App/Account/NonPOPaymentsView/Template/_NonPOPaymentsView.html";
                }
                NonPOPaymentsViewComponentController.Name = "nonpopaymentsview";
                return NonPOPaymentsViewComponentController;
            }());
            app.AddComponent(NonPOPaymentsViewComponentController.Name, new NonPOPaymentsViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=NonPOPaymentsViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var NonPOPaymentsViewController = /** @class */ (function (_super) {
            __extends(NonPOPaymentsViewController, _super);
            function NonPOPaymentsViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return NonPOPaymentsViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.NonPOPaymentsViewController = NonPOPaymentsViewController;
        app.AddController("NonPOPaymentsViewController", NonPOPaymentsViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=NonPOPaymentsViewController.js.map
//PostInsertJournalEntry
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var NonPOPaymentsViewService = /** @class */ (function (_super) {
            __extends(NonPOPaymentsViewService, _super);
            function NonPOPaymentsViewService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url; ///${"LeadAssessmentSubmit"}`;
                return _this;
            }
            NonPOPaymentsViewService.prototype.Find = function (data) {
                var config = {
                    params: {
                        Id: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/PaymentVoucher_Pmodeddl",
                    Config: config
                });
            };
            NonPOPaymentsViewService.prototype.GetData = function (data) {
                var obj = new model.ViewPVModel();
                obj.Id = data.Id;
                obj.Date = data.Date;
                obj.LoginName = data.LoginName;
                obj.Purpose = data.Purpose;
                obj.PaymentMode = data.PaymentMode;
                obj.Amount = data.Amount;
                obj.TDSDeduction = data.TDSDeduction;
                obj.NetPayment = data.NetPayment;
                obj.Name = data.Name;
                obj.Comment = data.Comment;
                obj.AccountDocumentNo = data.AccountDocumentNo;
                return obj;
            };
            NonPOPaymentsViewService.$inject = ["$http", "$q"];
            return NonPOPaymentsViewService;
        }(GCPL.Service.BaseService));
        Service.NonPOPaymentsViewService = NonPOPaymentsViewService;
        app.AddService("NonPOPaymentsViewService", NonPOPaymentsViewService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=NonPOPaymentsViewService.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var PurchaseOrderToSoController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function PurchaseOrderToSoController(_PoListService, _window, _Vendorservice, _POItemList, _cookieStore) {
                    this._window = _window;
                    this._cookieStore = _cookieStore;
                    this.PoNumber = null;
                    this.Status = null;
                    this.Vendorid = null;
                    this.POlist = null;
                    this.List = null;
                    this.TotalValueRs = 0;
                    this.TotalQty = 0;
                    this.VendorName = null;
                    this.FromDate = null;
                    this.Todate = null;
                    this.POStatus = null;
                    this.DealerID = null;
                    this.change = null;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.PoListService = _PoListService;
                    this.POItemListService = _POItemList;
                    this.VendornameAutofill = _Vendorservice;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    console.log("this.DealerID");
                    console.log(this.DealerID);
                }
                PurchaseOrderToSoController.prototype.$onInit = function () {
                    var that = this;
                    this.Init();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                PurchaseOrderToSoController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                PurchaseOrderToSoController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                PurchaseOrderToSoController.prototype.Init = function () {
                    var _this = this;
                    //  this.Search();
                    this.POStatus = this.POItemListService.FindStatus().then((function (response) {
                        _this.POStatus = _this.POItemListService.GetStatus(response.data.Result);
                    }));
                };
                PurchaseOrderToSoController.prototype.AutoFillSupplier = function () {
                    var that = this;
                    $("#txtVendorName").autocomplete({
                        source: function (request, res) {
                            that.VendornameAutofill.FilterAutoComplete(request).then((function (response) {
                                console.log(response);
                                var data = that.VendornameAutofill.GetVendorName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.VendorName,
                                        value: item.VendorName,
                                        id: item.VendorID,
                                        Address1: item.Address1,
                                        PANReferenceNo: item.PANReferenceNo,
                                        GSTIN: item.GSTIN,
                                        VendorStateID: item.VendorStateID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedItemID = ui.item.id;
                            that.VendorName = ui.item.value;
                            that.Vendorid = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                };
                PurchaseOrderToSoController.prototype.Search = function () {
                    this.FromDate = document.getElementById("txtFromDate").value;
                    this.Todate = document.getElementById("txtToDate").value;
                    if (this.PoNumber == null) {
                        this.PoNumber = '';
                    }
                    if (this.Vendorid == null) {
                        this.Vendorid = '';
                    }
                    if (this.Status == null) {
                        this.Status = '';
                    }
                    if (this.FromDate == null && this.Todate == null) {
                        this.FromDate = '';
                        this.Todate = '';
                    }
                    //this.PoListService.Find(this.PoNumber, this.Status, this.Vendorid, this.FromDate, this.Todate).then((response => {
                    //    this.POlist = this.PoListService.PurchaseOrderList(response.data.Result);
                    //    this.TotalValueRs = 0;
                    //    this.TotalQty = 0;
                    //    for (var i = 0; i < this.POlist.length; i++) {
                    //        this.TotalValueRs = this.TotalValueRs + this.POlist[i].TotalPrice;
                    //        this.TotalQty = this.TotalQty + this.POlist[i].TotalQuantity;
                    //        if (this.POlist[i].POStatusID == "Created") {
                    //            console.log(this.POlist[i].POStatusID);
                    //            this.POlist[i].ChangeText = "Change";
                    //        }
                    //        else {
                    //            this.POlist[i].ChangeText = "";
                    //        }
                    //    }
                    //}));
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                PurchaseOrderToSoController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.PoListService.FindPoToSo(this.PoNumber, this.Status, this.Vendorid, this.FromDate, this.Todate).then((function (response) {
                        _this.POlist = _this.PoListService.PurchaseOrderList(response.data.Result);
                        _this.TotalValueRs = 0;
                        _this.TotalQty = 0;
                        for (var i = 0; i < _this.POlist.length; i++) {
                            _this.TotalValueRs = _this.TotalValueRs + _this.POlist[i].TotalPrice;
                            _this.TotalQty = _this.TotalQty + _this.POlist[i].TotalQuantity;
                            if (_this.POlist[i].POStatusID == "Created") {
                                console.log(_this.POlist[i].POStatusID);
                                _this.POlist[i].ChangeText = "Change";
                            }
                            else {
                                _this.POlist[i].ChangeText = "";
                            }
                        }
                        $("#lblTotalValue").text(_this.TotalValueRs.toFixed(2));
                        _this.POlist.forEach(function (value, key) {
                            that.incre = key + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.POlist.slice(0, that.numRecords);
                    }));
                };
                PurchaseOrderToSoController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                PurchaseOrderToSoController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.POlist.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                PurchaseOrderToSoController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.POlist.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                PurchaseOrderToSoController.prototype.clear = function () {
                    this.PoNumber = null;
                    this.Status = null;
                    this.Vendorid = null;
                    this.POlist = null;
                    this.FromDate = null;
                    this.Todate = null;
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    this.Init();
                };
                PurchaseOrderToSoController.prototype.View = function (data) {
                    this._window.location.href = "#!/PurchaseOrder?id=" + data + "&Type=View";
                };
                PurchaseOrderToSoController.prototype.Change = function (data) {
                    this._window.location.href = "#!/PurchaseOrder?id=" + data + "&Type=Change";
                };
                PurchaseOrderToSoController.prototype.CopyPo = function (data) {
                    this._window.location.href = "#!/CreateSalesOrder?ID=" + data + "&Type=CopyPo";
                };
                PurchaseOrderToSoController.$inject = ["PurchaseOrderListService", "$window", "VendorMasterAutofillService", "POItemListComponentService", "$cookieStore"];
                return PurchaseOrderToSoController;
            }());
            var PurchaseOrderToSoComponentController = /** @class */ (function () {
                function PurchaseOrderToSoComponentController() {
                    this.controller = PurchaseOrderToSoController;
                    this.templateUrl = "/Scripts/App/Purchase/PoListToCreateSo/Template/_polisttocreateso.html";
                }
                PurchaseOrderToSoComponentController.Name = "potocreatesocomponent";
                return PurchaseOrderToSoComponentController;
            }());
            app.AddComponent(PurchaseOrderToSoComponentController.Name, new PurchaseOrderToSoComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PoListToCreateSoComponent.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var CRList = /** @class */ (function () {
            function CRList() {
            }
            return CRList;
        }());
        Model.CRList = CRList;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerReturnListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var CustomerReturnListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function CustomerReturnListController(_Service, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.CRList = null;
                    this.DealerID = null;
                    this.Cookie = null;
                    this.Service = _Service;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                CustomerReturnListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                CustomerReturnListController.prototype.Init = function () {
                    var _this = this;
                    this.CRList = this.Service.FindCRList(this.DealerID).then((function (response) {
                        _this.CRList = _this.Service.GetCRList(response.data.Result);
                        console.log(_this.CRList);
                    }));
                };
                CustomerReturnListController.$inject = ["CustomerReturnListService", "$cookieStore"];
                return CustomerReturnListController;
            }());
            var CustomerReturnListComponentController = /** @class */ (function () {
                function CustomerReturnListComponentController() {
                    this.controller = CustomerReturnListController;
                    this.templateUrl = "/Scripts/App/Sales/CustomerReturnList/Template/_CustomerReturnList.html";
                }
                CustomerReturnListComponentController.Name = "customerreturnlist";
                return CustomerReturnListComponentController;
            }());
            app.AddComponent(CustomerReturnListComponentController.Name, new CustomerReturnListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=CustomerReturnListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var CustomerReturnListController = /** @class */ (function (_super) {
            __extends(CustomerReturnListController, _super);
            function CustomerReturnListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CustomerReturnListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.CustomerReturnListController = CustomerReturnListController;
        app.AddController("CustomerReturnListController", CustomerReturnListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerReturnListController.js.map
//PostInsertJournalEntry
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var CustomerReturnListService = /** @class */ (function (_super) {
            __extends(CustomerReturnListService, _super);
            function CustomerReturnListService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url; ///${"LeadAssessmentSubmit"}`;
                return _this;
            }
            CustomerReturnListService.prototype.FindCRList = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/CustomerReturnList",
                    Config: config
                });
            };
            CustomerReturnListService.prototype.GetCRList = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        CustomerReturnNo: item.CustomerReturnNo,
                        Description: item.Description,
                        Quantity: item.Quantity,
                        DeliverdQty: item.DeliverdQty,
                        PreReturnQty: item.PreReturnQty,
                        PreDamagedQty: item.PreDamagedQty,
                        UOMName: item.UOMName,
                        BillNumber: item.BillNumber,
                        ReturnQty: item.ReturnQty,
                        ReasonName: item.ReasonName,
                        WHName: item.WHName
                    });
                }
                return list;
            };
            CustomerReturnListService.$inject = ["$http", "$q"];
            return CustomerReturnListService;
        }(GCPL.Service.BaseService));
        Service.CustomerReturnListService = CustomerReturnListService;
        app.AddService("CustomerReturnListService", CustomerReturnListService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerReturnListService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var ViewPOAModel = /** @class */ (function () {
            function ViewPOAModel() {
            }
            return ViewPOAModel;
        }());
        Model.ViewPOAModel = ViewPOAModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseOrderAdvanceViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var PurchaseOrderAdvanceViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function PurchaseOrderAdvanceViewController(_cookieStore, _Service, $location, _SService) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.GetPOAView = null;
                    this.PONO = null;
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.Service = _Service;
                    this.SService = _SService;
                    this.PONO = $location.search().PONO;
                }
                PurchaseOrderAdvanceViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                PurchaseOrderAdvanceViewController.prototype.Init = function () {
                    var _this = this;
                    this.GetPOAView = this.Service.Find(this.PONO).then((function (response) {
                        _this.GetPOAView = _this.Service.GetData(response.data.Result);
                        console.log(_this.GetPOAView);
                    }));
                };
                PurchaseOrderAdvanceViewController.$inject = ["$cookieStore", "PurchaseOrderAdvanceViewService", "$location", "NonPOPaymentsService"];
                return PurchaseOrderAdvanceViewController;
            }());
            var PurchaseOrderAdvanceViewComponentController = /** @class */ (function () {
                function PurchaseOrderAdvanceViewComponentController() {
                    this.controller = PurchaseOrderAdvanceViewController;
                    this.templateUrl = "/Scripts/App/Purchase/PurchaseOrderAdvanceView/Template/_PurchaseOrderAdvanceView.html";
                }
                PurchaseOrderAdvanceViewComponentController.Name = "purchaseorderadvanceview";
                return PurchaseOrderAdvanceViewComponentController;
            }());
            app.AddComponent(PurchaseOrderAdvanceViewComponentController.Name, new PurchaseOrderAdvanceViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseOrderAdvanceViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var PurchaseOrderAdvanceViewController = /** @class */ (function (_super) {
            __extends(PurchaseOrderAdvanceViewController, _super);
            function PurchaseOrderAdvanceViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PurchaseOrderAdvanceViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.PurchaseOrderAdvanceViewController = PurchaseOrderAdvanceViewController;
        app.AddController("PurchaseOrderAdvanceViewController", PurchaseOrderAdvanceViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseOrderAdvanceViewController.js.map
//PostInsertJournalEntry
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var PurchaseOrderAdvanceViewService = /** @class */ (function (_super) {
            __extends(PurchaseOrderAdvanceViewService, _super);
            function PurchaseOrderAdvanceViewService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url; ///${"LeadAssessmentSubmit"}`;
                _this.Cookie = _cookieStore;
                return _this;
            }
            PurchaseOrderAdvanceViewService.prototype.Find = function (data) {
                var config = {
                    params: {
                        PONO: data,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/POAdvanceView",
                    Config: config
                });
            };
            PurchaseOrderAdvanceViewService.prototype.GetData = function (data) {
                var obj = new model.ViewPOAModel();
                obj.POID = data.POID;
                obj.PONO = data.PONO;
                obj.DealerID = data.DealerID;
                obj.DealerName = data.DealerName;
                obj.VendorID = data.VendorID;
                obj.VendorName = data.VendorName;
                obj.TotAmt = data.TotAmt;
                obj.AdvAmt = data.AdvAmt;
                obj.Status = data.Status;
                obj.POStatusID = data.POStatusID;
                return obj;
            };
            PurchaseOrderAdvanceViewService.$inject = ["$http", "$q", "$cookieStore"];
            return PurchaseOrderAdvanceViewService;
        }(GCPL.Service.BaseService));
        Service.PurchaseOrderAdvanceViewService = PurchaseOrderAdvanceViewService;
        app.AddService("PurchaseOrderAdvanceViewService", PurchaseOrderAdvanceViewService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseOrderAdvanceViewService.js.map
/// <reference path="../../../../typings/jqueryui/jqueryui.d.ts" />
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var DebitNoteListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function DebitNoteListController(_DebitNoteListService) {
                    this.DebitNoteList = null;
                    this.DebitNoteListService = _DebitNoteListService;
                    this.DebitNoteList = Array();
                }
                DebitNoteListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                DebitNoteListController.prototype.Init = function () {
                    var _this = this;
                    debugger;
                    this.DebitNoteListService.FindList().then((function (response) {
                        _this.DebitNoteList = _this.DebitNoteListService.GetDebitNoteList(response.data.Result);
                    }));
                };
                DebitNoteListController.prototype.View = function () {
                };
                DebitNoteListController.$inject = ["DebitNoteListService"];
                return DebitNoteListController;
            }());
            var DebitNoteListComponentController = /** @class */ (function () {
                function DebitNoteListComponentController() {
                    this.controller = DebitNoteListController;
                    this.templateUrl = "/Scripts/App/Account/DebitNoteList/Template/_DebitNoteList.html";
                }
                DebitNoteListComponentController.Name = "debitnotelistcomponentcontroller";
                return DebitNoteListComponentController;
            }());
            app.AddComponent(DebitNoteListComponentController.Name, new DebitNoteListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DebitNoteListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var DebitNoteListContoller = /** @class */ (function (_super) {
            __extends(DebitNoteListContoller, _super);
            function DebitNoteListContoller() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return DebitNoteListContoller;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.DebitNoteListContoller = DebitNoteListContoller;
        app.AddController("DebitNoteListContoller", DebitNoteListContoller);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DebitNoteListController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var CreditNoteListviewController = /** @class */ (function () {
                function CreditNoteListviewController(_CreditNoteListService, _IUserNameService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.CreditNoteList = null;
                    this.Cookie = null;
                    this.CreditNoteListService = _CreditNoteListService;
                    this.Cookie = _cookieStore;
                    this.CreditNoteList = Array();
                }
                CreditNoteListviewController.prototype.$onInit = function () {
                    this.Init();
                };
                CreditNoteListviewController.prototype.Init = function () {
                    this.Search();
                };
                CreditNoteListviewController.prototype.Search = function () {
                    var _this = this;
                    this.CreditNoteListService.FindList().then((function (response) {
                        _this.CreditNoteList = _this.CreditNoteListService.GetCreditNoteListView(response.data.Result);
                    }));
                };
                CreditNoteListviewController.$inject = ["CreditNoteListService", "$cookieStore"];
                return CreditNoteListviewController;
            }());
            var CreditNoteListViewComponentController = /** @class */ (function () {
                function CreditNoteListViewComponentController() {
                    this.controller = CreditNoteListviewController;
                    this.templateUrl = "/Scripts/App/Account/CreditNoteList/Template/_CreditNoteListView.html";
                }
                //static Name: string = "aaa"
                CreditNoteListViewComponentController.Name = "creditnotelistviewcomponent";
                return CreditNoteListViewComponentController;
            }());
            app.AddComponent(CreditNoteListViewComponentController.Name, new CreditNoteListViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreditNoteListViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var CreditNoteListViewController = /** @class */ (function (_super) {
            __extends(CreditNoteListViewController, _super);
            function CreditNoteListViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CreditNoteListViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.CreditNoteListViewController = CreditNoteListViewController;
        app.AddController("CreditNoteListViewController", CreditNoteListViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreditNoteListViewController.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var AccDocumentReportListGrid = /** @class */ (function () {
            function AccDocumentReportListGrid() {
            }
            return AccDocumentReportListGrid;
        }());
        Model.AccDocumentReportListGrid = AccDocumentReportListGrid;
        var AccDocumentReportListSearchmodel = /** @class */ (function () {
            function AccDocumentReportListSearchmodel() {
            }
            return AccDocumentReportListSearchmodel;
        }());
        Model.AccDocumentReportListSearchmodel = AccDocumentReportListSearchmodel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AccDocumentReportModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var AccDocumentModel = GCPL.Model.AccDocumentReportListSearchmodel;
            var AccDocumentReportController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function AccDocumentReportController(_AccDocumentService, _ItemAutoservice, _cookieStore, _window) {
                    this._cookieStore = _cookieStore;
                    this._window = _window;
                    this.AccDocument = null;
                    this.DealerID = null;
                    this.GetAccDocumentStatus = null;
                    this.Description = null;
                    this.GoodReceiptNo = null;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.alert = null;
                    this.AccDocumentSearch = null;
                    this.Cookie = null;
                    this.AccDocumentReportService = _AccDocumentService;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.AccDocumentSearch = new AccDocumentModel();
                    this.AccDocument = Array();
                }
                AccDocumentReportController.prototype.$onInit = function () {
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                    this.Init();
                    $("#errorclose").hide();
                    $("#close").hide();
                };
                AccDocumentReportController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                AccDocumentReportController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                AccDocumentReportController.prototype.Init = function () {
                    var _this = this;
                    this.AccDocumentReportService.FindTransaction().then((function (response) {
                        _this.GetAccDocumentStatus = _this.AccDocumentReportService.GetTransaction(response.data.Result);
                        //this.Search();
                    }));
                    $("#myInput").hide();
                };
                AccDocumentReportController.prototype.ShowHidePopUp = function (Message) {
                    $("#errorclose").show();
                    $("#close").hide();
                    this.alert = Message;
                };
                AccDocumentReportController.prototype.Search = function () {
                    this.AccDocumentSearch.FromDate = document.getElementById("txtFromDate").value;
                    this.AccDocumentSearch.ToDate = document.getElementById("txtToDate").value;
                    if (this.AccDocumentSearch.Transactionid == undefined || this.AccDocumentSearch.Transactionid == "") {
                        this.ShowHidePopUp("Please Select Transaction Type");
                    }
                    else {
                        this.numRecords = parseInt(this.NoOfRds);
                        this.FillGrid(this.numRecords);
                        $("#errorclose").hide();
                        $("#close").show();
                        this.alert = "Account Document Retrieval Successful";
                    }
                };
                AccDocumentReportController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.AccDocumentReportService.Find(this.AccDocumentSearch).then((function (response) {
                        _this.AccDocument = _this.AccDocumentReportService.GetAccDocumentReportGrid(response.data.Result);
                        if (response.data.Result != 0) {
                            $("#myInput").show();
                        }
                        else {
                            $("#myInput").hide();
                        }
                        _this.AccDocument.forEach(function (value, key) {
                            that.incre = key + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.AccDocument.slice(0, that.numRecords);
                    }));
                };
                AccDocumentReportController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                AccDocumentReportController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.AccDocument.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                AccDocumentReportController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.AccDocument.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                AccDocumentReportController.prototype.Clear = function () {
                    this.AccDocumentSearch.AccountDocumentNo = '';
                    this.AccDocumentSearch.Transactionid = '';
                    this.AccDocumentSearch.RefDocumentNo = '';
                    //$("#txtDescription").val("");
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                };
                AccDocumentReportController.prototype.AccountDoc = function (data) {
                    if (data.RefDocumentNo != null && data.TransactionID == "101") {
                        this._window.location.href = "/#!/GoodsReceiptView?RefDocumentNo=" + data.RefDocumentNo;
                    }
                    else if (data.RefDocumentNo != null && data.TransactionID == "102") {
                        this._window.location.href = "/#!/GoodsReceiptReversalView?RefDocumentNo=" + data.RefDocumentNo;
                    }
                    else if (data.RefDocumentNo != null && data.TransactionID == "105") {
                        this._window.location.href = "/#!/DispositionDocumentView?RefDocumentNo=" + data.RefDocumentNo;
                    }
                    //else if (data.RefDocumentNo != null && data.TransactionID == "106") {
                    //    this._window.location.href = "/#!/CustomerReturnView?RefDocumentNo=" + data.RefDocumentNo;
                    //}
                    //else if (data.RefDocumentNo != null && data.TransactionID == "103") {
                    //    this._window.location.href = "/#!/DispositionDocumentView?RefDocumentNo=" + data.RefDocumentNo;
                    //}
                    else if (data.RefDocumentNo != null && data.TransactionID == "201") {
                        this._window.location.href = "/#!/BillingView?RefDocumentNo=" + data.RefDocumentNo;
                    }
                    else if (data.RefDocumentNo != null && data.TransactionID == "202") {
                        this._window.location.href = "/#!/CustomerReturnView?RefDocumentNo=" + data.RefDocumentNo;
                    }
                    //else if (data.RefDocumentNo != null && data.TransactionID == "901") {
                    //    this._window.location.href = "/#!/GoodsReceiptReversalView?RefDocumentNo=" + data.RefDocumentNo;
                    //}
                    //else if (data.RefDocumentNo != null && data.TransactionID == "907") {
                    //    this._window.location.href = "/#!/CustomerReturnView?RefDocumentNo=" + data.RefDocumentNo;
                    //}
                    //else if (data.RefDocumentNo != null && data.TransactionID == "908") {
                    //    this._window.location.href = "/#!/CustomerReturnView?RefDocumentNo=" + data.RefDocumentNo;
                    //}
                    //else if (data.RefDocumentNo != null && data.TransactionID == "801") {
                    //    this._window.location.href = "/#!/CustomerReturnView?RefDocumentNo=" + data.RefDocumentNo;
                    //}
                    else if (data.RefDocumentNo != null && data.TransactionID == "301") {
                        this._window.location.href = "/#!/DebitNoteView?RefDocumentNo=" + data.RefDocumentNo;
                    }
                    else if (data.RefDocumentNo != null && data.TransactionID == "300") {
                        this._window.location.href = "/#!/CreditNoteView?RefDocumentNo=" + data.RefDocumentNo;
                    }
                    //else if (data.RefDocumentNo != null && data.TransactionID == "1002") {
                    //    this._window.location.href = "/#!/BillingView?RefDocumentNo=" + data.RefDocumentNo;
                    //}
                };
                AccDocumentReportController.$inject = ["AccDocumentReportService", "itemDescriptionService", "$cookieStore", "$window"];
                return AccDocumentReportController;
            }());
            var AccDocumentReportComponentController = /** @class */ (function () {
                function AccDocumentReportComponentController() {
                    this.controller = AccDocumentReportController;
                    this.templateUrl = "/Scripts/App/Account/AccDocumentReport/Template/_AccDocumentReport.html";
                }
                AccDocumentReportComponentController.Name = "accdocumentreportcomponent";
                return AccDocumentReportComponentController;
            }());
            app.AddComponent(AccDocumentReportComponentController.Name, new AccDocumentReportComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AccDocumentReportComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var AccDocumentReportController = /** @class */ (function (_super) {
            __extends(AccDocumentReportController, _super);
            function AccDocumentReportController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AccDocumentReportController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.AccDocumentReportController = AccDocumentReportController;
        app.AddController("AccDocumentReportController", AccDocumentReportController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AccDocumentReportController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var AccDocumentReportService = /** @class */ (function (_super) {
            __extends(AccDocumentReportService, _super);
            function AccDocumentReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            AccDocumentReportService.prototype.Find = function (data) {
                var url = this.apiUrl + "/AccDocumentReport";
                var AccountDocumentNo;
                var Transactionid;
                var FromDate;
                var ToDate;
                var RefDocumentNo;
                //if (data.AccountDocumentNo !== undefined) {
                //    AccountDocumentNo = data.AccountDocumentNo
                //}
                //else {
                //    AccountDocumentNo = ''
                //}
                //if (data.RefDocumentNo !== undefined) {
                //    RefDocumentNo = data.RefDocumentNo
                //}
                //else {
                //    RefDocumentNo = ''
                //}
                if (data.Transactionid !== undefined) {
                    Transactionid = data.Transactionid;
                }
                else {
                    Transactionid = '';
                }
                if (data.FromDate !== undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = '';
                }
                if (data.ToDate !== undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                var config = {
                    params: {
                        //AccountDocumentNo: AccountDocumentNo,
                        Transactionid: Transactionid,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        //RefDocumentNo: RefDocumentNo,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            AccDocumentReportService.prototype.GetAccDocumentReportGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        AccountDocumentNo: item.AccountDocumentNo,
                        DocumentType: item.DocumentType,
                        RefDocumentNo: item.RefDocumentNo,
                        Date: item.Date,
                        Amount: item.Amount,
                        Type: item.Type,
                        TransactionID: item.TransactionID
                    });
                }
                return list;
            };
            AccDocumentReportService.prototype.FindTransaction = function () {
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/GetTransactionForAccountAssignment"
                });
            };
            AccDocumentReportService.prototype.GetTransaction = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        Transactionid: item.Transactionid,
                        TransactionName: item.TransactionName
                    });
                }
                return list;
            };
            AccDocumentReportService.$inject = ["$http", "$q", "$cookieStore"];
            return AccDocumentReportService;
        }(GCPL.Service.BaseService));
        Service.AccDocumentReportService = AccDocumentReportService;
        app.AddService("AccDocumentReportService", AccDocumentReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AccDocumentReportService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var LeadSearch = /** @class */ (function () {
            function LeadSearch() {
            }
            return LeadSearch;
        }());
        Model.LeadSearch = LeadSearch;
        var TotalleadValue = /** @class */ (function () {
            function TotalleadValue() {
            }
            return TotalleadValue;
        }());
        Model.TotalleadValue = TotalleadValue;
        var LeadGrid = /** @class */ (function () {
            function LeadGrid() {
            }
            return LeadGrid;
        }());
        Model.LeadGrid = LeadGrid;
        var SalesRepAutoFill = /** @class */ (function () {
            function SalesRepAutoFill() {
            }
            return SalesRepAutoFill;
        }());
        Model.SalesRepAutoFill = SalesRepAutoFill;
        var ItemDesCode = /** @class */ (function () {
            function ItemDesCode() {
            }
            return ItemDesCode;
        }());
        Model.ItemDesCode = ItemDesCode;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=FunnelRatioModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var FunnelRatioController = /** @class */ (function (_super) {
            __extends(FunnelRatioController, _super);
            function FunnelRatioController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return FunnelRatioController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.FunnelRatioController = FunnelRatioController;
        app.AddController("FunnelRatioController ", FunnelRatioController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=FunnelRatioController.js.map
/// <reference path="../../../../typings/chartjs/chart.d.ts" />
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var serviceLeadListCount = GCPL.Model.TotalleadValue;
            var LeadSearch = GCPL.Model.LeadSearch;
            var LeadModel = GCPL.Model.InsertLead;
            var ItemDesCode = GCPL.Model.ItemDesCode;
            var FunnelRatioComponentController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function FunnelRatioComponentController(_FunnelRatioService, _getAutoSalesrep, _leaddescription, _ModelService, _Sservice, _Dservice, _LeadListReportService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.getLeadCount = null;
                    this.getLeadSearch = null;
                    this.InsertLead = null;
                    //ItemCodeDropDown: Array<Model.ItemCode> = null;
                    this.ItemCode = null;
                    this.StateDropDown = null;
                    this.DistrictDropDown = null;
                    this.LeadList = null;
                    this.Cookie = null;
                    this.FunnelRatioService = _FunnelRatioService;
                    this.getAutoSalesrep = _getAutoSalesrep;
                    this.leaddescription = _leaddescription;
                    this.ModelService = _ModelService;
                    this.Sservice = _Sservice;
                    this.Districtservice = _Dservice;
                    this.LeadListReportService = _LeadListReportService;
                    this.Cookie = _cookieStore;
                    this.getLeadCount = new serviceLeadListCount();
                    this.getLeadSearch = new LeadSearch();
                    this.InsertLead = new LeadModel();
                    this.ItemCode = new ItemDesCode();
                    this.LeadList = new Array();
                }
                FunnelRatioComponentController.prototype.$onInit = function () {
                    this.Init();
                    var that = this;
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                FunnelRatioComponentController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                FunnelRatioComponentController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                FunnelRatioComponentController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    var filters;
                    $("#txtSalesRep").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.getAutoSalesrep.FilterAutoComplete(request).then((function (response) {
                                var data = that.getAutoSalesrep.GetAutoFillSalesRep(response.data.Result);
                                console.log(data);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Name,
                                        value: item.Name,
                                        id: item.UserID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.getLeadSearch.SaleRep = ui.item.id;
                            console.log(that.getLeadSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            that.leaddescription.FilterAutoComplete(request).then((function (response) {
                                var data = that.leaddescription.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //that.SelectedItemPrice(ui.item.id);
                            that.getLeadSearch.Itemcode = ui.item.id;
                            // that.getLeadSearch.ItemDescription = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    //this.FunnelRatioService.FindLeadtotal(this.getLeadSearch).then((response => {
                    //    this.getLeadCount = this.FunnelRatioService.GetLeadListTotal(response.data.Result);
                    //}));
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                        // this.getLeadSearch.stateId = this.StateDropDown[0].Region_Code.toString();   
                    }));
                    //this.LeadList = this.LeadListReportService.Find(this.getLeadSearch).then((response => {               
                    //      this.LeadList = this.LeadListReportService.GetLeadListGrid(response.data.Result);
                    //   }));
                };
                FunnelRatioComponentController.prototype.District = function (data) {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.getLeadSearch.stateId).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                FunnelRatioComponentController.prototype.Search = function () {
                    var _this = this;
                    this.getLeadSearch.FromDate = document.getElementById("txtFromDate").value;
                    this.getLeadSearch.ToDate = document.getElementById("txtToDate").value;
                    this.getLeadSearch.SaleRep = this.getLeadSearch.SaleRep;
                    this.getLeadSearch.Itemcode = this.getLeadSearch.Itemcode;
                    //this.getLeadSearch.Region = this.GetLeadPurchaseWithin.PurchaseTimelineID;
                    // this.getLeadSearch.stateId = this.getLeadSearch.stateId;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                    this.FunnelRatioService.FindLeadtotal(this.getLeadSearch).then((function (response) {
                        _this.getLeadCount = _this.FunnelRatioService.GetLeadListTotal(response.data.Result);
                        console.log(_this.getLeadCount);
                        var xArray = [];
                        var yArray = [];
                        for (var i in _this.getLeadCount) {
                            if (_this.getLeadCount.hasOwnProperty(i)) {
                                xArray.push(i);
                                yArray.push(_this.getLeadCount[i]);
                            }
                        }
                        debugger;
                        _this.BarChart(xArray, yArray);
                    }));
                };
                FunnelRatioComponentController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.LeadList = this.LeadListReportService.Find(this.getLeadSearch).then((function (response) {
                        _this.LeadList = _this.LeadListReportService.GetLeadListGrid(response.data.Result);
                        if (_this.LeadList.length > 0) {
                            $("#nullDataDiv").hide();
                            _this.LeadList.forEach(function (value, key) {
                                that.incre = parseInt(key) + 1;
                            });
                            _this.maxPages = (that.incre / that.numRecords);
                            _this.ShowBack = false;
                            _this.ShowNext = that.maxPages > 1 ? true : false;
                            _this.shownItems = _this.LeadList.slice(0, that.numRecords);
                        }
                        else {
                            $("#nullDataDiv").show();
                        }
                    }));
                };
                FunnelRatioComponentController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                FunnelRatioComponentController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.LeadList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                FunnelRatioComponentController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.LeadList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                FunnelRatioComponentController.prototype.Clear = function () {
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    this.getLeadSearch.SaleRep = "";
                    this.getLeadSearch.Itemcode = "";
                    this.getLeadSearch.Region = "";
                    this.getLeadSearch.stateId = "";
                    $("#txtSalesRep").val("");
                    $("#txtDescription").val("");
                    $("#ddlstate").val("");
                    $("#ddlRegion").val("");
                    this.DistrictDropDown = "";
                    // $("#ddlRegion").empty();
                    $("#FromDate").val("");
                    $("#ToDate").val("");
                };
                FunnelRatioComponentController.prototype.downloadCSV = function (csv, filename) {
                    var csvFile;
                    var downloadLink;
                    // CSV file
                    csvFile = new Blob([csv], { type: "text/csv" });
                    // Download link
                    downloadLink = document.createElement("a");
                    // File name
                    downloadLink.download = filename;
                    // Create a link to the file
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    // Hide download link
                    downloadLink.style.display = "none";
                    // Add the link to DOM
                    document.body.appendChild(downloadLink);
                    // Click download link
                    downloadLink.click();
                };
                FunnelRatioComponentController.prototype.exportTableToCSV = function (filename) {
                    var csv = [];
                    var rows = document.querySelectorAll(".excel tr");
                    for (var i = 0; i < rows.length; i++) {
                        var row = [], cols = rows[i].querySelectorAll("td, th");
                        for (var j = 0; j < cols.length; j++)
                            row.push(cols[j].innerHTML);
                        csv.push(row.join(","));
                    }
                    // Download CSV file
                    this.downloadCSV(csv.join("\n"), filename);
                };
                FunnelRatioComponentController.prototype.BarChart = function (xArray, yArray) {
                    debugger;
                    var canvas = document.getElementById('FunnelchartContainer');
                    var ctx2 = canvas.getContext('2d');
                    var barData1 = {
                        labels: xArray,
                        datasets: [
                            {
                                label: "Funnel Data",
                                fillColor: "#42A5F5",
                                strokeColor: "#1E88E5",
                                highlightFill: "#42A5F5",
                                highlightStroke: "rgba(220,220,220,1)",
                                data: yArray
                            }
                        ]
                    };
                    //var myChart = new Chart(ctx2);
                    //var a=myChart.Bar(barData1,
                    var myBarChart = new Chart(ctx2).Bar(barData1, {
                        scaleBeginAtZero: true,
                        scaleShowGridLines: true,
                        scaleGridLineColor: "rgba(0,0,0,.05)",
                        scaleGridLineWidth: 1,
                        barShowStroke: true,
                        barStrokeWidth: 2,
                        barValueSpacing: 8,
                        barDatasetSpacing: 10,
                        legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"
                    });
                    var myBarChartLegend = myBarChart.generateLegend();
                    var myBarChartImage = myBarChart.toBase64Image();
                };
                FunnelRatioComponentController.$inject = ["FunnelRatioService", "SalesRepaAutofillService", "itemDescriptionService",
                    "ModelService", "StateService", "DistrictService", "LeadGridfillService", "$cookieStore"];
                return FunnelRatioComponentController;
            }());
            var FunnelRatioComponent = /** @class */ (function () {
                function FunnelRatioComponent() {
                    console.log("componentCalled");
                    this.controller = FunnelRatioComponentController;
                    this.templateUrl = "/Scripts/App/LeadModelReport/FunnelRatio/Template/_FunnelRatio.html";
                }
                FunnelRatioComponent.Name = "funnelratiocomponent";
                return FunnelRatioComponent;
            }());
            app.AddComponent(FunnelRatioComponent.Name, new FunnelRatioComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=FunnelRatioComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var FunnelRatioService = /** @class */ (function (_super) {
            __extends(FunnelRatioService, _super);
            function FunnelRatioService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            FunnelRatioService.prototype.FindLeadtotal = function (data) {
                var url = this.apiUrl + "/FunnelRatioLeadCount";
                var SaleRep;
                var FromDate;
                var ToDate;
                var Itemcode;
                var Region;
                var stateId;
                if (data.SaleRep == undefined) {
                    SaleRep = '';
                }
                else {
                    SaleRep = data.SaleRep;
                }
                if (data.FromDate == undefined) {
                    FromDate = '';
                }
                else {
                    FromDate = data.FromDate;
                }
                if (data.ToDate == undefined) {
                    ToDate = '';
                }
                else {
                    ToDate = data.ToDate;
                }
                if (data.Itemcode == undefined) {
                    Itemcode = '';
                }
                else {
                    Itemcode = data.Itemcode;
                }
                if (data.Region == undefined) {
                    Region = '';
                }
                else {
                    Region = data.Region;
                }
                if (data.stateId == undefined) {
                    stateId = '';
                }
                else {
                    stateId = data.stateId;
                }
                console.log("aaaaaaaaaaaaaaaa");
                console.log(FromDate);
                var config = {
                    params: {
                        SaleRep: SaleRep,
                        Fromdate: FromDate,
                        ToDate: ToDate,
                        Itemcode: Itemcode,
                        Region: Region,
                        stateId: stateId,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        UserID: this.Cookie.get('UserInfo')['UserID'],
                        RoleID: this.Cookie.get('UserInfo')['RoleID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            FunnelRatioService.prototype.GetLeadListTotal = function (data) {
                debugger;
                var list = new model.TotalleadValue();
                if (data == null || data == undefined) {
                    list.TotalLeadCreated = "";
                    list.ValidLead = "";
                    list.Allocated = "";
                    list.Inprocess = "";
                    list.Won = "";
                    list.Lost = "";
                    list.Nodeal = "";
                    list.Closed = "";
                    list.Invalid = "";
                    list.QuoteCreated = "";
                }
                else {
                    list.TotalLeadCreated = data.TotalLeadCreated;
                    list.ValidLead = data.ValidLead;
                    list.Allocated = data.Allocated;
                    list.Inprocess = data.Inprocess;
                    list.Won = data.Won;
                    list.Lost = data.Lost;
                    list.Nodeal = data.Nodeal;
                    list.Closed = data.Closed;
                    list.Invalid = data.Invalid;
                    list.QuoteCreated = data.QuoteCreated;
                    console.log(list);
                }
                return list;
            };
            FunnelRatioService.$inject = ["$http", "$q", "$cookieStore"];
            return FunnelRatioService;
        }(GCPL.Service.BaseService));
        Service.FunnelRatioService = FunnelRatioService;
        app.AddService("FunnelRatioService", FunnelRatioService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
/// autofill sales Rep
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var SalesRepaAutofillService = /** @class */ (function (_super) {
            __extends(SalesRepaAutofillService, _super);
            function SalesRepaAutofillService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/" + "FunnelRatio";
                _this.Cookie = _cookieStore;
                return _this;
            }
            SalesRepaAutofillService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            SalesRepaAutofillService.prototype.FilterAutoComplete = function (data) {
                var url = this.apiUrl + "/FunnelRatio";
                var Description;
                if (data.Description !== undefined) {
                    Description = data.Description;
                }
                else {
                    Description = '';
                }
                var config = {
                    params: {
                        Description: data.term,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            SalesRepaAutofillService.prototype.GetAutoFillSalesRep = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        UserID: item.UserID,
                        Name: item.Name,
                        DealerID: item.DealerID
                    });
                }
                return list;
            };
            SalesRepaAutofillService.$inject = ["$http", "$q", "$cookieStore"];
            return SalesRepaAutofillService;
        }(GCPL.Service.BaseService));
        Service.SalesRepaAutofillService = SalesRepaAutofillService;
        //inject service
        app.AddService("SalesRepaAutofillService", SalesRepaAutofillService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//FillGrid of Lead details
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var LeadGridfillService = /** @class */ (function (_super) {
            __extends(LeadGridfillService, _super);
            function LeadGridfillService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            LeadGridfillService.prototype.Find = function (data) {
                var url = this.apiUrl + "/FunnelRatio";
                var SaleRep;
                var FromDate;
                var ToDate;
                var Itemcode;
                var Region;
                var stateId;
                if (data.SaleRep == undefined) {
                    SaleRep = '';
                }
                else {
                    SaleRep = data.SaleRep;
                }
                if (data.FromDate == undefined) {
                    FromDate = '';
                }
                else {
                    FromDate = data.FromDate;
                }
                if (data.ToDate == undefined) {
                    ToDate = '';
                }
                else {
                    ToDate = data.ToDate;
                }
                if (data.Itemcode == undefined) {
                    Itemcode = '';
                }
                else {
                    Itemcode = data.Itemcode;
                }
                if (data.Region == undefined) {
                    Region = '';
                }
                else {
                    Region = data.Region;
                }
                if (data.stateId == undefined) {
                    stateId = '';
                }
                else {
                    stateId = data.stateId;
                }
                var config = {
                    params: {
                        SaleRep: SaleRep,
                        Fromdate: FromDate,
                        ToDate: ToDate,
                        Itemcode: Itemcode,
                        Region: Region,
                        stateId: stateId,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        UserID: this.Cookie.get('UserInfo')['UserID'],
                        RoleID: this.Cookie.get('UserInfo')['RoleID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            LeadGridfillService.prototype.GetLeadListGrid = function (data) {
                //console.log(data);
                var list = Array();
                console.log("1223656555");
                console.log(data);
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        LeadId: item.LeadID,
                        CustomerName: item.CustomerName,
                        Model: item.ModelNo,
                        ItemDescription: item.Description,
                        Probability: item.SalesProbability,
                        LeadNo: item.LeadNo,
                        PurchaseWithin: item.purchaseWithin,
                        Status: item.Status,
                        Stage: item.SalesStage,
                        quantity: item.Quantity,
                        Price: item.ItemPrice,
                        SaleRep: item.salesRep,
                        State: item.State,
                        Regionname: item.Regionname
                    });
                }
                return list;
            };
            LeadGridfillService.$inject = ["$http", "$q", "$cookieStore"];
            return LeadGridfillService;
        }(GCPL.Service.BaseService));
        Service.LeadGridfillService = LeadGridfillService;
        app.AddService("LeadGridfillService", LeadGridfillService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=FunnelRatioService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var PipelineListGrid = /** @class */ (function () {
            function PipelineListGrid() {
            }
            return PipelineListGrid;
        }());
        Model.PipelineListGrid = PipelineListGrid;
        var PipelinePurchaseWithin = /** @class */ (function () {
            function PipelinePurchaseWithin() {
            }
            return PipelinePurchaseWithin;
        }());
        Model.PipelinePurchaseWithin = PipelinePurchaseWithin;
        var PipelineSalesStage = /** @class */ (function () {
            function PipelineSalesStage() {
            }
            return PipelineSalesStage;
        }());
        Model.PipelineSalesStage = PipelineSalesStage;
        var PipelineRegion = /** @class */ (function () {
            function PipelineRegion() {
            }
            return PipelineRegion;
        }());
        Model.PipelineRegion = PipelineRegion;
        var PipelineSalesProbability = /** @class */ (function () {
            function PipelineSalesProbability() {
            }
            return PipelineSalesProbability;
        }());
        Model.PipelineSalesProbability = PipelineSalesProbability;
        var PipelineState = /** @class */ (function () {
            function PipelineState() {
            }
            return PipelineState;
        }());
        Model.PipelineState = PipelineState;
        var PipelineStatusModel = /** @class */ (function () {
            function PipelineStatusModel() {
            }
            return PipelineStatusModel;
        }());
        Model.PipelineStatusModel = PipelineStatusModel;
        var PipelineProduct = /** @class */ (function () {
            function PipelineProduct() {
            }
            return PipelineProduct;
        }());
        Model.PipelineProduct = PipelineProduct;
        var PipelineModel = /** @class */ (function () {
            function PipelineModel() {
            }
            return PipelineModel;
        }());
        Model.PipelineModel = PipelineModel;
        var PipelineListSearchmodel = /** @class */ (function () {
            function PipelineListSearchmodel() {
            }
            return PipelineListSearchmodel;
        }());
        Model.PipelineListSearchmodel = PipelineListSearchmodel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PipelineOrderModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var servicecallmodel = GCPL.Model.PipelineListSearchmodel;
            var PipelineOrderController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function PipelineOrderController(_PipelineOrderReportService, _ItemDescriptionAutofill, _Dservice, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.DistrictDropDown = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.PipelineOrderList = null;
                    this.Description = null;
                    this.UserID = null;
                    this.DealerID = null;
                    this.GetPipelineOrderStatus = null;
                    this.GetPipelineOrderProduct = null;
                    this.GetPipelineOrderPurchaseWithin = null;
                    this.GetPipelineOrderRegion = null;
                    this.GetPipelineOrderState = null;
                    this.GetPipelineOrderSalesStage = null;
                    this.GetPipelineOrderModel = null;
                    this.GetPipelineOrderProbability = null;
                    this.PipelineOrderListSerachA = null;
                    this.SoSearchModel = null;
                    this.Cookie = null;
                    this.PipelineListReportService = _PipelineOrderReportService;
                    this.ItemDescriptionAutofill = _ItemDescriptionAutofill;
                    this.Districtservice = _Dservice;
                    this.Cookie = _cookieStore;
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.PipelineOrderListSerachA = new servicecallmodel();
                    this.PipelineOrderList = Array();
                    //this.DealerID = $location.search().DealerID;
                }
                PipelineOrderController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                PipelineOrderController.prototype.Init = function () {
                    var _this = this;
                    debugger;
                    var that = this;
                    $("#txtDecsription").autocomplete({
                        source: function (request, res) {
                            that.ItemDescriptionAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //let SelectedItemID = ui.item.id;
                            //that.QtyChange.ItemID = ui.item.id;
                            //that.Description = ui.item.value;
                            that.PipelineOrderListSerachA.itemid = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    $("#txtModel").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.PipelineListReportService.FindModel(request).then((function (response) {
                                var data = that.PipelineListReportService.GetModel(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.ModelNo,
                                        value: item.ModelNo,
                                        id: item.ModelID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.PipelineOrderListSerachA.ModelID = ui.item.id;
                            //console.log(that.getLeadSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    this.PipelineListReportService.FindPipelineStatus().then((function (response) {
                        _this.GetPipelineOrderStatus = _this.PipelineListReportService.GetPipelineStatus(response.data.Result);
                    }));
                    this.PipelineListReportService.FindProduct().then((function (response) {
                        _this.GetPipelineOrderProduct = _this.PipelineListReportService.GetProduct(response.data.Result);
                    }));
                    this.PipelineListReportService.FindPurchaseWithin().then((function (response) {
                        _this.GetPipelineOrderPurchaseWithin = _this.PipelineListReportService.GetPurchaseWithin(response.data.Result);
                    }));
                    //this.PipelineListReportService.FindModel().then((response => {
                    //    this.GetPipelineOrderModel = this.PipelineListReportService.GetModel(response.data.Result);
                    //}));
                    this.PipelineListReportService.FindProbability().then((function (response) {
                        _this.GetPipelineOrderProbability = _this.PipelineListReportService.GetProbability(response.data.Result);
                    }));
                    //this.PipelineListReportService.FindRegion().then((response => {
                    //    this.GetPipelineOrderRegion = this.PipelineListReportService.GetRegion(response.data.Result);
                    //}));
                    this.PipelineListReportService.FindtState().then((function (response) {
                        _this.GetPipelineOrderState = _this.PipelineListReportService.GetState(response.data.Result);
                    }));
                    this.PipelineListReportService.FindSalesStage().then((function (response) {
                        _this.GetPipelineOrderSalesStage = _this.PipelineListReportService.GetSalesStage(response.data.Result);
                    }));
                    //this.FillGrid(this.numRecords);
                };
                PipelineOrderController.prototype.District = function (data) {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.PipelineOrderListSerachA.stateID).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                PipelineOrderController.prototype.AutoSearch = function () {
                    //debugger;
                    //let that = this;
                    //$("#txtDecsription").autocomplete({
                    //    source: function (request, res) {
                    //        that.ItemDescriptionAutofill.FilterAutoComplete(request).then((response => {
                    //            let data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                    //            res($.map(data, function (item, index) {
                    //                return {
                    //                    label: item.Description,
                    //                    value: item.Description,
                    //                    id: item.ItemID
                    //                }
                    //            }));
                    //        }));
                    //    },
                    //    minLength: 2,
                    //    focus: (event, ui) => {
                    //        // Don't populate input field with selected value (pxid)
                    //        event.preventDefault();
                    //    },
                    //    select: function (e, ui) {
                    //        //that.PipelineOrderList.Itemid = ui.item.id;
                    //        that.PipelineOrderListSerachA.ProductID = ui.item.id;
                    //    },
                    //    change: function () {
                    //    }
                    //});
                    //this.Description = this.PipelineListReportService.Find(this.PipelineOrderListSerachA).then((response => {
                    //    this.Description = this.PipelineListReportService.GetPipelineListGrid(response.data.Result);
                    //}));
                };
                PipelineOrderController.prototype.Search = function () {
                    // this.PipelineOrderListSerachA.ProductID = this.GetPipelineOrderProduct.ProductID;
                    //  this.PipelineOrderListSerachA.Description = this.SoSearchModel.Description; 
                    this.PipelineOrderListSerachA.ProbabilityID = this.PipelineOrderListSerachA.ProbabilityID;
                    this.PipelineOrderListSerachA.PurchaseTimelineID = this.PipelineOrderListSerachA.PurchaseTimelineID;
                    this.PipelineOrderListSerachA.StageID = this.PipelineOrderListSerachA.StageID;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                PipelineOrderController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    debugger;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.PipelineOrderList = this.PipelineListReportService.Find(this.PipelineOrderListSerachA).then((function (response) {
                        _this.PipelineOrderList = _this.PipelineListReportService.GetPipelineListGrid(response.data.Result);
                        console.log(_this.PipelineOrderList);
                        if (_this.PipelineOrderList.length > 0) {
                            $("#nullDataDiv").hide();
                            _this.PipelineOrderList.forEach(function (value, key) {
                                that.incre = parseInt(key) + 1;
                            });
                            _this.maxPages = (that.incre / that.numRecords);
                            _this.ShowBack = false;
                            _this.ShowNext = that.maxPages > 1 ? true : false;
                            _this.shownItems = _this.PipelineOrderList.slice(0, that.numRecords);
                        }
                        else {
                            $("#nullDataDiv").show();
                        }
                    }));
                };
                PipelineOrderController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                PipelineOrderController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.PipelineOrderList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                PipelineOrderController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.PipelineOrderList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                PipelineOrderController.prototype.Clear = function () {
                    debugger;
                    this.PipelineOrderListSerachA.ProductID = "";
                    this.GetPipelineOrderProduct.ProductID = "";
                    this.PipelineOrderListSerachA.PurchaseTimelineID = "";
                    this.GetPipelineOrderPurchaseWithin.PurchaseTimelineID = "";
                    this.PipelineOrderListSerachA.StatusID = "";
                    this.GetPipelineOrderPurchaseWithin.StatusID = "";
                    this.PipelineOrderListSerachA.SearchInput = "";
                    this.GetPipelineOrderPurchaseWithin.SearchInput = "";
                    this.PipelineOrderListSerachA.StageID = "";
                    this.GetPipelineOrderPurchaseWithin.StageID = "";
                    this.PipelineOrderListSerachA.ProbabilityID = "";
                    this.GetPipelineOrderPurchaseWithin.ProbabilityID = "";
                    this.PipelineOrderListSerachA.itemid = "";
                    this.PipelineOrderListSerachA.stateID = "";
                    this.PipelineOrderListSerachA.ModelID = "";
                    this.PipelineOrderListSerachA.RegionID = "";
                    //(<HTMLInputElement>document.getElementById("txtDecsription")).value = "";
                    $("#txtDecsription").val("");
                    $("#ddlprob").val("");
                    $("#txtModel").val("");
                    $("#ddlPurchase").val("");
                    $("#ddlstatus").val("");
                    $("#ddlReg").val("");
                    this.DistrictDropDown = "";
                    $("#ddlstate").val("");
                    $("#ddlstage").val("");
                };
                PipelineOrderController.prototype.downloadCSV = function (csv, filename) {
                    var csvFile;
                    var downloadLink;
                    // CSV file
                    csvFile = new Blob([csv], { type: "text/csv" });
                    // Download link
                    downloadLink = document.createElement("a");
                    // File name
                    downloadLink.download = filename;
                    // Create a link to the file
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    // Hide download link
                    downloadLink.style.display = "none";
                    // Add the link to DOM
                    document.body.appendChild(downloadLink);
                    // Click download link
                    downloadLink.click();
                };
                PipelineOrderController.prototype.exportTableToCSV = function (filename) {
                    var csv = [];
                    var rows = document.querySelectorAll("table tr");
                    for (var i = 0; i < rows.length; i++) {
                        var row = [], cols = rows[i].querySelectorAll("td, th");
                        for (var j = 0; j < cols.length; j++)
                            row.push(cols[j].innerHTML);
                        csv.push(row.join(","));
                    }
                    // Download CSV file
                    this.downloadCSV(csv.join("\n"), filename);
                };
                PipelineOrderController.$inject = ["PipelineOrderReportService", "itemDescriptionService", "DistrictService", "$cookieStore"];
                return PipelineOrderController;
            }());
            var PipelineOrderComponentController = /** @class */ (function () {
                function PipelineOrderComponentController() {
                    this.controller = PipelineOrderController;
                    this.templateUrl = "/Scripts/App/PipelineOrder/Template/_PipelineOrder.html";
                }
                PipelineOrderComponentController.Name = "pipelineordercomponent";
                return PipelineOrderComponentController;
            }());
            app.AddComponent(PipelineOrderComponentController.Name, new PipelineOrderComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PipelineOrderComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var PipelineOrderController = /** @class */ (function (_super) {
            __extends(PipelineOrderController, _super);
            function PipelineOrderController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PipelineOrderController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.PipelineOrderController = PipelineOrderController;
        app.AddController("PipelineOrderController", PipelineOrderController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PipelineOrderController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var PipelineOrderReportService = /** @class */ (function (_super) {
            __extends(PipelineOrderReportService, _super);
            function PipelineOrderReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            PipelineOrderReportService.prototype.Find = function (data) {
                var url = this.apiUrl + "/pipelineReport";
                var abc;
                var ProductID;
                var ModelID;
                var PurchaseTimelineID;
                var StageID;
                var stateID;
                var RegionID;
                var ProbabilityID;
                var StatusID;
                var Itemcode;
                if (data.SearchInput !== undefined) {
                    abc = data.SearchInput;
                }
                else {
                    abc = '';
                }
                if (data.ProductID !== undefined) {
                    ProductID = data.ProductID;
                }
                else {
                    ProductID = "";
                }
                if (data.ModelID !== undefined) {
                    ModelID = data.ModelID;
                }
                else {
                    ModelID = "";
                }
                if (data.PurchaseTimelineID !== undefined) {
                    PurchaseTimelineID = data.PurchaseTimelineID;
                }
                else {
                    PurchaseTimelineID = "";
                }
                if (data.StageID !== undefined) {
                    StageID = data.StageID;
                }
                else {
                    StageID = "";
                }
                if (data.stateID !== undefined) {
                    stateID = data.stateID;
                }
                else {
                    stateID = "";
                }
                if (data.RegionID !== undefined) {
                    RegionID = data.RegionID;
                }
                else {
                    RegionID = "";
                }
                if (data.ProbabilityID !== undefined) {
                    ProbabilityID = data.ProbabilityID;
                }
                else {
                    ProbabilityID = "";
                }
                if (data.StatusID !== undefined) {
                    StatusID = data.StatusID;
                }
                else {
                    StatusID = "";
                }
                if (data.itemid !== undefined) {
                    Itemcode = data.itemid;
                }
                else {
                    Itemcode = "";
                }
                //console.log(abc);
                var config = {
                    params: {
                        SearchInput: "",
                        ProductID: ProductID,
                        ModelID: ModelID,
                        PurchaseTimelineID: PurchaseTimelineID,
                        StageID: StageID,
                        stateID: stateID,
                        RegionID: RegionID,
                        ProbabilityID: ProbabilityID,
                        StatusID: StatusID,
                        Itemcode: Itemcode,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        UserID: this.Cookie.get('UserInfo')['UserID'],
                        RoleID: this.Cookie.get('UserInfo')['RoleID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            PipelineOrderReportService.prototype.GetPipelineListGrid = function (data) {
                console.log("data");
                console.log(data);
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        CustomerName: item.CustomerName,
                        ModelNo: item.ModelNo,
                        Description: item.Description,
                        Probability: item.Probability,
                        PurWithIn: item.PurWithIn,
                        LeadNo: item.LeadNo,
                        CreationDate: item.CreationDate,
                        Status: item.Status,
                        Stage: item.Stage,
                        Quantity: item.Quantity,
                        Price: item.Price,
                        SalesRep: item.SalesRep
                    });
                    console.log("listitem");
                    console.log(list);
                }
                return list;
            };
            PipelineOrderReportService.prototype.FindtState = function () {
                //
                var config = {
                    params: {
                    //DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/Statectrl",
                    Config: config
                });
            };
            PipelineOrderReportService.prototype.GetState = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        Region_Code: item.Region_Code,
                        State: item.State
                    });
                }
                return list;
            };
            PipelineOrderReportService.prototype.FindPipelineStatus = function () {
                //
                var config = {
                    params: {
                    //DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/LeadStatusctrl",
                    Config: config
                });
            };
            PipelineOrderReportService.prototype.GetPipelineStatus = function (data) {
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        LeadStatusID: item.LeadStatusID,
                        Status: item.Status,
                        Description: item.Description
                    });
                }
                return list;
            };
            PipelineOrderReportService.prototype.FindProduct = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/ProductDDL",
                    Config: config
                });
            };
            PipelineOrderReportService.prototype.GetProduct = function (data) {
                var list = Array();
                for (var _i = 0, data_4 = data; _i < data_4.length; _i++) {
                    var item = data_4[_i];
                    list.push({
                        ProductID: item.ProductID,
                        Product: item.Product
                    });
                }
                return list;
            };
            PipelineOrderReportService.prototype.FindModel = function (data) {
                var Description;
                if (data.Description !== undefined) {
                    Description = data.Description;
                }
                else {
                    Description = '';
                }
                console.log("listDescriptionnnnn");
                console.log(Description);
                var config = {
                    params: {
                        Description: data.term,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/ModelDDL",
                    Config: config
                });
            };
            PipelineOrderReportService.prototype.GetModel = function (data) {
                var list = Array();
                console.log(list);
                for (var _i = 0, data_5 = data; _i < data_5.length; _i++) {
                    var item = data_5[_i];
                    list.push({
                        ModelID: item.ModelID,
                        ModelNo: item.ModelNo,
                        Description: item.Description
                    });
                }
                return list;
            };
            PipelineOrderReportService.prototype.FindPurchaseWithin = function () {
                //
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/PlantoPurchasectrl",
                    Config: config
                });
            };
            PipelineOrderReportService.prototype.GetPurchaseWithin = function (data) {
                var list = Array();
                for (var _i = 0, data_6 = data; _i < data_6.length; _i++) {
                    var item = data_6[_i];
                    list.push({
                        PurchaseTimelineID: item.PurchaseTimelineID,
                        Title: item.Title
                    });
                }
                return list;
            };
            PipelineOrderReportService.prototype.FindSalesStage = function () {
                //
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SalesStageReport",
                    Config: config
                });
            };
            PipelineOrderReportService.prototype.GetSalesStage = function (data) {
                var list = Array();
                //console.log("11111111111111");
                //console.log(list);
                for (var _i = 0, data_7 = data; _i < data_7.length; _i++) {
                    var item = data_7[_i];
                    list.push({
                        ID: item.ID,
                        SalesStage: item.SalesStage
                        //SalesProbability: item.SalesProbability
                    });
                }
                return list;
            };
            PipelineOrderReportService.prototype.FindRegion = function () {
                //
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/RegionCtrl",
                    Config: config
                });
            };
            PipelineOrderReportService.prototype.GetRegion = function (data) {
                var list = Array();
                for (var _i = 0, data_8 = data; _i < data_8.length; _i++) {
                    var item = data_8[_i];
                    list.push({
                        RegionID: item.RegionID,
                        RegionName: item.RegionName
                    });
                }
                return list;
            };
            PipelineOrderReportService.prototype.FindProbability = function () {
                var url = this.apiUrl + "/SalesProbability";
                var config = {
                    params: {
                    //Name: data.term,
                    //DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
                //let config = {
                //    params: {
                //        DealerID: this.Cookie.get('UserInfo')['DealerID']
                //    }
                //};
                //return this.ajaXUtility.Get({
                //    Url: this.apiUrl + "/SalesProbability",
                //    Config: ''
                //});
            };
            PipelineOrderReportService.prototype.GetProbability = function (data) {
                var list = Array();
                for (var _i = 0, data_9 = data; _i < data_9.length; _i++) {
                    var item = data_9[_i];
                    list.push({
                        ID: item.ID,
                        SalesProbability: item.SalesProbability
                    });
                }
                return list;
            };
            PipelineOrderReportService.$inject = ["$http", "$q", "$cookieStore"];
            return PipelineOrderReportService;
        }(GCPL.Service.BaseService));
        Service.PipelineOrderReportService = PipelineOrderReportService;
        app.AddService("PipelineOrderReportService", PipelineOrderReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PipelineOrderService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var LeadWinLossSearch = /** @class */ (function () {
            function LeadWinLossSearch() {
            }
            return LeadWinLossSearch;
        }());
        Model.LeadWinLossSearch = LeadWinLossSearch;
        var LeadWinLossFillGrid = /** @class */ (function () {
            function LeadWinLossFillGrid() {
            }
            return LeadWinLossFillGrid;
        }());
        Model.LeadWinLossFillGrid = LeadWinLossFillGrid;
        var TotalWinLossleadValue = /** @class */ (function () {
            function TotalWinLossleadValue() {
            }
            return TotalWinLossleadValue;
        }());
        Model.TotalWinLossleadValue = TotalWinLossleadValue;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WinLossAnalysisModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var WinLossAnalysisController = /** @class */ (function (_super) {
            __extends(WinLossAnalysisController, _super);
            function WinLossAnalysisController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return WinLossAnalysisController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.WinLossAnalysisController = WinLossAnalysisController;
        app.AddController("WinLossAnalysisController", WinLossAnalysisController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WinLossAnalysisController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var LeadWinSearch = GCPL.Model.LeadWinLossSearch;
            var WlLeadListCount = GCPL.Model.TotalWinLossleadValue;
            var WinLossAnalysisController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function WinLossAnalysisController(_leaddescription, _PipelineOrderReportService, _Sservice, _Dservice, _LeadWinlossListService, _WinLossLeadCountService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.LeadWLList = null;
                    this.getLeadWinLossSearch = null;
                    this.getWLLeadCount = null;
                    this.StateDropDown = null;
                    this.DistrictDropDown = null;
                    this.GetPipelineOrderProbability = null;
                    this.GetPipelineOrderStatus = null;
                    this.GetPipelineOrderSalesStage = null;
                    this.Cookie = null;
                    this.leaddescription = _leaddescription;
                    this.PipelineListReportService = _PipelineOrderReportService;
                    this.Sservice = _Sservice;
                    this.Districtservice = _Dservice;
                    this.LeadWinlossListService = _LeadWinlossListService;
                    this.WinLossLeadCountService = _WinLossLeadCountService;
                    this.Cookie = _cookieStore;
                    this.getLeadWinLossSearch = new LeadWinSearch();
                    this.getWLLeadCount = new WlLeadListCount();
                    this.LeadWLList = new Array();
                }
                WinLossAnalysisController.prototype.$onInit = function () {
                    this.Init();
                    var that = this;
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                    $("#nullDataDiv").hide();
                };
                WinLossAnalysisController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                WinLossAnalysisController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                WinLossAnalysisController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    var filters;
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            that.leaddescription.FilterAutoComplete(request).then((function (response) {
                                var data = that.leaddescription.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //that.SelectedItemPrice(ui.item.id);
                            that.getLeadWinLossSearch.Itemcode = ui.item.id;
                            //that.getLeadSearch.ItemDescription = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    $("#txtModel").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.PipelineListReportService.FindModel(request).then((function (response) {
                                var data = that.PipelineListReportService.GetModel(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.ModelNo,
                                        value: item.ModelNo,
                                        id: item.ModelID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.getLeadWinLossSearch.ModelID = ui.item.id;
                            console.log(that.getLeadWinLossSearch.ModelID);
                            //console.log(that.getLeadSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                    this.PipelineListReportService.FindSalesStage().then((function (response) {
                        _this.GetPipelineOrderSalesStage = _this.PipelineListReportService.GetSalesStage(response.data.Result);
                    }));
                    this.LeadWinlossListService.FindWInlossStatus().then((function (response) {
                        _this.GetPipelineOrderStatus = _this.LeadWinlossListService.GetwinlossStatus(response.data.Result);
                    }));
                    this.PipelineListReportService.FindProbability().then((function (response) {
                        _this.GetPipelineOrderProbability = _this.PipelineListReportService.GetProbability(response.data.Result);
                    }));
                };
                WinLossAnalysisController.prototype.District = function (data) {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.getLeadWinLossSearch.stateId).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                WinLossAnalysisController.prototype.Search = function () {
                    var _this = this;
                    this.getLeadWinLossSearch.FromDate = document.getElementById("txtFromDate").value;
                    this.getLeadWinLossSearch.ToDate = document.getElementById("txtToDate").value;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                    this.WinLossLeadCountService.FindWLLeadtotal(this.getLeadWinLossSearch).then((function (response) {
                        _this.getWLLeadCount = _this.WinLossLeadCountService.GetWLLeadListTotal(response.data.Result);
                    }));
                };
                WinLossAnalysisController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.LeadWLList = this.LeadWinlossListService.Find(this.getLeadWinLossSearch).then((function (response) {
                        _this.LeadWLList = _this.LeadWinlossListService.GetWLLeadListGrid(response.data.Result);
                        if (_this.LeadWLList.length > 0) {
                            $("#nullDataDiv").hide();
                            _this.LeadWLList.forEach(function (value, key) {
                                that.incre = parseInt(key) + 1;
                            });
                            _this.maxPages = (that.incre / that.numRecords);
                            _this.ShowBack = false;
                            _this.ShowNext = that.maxPages > 1 ? true : false;
                            _this.shownItems = _this.LeadWLList.slice(0, that.numRecords);
                        }
                        else {
                            $("#nullDataDiv").show();
                        }
                    }));
                };
                WinLossAnalysisController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                WinLossAnalysisController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.LeadWLList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                WinLossAnalysisController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.LeadWLList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                WinLossAnalysisController.prototype.Clear = function () {
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    this.getLeadWinLossSearch.ModelID = "";
                    this.getLeadWinLossSearch.Itemcode = "";
                    this.getLeadWinLossSearch.Region = "";
                    this.getLeadWinLossSearch.stateId = "";
                    this.getLeadWinLossSearch.FromDate = "";
                    this.getLeadWinLossSearch.ToDate = "";
                    this.getLeadWinLossSearch.StatusID = "";
                    this.getLeadWinLossSearch.ProbabilityID = "";
                    this.getLeadWinLossSearch.StageID = "";
                    $("#txtModel").val("");
                    $("#txtDescription").val("");
                    $("#ddlstate").val("");
                    $("#ddlRegion").val("");
                    this.DistrictDropDown = "";
                    // $("#ddlRegion").empty();
                    $("#FromDate").val("");
                    $("#ToDate").val("");
                    $("#ddlstage").val("");
                    $("#ddlstatus").val("");
                    $("#ddlprob").val("");
                };
                WinLossAnalysisController.prototype.downloadCSV = function (csv, filename) {
                    var csvFile;
                    var downloadLink;
                    // CSV file
                    csvFile = new Blob([csv], { type: "text/csv" });
                    // Download link
                    downloadLink = document.createElement("a");
                    // File name
                    downloadLink.download = filename;
                    // Create a link to the file
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    // Hide download link
                    downloadLink.style.display = "none";
                    // Add the link to DOM
                    document.body.appendChild(downloadLink);
                    // Click download link
                    downloadLink.click();
                };
                WinLossAnalysisController.prototype.exportTableToCSV = function (filename) {
                    var csv = [];
                    var rows = document.querySelectorAll(".excel tr");
                    for (var i = 0; i < rows.length; i++) {
                        var row = [], cols = rows[i].querySelectorAll("td, th");
                        for (var j = 0; j < cols.length; j++)
                            row.push(cols[j].innerHTML);
                        csv.push(row.join(","));
                    }
                    // Download CSV file
                    this.downloadCSV(csv.join("\n"), filename);
                };
                WinLossAnalysisController.$inject = ["itemDescriptionService", "PipelineOrderReportService", "StateService", "DistrictService", "WinLossReportService", "FillWinLossLeadCountService", "$cookieStore"];
                return WinLossAnalysisController;
            }());
            var WinLossAnalysisComponentController = /** @class */ (function () {
                function WinLossAnalysisComponentController() {
                    this.controller = WinLossAnalysisController;
                    this.templateUrl = "/Scripts/App/LeadModelReport/WinLossAnalysis/Template/_WinLossAnalysis.html";
                }
                WinLossAnalysisComponentController.Name = "winlossanalysiscomponent";
                return WinLossAnalysisComponentController;
            }());
            app.AddComponent(WinLossAnalysisComponentController.Name, new WinLossAnalysisComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WinLossAnalysisComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var WinLossReportService = /** @class */ (function (_super) {
            __extends(WinLossReportService, _super);
            function WinLossReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            WinLossReportService.prototype.FindWInlossStatus = function () {
                debugger;
                var config = {
                    params: {
                    //DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/LeadStatusctrlForWinLoss",
                    Config: config
                });
            };
            WinLossReportService.prototype.GetwinlossStatus = function (data) {
                debugger;
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        LeadStatusID: item.LeadStatusID,
                        Status: item.Status,
                        Description: item.Description
                    });
                }
                return list;
            };
            WinLossReportService.prototype.Find = function (data) {
                var url = this.apiUrl + "/WinLossLead";
                var Model;
                var FromDate;
                var ToDate;
                var Itemcode;
                var Region;
                var stateId;
                var SalesStage;
                var probability;
                var Status;
                debugger;
                if (data.ModelID == undefined) {
                    Model = '';
                }
                else {
                    Model = data.ModelID;
                }
                if (data.FromDate == undefined) {
                    FromDate = '';
                }
                else {
                    FromDate = data.FromDate;
                }
                if (data.ToDate == undefined) {
                    ToDate = '';
                }
                else {
                    ToDate = data.ToDate;
                }
                if (data.Itemcode == undefined) {
                    Itemcode = '';
                }
                else {
                    Itemcode = data.Itemcode;
                }
                if (data.Region == undefined) {
                    Region = '';
                }
                else {
                    Region = data.Region;
                }
                if (data.stateId == undefined) {
                    stateId = '';
                }
                else {
                    stateId = data.stateId;
                }
                if (data.StageID == undefined) {
                    SalesStage = '';
                }
                else {
                    SalesStage = data.StageID;
                }
                if (data.ProbabilityID == undefined) {
                    probability = '';
                }
                else {
                    probability = data.ProbabilityID;
                }
                if (data.StatusID == undefined) {
                    Status = '';
                }
                else {
                    Status = data.StatusID;
                }
                var config = {
                    params: {
                        Model: Model,
                        Fromdate: FromDate,
                        ToDate: ToDate,
                        Itemcode: Itemcode,
                        Region: Region,
                        stateId: stateId,
                        SalesStage: SalesStage,
                        probability: probability,
                        Status: Status,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        UserID: this.Cookie.get('UserInfo')['UserID'],
                        RoleID: this.Cookie.get('UserInfo')['RoleID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            WinLossReportService.prototype.GetWLLeadListGrid = function (data) {
                //console.log(data);
                var list = Array();
                console.log("1223656555");
                console.log(data);
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        LeadId: item.LeadID,
                        CustomerName: item.CustomerName,
                        Model: item.ModelNo,
                        ItemDescription: item.Description,
                        Probability: item.SalesProbability,
                        LeadNo: item.LeadNo,
                        Creationdate: item.Creationdate,
                        Status: item.Status,
                        Stage: item.SalesStage,
                        quantity: item.Quantity,
                        Price: item.ItemPrice,
                        SaleRep: item.salesRep,
                        Reason: item.Reason
                    });
                }
                return list;
            };
            WinLossReportService.$inject = ["$http", "$q", "$cookieStore"];
            return WinLossReportService;
        }(GCPL.Service.BaseService));
        Service.WinLossReportService = WinLossReportService;
        app.AddService("WinLossReportService", WinLossReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var FillWinLossLeadCountService = /** @class */ (function (_super) {
            __extends(FillWinLossLeadCountService, _super);
            function FillWinLossLeadCountService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            FillWinLossLeadCountService.prototype.FindWLLeadtotal = function (data) {
                var url = this.apiUrl + "/WinlossLeadCount";
                var Model;
                var FromDate;
                var ToDate;
                var Itemcode;
                var Region;
                var stateId;
                var SalesStage;
                var probability;
                var Status;
                if (data.ModelID == undefined) {
                    Model = '';
                }
                else {
                    Model = data.ModelID;
                }
                if (data.FromDate == undefined) {
                    FromDate = '';
                }
                else {
                    FromDate = data.FromDate;
                }
                if (data.ToDate == undefined) {
                    ToDate = '';
                }
                else {
                    ToDate = data.ToDate;
                }
                if (data.Itemcode == undefined) {
                    Itemcode = '';
                }
                else {
                    Itemcode = data.Itemcode;
                }
                if (data.Region == undefined) {
                    Region = '';
                }
                else {
                    Region = data.Region;
                }
                if (data.stateId == undefined) {
                    stateId = '';
                }
                else {
                    stateId = data.stateId;
                }
                if (data.StageID == undefined) {
                    SalesStage = '';
                }
                else {
                    SalesStage = data.StageID;
                }
                if (data.ProbabilityID == undefined) {
                    probability = '';
                }
                else {
                    probability = data.ProbabilityID;
                }
                if (data.StatusID == undefined) {
                    Status = '';
                }
                else {
                    Status = data.StatusID;
                }
                console.log("aaaaaaaaaaaaaaaa");
                console.log(FromDate);
                var config = {
                    params: {
                        Model: Model,
                        Fromdate: FromDate,
                        ToDate: ToDate,
                        Itemcode: Itemcode,
                        Region: Region,
                        stateId: stateId,
                        SalesStage: SalesStage,
                        probability: probability,
                        Status: Status,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        UserID: this.Cookie.get('UserInfo')['UserID'],
                        RoleID: this.Cookie.get('UserInfo')['RoleID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            FillWinLossLeadCountService.prototype.GetWLLeadListTotal = function (data) {
                console.log(data);
                var list = new model.TotalWinLossleadValue();
                if (data == null || data == undefined) {
                    list.TotalLeadCreated = "";
                    list.Lost = "";
                    list.Abandoned = "";
                    list.NoDeal = "";
                    list.Inprocess = "";
                    list.Won = "";
                    list.Allocated = "";
                    list.QuoteCreated = "";
                    list.Created = "";
                    list.Closed = "";
                    list.Invalid = "";
                }
                else {
                    list.TotalLeadCreated = data.TotalLeadCreated;
                    list.Inprocess = data.Inprocess;
                    list.Won = data.Won;
                    list.Lost = data.Lost;
                    list.Abandoned = data.Abandoned;
                    list.NoDeal = data.Nodeal; //console.log(list);
                    list.Allocated = data.Allocated;
                    list.QuoteCreated = data.QuoteCreated;
                    list.Created = data.Created;
                    list.Closed = data.Closed;
                    list.Invalid = data.Invalid;
                }
                return list;
            };
            FillWinLossLeadCountService.$inject = ["$http", "$q", "$cookieStore"];
            return FillWinLossLeadCountService;
        }(GCPL.Service.BaseService));
        Service.FillWinLossLeadCountService = FillWinLossLeadCountService;
        app.AddService("FillWinLossLeadCountService", FillWinLossLeadCountService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WinLossAnalysisService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var TotalIDQPsalesstageValue = /** @class */ (function () {
            function TotalIDQPsalesstageValue() {
            }
            return TotalIDQPsalesstageValue;
        }());
        Model.TotalIDQPsalesstageValue = TotalIDQPsalesstageValue;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=IQDPModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var IQDPController = /** @class */ (function (_super) {
            __extends(IQDPController, _super);
            function IQDPController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return IQDPController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.IQDPController = IQDPController;
        app.AddController("IQDPController", IQDPController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=IQDPController.js.map
/// <reference path="../../../../typings/chartjs/chart.d.ts" />
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var stageLeadListCount = GCPL.Model.TotalIDQPsalesstageValue;
            var LeadSearch = GCPL.Model.LeadSearch;
            var LeadModel = GCPL.Model.InsertLead;
            var ItemDesCode = GCPL.Model.ItemDesCode;
            var IQDPController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function IQDPController(_IQDPService, _getAutoSalesrep, _leaddescription, _ModelService, _Sservice, _Dservice, _LeadListReportService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.getLeadstageCount = null;
                    this.getLeadSearch = null;
                    this.InsertLead = null;
                    //ItemCodeDropDown: Array<Model.ItemCode> = null;
                    this.ItemCode = null;
                    this.StateDropDown = null;
                    this.DistrictDropDown = null;
                    this.LeadList = null;
                    this.Cookie = null;
                    this.IQDPService = _IQDPService;
                    this.getAutoSalesrep = _getAutoSalesrep;
                    this.leaddescription = _leaddescription;
                    this.ModelService = _ModelService;
                    this.Sservice = _Sservice;
                    this.Districtservice = _Dservice;
                    this.LeadListReportService = _LeadListReportService;
                    this.Cookie = _cookieStore;
                    this.getLeadstageCount = new stageLeadListCount();
                    this.getLeadSearch = new LeadSearch();
                    this.InsertLead = new LeadModel();
                    this.ItemCode = new ItemDesCode();
                    this.LeadList = new Array();
                }
                IQDPController.prototype.$onInit = function () {
                    this.Init();
                    var that = this;
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                IQDPController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                IQDPController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                IQDPController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    var filters;
                    $("#txtSalesRep").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.getAutoSalesrep.FilterAutoComplete(request).then((function (response) {
                                var data = that.getAutoSalesrep.GetAutoFillSalesRep(response.data.Result);
                                console.log(data);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Name,
                                        value: item.Name,
                                        id: item.UserID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.getLeadSearch.SaleRep = ui.item.id;
                            console.log(that.getLeadSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            that.leaddescription.FilterAutoComplete(request).then((function (response) {
                                var data = that.leaddescription.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //that.SelectedItemPrice(ui.item.id);
                            that.getLeadSearch.Itemcode = ui.item.id;
                            // that.getLeadSearch.ItemDescription = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                        // this.getLeadSearch.stateId = this.StateDropDown[0].Region_Code.toString();   
                    }));
                };
                IQDPController.prototype.District = function (data) {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.getLeadSearch.stateId).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                IQDPController.prototype.Search = function () {
                    var _this = this;
                    this.getLeadSearch.FromDate = document.getElementById("txtFromDate").value;
                    this.getLeadSearch.ToDate = document.getElementById("txtToDate").value;
                    this.getLeadSearch.SaleRep = this.getLeadSearch.SaleRep;
                    this.getLeadSearch.Itemcode = this.getLeadSearch.Itemcode;
                    //this.getLeadSearch.Region = this.GetLeadPurchaseWithin.PurchaseTimelineID;
                    // this.getLeadSearch.stateId = this.getLeadSearch.stateId;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                    this.IQDPService.FindLeadStagetotal(this.getLeadSearch).then((function (response) {
                        _this.getLeadstageCount = _this.IQDPService.GetLeadStageTotal(response.data.Result);
                        var xArray = [];
                        var yArray = [];
                        for (var i in _this.getLeadstageCount) {
                            if (_this.getLeadstageCount.hasOwnProperty(i)) {
                                xArray.push(i);
                                yArray.push(_this.getLeadstageCount[i]);
                            }
                        }
                        debugger;
                        //this.BarChartI(xArray, yArray);
                        var canvas = document.getElementById('chartIQDP');
                        var ctx2 = canvas.getContext('2d');
                        var barData1 = {
                            labels: xArray,
                            datasets: [
                                {
                                    label: "IQDP Data",
                                    fillColor: "#42A5F5",
                                    strokeColor: "#1E88E5",
                                    highlightFill: "#42A5F5",
                                    highlightStroke: "rgba(220,220,220,1)",
                                    data: yArray
                                }
                            ]
                        };
                        var myBarChart = new Chart(ctx2).Bar(barData1, {
                            scaleBeginAtZero: true,
                            scaleShowGridLines: true,
                            scaleGridLineColor: "rgba(0,0,0,.05)",
                            scaleGridLineWidth: 1,
                            barShowStroke: true,
                            barStrokeWidth: 2,
                            barValueSpacing: 3,
                            barDatasetSpacing: 5,
                            legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"
                        });
                        var myBarChartLegend = myBarChart.generateLegend();
                        var myBarChartImage = myBarChart.toBase64Image();
                    }));
                };
                IQDPController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.LeadList = this.IQDPService.FindIQDP(this.getLeadSearch).then((function (response) {
                        _this.LeadList = _this.IQDPService.GetLeadListGridIQDP(response.data.Result);
                        if (_this.LeadList.length > 0) {
                            $("#nullDataDiv").hide();
                            _this.LeadList.forEach(function (value, key) {
                                that.incre = parseInt(key) + 1;
                            });
                            _this.maxPages = (that.incre / that.numRecords);
                            _this.ShowBack = false;
                            _this.ShowNext = that.maxPages > 1 ? true : false;
                            _this.shownItems = _this.LeadList.slice(0, that.numRecords);
                        }
                        else {
                            $("#nullDataDiv").show();
                        }
                    }));
                };
                IQDPController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                IQDPController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.LeadList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                IQDPController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.LeadList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                IQDPController.prototype.Clear = function () {
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    this.getLeadSearch.SaleRep = "";
                    this.getLeadSearch.Itemcode = "";
                    this.getLeadSearch.Region = "";
                    this.getLeadSearch.stateId = "";
                    $("#txtSalesRep").val("");
                    $("#txtDescription").val("");
                    $("#ddlstate").val("");
                    $("#ddlRegion").val("");
                    this.DistrictDropDown = "";
                    // $("#ddlRegion").empty();
                    $("#FromDate").val("");
                    $("#ToDate").val("");
                };
                IQDPController.prototype.downloadCSV = function (csv, filename) {
                    var csvFile;
                    var downloadLink;
                    // CSV file
                    csvFile = new Blob([csv], { type: "text/csv" });
                    // Download link
                    downloadLink = document.createElement("a");
                    // File name
                    downloadLink.download = filename;
                    // Create a link to the file
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    // Hide download link
                    downloadLink.style.display = "none";
                    // Add the link to DOM
                    document.body.appendChild(downloadLink);
                    // Click download link
                    downloadLink.click();
                };
                IQDPController.prototype.exportTableToCSV = function (filename) {
                    var csv = [];
                    var rows = document.querySelectorAll(".excel tr");
                    for (var i = 0; i < rows.length; i++) {
                        var row = [], cols = rows[i].querySelectorAll("td, th");
                        for (var j = 0; j < cols.length; j++)
                            row.push(cols[j].innerHTML);
                        csv.push(row.join(","));
                    }
                    // Download CSV file
                    this.downloadCSV(csv.join("\n"), filename);
                };
                IQDPController.$inject = ["iqdpSalesstagecountService", "SalesRepaAutofillService", "itemDescriptionService",
                    "ModelService", "StateService", "DistrictService", "LeadGridfillService", "$cookieStore"];
                return IQDPController;
            }());
            var IQDPComponentController = /** @class */ (function () {
                function IQDPComponentController() {
                    this.controller = IQDPController;
                    this.templateUrl = "/Scripts/App/LeadModelReport/IQDP/Template/_IQDP.html";
                }
                IQDPComponentController.Name = "iqdpcomponent";
                return IQDPComponentController;
            }());
            app.AddComponent(IQDPComponentController.Name, new IQDPComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=IQDPComponent.js.map
/// <reference path="../../../../typings/angularjs/angular.d.ts" />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var iqdpSalesstagecountService = /** @class */ (function (_super) {
            __extends(iqdpSalesstagecountService, _super);
            function iqdpSalesstagecountService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            iqdpSalesstagecountService.prototype.FindIQDP = function (data) {
                var url = this.apiUrl + "/IQDPGrid";
                var SaleRep;
                var FromDate;
                var ToDate;
                var Itemcode;
                var Region;
                var stateId;
                if (data.SaleRep == undefined) {
                    SaleRep = '';
                }
                else {
                    SaleRep = data.SaleRep;
                }
                if (data.FromDate == undefined) {
                    FromDate = '';
                }
                else {
                    FromDate = data.FromDate;
                }
                if (data.ToDate == undefined) {
                    ToDate = '';
                }
                else {
                    ToDate = data.ToDate;
                }
                if (data.Itemcode == undefined) {
                    Itemcode = '';
                }
                else {
                    Itemcode = data.Itemcode;
                }
                if (data.Region == undefined) {
                    Region = '';
                }
                else {
                    Region = data.Region;
                }
                if (data.stateId == undefined) {
                    stateId = '';
                }
                else {
                    stateId = data.stateId;
                }
                var config = {
                    params: {
                        SaleRep: SaleRep,
                        Fromdate: FromDate,
                        ToDate: ToDate,
                        Itemcode: Itemcode,
                        Region: Region,
                        stateId: stateId,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        UserID: this.Cookie.get('UserInfo')['UserID'],
                        RoleID: this.Cookie.get('UserInfo')['RoleID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            iqdpSalesstagecountService.prototype.GetLeadListGridIQDP = function (data) {
                //console.log(data);
                var list = Array();
                console.log("1223656555");
                console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        LeadId: item.LeadID,
                        CustomerName: item.CustomerName,
                        Model: item.ModelNo,
                        ItemDescription: item.Description,
                        Probability: item.SalesProbability,
                        LeadNo: item.LeadNo,
                        PurchaseWithin: item.purchaseWithin,
                        Status: item.Status,
                        Stage: item.SalesStage,
                        quantity: item.Quantity,
                        Price: item.ItemPrice,
                        SaleRep: item.salesRep,
                        State: item.State,
                        Regionname: item.Regionname
                    });
                }
                return list;
            };
            iqdpSalesstagecountService.prototype.FindLeadStagetotal = function (data) {
                var url = this.apiUrl + "/IQDPstageCount";
                var SaleRep;
                var FromDate;
                var ToDate;
                var Itemcode;
                var Region;
                var stateId;
                if (data.SaleRep == undefined) {
                    SaleRep = '';
                }
                else {
                    SaleRep = data.SaleRep;
                }
                if (data.FromDate == undefined) {
                    FromDate = '';
                }
                else {
                    FromDate = data.FromDate;
                }
                if (data.ToDate == undefined) {
                    ToDate = '';
                }
                else {
                    ToDate = data.ToDate;
                }
                if (data.Itemcode == undefined) {
                    Itemcode = '';
                }
                else {
                    Itemcode = data.Itemcode;
                }
                if (data.Region == undefined) {
                    Region = '';
                }
                else {
                    Region = data.Region;
                }
                if (data.stateId == undefined) {
                    stateId = '';
                }
                else {
                    stateId = data.stateId;
                }
                console.log("aaaaaaaaaaaaaaaa");
                console.log(FromDate);
                var config = {
                    params: {
                        SaleRep: SaleRep,
                        Fromdate: FromDate,
                        ToDate: ToDate,
                        Itemcode: Itemcode,
                        Region: Region,
                        stateId: stateId,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        UserID: this.Cookie.get('UserInfo')['UserID'],
                        RoleID: this.Cookie.get('UserInfo')['RoleID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            iqdpSalesstagecountService.prototype.GetLeadStageTotal = function (data) {
                console.log(data);
                var list = new model.TotalIDQPsalesstageValue();
                if (data == null || data == undefined) {
                    list.TotalLeadCreated = "";
                    list.Enquiry = "";
                    list.Qualification = "";
                    list.Development = "";
                    list.Proposal = "";
                }
                else {
                    list.TotalLeadCreated = data.TotalLeadCreated;
                    list.Enquiry = data.Enquiry;
                    list.Qualification = data.Qualification;
                    list.Development = data.Development;
                    list.Proposal = data.Proposal;
                    //console.log(list);
                }
                return list;
            };
            iqdpSalesstagecountService.$inject = ["$http", "$q", "$cookieStore"];
            return iqdpSalesstagecountService;
        }(GCPL.Service.BaseService));
        Service.iqdpSalesstagecountService = iqdpSalesstagecountService;
        app.AddService("iqdpSalesstagecountService", iqdpSalesstagecountService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=IQDPService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var PartReportModel = /** @class */ (function () {
            function PartReportModel() {
            }
            return PartReportModel;
        }());
        Model.PartReportModel = PartReportModel;
        var PartReportHeader = /** @class */ (function () {
            function PartReportHeader() {
            }
            return PartReportHeader;
        }());
        Model.PartReportHeader = PartReportHeader;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PartRequestsReportModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var PartRequestsReportComponentController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function PartRequestsReportComponentController(_Autofillservice, _Sservicenew, _Dservice, _ModelMasterloadListComponentService, _ModelMasterListService, _ItemAutoservice, _PartRequestReportService, _Dealerservice, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.UserData = null;
                    this.ModelMasterList = null;
                    this.ModelMasterSearch = null;
                    this.DealerID = null;
                    this.Cookie = null;
                    this.StateDropDownnew = null;
                    this.StateDropDown = null;
                    this.SelectedStateID = null;
                    this.StateID = null;
                    this.DistrictDropDown = null;
                    this.PartReportModel = null;
                    this.FillPartReportGrid = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = 10;
                    this.FillPartGrid = null;
                    this.InsertCustMaster = null;
                    this.Cookie = _cookieStore;
                    this.CustomerAutofill = _Autofillservice;
                    this.Sservicenew = _Sservicenew;
                    this.Districtservice = _Dservice;
                    this.ModelMasterloadListComponentService = _ModelMasterloadListComponentService;
                    this.ModelMasterListService = _ModelMasterListService;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.PartRequestReportService = _PartRequestReportService;
                    this.PartReportModel = new GCPL.Model.PartReportModel();
                    this.DealerService = _Dealerservice;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    console.log("sdsad");
                }
                PartRequestsReportComponentController.prototype.$onInit = function () {
                    var that = this;
                    this.Init();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                    //this.InsertCustMaster.StateID = "";
                };
                PartRequestsReportComponentController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                PartRequestsReportComponentController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                PartRequestsReportComponentController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    this.ModelMasterList = this.ModelMasterloadListComponentService.Find(this.ModelMasterSearch).then((function (response) {
                        _this.ModelMasterList = _this.ModelMasterloadListComponentService.GetModelMasterloadList(response.data.Result);
                    }));
                    this.DealerService.Find(this.DealerID).then((function (response) {
                        _this.UserData = _this.DealerService.GetUser(response.data.Result);
                        console.log(_this.UserData);
                    }));
                    $("#txtCustomerName").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.CustomerAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.PartReportModel.CustomerName = ui.item.id;
                            var SelectedCustomerID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    $("#txtModel").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.ModelMasterListService.Find(request).then((function (response) {
                                var data = that.ModelMasterListService.GetModelMasterList(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.ModelNo,
                                        value: item.ModelNo,
                                        id: item.ModelID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.PartReportModel.Model = ui.item.id;
                            //console.log(that.getLeadSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            debugger;
                            that.ItemDescriptionAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.PartReportModel.ItemDescription = ui.item.id;
                            //let SelectedItemID = ui.item.id;
                            //that.QtyChange.ItemID = ui.item.id;
                            //that.Description = ui.item.value;
                        },
                        change: function () {
                        }
                    });
                    this.StateDropDownnew = this.Sservicenew.Find().then((function (response) {
                        _this.StateDropDownnew = _this.Sservicenew.GetStateNamenew(response.data.Result);
                        console.log(_this.StateDropDownnew);
                    }));
                };
                PartRequestsReportComponentController.prototype.District = function () {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.PartReportModel.State).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                PartRequestsReportComponentController.prototype.SearchModelMasterList = function () {
                    var _this = this;
                    this.ModelMasterList = this.ModelMasterListService.Find(this.ModelMasterSearch).then((function (response) {
                        _this.ModelMasterList = _this.ModelMasterListService.GetModelMasterList(response.data.Result);
                    }));
                };
                //SearchPRR(): void {
                //    this.PartReportModel.Fromdate = (<HTMLInputElement>document.getElementById("txtFromDate")).value;
                //    this.PartReportModel.Todate = (<HTMLInputElement>document.getElementById("txtToDate")).value;
                //}
                PartRequestsReportComponentController.prototype.Search = function () {
                    this.PartReportModel.FromDate = document.getElementById("txtFromDate").value;
                    this.PartReportModel.ToDate = document.getElementById("txtToDate").value;
                    this.numRecords = this.NoOfRds;
                    this.FillGrid(this.numRecords);
                    console.log(this.PartReportModel);
                    //this.PartRequestReportService.FindGrid(this.PartReportModel).then((response => {
                    //    this.FillPartReportGrid = this.PartRequestReportService.GetPartGrid(response.data.Result);
                    //}));
                };
                PartRequestsReportComponentController.prototype.BackSpaceCustomer = function (event) {
                    //alert();
                    var charCode = (window.event ? event.keyCode : event.which);
                    console.log(charCode);
                    if (charCode == 8) {
                        $('#txtCustomerName').val('');
                        this.PartReportModel.CustomerName = '';
                    }
                };
                PartRequestsReportComponentController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    // this.SearchPara.DealerID = this.DealerID;
                    this.FillPartGrid = this.PartRequestReportService.FindGrid(this.PartReportModel).then((function (response) {
                        console.log(_this.FillPartGrid);
                        _this.FillPartGrid = _this.PartRequestReportService.GetPartGrid(response.data.Result);
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.FillPartGrid.slice(0, that.numRecords);
                    }));
                };
                PartRequestsReportComponentController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                PartRequestsReportComponentController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillPartGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                PartRequestsReportComponentController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillPartGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                PartRequestsReportComponentController.prototype.Clear = function () {
                    this.PartReportModel.Model = "";
                    this.PartReportModel.ItemDescription = "";
                    this.PartReportModel.CustomerName = "";
                    this.PartReportModel.CreatedBy = "";
                    this.PartReportModel.DistrictID = "";
                    this.PartReportModel.State = "";
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    // (<HTMLInputElement>document.getElementById("txtModel")).value = "";
                    document.getElementById("txtCustomerName").value = "";
                    document.getElementById("txtDescription").value = "";
                    //$("#CreatedBy").val("");
                    $("#txtModel").val("");
                    $("#ddlState").val("");
                    $("#ddlCreatedby").val("");
                    this.DistrictDropDown = "";
                    this.FillPartGrid = "";
                    this.shownItems = null;
                    //  this.Search();
                };
                PartRequestsReportComponentController.$inject = ["CustomeraAtofillService", "StateServicenew", "DistrictService", "ModelMasterloadListComponentService", "ModelMasterListComponentService",
                    "itemDescriptionService", "PartRequestReportService", "ServiceCallAllocationUserService", "$cookieStore"];
                return PartRequestsReportComponentController;
            }());
            var PartRequestsReportComponent = /** @class */ (function () {
                function PartRequestsReportComponent() {
                    console.log("sdsasadsadsd");
                    this.controller = PartRequestsReportComponentController;
                    this.templateUrl = "/Scripts/App/Spares/PartRequestReport/Template/_PartRequestsReport.html";
                }
                PartRequestsReportComponent.Name = "partrequestsreportcomponent";
                return PartRequestsReportComponent;
            }());
            app.AddComponent(PartRequestsReportComponent.Name, new PartRequestsReportComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PartRequestsReportComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var PartRequestsReportController = /** @class */ (function (_super) {
            __extends(PartRequestsReportController, _super);
            function PartRequestsReportController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PartRequestsReportController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.PartRequestsReportController = PartRequestsReportController;
        app.AddController("PartRequestsReportController", PartRequestsReportController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PartRequestsReportController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var PartRequestReportService = /** @class */ (function (_super) {
            __extends(PartRequestReportService, _super);
            function PartRequestReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/";
                _this.Cookie = _cookieStore;
                return _this;
            }
            PartRequestReportService.prototype.FindGrid = function (data) {
                // FromDate: any, ToDate: any, SoNumber: any, ObjectTpe: any, CustName: any, Status: any
                var url = this.apiUrl + "PartRequestReport";
                var DealerID;
                var Model;
                var ItemDescription;
                var CustomerName;
                var CreatedBy;
                var Region;
                var State;
                var UserID;
                var FromDate;
                var ToDate;
                if (data.DealerID == undefined) {
                    DealerID = "";
                }
                else {
                    DealerID = data.DealerID;
                }
                if (data.Model == undefined) {
                    Model = "";
                }
                else {
                    Model = data.Model;
                }
                if (data.ItemDescription == undefined) {
                    ItemDescription = "";
                }
                else {
                    ItemDescription = data.ItemDescription;
                }
                if (data.CustomerName == undefined) {
                    CustomerName = "";
                }
                else {
                    CustomerName = data.CustomerName;
                }
                if (data.CreatedBy == undefined) {
                    CreatedBy = 0;
                }
                else {
                    CreatedBy = data.CreatedBy;
                }
                if (data.DistrictID == undefined) {
                    Region = "";
                }
                else {
                    Region = data.DistrictID;
                }
                if (data.State == undefined) {
                    State = 0;
                }
                else {
                    State = data.State;
                }
                if (data.FromDate == undefined) {
                    FromDate = '';
                }
                else {
                    FromDate = data.FromDate;
                }
                if (data.ToDate == undefined) {
                    ToDate = '';
                }
                else {
                    ToDate = data.ToDate;
                }
                var config = {
                    params: {
                        Model: Model,
                        ItemDescription: ItemDescription,
                        CustomerName: CustomerName,
                        CreatedBy: CreatedBy,
                        Region: Region,
                        State: State,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        UserID: '',
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            PartRequestReportService.prototype.GetPartGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        CustomerName: item.CustomerName,
                        Model: item.Model,
                        ItemDescription: item.ItemDescription,
                        EnquiryNo: item.EnquiryNo,
                        Type: item.PPRType,
                        EnquiryDate: item.EnquiryDate,
                        LoggedBy: item.LoggedBy,
                        Status: item.Status,
                    });
                }
                return list;
            };
            PartRequestReportService.$inject = ["$http", "$q", "$cookieStore"];
            return PartRequestReportService;
        }(GCPL.Service.BaseService));
        Service.PartRequestReportService = PartRequestReportService;
        app.AddService("PartRequestReportService", PartRequestReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PartRequestsReportService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var IServiceCallReportGridview = /** @class */ (function () {
            function IServiceCallReportGridview() {
            }
            return IServiceCallReportGridview;
        }());
        Model.IServiceCallReportGridview = IServiceCallReportGridview;
        var IWOTypeReportModel = /** @class */ (function () {
            function IWOTypeReportModel() {
            }
            return IWOTypeReportModel;
        }());
        Model.IWOTypeReportModel = IWOTypeReportModel;
        var ServiceCallReportSerachmodel = /** @class */ (function () {
            function ServiceCallReportSerachmodel() {
            }
            return ServiceCallReportSerachmodel;
        }());
        Model.ServiceCallReportSerachmodel = ServiceCallReportSerachmodel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SerCallListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var servicecallmodel = GCPL.Model.ServiceCallReportSerachmodel;
            var mandtry = GCPL.Model.Mandatory;
            var ServiceCallReportController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ServiceCallReportController(_service, _WorkOrderService, _cookieStore, _WOListReportGridService, _Custnameservice, _Sservice, _Dservice) {
                    this._cookieStore = _cookieStore;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.Cookie = null;
                    this.InsertCustMaster = null;
                    this.SelectedStateID = null;
                    this.StateID = null;
                    this.WOStatus = null;
                    this.DistrictDropDown = null;
                    this.StateDropDown = null;
                    this.StateDropDownnew = null;
                    this.Status = null;
                    this.alert = null;
                    this.UserData = null;
                    this.ServiceCallList = null;
                    this.SCStatus = null;
                    this.Mandatory = null;
                    this.SCListSerachA = null;
                    this.Service = _service;
                    this.WorkOrderService = _WorkOrderService;
                    this.Cookie = _cookieStore;
                    this.SCListSerachA = new servicecallmodel();
                    this.WOListReportGridService = _WOListReportGridService;
                    this.Custnameservice = _Custnameservice;
                    this.Sservice = _Sservice;
                    this.Districtservice = _Dservice;
                    this.Mandatory = new mandtry();
                    this.Mandatory.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                ServiceCallReportController.prototype.$onInit = function () {
                    this.Init();
                    var that = this;
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                    // this.InsertCustMaster.StateID = "";
                };
                ServiceCallReportController.prototype.Init = function () {
                    //this.WOStatus = this.WorkOrderReportListService.FindStatus("1").then((response => {
                    var _this = this;
                    //    this.WOStatus = this.WorkOrderReportListService.GetStatus(response.data.Result);
                    //}));
                    this.SCStatus = this.WOListReportGridService.FindServiceStatus("1").then((function (response) {
                        console.log(response);
                        _this.SCStatus = _this.WOListReportGridService.GetServiceStatus(response.data.Result);
                        //this.Status=1;
                    }));
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                    this.getStates();
                    var that = this;
                    $("#txtCustomer").autocomplete({
                        source: function (request, res) {
                            //this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                            console.log(this.DealerID);
                            that.Custnameservice.FilterAutoComplete(request).then((function (response) {
                                var data = that.Custnameservice.GetCustomerName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID,
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedCustomerID = ui.item.id;
                            that.SCListSerachA.CustomerID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                };
                ServiceCallReportController.prototype.BackSpaceCustomer = function (event) {
                    //alert();
                    var charCode = (window.event ? event.keyCode : event.which);
                    console.log(charCode);
                    if (charCode == 8) {
                        $('#txtCustomer').val('');
                        this.SCListSerachA.CustomerID = '';
                    }
                };
                ServiceCallReportController.prototype.Submit = function () {
                    debugger;
                    this.SCListSerachA.FromDate = document.getElementById("txtFromDate").value;
                    this.SCListSerachA.ToDate = document.getElementById("txtToDate").value;
                    //this.SCListSerachA.SCStatus = this.SCStatus;
                    console.log("dssdfsefwd");
                    console.log(this.SCListSerachA.SCStatus);
                    //this.ServiceCallList = this.Service.Find(this.SCListSerachA).then((response => {
                    //    console.log(response);
                    //    this.ServiceCallList = this.Service.GetServiceCallReportGrid(response.data.Result);
                    //}));
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                ServiceCallReportController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.ServiceCallList = this.Service.Find(this.SCListSerachA).then((function (response) {
                        _this.ServiceCallList = _this.Service.GetServiceCallReportGrid(response.data.Result);
                        _this.ServiceCallList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.ServiceCallList.slice(0, that.numRecords);
                    }));
                };
                ServiceCallReportController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                ServiceCallReportController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ServiceCallList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                ServiceCallReportController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ServiceCallList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                ServiceCallReportController.prototype.getStates = function () {
                    var _this = this;
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                };
                ServiceCallReportController.prototype.District = function () {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.SCListSerachA.State).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                ServiceCallReportController.prototype.Clear = function () {
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    document.getElementById("txtCustomer").value = "";
                    document.getElementById("txtSCNo").value = "";
                    this.SCListSerachA.CustomerID = "";
                    this.SCListSerachA.SCNo = "";
                    this.SCListSerachA.State = "";
                    this.SCListSerachA.District = "";
                    this.SCListSerachA.SCStatus = "";
                    this.DistrictDropDown = "";
                    //this.Submit();
                };
                ServiceCallReportController.prototype.clkSC = function () {
                    location.href = "#!/ServiceCallList";
                };
                ServiceCallReportController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                ServiceCallReportController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                ServiceCallReportController.prototype.downloadCSV = function (csv, filename) {
                    var csvFile;
                    var downloadLink;
                    // CSV file
                    csvFile = new Blob([csv], { type: "text/csv" });
                    // Download link
                    downloadLink = document.createElement("a");
                    // File name
                    downloadLink.download = filename;
                    // Create a link to the file
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    // Hide download link
                    downloadLink.style.display = "none";
                    // Add the link to DOM
                    document.body.appendChild(downloadLink);
                    // Click download link
                    downloadLink.click();
                };
                ServiceCallReportController.prototype.exportTableToCSV = function (filename) {
                    var csv = [];
                    var rows = document.querySelectorAll(".excel tr");
                    for (var i = 0; i < rows.length; i++) {
                        var row = [], cols = rows[i].querySelectorAll("td, th");
                        for (var j = 0; j < cols.length; j++)
                            row.push(cols[j].innerHTML);
                        csv.push(row.join(","));
                    }
                    // Download CSV file
                    this.downloadCSV(csv.join("\n"), filename);
                };
                ServiceCallReportController.$inject = ["ServiceCallReportGridService", "WorkOrderService", "$cookieStore",
                    "WOListReportGridService", "ServiceCallCustomerNameService", "StateService", "DistrictService"];
                return ServiceCallReportController;
            }());
            var ServiceCallReportComponentController = /** @class */ (function () {
                function ServiceCallReportComponentController() {
                    this.controller = ServiceCallReportController;
                    this.templateUrl = "/Scripts/App/Reports/SerCallList/Template/_SerCallList.html";
                }
                ServiceCallReportComponentController.Name = "sercalllistcomponent";
                return ServiceCallReportComponentController;
            }());
            app.AddComponent(ServiceCallReportComponentController.Name, new ServiceCallReportComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SerCallListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ServiceCallReportController = /** @class */ (function (_super) {
            __extends(ServiceCallReportController, _super);
            function ServiceCallReportController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ServiceCallReportController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ServiceCallReportController = ServiceCallReportController;
        app.AddController("ServiceCallReportController", ServiceCallReportController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SerCallListController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var IServiceCallReportGridService = /** @class */ (function (_super) {
            __extends(IServiceCallReportGridService, _super);
            function IServiceCallReportGridService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/" + "ServiceCallReport";
                _this.Cookie = _cookieStore;
                return _this;
            }
            IServiceCallReportGridService.prototype.Find = function (data) {
                console.log(data);
                var DealerID;
                var Model;
                var CustomerID;
                var SCNo;
                var SCStatus;
                var State;
                var District;
                var FromDate;
                var ToDate;
                var UserID;
                if (data.DealerID != undefined && data.DealerID != null) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = '';
                }
                if (data.Model != undefined && data.Model != null) {
                    Model = data.Model;
                }
                else {
                    Model = '';
                }
                if (data.CustomerID != undefined && data.CustomerID != null) {
                    CustomerID = data.CustomerID;
                }
                else {
                    CustomerID = '';
                }
                if (data.SCNo != undefined && data.SCNo != null) {
                    SCNo = data.SCNo;
                }
                else {
                    SCNo = '';
                }
                if (data.SCStatus != undefined && data.SCStatus != null) {
                    SCStatus = data.SCStatus;
                }
                else {
                    SCStatus = '';
                }
                if (data.State != undefined && data.State != null) {
                    State = data.State;
                }
                else {
                    State = '';
                }
                if (data.District != undefined && data.District != null) {
                    District = data.District;
                }
                else {
                    District = '';
                }
                if (data.FromDate != undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = '';
                }
                if (data.ToDate != undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                if (data.UserID != undefined && data.UserID != null) {
                    UserID = data.UserID;
                }
                else {
                    UserID = '';
                }
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        Model: Model,
                        CustomerID: CustomerID,
                        SCNo: SCNo,
                        SCstatus: SCStatus,
                        State: State,
                        District: District,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        UserID: UserID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            IServiceCallReportGridService.prototype.GetServiceCallReportGrid = function (data) {
                console.log(data);
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        CustomerID: item.CustomerID,
                        ModelNo: item.Model,
                        SCNo: item.SCNo,
                        SCCreatedOn: item.SCCreatedOn,
                        SCStatus: item.SCStatus,
                        WONo: item.WONo,
                        WOStatus: item.WOStatus,
                        AssignToUser: item.AssignToUser,
                        DealerId: item.DealerId,
                    });
                }
                return list;
            };
            IServiceCallReportGridService.prototype.FindStatus = function (data) {
                var config = {
                    params: {
                        CalledFrom: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "ServiceStatus",
                    Config: config
                });
            };
            IServiceCallReportGridService.prototype.GetStatus = function (data) {
                console.log(data);
                var obj = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    obj.push({
                        Status: item.Status,
                        ID: item.ID
                    });
                }
                return obj;
            };
            IServiceCallReportGridService.$inject = ["$http", "$q", "$cookieStore"];
            return IServiceCallReportGridService;
        }(GCPL.Service.BaseService));
        Service.IServiceCallReportGridService = IServiceCallReportGridService;
        app.AddService("ServiceCallReportGridService", IServiceCallReportGridService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SerCallListService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var IWOListReportGridService = /** @class */ (function () {
            function IWOListReportGridService() {
            }
            return IWOListReportGridService;
        }());
        Model.IWOListReportGridService = IWOListReportGridService;
        var WOListSearchReportmodel = /** @class */ (function () {
            function WOListSearchReportmodel() {
            }
            return WOListSearchReportmodel;
        }());
        Model.WOListSearchReportmodel = WOListSearchReportmodel;
        var SerCallListmodel = /** @class */ (function () {
            function SerCallListmodel() {
            }
            return SerCallListmodel;
        }());
        Model.SerCallListmodel = SerCallListmodel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WOListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var servicecallmodel = GCPL.Model.WOListSearchReportmodel;
            var SerCallListmodel = GCPL.Model.SerCallListmodel;
            var WOListController = /** @class */ (function () {
                function WOListController(_service, _cookieStore, _WorkOrderService, _WorkOrderReportListService, _Sservice, _Dservice, _Autofillservice) {
                    this._cookieStore = _cookieStore;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.ServiceCallList = null;
                    this.DealerID = null;
                    this.WorkOrdetType = null;
                    this.SerCallstatus = null;
                    this.Status = null;
                    this.SCStatus = null;
                    this.StateDropDown = null;
                    this.DistrictDropDown = null;
                    this.InsertCustMaster = null;
                    this.Cookie = null;
                    this.SCListSerachA = null;
                    this.Service = _service;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.WorkOrderReportListService = _WorkOrderReportListService;
                    this.Sservice = _Sservice;
                    this.Districtservice = _Dservice;
                    this.SCListSerachA = new servicecallmodel();
                    this.SCStatus = new SerCallListmodel();
                    this.CustomerAutofill = _Autofillservice;
                    this.WorkOrderService = _WorkOrderService;
                }
                WOListController.prototype.$onInit = function () {
                    this.Init();
                    console.log("fjhgfksgfugweu");
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                WOListController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                WOListController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                WOListController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtCustomer").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.CustomerAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedCustomerID = ui.item.id;
                            that.SCListSerachA.CustomerID = ui.item.id;
                            console.log("12345555");
                            console.log(that.SCListSerachA.CustomerID);
                        },
                        change: function () {
                        }
                    });
                    this.WorkOrdetType = this.WorkOrderService.Find().then((function (response) {
                        _this.WorkOrdetType = _this.WorkOrderService.GetWorkOrderType(response.data.Result);
                    }));
                    this.SCStatus = this.Service.FindServiceStatus("1").then((function (response) {
                        console.log(response);
                        _this.SCStatus = _this.Service.GetServiceStatus(response.data.Result);
                        //this.Status=1;
                    }));
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                    this.getStates();
                    this.Status = this.WorkOrderReportListService.FindStatus("1").then((function (response) {
                        console.log(response);
                        _this.Status = _this.WorkOrderReportListService.GetStatus(response.data.Result);
                        //this.Status=1;
                    }));
                };
                WOListController.prototype.BackSpaceCustomer = function (event) {
                    //alert();
                    var charCode = (window.event ? event.keyCode : event.which);
                    console.log(charCode);
                    if (charCode == 8) {
                        $('#txtCustomer').val('');
                        this.SCListSerachA.CustomerID = '';
                    }
                };
                WOListController.prototype.Search = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                WOListController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.SCListSerachA.FromDate = document.getElementById("txtFromDate").value;
                    this.SCListSerachA.ToDate = document.getElementById("txtToDate").value;
                    //this.SCListSerachA.status = this.Status;
                    //this.SCListSerachA.status = this.SCStatus;
                    this.ServiceCallList = this.Service.Find(this.SCListSerachA).then((function (response) {
                        _this.ServiceCallList = _this.Service.GetWOListGrid(response.data.Result);
                        _this.ServiceCallList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.ServiceCallList.slice(0, that.numRecords);
                    }));
                };
                WOListController.prototype.getStates = function () {
                    var _this = this;
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                };
                WOListController.prototype.District = function () {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.SCListSerachA.State).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                WOListController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                WOListController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ServiceCallList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                WOListController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ServiceCallList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                WOListController.prototype.Clear = function () {
                    //this.shownItems = null;
                    // this.ServiceCallList.length = 0;
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    document.getElementById("txtCustomer").value = "";
                    $("#txtWONo").val("");
                    this.SCListSerachA.WONo = $("#txtWONo").val();
                    $("#StateSelect").prop('selectedIndex', 0);
                    this.SCListSerachA.State = $("#StateSelect").val();
                    $("#DistrictSelect").prop('selectedIndex', 0);
                    this.SCListSerachA.District = $("#DistrictSelect").val();
                    $("#DistrictSelect").prop('selectedIndex', 0);
                    this.SCListSerachA.District = $("#DistrictSelect").val();
                    $("#CallStatusSelect").prop('selectedIndex', 0);
                    this.SCListSerachA.SCStatus = $("#CallStatusSelect").val();
                    // $("#WOStatusSelect").prop('selectedIndex', 0);
                    $("#WOStatusSelect").val("");
                    this.SCListSerachA.status = "";
                    this.SCListSerachA.CustomerID = "";
                    //this.Status = "";
                    this.DistrictDropDown = "";
                };
                WOListController.prototype.downloadCSV = function (csv, filename) {
                    var csvFile;
                    var downloadLink;
                    // CSV file
                    csvFile = new Blob([csv], { type: "text/csv" });
                    // Download link
                    downloadLink = document.createElement("a");
                    // File name
                    downloadLink.download = filename;
                    // Create a link to the file
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    // Hide download link
                    downloadLink.style.display = "none";
                    // Add the link to DOM
                    document.body.appendChild(downloadLink);
                    // Click download link
                    downloadLink.click();
                };
                WOListController.prototype.exportTableToCSV = function (filename) {
                    var csv = [];
                    var rows = document.querySelectorAll(".excel tr");
                    for (var i = 0; i < rows.length; i++) {
                        var row = [], cols = rows[i].querySelectorAll("td, th");
                        for (var j = 0; j < cols.length; j++)
                            row.push(cols[j].innerHTML);
                        csv.push(row.join(","));
                    }
                    // Download CSV file
                    this.downloadCSV(csv.join("\n"), filename);
                };
                WOListController.$inject = ["WOListReportGridService", "$cookieStore", "WorkOrderService", "WorkOrderReportListService", "StateService", "DistrictService",
                    "CustomeraAtofillService"];
                return WOListController;
            }());
            var WOListComponentController = /** @class */ (function () {
                function WOListComponentController() {
                    this.controller = WOListController;
                    this.templateUrl = "/Scripts/App/Reports/WOList/Template/_WOList.html";
                }
                WOListComponentController.Name = "wolistcomponent";
                return WOListComponentController;
            }());
            app.AddComponent(WOListComponentController.Name, new WOListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WOListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var WOListController = /** @class */ (function (_super) {
            __extends(WOListController, _super);
            function WOListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return WOListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.WOListController = WOListController;
        app.AddController("WOListController", WOListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WOListController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var WOListReportGridService = /** @class */ (function (_super) {
            __extends(WOListReportGridService, _super);
            function WOListReportGridService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.Cookie = null;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            WOListReportGridService.prototype.Find = function (data) {
                debugger;
                // console.log(this.apiUrl + `/FillWorkOrderSearchGrid`);
                var DealerID;
                var CustomerID;
                var WONo;
                var State;
                var District;
                var SCStatus;
                var status;
                var FromDate;
                var ToDate;
                var UserID;
                if (data.DealerID != undefined && data.DealerID != null) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = '';
                }
                if (data.CustomerID != undefined && data.CustomerID != null) {
                    CustomerID = data.CustomerID;
                }
                else {
                    CustomerID = '';
                }
                if (data.WONo != undefined && data.WONo != null) {
                    WONo = data.WONo;
                }
                else {
                    WONo = '';
                }
                if (data.State != undefined && data.State != null) {
                    State = data.State;
                }
                else {
                    State = '';
                }
                if (data.District != undefined && data.District != null) {
                    District = data.District;
                }
                else {
                    District = '';
                }
                if (data.SCStatus != undefined && data.SCStatus != null) {
                    SCStatus = data.SCStatus;
                }
                else {
                    SCStatus = '';
                }
                if (data.status != undefined && data.status != null) {
                    status = data.status;
                }
                else {
                    status = '';
                }
                if (data.FromDate != undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = '';
                }
                if (data.ToDate != undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                if (data.UserID != undefined && data.UserID != null) {
                    UserID = data.UserID;
                }
                else {
                    UserID = '';
                }
                console.log(this.apiUrl + "/WOListReport");
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        CustomerID: CustomerID,
                        WONo: WONo,
                        State: State,
                        District: District,
                        SCStatus: SCStatus,
                        status: status,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        UserID: UserID,
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    //+ `/${"FillWorkOrderSearchGrid"}`
                    Url: this.apiUrl + "/WOListReport",
                    Config: config
                });
            };
            WOListReportGridService.prototype.GetWOListGrid = function (data) {
                console.log(data);
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        DealerID: item.DealerID,
                        CustomerID: item.CustomerID,
                        ModelNo: item.ModelNo,
                        SCNo: item.SCNo,
                        SCCreatedOn: item.SCCreatedOn,
                        SCStatus: item.SCStatus,
                        WONo: item.WONo,
                        WOStatus: item.WOStatus,
                        AssignToUser: item.AssignToUser,
                        UserID: item.UserID
                    });
                }
                return list;
            };
            WOListReportGridService.prototype.FindServiceStatus = function (data) {
                var config = {
                    params: {
                        CalledFrom: 'data'
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "ServiceStatus",
                    Config: config
                });
                //ServiceStatus
            };
            WOListReportGridService.prototype.GetServiceStatus = function (data) {
                console.log("10233355555");
                console.log(data);
                var obj = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    obj.push({
                        //SCStatus: item.SCStatus,
                        Status: item.Status,
                        ID: item.ID
                    });
                }
                return obj;
            };
            WOListReportGridService.$inject = ["$http", "$q", "$cookieStore"];
            return WOListReportGridService;
        }(GCPL.Service.BaseService));
        Service.WOListReportGridService = WOListReportGridService;
        //inject service
        app.AddService("WOListReportGridService", WOListReportGridService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WOListService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var SpareReportModel = /** @class */ (function () {
            function SpareReportModel() {
            }
            return SpareReportModel;
        }());
        Model.SpareReportModel = SpareReportModel;
        var SpareReportHeader = /** @class */ (function () {
            function SpareReportHeader() {
            }
            return SpareReportHeader;
        }());
        Model.SpareReportHeader = SpareReportHeader;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SpareEnquiriesReportModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var SpareEnquiriesReportComponentController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function SpareEnquiriesReportComponentController(_Autofillservice, _ModelMasterListService, _ItemAutoservice, _Sservicenew, _Dservice, _SpareEnquiriesReportService) {
                    this.SpareReportModel = null;
                    this.StateDropDownnew = null;
                    this.SelectedStateID = null;
                    this.StateID = null;
                    this.ModelMasterList = null;
                    this.ModelMasterSearch = null;
                    this.DistrictDropDown = null;
                    this.FillSpareGrid = null;
                    this.FillSpareReportGrid = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = 10;
                    this.CustomerAutofill = _Autofillservice;
                    this.SpareReportModel = new GCPL.Model.SpareReportModel();
                    this.ModelMasterListService = _ModelMasterListService;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.Sservicenew = _Sservicenew;
                    this.Districtservice = _Dservice;
                    this.SpareEnquiriesReportService = _SpareEnquiriesReportService;
                }
                SpareEnquiriesReportComponentController.prototype.$onInit = function () {
                    var that = this;
                    this.Init();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                    //this.InsertCustMaster.StateID = "";
                };
                SpareEnquiriesReportComponentController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                SpareEnquiriesReportComponentController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                SpareEnquiriesReportComponentController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtModel").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.ModelMasterListService.Find(request).then((function (response) {
                                var data = that.ModelMasterListService.GetModelMasterList(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.ModelNo,
                                        value: item.ModelNo,
                                        id: item.ModelID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.SpareReportModel.Model = ui.item.id;
                            //console.log(that.getLeadSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            that.ItemDescriptionAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.SpareReportModel.ItemDescription = ui.item.id;
                            //let SelectedItemID = ui.item.id;
                            //that.QtyChange.ItemID = ui.item.id;
                            //that.Description = ui.item.value;
                        },
                        change: function () {
                        }
                    });
                    $("#txtCustomerName").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.CustomerAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.SpareReportModel.CustomerName = ui.item.id;
                            var SelectedCustomerID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    this.StateDropDownnew = this.Sservicenew.Find().then((function (response) {
                        _this.StateDropDownnew = _this.Sservicenew.GetStateNamenew(response.data.Result);
                        console.log(_this.StateDropDownnew);
                    }));
                };
                SpareEnquiriesReportComponentController.prototype.District = function () {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.SpareReportModel.State).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                SpareEnquiriesReportComponentController.prototype.SearchModelMasterList = function () {
                    var _this = this;
                    this.ModelMasterList = this.ModelMasterListService.Find(this.ModelMasterSearch).then((function (response) {
                        _this.ModelMasterList = _this.ModelMasterListService.GetModelMasterList(response.data.Result);
                    }));
                };
                SpareEnquiriesReportComponentController.prototype.Search = function () {
                    this.SpareReportModel.FromDate = document.getElementById("txtFromDate").value;
                    this.SpareReportModel.ToDate = document.getElementById("txtToDate").value;
                    this.numRecords = this.NoOfRds;
                    this.FillGrid(this.numRecords);
                    console.log(this.SpareReportModel);
                    //this.SpareEnquiriesReportService.FindGrid(this.SpareReportModel).then((response => {
                    //    this.FillSpareReportGrid = this.SpareEnquiriesReportService.GetSpareGrid(response.data.Result);
                    //    console.log(this.FillSpareReportGrid);
                    //}));
                };
                SpareEnquiriesReportComponentController.prototype.BackSpaceCustomer = function (event) {
                    //alert();
                    var charCode = (window.event ? event.keyCode : event.which);
                    console.log(charCode);
                    if (charCode == 8) {
                        $('#txtCustomerName').val('');
                        this.SpareReportModel.CustomerName = '';
                    }
                };
                SpareEnquiriesReportComponentController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    // this.SearchPara.DealerID = this.DealerID;
                    this.FillSpareReportGrid = this.SpareEnquiriesReportService.FindGrid(this.SpareReportModel).then((function (response) {
                        _this.FillSpareReportGrid = _this.SpareEnquiriesReportService.GetSpareGrid(response.data.Result);
                        console.log(_this.FillSpareReportGrid);
                        debugger;
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.FillSpareReportGrid.slice(0, that.numRecords);
                    }));
                };
                SpareEnquiriesReportComponentController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                SpareEnquiriesReportComponentController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillSpareReportGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                SpareEnquiriesReportComponentController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillSpareReportGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                SpareEnquiriesReportComponentController.prototype.Clear = function () {
                    this.SpareReportModel.Model = "";
                    this.SpareReportModel.ItemDescription = "";
                    this.SpareReportModel.CustomerName = "";
                    this.SpareReportModel.DistrictID = "";
                    this.SpareReportModel.State = "";
                    $("#txtModel").val("");
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    document.getElementById("txtCustomerName").value = "";
                    document.getElementById("txtDescription").value = "";
                    $("#ddlState").val("");
                    this.DistrictDropDown = "";
                    this.FillSpareReportGrid = "";
                    this.shownItems = null;
                };
                SpareEnquiriesReportComponentController.$inject = ["CustomeraAtofillService", "ModelMasterListComponentService", "itemDescriptionService", "StateServicenew", "DistrictService", "SpareEnquiriesReportService"];
                return SpareEnquiriesReportComponentController;
            }());
            var SpareEnquiriesReportComponent = /** @class */ (function () {
                function SpareEnquiriesReportComponent() {
                    this.controller = SpareEnquiriesReportComponentController;
                    this.templateUrl = "/Scripts/App/Reports/SpareEnquiriesReport/Template/_SpareEnquiriesReport.html";
                }
                SpareEnquiriesReportComponent.Name = "spareenquiriesreportcomponent";
                return SpareEnquiriesReportComponent;
            }());
            app.AddComponent(SpareEnquiriesReportComponent.Name, new SpareEnquiriesReportComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SpareEnquiriesReportComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var SpareEnquiriesReportController = /** @class */ (function (_super) {
            __extends(SpareEnquiriesReportController, _super);
            function SpareEnquiriesReportController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SpareEnquiriesReportController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.SpareEnquiriesReportController = SpareEnquiriesReportController;
        app.AddController("SpareEnquiriesReportController", SpareEnquiriesReportController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SpareEnquiriesReportController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var SpareEnquiriesReportService = /** @class */ (function (_super) {
            __extends(SpareEnquiriesReportService, _super);
            function SpareEnquiriesReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/";
                _this.Cookie = _cookieStore;
                return _this;
            }
            SpareEnquiriesReportService.prototype.FindGrid = function (data) {
                // FromDate: any, ToDate: any, SoNumber: any, ObjectTpe: any, CustName: any, Status: any
                debugger;
                var url = this.apiUrl + "SpareEnquiriesReport";
                var Model;
                var ItemDescription;
                var CustomerName;
                var Region;
                var State;
                var FromDate;
                var ToDate;
                if (data.Model == undefined) {
                    Model = '';
                }
                else {
                    Model = data.Model;
                }
                if (data.ItemDescription == undefined) {
                    ItemDescription = '';
                }
                else {
                    ItemDescription = data.ItemDescription;
                }
                if (data.CustomerName == undefined) {
                    CustomerName = '';
                }
                else {
                    CustomerName = data.CustomerName;
                }
                if (data.DistrictID == undefined) {
                    Region = '';
                }
                else {
                    Region = data.DistrictID;
                }
                if (data.State == undefined) {
                    State = '';
                }
                else {
                    State = data.State;
                }
                if (data.FromDate == undefined) {
                    FromDate = '';
                }
                else {
                    FromDate = data.FromDate;
                }
                if (data.ToDate == undefined) {
                    ToDate = '';
                }
                else {
                    ToDate = data.ToDate;
                }
                var config = {
                    params: {
                        Model: Model,
                        ItemDescription: ItemDescription,
                        CustomerName: CustomerName,
                        Region: Region,
                        State: State,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            SpareEnquiriesReportService.prototype.GetSpareGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        CustomerName: item.CustomerName,
                        Model: item.Model,
                        ItemDescription: item.ItemDescription,
                        EnquiryNo: item.EnquiryNo,
                        Type: item.PPRType,
                        EnquiryDate: item.EnquiryDate,
                        LoggedBy: item.LoggedBy,
                        Status: item.Status,
                    });
                }
                debugger;
                return list;
            };
            SpareEnquiriesReportService.$inject = ["$http", "$q", "$cookieStore"];
            return SpareEnquiriesReportService;
        }(GCPL.Service.BaseService));
        Service.SpareEnquiriesReportService = SpareEnquiriesReportService;
        app.AddService("SpareEnquiriesReportService", SpareEnquiriesReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SpareEnquiriesReportService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var LeadSalesRepSearch = /** @class */ (function () {
            function LeadSalesRepSearch() {
            }
            return LeadSalesRepSearch;
        }());
        Model.LeadSalesRepSearch = LeadSalesRepSearch;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesRepLeadsModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var SalesRepLeadsController = /** @class */ (function (_super) {
            __extends(SalesRepLeadsController, _super);
            function SalesRepLeadsController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SalesRepLeadsController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.SalesRepLeadsController = SalesRepLeadsController;
        app.AddController("SalesRepLeadsController", SalesRepLeadsController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesRepLeadsController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var SalesRepSearch = GCPL.Model.LeadSalesRepSearch;
            var SaleRepLeadListCount = GCPL.Model.TotalWinLossleadValue;
            var SalesRepLeadsController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function SalesRepLeadsController(_leaddescription, _PipelineOrderReportService, _Sservice, _Dservice, _SalesRepReportService, _SalesRepReportCountService, _getAutoSalesrep, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.LeadSalesRepList = null;
                    this.getSalesRepSearch = null;
                    this.getLeadCount = null;
                    this.StateDropDown = null;
                    this.DistrictDropDown = null;
                    this.GetPipelineOrderProbability = null;
                    this.GetPipelineOrderStatus = null;
                    this.GetPipelineOrderSalesStage = null;
                    this.Cookie = null;
                    this.leaddescription = _leaddescription;
                    this.PipelineListReportService = _PipelineOrderReportService;
                    this.Sservice = _Sservice;
                    this.Districtservice = _Dservice;
                    this.SalesRepReportService = _SalesRepReportService;
                    this.SalesRepReportCountService = _SalesRepReportCountService;
                    this.getAutoSalesrep = _getAutoSalesrep;
                    this.Cookie = _cookieStore;
                    this.getSalesRepSearch = new SalesRepSearch();
                    this.getLeadCount = new SaleRepLeadListCount();
                    this.LeadSalesRepList = new Array();
                }
                SalesRepLeadsController.prototype.$onInit = function () {
                    this.Init();
                    var that = this;
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                SalesRepLeadsController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                SalesRepLeadsController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                SalesRepLeadsController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    var filters;
                    $("#txtSalesRep").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.getAutoSalesrep.FilterAutoComplete(request).then((function (response) {
                                var data = that.getAutoSalesrep.GetAutoFillSalesRep(response.data.Result);
                                console.log(data);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Name,
                                        value: item.Name,
                                        id: item.UserID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.getSalesRepSearch.SaleRep = ui.item.id;
                            //console.log(that.getLeadSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            that.leaddescription.FilterAutoComplete(request).then((function (response) {
                                var data = that.leaddescription.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //that.SelectedItemPrice(ui.item.id);
                            that.getSalesRepSearch.Itemcode = ui.item.id;
                            //that.getLeadSearch.ItemDescription = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    $("#txtModel").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.PipelineListReportService.FindModel(request).then((function (response) {
                                var data = that.PipelineListReportService.GetModel(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.ModelNo,
                                        value: item.ModelNo,
                                        id: item.ModelID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.getSalesRepSearch.ModelID = ui.item.id;
                            //console.log(that.getLeadSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                    this.PipelineListReportService.FindSalesStage().then((function (response) {
                        _this.GetPipelineOrderSalesStage = _this.PipelineListReportService.GetSalesStage(response.data.Result);
                    }));
                    this.PipelineListReportService.FindPipelineStatus().then((function (response) {
                        _this.GetPipelineOrderStatus = _this.PipelineListReportService.GetPipelineStatus(response.data.Result);
                    }));
                    this.PipelineListReportService.FindProbability().then((function (response) {
                        _this.GetPipelineOrderProbability = _this.PipelineListReportService.GetProbability(response.data.Result);
                    }));
                };
                SalesRepLeadsController.prototype.District = function (data) {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.getSalesRepSearch.stateId).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                SalesRepLeadsController.prototype.Search = function () {
                    var _this = this;
                    this.getSalesRepSearch.FromDate = document.getElementById("txtFromDate").value;
                    this.getSalesRepSearch.ToDate = document.getElementById("txtToDate").value;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                    this.SalesRepReportCountService.FindSalesReptotal(this.getSalesRepSearch).then((function (response) {
                        _this.getLeadCount = _this.SalesRepReportCountService.GetSalesRepListTotal(response.data.Result);
                    }));
                };
                SalesRepLeadsController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.LeadSalesRepList = this.SalesRepReportService.Find(this.getSalesRepSearch).then((function (response) {
                        _this.LeadSalesRepList = _this.SalesRepReportService.GetSalesrepGrid(response.data.Result);
                        if (_this.LeadSalesRepList.length > 0) {
                            $("#nullDataDiv").hide();
                            _this.LeadSalesRepList.forEach(function (value, key) {
                                that.incre = parseInt(key) + 1;
                            });
                            _this.maxPages = (that.incre / that.numRecords);
                            _this.ShowBack = false;
                            _this.ShowNext = that.maxPages > 1 ? true : false;
                            _this.shownItems = _this.LeadSalesRepList.slice(0, that.numRecords);
                        }
                        else {
                            $("#nullDataDiv").show();
                        }
                    }));
                };
                SalesRepLeadsController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                SalesRepLeadsController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.LeadSalesRepList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                SalesRepLeadsController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.LeadSalesRepList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                SalesRepLeadsController.prototype.Clear = function () {
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    this.getSalesRepSearch.SaleRep = "";
                    this.getSalesRepSearch.ModelID = "";
                    this.getSalesRepSearch.Itemcode = "";
                    this.getSalesRepSearch.Region = "";
                    this.getSalesRepSearch.stateId = "";
                    this.getSalesRepSearch.FromDate = "";
                    this.getSalesRepSearch.ToDate = "";
                    this.getSalesRepSearch.StatusID = "";
                    this.getSalesRepSearch.ProbabilityID = "";
                    this.getSalesRepSearch.StageID = "";
                    $("#txtSalesRep").val("");
                    $("#txtModel").val("");
                    $("#txtDescription").val("");
                    $("#ddlstate").val("");
                    $("#ddlRegion").val("");
                    this.DistrictDropDown = "";
                    // $("#ddlRegion").empty();
                    $("#FromDate").val("");
                    $("#ToDate").val("");
                    $("#ddlstage").val("");
                    $("#ddlstatus").val("");
                    $("#ddlprob").val("");
                };
                SalesRepLeadsController.prototype.downloadCSV = function (csv, filename) {
                    var csvFile;
                    var downloadLink;
                    // CSV file
                    csvFile = new Blob([csv], { type: "text/csv" });
                    // Download link
                    downloadLink = document.createElement("a");
                    // File name
                    downloadLink.download = filename;
                    // Create a link to the file
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    // Hide download link
                    downloadLink.style.display = "none";
                    // Add the link to DOM
                    document.body.appendChild(downloadLink);
                    // Click download link
                    downloadLink.click();
                };
                SalesRepLeadsController.prototype.exportTableToCSV = function (filename) {
                    var csv = [];
                    var rows = document.querySelectorAll(".excel tr");
                    for (var i = 0; i < rows.length; i++) {
                        var row = [], cols = rows[i].querySelectorAll("td, th");
                        for (var j = 0; j < cols.length; j++)
                            row.push(cols[j].innerHTML);
                        csv.push(row.join(","));
                    }
                    // Download CSV file
                    this.downloadCSV(csv.join("\n"), filename);
                };
                SalesRepLeadsController.$inject = ["itemDescriptionService", "PipelineOrderReportService", "StateService", "DistrictService", "SalesRepReportService", "FillSalesrepCountService", "SalesRepaAutofillService", "$cookieStore"];
                return SalesRepLeadsController;
            }());
            var SalesRepLeadsComponentController = /** @class */ (function () {
                function SalesRepLeadsComponentController() {
                    this.controller = SalesRepLeadsController;
                    this.templateUrl = "/Scripts/App/LeadModelReport/SalesRepLeads/Template/_SalesRepLeads.html";
                }
                SalesRepLeadsComponentController.Name = "salesrepleadscomponent";
                return SalesRepLeadsComponentController;
            }());
            app.AddComponent(SalesRepLeadsComponentController.Name, new SalesRepLeadsComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesRepLeadsComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var SalesRepReportService = /** @class */ (function (_super) {
            __extends(SalesRepReportService, _super);
            function SalesRepReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            SalesRepReportService.prototype.Find = function (data) {
                var url = this.apiUrl + "/SalesRepLeads";
                var Model;
                var FromDate;
                var ToDate;
                var Itemcode;
                var Region;
                var stateId;
                var SalesStage;
                var probability;
                var Status;
                var SaleRep;
                if (data.ModelID == undefined) {
                    Model = '';
                }
                else {
                    Model = data.ModelID;
                }
                if (data.FromDate == undefined) {
                    FromDate = '';
                }
                else {
                    FromDate = data.FromDate;
                }
                if (data.ToDate == undefined) {
                    ToDate = '';
                }
                else {
                    ToDate = data.ToDate;
                }
                if (data.Itemcode == undefined) {
                    Itemcode = '';
                }
                else {
                    Itemcode = data.Itemcode;
                }
                if (data.Region == undefined) {
                    Region = '';
                }
                else {
                    Region = data.Region;
                }
                if (data.stateId == undefined) {
                    stateId = '';
                }
                else {
                    stateId = data.stateId;
                }
                if (data.StageID == undefined) {
                    SalesStage = '';
                }
                else {
                    SalesStage = data.StageID;
                }
                if (data.ProbabilityID == undefined) {
                    probability = '';
                }
                else {
                    probability = data.ProbabilityID;
                }
                if (data.StatusID == undefined) {
                    Status = '';
                }
                else {
                    Status = data.StatusID;
                }
                if (data.SaleRep == undefined) {
                    SaleRep = '';
                }
                else {
                    SaleRep = data.SaleRep;
                }
                var config = {
                    params: {
                        Model: Model,
                        Fromdate: FromDate,
                        ToDate: ToDate,
                        Itemcode: Itemcode,
                        Region: Region,
                        stateId: stateId,
                        SalesStage: SalesStage,
                        probability: probability,
                        Status: Status,
                        SaleRep: SaleRep,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        UserID: this.Cookie.get('UserInfo')['UserID'],
                        RoleID: this.Cookie.get('UserInfo')['RoleID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            SalesRepReportService.prototype.GetSalesrepGrid = function (data) {
                //console.log(data);
                var list = Array();
                console.log("1223656555");
                console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        LeadId: item.LeadID,
                        CustomerName: item.CustomerName,
                        Model: item.ModelNo,
                        ItemDescription: item.Description,
                        Probability: item.SalesProbability,
                        LeadNo: item.LeadNo,
                        Creationdate: item.Creationdate,
                        Status: item.Status,
                        Stage: item.SalesStage,
                        quantity: item.Quantity,
                        Price: item.ItemPrice,
                        SaleRep: item.salesRep,
                        Reason: item.Reason
                    });
                }
                return list;
            };
            SalesRepReportService.$inject = ["$http", "$q", "$cookieStore"];
            return SalesRepReportService;
        }(GCPL.Service.BaseService));
        Service.SalesRepReportService = SalesRepReportService;
        app.AddService("SalesRepReportService", SalesRepReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var FillSalesrepCountService = /** @class */ (function (_super) {
            __extends(FillSalesrepCountService, _super);
            function FillSalesrepCountService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            FillSalesrepCountService.prototype.FindSalesReptotal = function (data) {
                var url = this.apiUrl + "/SalesRepLeadsCount";
                var Model;
                var FromDate;
                var ToDate;
                var Itemcode;
                var Region;
                var stateId;
                var SalesStage;
                var probability;
                var Status;
                var SaleRep;
                if (data.ModelID == undefined) {
                    Model = '';
                }
                else {
                    Model = data.ModelID;
                }
                if (data.FromDate == undefined) {
                    FromDate = '';
                }
                else {
                    FromDate = data.FromDate;
                }
                if (data.ToDate == undefined) {
                    ToDate = '';
                }
                else {
                    ToDate = data.ToDate;
                }
                if (data.Itemcode == undefined) {
                    Itemcode = '';
                }
                else {
                    Itemcode = data.Itemcode;
                }
                if (data.Region == undefined) {
                    Region = '';
                }
                else {
                    Region = data.Region;
                }
                if (data.stateId == undefined) {
                    stateId = '';
                }
                else {
                    stateId = data.stateId;
                }
                if (data.StageID == undefined) {
                    SalesStage = '';
                }
                else {
                    SalesStage = data.StageID;
                }
                if (data.ProbabilityID == undefined) {
                    probability = '';
                }
                else {
                    probability = data.ProbabilityID;
                }
                if (data.StatusID == undefined) {
                    Status = '';
                }
                else {
                    Status = data.StatusID;
                }
                if (data.SaleRep == undefined) {
                    SaleRep = '';
                }
                else {
                    SaleRep = data.SaleRep;
                }
                console.log("aaaaaaaaaaaaaaaa");
                console.log(FromDate);
                var config = {
                    params: {
                        Model: Model,
                        Fromdate: FromDate,
                        ToDate: ToDate,
                        Itemcode: Itemcode,
                        Region: Region,
                        stateId: stateId,
                        SalesStage: SalesStage,
                        probability: probability,
                        Status: Status,
                        SaleRep: SaleRep,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        UserID: this.Cookie.get('UserInfo')['UserID'],
                        RoleID: this.Cookie.get('UserInfo')['RoleID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            FillSalesrepCountService.prototype.GetSalesRepListTotal = function (data) {
                console.log(data);
                var list = new model.TotalWinLossleadValue();
                if (data == null || data == undefined) {
                    list.TotalLeadCreated = "";
                    list.Lost = "";
                    list.Abandoned = "";
                    list.NoDeal = "";
                    list.Inprocess = "";
                    list.Won = "";
                    list.Allocated = "";
                    list.QuoteCreated = "";
                    list.Created = "";
                    list.Closed = "";
                    list.Invalid = "";
                }
                else {
                    list.TotalLeadCreated = data.TotalLeadCreated;
                    list.Inprocess = data.Inprocess;
                    list.Won = data.Won;
                    list.Lost = data.Lost;
                    list.Abandoned = data.Abandoned;
                    list.NoDeal = data.Nodeal;
                    list.Allocated = data.Allocated;
                    list.QuoteCreated = data.QuoteCreated;
                    list.Created = data.Created;
                    list.Closed = data.Closed;
                    list.Invalid = data.Invalid;
                    //console.log(list);
                }
                return list;
            };
            FillSalesrepCountService.$inject = ["$http", "$q", "$cookieStore"];
            return FillSalesrepCountService;
        }(GCPL.Service.BaseService));
        Service.FillSalesrepCountService = FillSalesrepCountService;
        app.AddService("FillSalesrepCountService", FillSalesrepCountService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesRepLeadsService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var LeadSalesProbabilitySearch = /** @class */ (function () {
            function LeadSalesProbabilitySearch() {
            }
            return LeadSalesProbabilitySearch;
        }());
        Model.LeadSalesProbabilitySearch = LeadSalesProbabilitySearch;
        var SalesProbLeadGrid = /** @class */ (function () {
            function SalesProbLeadGrid() {
            }
            return SalesProbLeadGrid;
        }());
        Model.SalesProbLeadGrid = SalesProbLeadGrid;
        var SalesProbCount = /** @class */ (function () {
            function SalesProbCount() {
            }
            return SalesProbCount;
        }());
        Model.SalesProbCount = SalesProbCount;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesProbabilityModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var SalesProbabilityController = /** @class */ (function (_super) {
            __extends(SalesProbabilityController, _super);
            function SalesProbabilityController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SalesProbabilityController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.SalesProbabilityController = SalesProbabilityController;
        app.AddController("SalesProbabilityController", SalesProbabilityController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesProbabilityController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var SalesProbSearch = GCPL.Model.LeadSalesProbabilitySearch;
            var SalesProbabilityController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function SalesProbabilityController(_getAutoSalesrep, _leaddescription, _PipelineOrderReportService, _Sservice, _Dservice, _SalesProbReportService, _SalesProbabilityCountService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.LeadSalesProbList = null;
                    this.getSalesProbCount = null;
                    this.getSalesProSearch = null;
                    this.StateDropDown = null;
                    this.DistrictDropDown = null;
                    this.GetPipelineOrderProbability = null;
                    this.GetPipelineOrderPurchaseWithin = null;
                    this.Cookie = null;
                    this.getAutoSalesrep = _getAutoSalesrep;
                    this.leaddescription = _leaddescription;
                    this.PipelineListReportService = _PipelineOrderReportService;
                    this.Sservice = _Sservice;
                    this.Districtservice = _Dservice;
                    this.SalesProbReportService = _SalesProbReportService;
                    this.SalesProbabilityCountService = _SalesProbabilityCountService;
                    this.Cookie = _cookieStore;
                    this.getSalesProSearch = new SalesProbSearch();
                    this.LeadSalesProbList = new Array();
                    this.getSalesProbCount = new Array();
                }
                SalesProbabilityController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                SalesProbabilityController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    var filters;
                    $("#txtSalesRep").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.getAutoSalesrep.FilterAutoComplete(request).then((function (response) {
                                var data = that.getAutoSalesrep.GetAutoFillSalesRep(response.data.Result);
                                console.log(data);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Name,
                                        value: item.Name,
                                        id: item.UserID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.getSalesProSearch.SaleRep = ui.item.id;
                            //console.log(that.getLeadSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            that.leaddescription.FilterAutoComplete(request).then((function (response) {
                                var data = that.leaddescription.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //that.SelectedItemPrice(ui.item.id);
                            that.getSalesProSearch.Itemcode = ui.item.id;
                            //that.getLeadSearch.ItemDescription = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    $("#txtModel").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.PipelineListReportService.FindModel(request).then((function (response) {
                                var data = that.PipelineListReportService.GetModel(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.ModelNo,
                                        value: item.ModelNo,
                                        id: item.ModelID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.getSalesProSearch.ModelID = ui.item.id;
                            //console.log(that.getLeadSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                    this.PipelineListReportService.FindProbability().then((function (response) {
                        _this.GetPipelineOrderProbability = _this.PipelineListReportService.GetProbability(response.data.Result);
                    }));
                    this.PipelineListReportService.FindPurchaseWithin().then((function (response) {
                        _this.GetPipelineOrderPurchaseWithin = _this.PipelineListReportService.GetPurchaseWithin(response.data.Result);
                    }));
                };
                SalesProbabilityController.prototype.District = function (data) {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.getSalesProSearch.stateId).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                SalesProbabilityController.prototype.Search = function () {
                    var _this = this;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                    this.SalesProbabilityCountService.FindTotalSalesProb(this.getSalesProSearch).then((function (response) {
                        _this.getSalesProbCount = _this.SalesProbabilityCountService.GetTotalSalesProb(response.data.Result);
                        if (_this.getSalesProbCount.length > 0) {
                            $("#nullDataDiv").hide();
                        }
                        else {
                            $("#nullDataDiv").show();
                        }
                    }));
                };
                SalesProbabilityController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.LeadSalesProbList = this.SalesProbReportService.Find(this.getSalesProSearch).then((function (response) {
                        _this.LeadSalesProbList = _this.SalesProbReportService.GetSaleProbLeadListGrid(response.data.Result);
                        //console.log("sales proba gridvalue");
                        //console.log(this.getSalesProSearch);
                        if (_this.LeadSalesProbList.length > 0) {
                            $("#nullDataDiv").hide();
                            _this.LeadSalesProbList.forEach(function (value, key) {
                                that.incre = parseInt(key) + 1;
                            });
                            _this.maxPages = (that.incre / that.numRecords);
                            _this.ShowBack = false;
                            _this.ShowNext = that.maxPages > 1 ? true : false;
                            _this.shownItems = _this.LeadSalesProbList.slice(0, that.numRecords);
                        }
                        else {
                            $("#nullDataDiv").show();
                        }
                    }));
                };
                SalesProbabilityController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                SalesProbabilityController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.LeadSalesProbList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                SalesProbabilityController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.LeadSalesProbList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                SalesProbabilityController.prototype.Clear = function () {
                    this.getSalesProSearch.ModelID = "";
                    this.getSalesProSearch.Itemcode = "";
                    this.getSalesProSearch.Region = "";
                    this.getSalesProSearch.stateId = "";
                    this.getSalesProSearch.PurchaseTimelineID = "";
                    this.getSalesProSearch.SaleRep = "";
                    this.getSalesProSearch.ProbabilityID = "";
                    $("#txtSalesRep").val("");
                    $("#txtModel").val("");
                    $("#txtDescription").val("");
                    $("#ddlstate").val("");
                    $("#ddlRegion").val("");
                    this.DistrictDropDown = "";
                    $("#ddlPurchase").val("");
                    $("#ddlprob").val("");
                };
                SalesProbabilityController.prototype.downloadCSV = function (csv, filename) {
                    var csvFile;
                    var downloadLink;
                    // CSV file
                    csvFile = new Blob([csv], { type: "text/csv" });
                    // Download link
                    downloadLink = document.createElement("a");
                    // File name
                    downloadLink.download = filename;
                    // Create a link to the file
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    // Hide download link
                    downloadLink.style.display = "none";
                    // Add the link to DOM
                    document.body.appendChild(downloadLink);
                    // Click download link
                    downloadLink.click();
                };
                SalesProbabilityController.prototype.exportTableToCSV = function (filename) {
                    var csv = [];
                    var rows = document.querySelectorAll(".excel tr");
                    for (var i = 0; i < rows.length; i++) {
                        var row = [], cols = rows[i].querySelectorAll("td, th");
                        for (var j = 0; j < cols.length; j++)
                            row.push(cols[j].innerHTML);
                        csv.push(row.join(","));
                    }
                    // Download CSV file
                    this.downloadCSV(csv.join("\n"), filename);
                };
                SalesProbabilityController.$inject = ["SalesRepaAutofillService", "itemDescriptionService", "PipelineOrderReportService", "StateService", "DistrictService", "SalesProbLeadGridfillService", "FillSalesProbabilityCountService", "$cookieStore"];
                return SalesProbabilityController;
            }());
            var SalesProbabilityComponentController = /** @class */ (function () {
                function SalesProbabilityComponentController() {
                    this.controller = SalesProbabilityController;
                    this.templateUrl = "/Scripts/App/LeadModelReport/SalesProbability/Template/_SalesProbability.html";
                }
                SalesProbabilityComponentController.Name = "salesprobabilitycomponent";
                return SalesProbabilityComponentController;
            }());
            app.AddComponent(SalesProbabilityComponentController.Name, new SalesProbabilityComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesProbabilityComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
//FillGrid of Lead details
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var SalesProbLeadGridfillService = /** @class */ (function (_super) {
            __extends(SalesProbLeadGridfillService, _super);
            function SalesProbLeadGridfillService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            SalesProbLeadGridfillService.prototype.Find = function (data) {
                var url = this.apiUrl + "/SalesProbailityLeadReport";
                var SaleRep;
                var Model;
                var Itemcode;
                var Region;
                var stateId;
                var PurchaseTimelineID;
                var ProbabilityID;
                if (data.SaleRep == undefined) {
                    SaleRep = '';
                }
                else {
                    SaleRep = data.SaleRep;
                }
                if (data.ModelID == undefined) {
                    Model = '';
                }
                else {
                    Model = data.ModelID;
                }
                if (data.Itemcode == undefined) {
                    Itemcode = '';
                }
                else {
                    Itemcode = data.Itemcode;
                }
                if (data.Region == undefined) {
                    Region = '';
                }
                else {
                    Region = data.Region;
                }
                if (data.stateId == undefined) {
                    stateId = '';
                }
                else {
                    stateId = data.stateId;
                }
                if (data.PurchaseTimelineID == undefined) {
                    PurchaseTimelineID = '';
                }
                else {
                    PurchaseTimelineID = data.PurchaseTimelineID;
                }
                if (data.ProbabilityID == undefined) {
                    ProbabilityID = '';
                }
                else {
                    ProbabilityID = data.ProbabilityID;
                }
                console.log(data);
                var config = {
                    params: {
                        SaleRep: SaleRep,
                        Model: Model,
                        Itemcode: Itemcode,
                        Region: Region,
                        stateId: stateId,
                        PurchaseTimelineID: PurchaseTimelineID,
                        ProbabilityID: ProbabilityID,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        UserID: this.Cookie.get('UserInfo')['UserID'],
                        RoleID: this.Cookie.get('UserInfo')['RoleID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            SalesProbLeadGridfillService.prototype.GetSaleProbLeadListGrid = function (data) {
                //console.log(data);
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        LeadId: item.LeadID,
                        CustomerName: item.CustomerName,
                        Model: item.ModelNo,
                        ItemDescription: item.Description,
                        Probability: item.SalesProbability,
                        LeadNo: item.LeadNo,
                        PurchaseWithin: item.purchaseWithin,
                        Status: item.Status,
                        Stage: item.SalesStage,
                        quantity: item.Quantity,
                        Price: item.ItemPrice,
                        SaleRep: item.salesRep,
                        State: item.State,
                        Regionname: item.Regionname
                    });
                }
                return list;
            };
            SalesProbLeadGridfillService.$inject = ["$http", "$q", "$cookieStore"];
            return SalesProbLeadGridfillService;
        }(GCPL.Service.BaseService));
        Service.SalesProbLeadGridfillService = SalesProbLeadGridfillService;
        app.AddService("SalesProbLeadGridfillService", SalesProbLeadGridfillService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//fill Sales probability count
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var FillSalesProbabilityCountService = /** @class */ (function (_super) {
            __extends(FillSalesProbabilityCountService, _super);
            function FillSalesProbabilityCountService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            FillSalesProbabilityCountService.prototype.FindTotalSalesProb = function (data) {
                var url = this.apiUrl + "/SalesRepLeadsCount";
                var SaleRep;
                var Model;
                var Itemcode;
                var Region;
                var stateId;
                var PurchaseTimelineID;
                var ProbabilityID;
                if (data.SaleRep == undefined) {
                    SaleRep = '';
                }
                else {
                    SaleRep = data.SaleRep;
                }
                if (data.ModelID == undefined) {
                    Model = '';
                }
                else {
                    Model = data.ModelID;
                }
                if (data.Itemcode == undefined) {
                    Itemcode = '';
                }
                else {
                    Itemcode = data.Itemcode;
                }
                if (data.Region == undefined) {
                    Region = '';
                }
                else {
                    Region = data.Region;
                }
                if (data.stateId == undefined) {
                    stateId = '';
                }
                else {
                    stateId = data.stateId;
                }
                if (data.PurchaseTimelineID == undefined) {
                    PurchaseTimelineID = '';
                }
                else {
                    PurchaseTimelineID = data.PurchaseTimelineID;
                }
                if (data.ProbabilityID == undefined) {
                    ProbabilityID = '';
                }
                else {
                    ProbabilityID = data.ProbabilityID;
                }
                // console.log("aaaaaaaaaaaaaaaa");
                //console.log(FromDate);
                var config = {
                    params: {
                        SaleRep: SaleRep,
                        Model: Model,
                        Itemcode: Itemcode,
                        Region: Region,
                        stateId: stateId,
                        PurchaseTimelineID: PurchaseTimelineID,
                        ProbabilityID: ProbabilityID,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        UserID: this.Cookie.get('UserInfo')['UserID'],
                        RoleID: this.Cookie.get('UserInfo')['RoleID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            FillSalesProbabilityCountService.prototype.GetTotalSalesProb = function (data) {
                console.log(data);
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        SalesProbability: item.SalesProbability,
                        NoofLeads: item.NoofLeads,
                        TotalQty: item.TotalQty
                    });
                }
                return list;
            };
            FillSalesProbabilityCountService.$inject = ["$http", "$q", "$cookieStore"];
            return FillSalesProbabilityCountService;
        }(GCPL.Service.BaseService));
        Service.FillSalesProbabilityCountService = FillSalesProbabilityCountService;
        app.AddService("FillSalesProbabilityCountService", FillSalesProbabilityCountService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesProbabilityService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var IServiceTechnicianListReportGridService = /** @class */ (function () {
            function IServiceTechnicianListReportGridService() {
            }
            return IServiceTechnicianListReportGridService;
        }());
        Model.IServiceTechnicianListReportGridService = IServiceTechnicianListReportGridService;
        var ServiceTechnicianSearchReportmodel = /** @class */ (function () {
            function ServiceTechnicianSearchReportmodel() {
            }
            return ServiceTechnicianSearchReportmodel;
        }());
        Model.ServiceTechnicianSearchReportmodel = ServiceTechnicianSearchReportmodel;
        var ServiceTechAvgReportmodel = /** @class */ (function () {
            function ServiceTechAvgReportmodel() {
            }
            return ServiceTechAvgReportmodel;
        }());
        Model.ServiceTechAvgReportmodel = ServiceTechAvgReportmodel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ServiceTechDataModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var servicecallmodel = GCPL.Model.ServiceTechnicianSearchReportmodel;
            var ServiceTechDataController = /** @class */ (function () {
                function ServiceTechDataController(_service, _cookieStore, _WorkOrderService, _WorkOrderReportListService, _Sservice, _Dservice, _Autofillservice, _UserNameService) {
                    this._cookieStore = _cookieStore;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.UserName = null;
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.ServiceTechDataList = null;
                    this.ServiceTechAvgDataList = null;
                    this.DealerID = null;
                    this.WorkOrdetType = null;
                    this.SerCallstatus = null;
                    this.Status = null;
                    this.SCStatus = null;
                    this.StateDropDown = null;
                    this.DistrictDropDown = null;
                    this.InsertCustMaster = null;
                    this.Cookie = null;
                    this.ServiceTechDataSerachA = null;
                    this.Service = _service;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.WorkOrderReportListService = _WorkOrderReportListService;
                    this.Sservice = _Sservice;
                    this.Districtservice = _Dservice;
                    this.ServiceTechDataSerachA = new servicecallmodel();
                    // this.SCStatus = new SerCallListmodel();
                    this.CustomerAutofill = _Autofillservice;
                    this.WorkOrderService = _WorkOrderService;
                    this.UserNameService = _UserNameService;
                }
                ServiceTechDataController.prototype.$onInit = function () {
                    this.Init();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                ServiceTechDataController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                ServiceTechDataController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                ServiceTechDataController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtUserName").autocomplete({
                        source: function (request, res) {
                            that.UserNameService.FilterAutoComplete(request).then((function (response) {
                                var data = that.UserNameService.GetUserName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Name,
                                        value: item.Name,
                                        id: item.UserID,
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            console.log(ui.item.id);
                            var UserID = ui.item.id;
                            //that.ShowEmpCode(UserID);  /*use for textchange*/
                            //console.log(ui.item.UserID);
                            //let SelectedUserID = ui.item.UserID;
                            //that.ShowEmpCode(ui.item.UserID);
                            this.UserID = ui.item.id;
                            that.ServiceTechDataSerachA.SerTechUserID = this.UserID;
                        },
                        change: function () {
                        }
                    });
                    // let that = this;
                    $("#txtCustomer").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.CustomerAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedCustomerID = ui.item.id;
                            that.ServiceTechDataSerachA.CustomerID = ui.item.id;
                            console.log("12345555");
                            console.log(that.ServiceTechDataSerachA.CustomerID);
                        },
                        change: function () {
                        }
                    });
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                    // this.getStates();
                    this.Status = this.WorkOrderReportListService.FindStatus("1").then((function (response) {
                        console.log(response);
                        _this.Status = _this.WorkOrderReportListService.GetStatus(response.data.Result);
                        //this.Status=1;
                    }));
                    this.SCStatus = this.Service.FindSCDataStatus("1").then((function (response) {
                        console.log(response);
                        _this.SCStatus = _this.Service.GetSCDataStatus(response.data.Result);
                        //this.Status=1;
                    }));
                };
                ServiceTechDataController.prototype.Search = function () {
                    var _this = this;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                    //debugger;
                    this.ServiceTechAvgDataList = this.Service.FindAvg(this.ServiceTechDataSerachA).then((function (response) {
                        _this.ServiceTechAvgDataList = _this.Service.GetServiceTechAvgDataGrid(response.data.Result);
                        // this.ServiceTechAvgDataList.forEach(function (value, key) {
                    }));
                };
                ServiceTechDataController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.ServiceTechDataSerachA.FromDate = document.getElementById("txtFromDate").value;
                    this.ServiceTechDataSerachA.ToDate = document.getElementById("txtToDate").value;
                    //this.SCListSerachA.status = this.Status;
                    //this.SCListSerachA.status = this.SCStatus;
                    this.ServiceTechDataList = this.Service.Find(this.ServiceTechDataSerachA).then((function (response) {
                        _this.ServiceTechDataList = _this.Service.GetServiceTechDataGrid(response.data.Result);
                        _this.ServiceTechDataList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.ServiceTechDataList.slice(0, that.numRecords);
                    }));
                };
                ServiceTechDataController.prototype.getStates = function () {
                    var _this = this;
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                };
                ServiceTechDataController.prototype.District = function () {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.ServiceTechDataSerachA.State).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                ServiceTechDataController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                    this.Search();
                };
                ServiceTechDataController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ServiceTechDataList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                ServiceTechDataController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ServiceTechDataList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                ServiceTechDataController.prototype.Clear = function () {
                    // this.shownItems = null;
                    this.ServiceTechDataList.length = 0;
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    document.getElementById("txtCustomer").value = "";
                    document.getElementById("txtUserName").value = "";
                    this.ServiceTechDataSerachA.SerTechUserID = "";
                    this.ServiceTechDataSerachA.WONo = "";
                    this.ServiceTechDataSerachA.CustomerID = "";
                    this.ServiceTechDataSerachA.State = "";
                    this.ServiceTechDataSerachA.District = "";
                    $('#StateSelect').prop('selectedIndex', 0);
                    this.ServiceTechDataSerachA.State = $('#StateSelect').val();
                    $('#DistrictSelect').prop('selectedIndex', 0);
                    this.ServiceTechDataSerachA.District = $('#StateSelect').val();
                    $('#CallStatusSelect').prop('selectedIndex', 0);
                    this.ServiceTechDataSerachA.SCStatus = $('#CallStatusSelect').val();
                    $('#WOStatusSelect').prop('selectedIndex', 0);
                    this.ServiceTechDataSerachA.status = $('#WOStatusSelect').val();
                    $("#txtWONo").val("");
                    this.DistrictDropDown = "";
                };
                ServiceTechDataController.prototype.downloadCSV = function (csv, filename) {
                    var csvFile;
                    var downloadLink;
                    // CSV file
                    csvFile = new Blob([csv], { type: "text/csv" });
                    // Download link
                    downloadLink = document.createElement("a");
                    // File name
                    downloadLink.download = filename;
                    // Create a link to the file
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    // Hide download link
                    downloadLink.style.display = "none";
                    // Add the link to DOM
                    document.body.appendChild(downloadLink);
                    // Click download link
                    downloadLink.click();
                };
                ServiceTechDataController.prototype.exportTableToCSV = function (filename) {
                    var csv = [];
                    var rows = document.querySelectorAll(".excel tr");
                    for (var i = 0; i < rows.length; i++) {
                        var row = [], cols = rows[i].querySelectorAll("td, th");
                        for (var j = 0; j < cols.length; j++)
                            row.push(cols[j].innerHTML);
                        csv.push(row.join(","));
                    }
                    // Download CSV file
                    this.downloadCSV(csv.join("\n"), filename);
                };
                ServiceTechDataController.$inject = ["ServiceTechDataGridService", "$cookieStore", "WorkOrderService", "WorkOrderReportListService", "StateService", "DistrictService",
                    "CustomeraAtofillService", "UserNameService"];
                return ServiceTechDataController;
            }());
            var ServiceTechDataComponentController = /** @class */ (function () {
                function ServiceTechDataComponentController() {
                    this.controller = ServiceTechDataController;
                    this.templateUrl = "/Scripts/App/Reports/ServiceTechData/Template/_ServiceTechData.html";
                }
                ServiceTechDataComponentController.Name = "servicetechdatacomponent";
                return ServiceTechDataComponentController;
            }());
            app.AddComponent(ServiceTechDataComponentController.Name, new ServiceTechDataComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ServiceTechDataComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ServiceTechDataController = /** @class */ (function (_super) {
            __extends(ServiceTechDataController, _super);
            function ServiceTechDataController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ServiceTechDataController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ServiceTechDataController = ServiceTechDataController;
        app.AddController("ServiceTechDataController", ServiceTechDataController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ServiceTechDataController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var ServiceTechDataGridService = /** @class */ (function (_super) {
            __extends(ServiceTechDataGridService, _super);
            function ServiceTechDataGridService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.Cookie = null;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            ServiceTechDataGridService.prototype.Find = function (data) {
                debugger;
                // console.log(this.apiUrl + `/FillWorkOrderSearchGrid`);
                var DealerID;
                var AssignToUser;
                var CustomerID;
                var WONo;
                var State;
                var District;
                var SCStatus;
                var status;
                var FromDate;
                var ToDate;
                var UserID;
                if (data.DealerID != undefined && data.DealerID != null) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = '';
                }
                if (data.AssignToUser != undefined && data.AssignToUser != null) {
                    AssignToUser = data.AssignToUser;
                }
                else {
                    AssignToUser = '';
                }
                if (data.CustomerID != undefined && data.CustomerID != null) {
                    CustomerID = data.CustomerID;
                }
                else {
                    CustomerID = '';
                }
                if (data.WONo != undefined && data.WONo != null) {
                    WONo = data.WONo;
                }
                else {
                    WONo = '';
                }
                if (data.State != undefined && data.State != null) {
                    State = data.State;
                }
                else {
                    State = '';
                }
                if (data.District != undefined && data.District != null) {
                    District = data.District;
                }
                else {
                    District = '';
                }
                if (data.SCStatus != undefined && data.SCStatus != null) {
                    SCStatus = data.SCStatus;
                }
                else {
                    SCStatus = '';
                }
                if (data.status != undefined && data.status != null) {
                    status = data.status;
                }
                else {
                    status = '';
                }
                if (data.FromDate != undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = '';
                }
                if (data.ToDate != undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                if (data.SerTechUserID != undefined && data.SerTechUserID != null) {
                    UserID = data.SerTechUserID;
                }
                else {
                    UserID = '';
                }
                console.log(this.apiUrl + "/ServiceTechData");
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        CustomerID: CustomerID,
                        AssignToUser: AssignToUser,
                        WONo: WONo,
                        State: State,
                        District: District,
                        SCStatus: SCStatus,
                        status: status,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        UserID: UserID,
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    //+ `/${"FillWorkOrderSearchGrid"}`
                    Url: this.apiUrl + "/ServiceTechData",
                    Config: config
                });
            };
            ServiceTechDataGridService.prototype.GetServiceTechDataGrid = function (data) {
                console.log(data);
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        DealerID: item.DealerID,
                        AssignToUser: item.AssignToUser,
                        CustomerID: item.CustomerID,
                        ModelNo: item.ModelNo,
                        SCNo: item.SCNo,
                        SCCreatedOn: item.SCCreatedOn,
                        SCStatus: item.SCStatus,
                        WONo: item.WONo,
                        WOStatus: item.WOStatus,
                        ActualStartTime: item.ActualStartTime,
                        ActualEndTime: item.ActualEndTime,
                        WorkStartTime: item.WorkStartTime,
                        WorkEndTime: item.WorkEndTime,
                        InvoiceNo: item.InvoiceNo,
                        TotalInvoiceAmount: item.TotalInvoiceAmount,
                        UserID: item.UserID,
                    });
                }
                return list;
            };
            ServiceTechDataGridService.prototype.FindAvg = function (data) {
                // console.log(this.apiUrl + `/FillWorkOrderSearchGrid`);
                var DealerID;
                var AssignToUser;
                var CustomerID;
                var WONo;
                var State;
                var District;
                var SCStatus;
                var status;
                var FromDate;
                var ToDate;
                var UserID;
                if (data.DealerID != undefined && data.DealerID != null) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = '';
                }
                if (data.AssignToUser != undefined && data.AssignToUser != null) {
                    AssignToUser = data.AssignToUser;
                }
                else {
                    AssignToUser = '';
                }
                if (data.CustomerID != undefined && data.CustomerID != null) {
                    CustomerID = data.CustomerID;
                }
                else {
                    CustomerID = '';
                }
                if (data.WONo != undefined && data.WONo != null) {
                    WONo = data.WONo;
                }
                else {
                    WONo = '';
                }
                if (data.State != undefined && data.State != null) {
                    State = data.State;
                }
                else {
                    State = '';
                }
                if (data.District != undefined && data.District != null) {
                    District = data.District;
                }
                else {
                    District = '';
                }
                if (data.SCStatus != undefined && data.SCStatus != null) {
                    SCStatus = data.SCStatus;
                }
                else {
                    SCStatus = '';
                }
                if (data.status != undefined && data.status != null) {
                    status = data.status;
                }
                else {
                    status = '';
                }
                if (data.FromDate != undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = '';
                }
                if (data.ToDate != undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                //if (data.UserID != undefined && data.UserID != null) {
                //    UserID = data.UserID;
                //}
                //else {
                //    UserID = '';
                //}
                if (data.SerTechUserID != undefined && data.SerTechUserID != null) {
                    UserID = data.SerTechUserID;
                }
                else {
                    UserID = '';
                }
                console.log(this.apiUrl + "/ServiceTechAvgDatat");
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        CustomerID: CustomerID,
                        AssignToUser: AssignToUser,
                        WONo: WONo,
                        State: State,
                        District: District,
                        SCStatus: SCStatus,
                        status: status,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        UserID: UserID,
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    //+ `/${"FillWorkOrderSearchGrid"}`
                    Url: this.apiUrl + "/ServiceTechAvgDatat",
                    Config: config
                });
            };
            ServiceTechDataGridService.prototype.GetServiceTechAvgDataGrid = function (data) {
                console.log(data);
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        DealerID: item.DealerID,
                        AssignToUser: item.AssignToUser,
                        CustomerID: item.CustomerID,
                        ModelNo: item.ModelNo,
                        SCNo: item.SCNo,
                        SCCreatedOn: item.SCCreatedOn,
                        SCStatus: item.SCStatus,
                        WONo: item.WONo,
                        WOStatus: item.WOStatus,
                        ActualStartTime: item.ActualStartTime,
                        ActualEndTime: item.ActualEndTime,
                        WorkStartTime: item.WorkStartTime,
                        WorkEndTime: item.WorkEndTime,
                        InvoiceNo: item.InvoiceNo,
                        TotalInvoiceAmount: item.TotalInvoiceAmount,
                        UserID: item.UserID,
                        NoOfCalls: item.NoOfCalls,
                        Revenue: item.Revenue,
                        AvgWorkTime: item.AvgWorkTime,
                        AvgTravelTime: item.AvgTravelTime,
                    });
                }
                return list;
            };
            ServiceTechDataGridService.prototype.FindSCDataStatus = function (data) {
                var config = {
                    params: {
                        CalledFrom: 'data'
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "ServiceStatus",
                    Config: config
                });
                //ServiceStatus
            };
            ServiceTechDataGridService.prototype.GetSCDataStatus = function (data) {
                var obj = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    obj.push({
                        //SCStatus: item.SCStatus,
                        Status: item.Status,
                        ID: item.ID
                    });
                }
                return obj;
            };
            ServiceTechDataGridService.$inject = ["$http", "$q", "$cookieStore"];
            return ServiceTechDataGridService;
        }(GCPL.Service.BaseService));
        Service.ServiceTechDataGridService = ServiceTechDataGridService;
        //inject service
        app.AddService("ServiceTechDataGridService", ServiceTechDataGridService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ServiceTechDataService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var SpareStockMovementReportModel = /** @class */ (function () {
            function SpareStockMovementReportModel() {
            }
            return SpareStockMovementReportModel;
        }());
        Model.SpareStockMovementReportModel = SpareStockMovementReportModel;
        var SpareStockMovementReportHeader = /** @class */ (function () {
            function SpareStockMovementReportHeader() {
            }
            return SpareStockMovementReportHeader;
        }());
        Model.SpareStockMovementReportHeader = SpareStockMovementReportHeader;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SparesStockMovementReportModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var SparesStockMovementReportComponentController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function SparesStockMovementReportComponentController(_Sservicenew, _Dservice, _Service, _SpareStockMovementReportService) {
                    this.StateDropDownnew = null;
                    this.DistrictDropDown = null;
                    this.SelectedStateID = null;
                    this.StateID = null;
                    this.numRecords = 10;
                    this.NoOfRds = 10;
                    this.FillStockGrid = null;
                    this.SpareStockMovementReportModel = null;
                    this.SalesOfficddl = null;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.Sservicenew = _Sservicenew;
                    this.Districtservice = _Dservice;
                    this.Service = _Service;
                    this.SpareStockMovementReportService = _SpareStockMovementReportService;
                }
                SparesStockMovementReportComponentController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                SparesStockMovementReportComponentController.prototype.Init = function () {
                    var _this = this;
                    this.StateDropDownnew = this.Sservicenew.Find().then((function (response) {
                        _this.StateDropDownnew = _this.Sservicenew.GetStateNamenew(response.data.Result);
                        console.log(_this.StateDropDownnew);
                    }));
                    this.SalesOfficddl = this.Service.FindSalesOffic().then((function (response) {
                        _this.SalesOfficddl = _this.Service.GetSalesOffic(response.data.Result);
                        //if (this.SalesOfficddl[0].SalesOfficID == "0") {
                        //    this.SalesOfficddl.splice(0, 1);
                        //}
                    }));
                };
                SparesStockMovementReportComponentController.prototype.District = function () {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.SpareStockMovementReportModel.State).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                SparesStockMovementReportComponentController.prototype.Search = function () {
                    this.numRecords = this.NoOfRds;
                    this.FillGrid(this.numRecords);
                };
                SparesStockMovementReportComponentController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.FillStockGrid = this.SpareStockMovementReportService.FindGrid(this.SpareStockMovementReportModel).then((function (response) {
                        _this.FillStockGrid = _this.SpareStockMovementReportService.GetSpareGrid(response.data.Result);
                        console.log(_this.FillStockGrid);
                        //debugger;
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.FillStockGrid.slice(0, that.numRecords);
                    }));
                };
                SparesStockMovementReportComponentController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                SparesStockMovementReportComponentController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillStockGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                SparesStockMovementReportComponentController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillStockGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                SparesStockMovementReportComponentController.prototype.Clear = function () {
                    this.SpareStockMovementReportModel.length = 0;
                    //this.SpareStockMovementReportModel.State = "";
                    //this.SpareStockMovementReportModel.Period = "";
                    //this.SpareStockMovementReportModel.SalesOffice = "";
                    $('#PeriodSelect').prop('selectedIndex', 0);
                    this.SpareStockMovementReportModel.Period = $('#PeriodSelect').val();
                    $('#StateSelect').prop('selectedIndex', 0);
                    this.SpareStockMovementReportModel.State = $('#StateSelect').val();
                    $('#DistrictSelect').prop('selectedIndex', 0);
                    this.SpareStockMovementReportModel.DistrictID = $('#DistrictSelect').val();
                    $('#OfficeSelect').prop('selectedIndex', 0);
                    this.SpareStockMovementReportModel.SalesOffice = $('#OfficeSelect').val();
                    $("#StateDropDownnew").val("");
                    $("#DistrictDropDown").val("");
                    $("#SalesOffice").val("");
                    // this.DistrictDropDown = "";
                    this.shownItems = null;
                };
                SparesStockMovementReportComponentController.$inject = ["StateServicenew", "DistrictService", "WarehouseSalesOfficeService", "SpareStockMovementReportService"];
                return SparesStockMovementReportComponentController;
            }());
            var SparesStockMovementReportController = /** @class */ (function () {
                function SparesStockMovementReportController() {
                    this.controller = SparesStockMovementReportComponentController;
                    this.templateUrl = "/Scripts/App/Reports/SparesStockMovementReport/Template/_SparesStockMovementReport.html";
                }
                SparesStockMovementReportController.Name = "sparesstockmovementreportcomponent";
                return SparesStockMovementReportController;
            }());
            app.AddComponent(SparesStockMovementReportController.Name, new SparesStockMovementReportController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SparesStockMovementReportComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var SparesStockMovementReportController = /** @class */ (function (_super) {
            __extends(SparesStockMovementReportController, _super);
            function SparesStockMovementReportController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SparesStockMovementReportController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.SparesStockMovementReportController = SparesStockMovementReportController;
        app.AddController("SparesStockMovementReportController", SparesStockMovementReportController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SparesStockMovementReportController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var SpareStockMovementReportService = /** @class */ (function (_super) {
            __extends(SpareStockMovementReportService, _super);
            function SpareStockMovementReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/";
                _this.Cookie = _cookieStore;
                return _this;
            }
            SpareStockMovementReportService.prototype.FindGrid = function (data) {
                debugger;
                var url = this.apiUrl + "SpareStockMovementReport";
                //var DealerID;
                var Period;
                var DistrictID;
                var State;
                var SalesOffice;
                if (data.Period == undefined) {
                    Period = "";
                }
                else {
                    Period = data.Period;
                }
                if (data.SalesOffice == undefined) {
                    SalesOffice = "";
                }
                else {
                    SalesOffice = data.SalesOffice;
                }
                if (data.DistrictID == undefined) {
                    DistrictID = "";
                }
                else {
                    DistrictID = data.DistrictID;
                }
                if (data.State == undefined) {
                    State = "";
                }
                else {
                    State = data.State;
                }
                var config = {
                    params: {
                        Period: Period,
                        DistrictID: DistrictID,
                        State: State,
                        SalesOffice: SalesOffice,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            SpareStockMovementReportService.prototype.GetSpareGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        DistrictID: item.District,
                        State: item.State,
                        SalesOffice: item.SalesOffice,
                        StockQuantity: item.StockQuantity,
                        UOM: item.UOM,
                        CurrentStockValue: item.CurrentStockValue,
                        month: item.month,
                    });
                }
                debugger;
                return list;
            };
            SpareStockMovementReportService.$inject = ["$http", "$q", "$cookieStore"];
            return SpareStockMovementReportService;
        }(GCPL.Service.BaseService));
        Service.SpareStockMovementReportService = SpareStockMovementReportService;
        app.AddService("SpareStockMovementReportService", SpareStockMovementReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SparesStockMovementReportService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var SpareSalesByRegionReportModel = /** @class */ (function () {
            function SpareSalesByRegionReportModel() {
            }
            return SpareSalesByRegionReportModel;
        }());
        Model.SpareSalesByRegionReportModel = SpareSalesByRegionReportModel;
        var SpareSalesByRegionReportHeader = /** @class */ (function () {
            function SpareSalesByRegionReportHeader() {
            }
            return SpareSalesByRegionReportHeader;
        }());
        Model.SpareSalesByRegionReportHeader = SpareSalesByRegionReportHeader;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SpareSalesByRegionReportModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var SpareSalesByRegionReportComponentController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function SpareSalesByRegionReportComponentController(_Sservicenew, _Service, _Dservice, _SpareSalesByRegionReportService) {
                    this.StateDropDownnew = null;
                    this.SelectedStateID = null;
                    this.DistrictDropDown = null;
                    this.StateID = null;
                    this.numRecords = 10;
                    this.NoOfRds = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.FillRegionGrid = null;
                    this.SpareSalesByRegionReportModel = null;
                    this.SalesOfficddl = null;
                    this.Sservicenew = _Sservicenew;
                    this.Service = _Service;
                    this.Districtservice = _Dservice;
                    this.SpareSalesByRegionReportService = _SpareSalesByRegionReportService;
                }
                SpareSalesByRegionReportComponentController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                SpareSalesByRegionReportComponentController.prototype.Init = function () {
                    var _this = this;
                    this.StateDropDownnew = this.Sservicenew.Find().then((function (response) {
                        _this.StateDropDownnew = _this.Sservicenew.GetStateNamenew(response.data.Result);
                        console.log(_this.StateDropDownnew);
                    }));
                    this.SalesOfficddl = this.Service.FindSalesOffic().then((function (response) {
                        _this.SalesOfficddl = _this.Service.GetSalesOffic(response.data.Result);
                        //if (this.SalesOfficddl[0].SalesOfficID == "0") {
                        //    this.SalesOfficddl.splice(0, 1);
                        //}
                    }));
                };
                SpareSalesByRegionReportComponentController.prototype.District = function () {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.SpareSalesByRegionReportModel.State).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                SpareSalesByRegionReportComponentController.prototype.Search = function () {
                    this.numRecords = this.NoOfRds;
                    this.FillGrid(this.numRecords);
                };
                SpareSalesByRegionReportComponentController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.FillRegionGrid = this.SpareSalesByRegionReportService.FindGrid(this.SpareSalesByRegionReportModel).then((function (response) {
                        _this.FillRegionGrid = _this.SpareSalesByRegionReportService.GetSpareGrid(response.data.Result);
                        console.log(_this.FillRegionGrid);
                        //debugger;
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.FillRegionGrid.slice(0, that.numRecords);
                    }));
                };
                SpareSalesByRegionReportComponentController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                SpareSalesByRegionReportComponentController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillRegionGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                SpareSalesByRegionReportComponentController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillRegionGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                SpareSalesByRegionReportComponentController.prototype.Clear = function () {
                    this.shownItems = null;
                    this.FillRegionGrid.length = 0;
                    $('#PeriodSelect').prop('selectedIndex', 0);
                    this.SpareSalesByRegionReportModel.Period = $('#PeriodSelect').val();
                    $('#StateSelect').prop('selectedIndex', 0);
                    this.SpareSalesByRegionReportModel.State = $('#StateSelect').val();
                    $('#DistrictSelect').prop('selectedIndex', 0);
                    this.SpareSalesByRegionReportModel.DistrictID = $('#DistrictSelect').val();
                    $('#SalesOfficeSelect').prop('selectedIndex', 0);
                    this.SpareSalesByRegionReportModel.SalesOffice = $('#SalesOfficeSelect').val();
                };
                SpareSalesByRegionReportComponentController.$inject = ["StateServicenew", "WarehouseSalesOfficeService", "DistrictService", "SpareSalesByRegionReportService"];
                return SpareSalesByRegionReportComponentController;
            }());
            var SpareSalesByRegionReportController = /** @class */ (function () {
                function SpareSalesByRegionReportController() {
                    this.controller = SpareSalesByRegionReportComponentController;
                    this.templateUrl = "/Scripts/App/Reports/SpareSalesByRegionReport/Template/_SpareSalesByRegionReport.html";
                }
                SpareSalesByRegionReportController.Name = "sparesalesbyregionreportcomponent";
                return SpareSalesByRegionReportController;
            }());
            app.AddComponent(SpareSalesByRegionReportController.Name, new SpareSalesByRegionReportController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SpareSalesByRegionReportComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var SpareSalesByRegionReportController = /** @class */ (function (_super) {
            __extends(SpareSalesByRegionReportController, _super);
            function SpareSalesByRegionReportController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SpareSalesByRegionReportController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.SpareSalesByRegionReportController = SpareSalesByRegionReportController;
        app.AddController("SpareSalesByRegionReportController", SpareSalesByRegionReportController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SpareSalesByRegionReportController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var SpareSalesByRegionReportService = /** @class */ (function (_super) {
            __extends(SpareSalesByRegionReportService, _super);
            function SpareSalesByRegionReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/";
                _this.Cookie = _cookieStore;
                return _this;
            }
            SpareSalesByRegionReportService.prototype.FindGrid = function (data) {
                debugger;
                var url = this.apiUrl + "SpareSalesByRegionReport";
                //var DealerID;
                var Period;
                var DistrictID;
                var State;
                var SalesOffice;
                if (data.Period == undefined) {
                    Period = "";
                }
                else {
                    Period = data.Period;
                }
                if (data.SalesOffice == undefined) {
                    SalesOffice = "";
                }
                else {
                    SalesOffice = data.SalesOffice;
                }
                if (data.DistrictID == undefined) {
                    DistrictID = "";
                }
                else {
                    DistrictID = data.DistrictID;
                }
                if (data.State == undefined) {
                    State = "";
                }
                else {
                    State = data.State;
                }
                var config = {
                    params: {
                        Period: Period,
                        DistrictID: DistrictID,
                        State: State,
                        SalesOffice: SalesOffice,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            SpareSalesByRegionReportService.prototype.GetSpareGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        DistrictID: item.District,
                        State: item.State,
                        SalesOffice: item.SalesOffice,
                        StockQuantity: item.StockQuantity,
                        UOM: item.UOM,
                        CurrentSale: item.CurrentSale,
                        month: item.month,
                    });
                }
                debugger;
                return list;
            };
            SpareSalesByRegionReportService.$inject = ["$http", "$q", "$cookieStore"];
            return SpareSalesByRegionReportService;
        }(GCPL.Service.BaseService));
        Service.SpareSalesByRegionReportService = SpareSalesByRegionReportService;
        app.AddService("SpareSalesByRegionReportService", SpareSalesByRegionReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SpareSalesByRegionReportService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var SpareSalesByItemRegionReportModel = /** @class */ (function () {
            function SpareSalesByItemRegionReportModel() {
            }
            return SpareSalesByItemRegionReportModel;
        }());
        Model.SpareSalesByItemRegionReportModel = SpareSalesByItemRegionReportModel;
        var SpareSalesByItemRegionReportHeader = /** @class */ (function () {
            function SpareSalesByItemRegionReportHeader() {
            }
            return SpareSalesByItemRegionReportHeader;
        }());
        Model.SpareSalesByItemRegionReportHeader = SpareSalesByItemRegionReportHeader;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SparesSaleByItemRegionReportModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var SparesSaleByItemRegionReportComponentController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function SparesSaleByItemRegionReportComponentController(_Sservicenew, _Dservice, _Service, _ModelMasterListService, _ModelMasterloadListComponentService, _Dealerservice, _cookieStore, _ItemAutoservice, _SpareSalesByItemRegionReportService) {
                    this._cookieStore = _cookieStore;
                    this.StateDropDownnew = null;
                    this.SelectedStateID = null;
                    this.DistrictDropDown = null;
                    this.StateID = null;
                    this.DealerID = null;
                    this.SalesOfficddl = null;
                    this.ModelMasterList = null;
                    this.ModelMasterSearch = null;
                    this.Cookie = null;
                    this.UserData = null;
                    this.numRecords = 10;
                    this.NoOfRds = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.FillItemRegionGrid = null;
                    this.SpareSalesByItemRegionReportModel = null;
                    this.Districtservice = _Dservice;
                    this.Sservicenew = _Sservicenew;
                    this.Service = _Service;
                    this.ModelMasterListService = _ModelMasterListService;
                    this.ModelMasterloadListComponentService = _ModelMasterloadListComponentService;
                    this.DealerService = _Dealerservice;
                    this.Cookie = _cookieStore;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.SpareSalesByItemRegionReportService = _SpareSalesByItemRegionReportService;
                }
                SparesSaleByItemRegionReportComponentController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                SparesSaleByItemRegionReportComponentController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    this.ModelMasterList = this.ModelMasterloadListComponentService.Find(this.ModelMasterSearch).then((function (response) {
                        _this.ModelMasterList = _this.ModelMasterloadListComponentService.GetModelMasterloadList(response.data.Result);
                    }));
                    this.DealerService.Find(this.DealerID).then((function (response) {
                        _this.UserData = _this.DealerService.GetUser(response.data.Result);
                    }));
                    this.StateDropDownnew = this.Sservicenew.Find().then((function (response) {
                        _this.StateDropDownnew = _this.Sservicenew.GetStateNamenew(response.data.Result);
                        console.log(_this.StateDropDownnew);
                    }));
                    $("#txtModel").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.ModelMasterListService.Find(request).then((function (response) {
                                var data = that.ModelMasterListService.GetModelMasterList(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.ModelNo,
                                        value: item.ModelNo,
                                        id: item.ModelID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.SpareSalesByItemRegionReportModel.Model = ui.item.id;
                            //console.log(that.getLeadSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            debugger;
                            that.ItemDescriptionAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.SpareSalesByItemRegionReportModel.ItemDescription = ui.item.id;
                            //let SelectedItemID = ui.item.id;
                            //that.QtyChange.ItemID = ui.item.id;
                            //that.Description = ui.item.value;
                        },
                        change: function () {
                        }
                    });
                };
                SparesSaleByItemRegionReportComponentController.prototype.District = function () {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.SpareSalesByItemRegionReportModel.State).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                    this.SalesOfficddl = this.Service.FindSalesOffic().then((function (response) {
                        _this.SalesOfficddl = _this.Service.GetSalesOffic(response.data.Result);
                        //if (this.SalesOfficddl[0].SalesOfficID == "0") {
                        //    this.SalesOfficddl.splice(0, 1);
                        //}
                    }));
                };
                SparesSaleByItemRegionReportComponentController.prototype.Search = function () {
                    this.numRecords = this.NoOfRds;
                    this.FillGrid(this.numRecords);
                };
                SparesSaleByItemRegionReportComponentController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.FillItemRegionGrid = this.SpareSalesByItemRegionReportService.FindGrid(this.SpareSalesByItemRegionReportModel).then((function (response) {
                        _this.FillItemRegionGrid = _this.SpareSalesByItemRegionReportService.GetSpareGrid(response.data.Result);
                        //console.log(this.FillRegionGrid);
                        //debugger;
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.FillItemRegionGrid.slice(0, that.numRecords);
                    }));
                };
                SparesSaleByItemRegionReportComponentController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                SparesSaleByItemRegionReportComponentController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillItemRegionGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                SparesSaleByItemRegionReportComponentController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillItemRegionGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                SparesSaleByItemRegionReportComponentController.prototype.Clear = function () {
                    this.SpareSalesByItemRegionReportModel = null;
                    this.shownItems = null;
                    $("#txtDescription").val("");
                    $("#txtModel").val("");
                    //$("#SalesOffice").val("");
                    this.Search();
                };
                SparesSaleByItemRegionReportComponentController.$inject = ["StateServicenew", "DistrictService", "WarehouseSalesOfficeService", "ModelMasterListComponentService", "ModelMasterloadListComponentService", "ServiceCallAllocationUserService", "$cookieStore", "itemDescriptionService", "SpareSalesByItemRegionReportService"];
                return SparesSaleByItemRegionReportComponentController;
            }());
            var SparesSaleByItemRegionReportController = /** @class */ (function () {
                function SparesSaleByItemRegionReportController() {
                    this.controller = SparesSaleByItemRegionReportComponentController;
                    this.templateUrl = "/Scripts/App/Reports/SpareSalesByItemRegionReport/Template/_SparesSaleByItemRegionReport.html";
                }
                SparesSaleByItemRegionReportController.Name = "sparessalebyitemregionreportcomponent";
                return SparesSaleByItemRegionReportController;
            }());
            app.AddComponent(SparesSaleByItemRegionReportController.Name, new SparesSaleByItemRegionReportController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SparesSaleByItemRegionReportComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var SparesSaleByItemRegionReportController = /** @class */ (function (_super) {
            __extends(SparesSaleByItemRegionReportController, _super);
            function SparesSaleByItemRegionReportController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SparesSaleByItemRegionReportController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.SparesSaleByItemRegionReportController = SparesSaleByItemRegionReportController;
        app.AddController("SparesSaleByItemRegionReportController", SparesSaleByItemRegionReportController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SparesSaleByItemRegionReportController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var SpareSalesByItemRegionReportService = /** @class */ (function (_super) {
            __extends(SpareSalesByItemRegionReportService, _super);
            function SpareSalesByItemRegionReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/";
                _this.Cookie = _cookieStore;
                return _this;
            }
            SpareSalesByItemRegionReportService.prototype.FindGrid = function (data) {
                debugger;
                var url = this.apiUrl + "SpareSalesByItemRegionReport";
                //var DealerID;
                var Period;
                var Model;
                var Description;
                var DistrictID;
                var State;
                var SalesOffice;
                if (data.Period == undefined) {
                    Period = "";
                }
                else {
                    Period = data.Period;
                }
                if (data.Model == undefined) {
                    Model = "";
                }
                else {
                    Model = data.Model;
                }
                if (data.Description == undefined) {
                    Description = "";
                }
                else {
                    Description = data.Description;
                }
                if (data.SalesOffice == undefined) {
                    SalesOffice = "";
                }
                else {
                    SalesOffice = data.SalesOffice;
                }
                if (data.DistrictID == undefined) {
                    DistrictID = "";
                }
                else {
                    DistrictID = data.DistrictID;
                }
                if (data.State == undefined) {
                    State = "";
                }
                else {
                    State = data.State;
                }
                var config = {
                    params: {
                        Period: Period,
                        Description: Description,
                        Model: Model,
                        DistrictID: DistrictID,
                        State: State,
                        SalesOffice: SalesOffice,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            SpareSalesByItemRegionReportService.prototype.GetSpareGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        DistrictID: item.District,
                        Description: item.Description,
                        Model: item.Model,
                        State: item.State,
                        SalesOffice: item.SalesOffice,
                        StockQuantity: item.StockQuantity,
                        UOM: item.UOM,
                        CurrentSale: item.CurrentSale,
                        month: item.month,
                    });
                }
                debugger;
                return list;
            };
            SpareSalesByItemRegionReportService.$inject = ["$http", "$q", "$cookieStore"];
            return SpareSalesByItemRegionReportService;
        }(GCPL.Service.BaseService));
        Service.SpareSalesByItemRegionReportService = SpareSalesByItemRegionReportService;
        app.AddService("SpareSalesByItemRegionReportService", SpareSalesByItemRegionReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SparesSaleByItemRegionReportService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var LeadByStageSearch = /** @class */ (function () {
            function LeadByStageSearch() {
            }
            return LeadByStageSearch;
        }());
        Model.LeadByStageSearch = LeadByStageSearch;
        var LeadByStageGrid = /** @class */ (function () {
            function LeadByStageGrid() {
            }
            return LeadByStageGrid;
        }());
        Model.LeadByStageGrid = LeadByStageGrid;
        var LeadStatus = /** @class */ (function () {
            function LeadStatus() {
            }
            return LeadStatus;
        }());
        Model.LeadStatus = LeadStatus;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=LeadsByStageModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var LeadByStageSearch1 = GCPL.Model.LeadByStageSearch;
            var LeadsByStageController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function LeadsByStageController(_LeadByStageReportService, _getAutoSalesrep, _leaddescription, _Sservice, _Dservice, _PipelineOrderReportService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.LeadBystageGrid = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.StateDropDown = null;
                    this.DistrictDropDown = null;
                    this.GetLeadStatus = null;
                    this.GetPipelineOrderPurchaseWithin = null;
                    this.GetPipelineOrderSalesStage = null;
                    this.LeadBystageSearch = null;
                    this.Cookie = null;
                    this.LeadByStageReportService = _LeadByStageReportService;
                    this.getAutoSalesrep = _getAutoSalesrep;
                    this.leaddescription = _leaddescription;
                    this.Sservice = _Sservice;
                    this.Districtservice = _Dservice;
                    this.PipelineListReportService = _PipelineOrderReportService;
                    this.Cookie = _cookieStore;
                    this.LeadBystageSearch = new LeadByStageSearch1();
                    this.LeadBystageGrid = new Array();
                }
                LeadsByStageController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                LeadsByStageController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    var filters;
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            that.leaddescription.FilterAutoComplete(request).then((function (response) {
                                var data = that.leaddescription.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //that.SelectedItemPrice(ui.item.id);
                            that.LeadBystageSearch.Itemcode = ui.item.id;
                            //that.getLeadSearch.ItemDescription = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    //$("#txtStatus").autocomplete({
                    //    //  source:['1a0','anjali','archana'],
                    //    source: function (request, res) {
                    //        that.LeadByStageReportService.FindStatus(request).then((response => {
                    //            let data = that.LeadByStageReportService.GetStatus(response.data.Result);
                    //            res($.map(data, function (item, index) {
                    //                return {
                    //                    label: item.Status,
                    //                    value: item.Status,
                    //                    id: item.LeadStatusID
                    //                }
                    //            }));
                    //        }));
                    //    },
                    //    minLength: 2,
                    //    focus: (event, ui) => {
                    //        // Don't populate input field with selected value (pxid)
                    //        event.preventDefault();
                    //    },
                    //    select: function (e, ui) {
                    //        that.LeadBystageSearch.StatusID = ui.item.id;
                    //        //console.log(that.getLeadSearch.SearchInput);
                    //    },
                    //    change: function () {
                    //    }
                    //});
                    $("#txtSalesRep").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.getAutoSalesrep.FilterAutoComplete(request).then((function (response) {
                                var data = that.getAutoSalesrep.GetAutoFillSalesRep(response.data.Result);
                                console.log(data);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Name,
                                        value: item.Name,
                                        id: item.UserID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.LeadBystageSearch.SaleRep = ui.item.id;
                            //console.log(that.getLeadSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    this.LeadByStageReportService.FindStatus().then((function (response) {
                        _this.GetLeadStatus = _this.LeadByStageReportService.GetStatus(response.data.Result);
                    }));
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                    this.PipelineListReportService.FindPurchaseWithin().then((function (response) {
                        _this.GetPipelineOrderPurchaseWithin = _this.PipelineListReportService.GetPurchaseWithin(response.data.Result);
                    }));
                    this.PipelineListReportService.FindSalesStage().then((function (response) {
                        _this.GetPipelineOrderSalesStage = _this.PipelineListReportService.GetSalesStage(response.data.Result);
                    }));
                };
                LeadsByStageController.prototype.District = function (data) {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.LeadBystageSearch.stateId).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                LeadsByStageController.prototype.Search = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                LeadsByStageController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.LeadBystageGrid = this.LeadByStageReportService.Find(this.LeadBystageSearch).then((function (response) {
                        _this.LeadBystageGrid = _this.LeadByStageReportService.GetLeadByStageListGrid(response.data.Result);
                        //console.log("sales proba gridvalue");
                        //console.log(this.getSalesProSearch);
                        if (_this.LeadBystageGrid.length > 0) {
                            $("#nullDataDiv").hide();
                            _this.LeadBystageGrid.forEach(function (value, key) {
                                that.incre = parseInt(key) + 1;
                            });
                            _this.maxPages = (that.incre / that.numRecords);
                            _this.ShowBack = false;
                            _this.ShowNext = that.maxPages > 1 ? true : false;
                            _this.shownItems = _this.LeadBystageGrid.slice(0, that.numRecords);
                        }
                        else {
                            $("#nullDataDiv").show();
                        }
                    }));
                };
                LeadsByStageController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                LeadsByStageController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.LeadBystageGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                LeadsByStageController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.LeadBystageGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                LeadsByStageController.prototype.Clear = function () {
                    this.LeadBystageSearch.LeadStatusID = "";
                    this.LeadBystageSearch.Itemcode = "";
                    this.LeadBystageSearch.Region = "";
                    this.LeadBystageSearch.stateId = "";
                    this.LeadBystageSearch.PurchaseTimelineID = "";
                    this.LeadBystageSearch.SaleRep = "";
                    this.LeadBystageSearch.StageID = "";
                    $("#txtSalesRep").val("");
                    $("#ddlStatus").val("");
                    $("#txtDescription").val("");
                    $("#ddlstate").val("");
                    $("#ddlRegion").val("");
                    this.DistrictDropDown = "";
                    $("#ddlPurchase").val("");
                    //$("#txtStatus").val("");
                    $("#ddlstage").val("");
                };
                LeadsByStageController.prototype.downloadCSV = function (csv, filename) {
                    var csvFile;
                    var downloadLink;
                    // CSV file
                    csvFile = new Blob([csv], { type: "text/csv" });
                    // Download link
                    downloadLink = document.createElement("a");
                    // File name
                    downloadLink.download = filename;
                    // Create a link to the file
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    // Hide download link
                    downloadLink.style.display = "none";
                    // Add the link to DOM
                    document.body.appendChild(downloadLink);
                    // Click download link
                    downloadLink.click();
                };
                LeadsByStageController.prototype.exportTableToCSV = function (filename) {
                    var csv = [];
                    var rows = document.querySelectorAll(".excel tr");
                    for (var i = 0; i < rows.length; i++) {
                        var row = [], cols = rows[i].querySelectorAll("td, th");
                        for (var j = 0; j < cols.length; j++)
                            row.push(cols[j].innerHTML);
                        csv.push(row.join(","));
                    }
                    // Download CSV file
                    this.downloadCSV(csv.join("\n"), filename);
                };
                LeadsByStageController.$inject = ["LeadByStageGridfillService", "SalesRepaAutofillService", "itemDescriptionService", "StateService", "DistrictService", "PipelineOrderReportService", "$cookieStore"];
                return LeadsByStageController;
            }());
            var LeadsByStageComponentController = /** @class */ (function () {
                function LeadsByStageComponentController() {
                    this.controller = LeadsByStageController;
                    this.templateUrl = "/Scripts/App/LeadModelReport/LeadsByStage/Template/_LeadsByStage.html";
                }
                LeadsByStageComponentController.Name = "leadsbystagecomponent";
                return LeadsByStageComponentController;
            }());
            app.AddComponent(LeadsByStageComponentController.Name, new LeadsByStageComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=LeadsByStageComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var LeadsByStageController = /** @class */ (function (_super) {
            __extends(LeadsByStageController, _super);
            function LeadsByStageController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return LeadsByStageController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.LeadsByStageController = LeadsByStageController;
        app.AddController("LeadsByStageController", LeadsByStageController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=LeadsByStageController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var LeadByStageGridfillService = /** @class */ (function (_super) {
            __extends(LeadByStageGridfillService, _super);
            function LeadByStageGridfillService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            LeadByStageGridfillService.prototype.Find = function (data) {
                var url = this.apiUrl + "/LeadByStageReport";
                var SaleRep;
                var status;
                var Itemcode;
                var Region;
                var stateId;
                var PurchaseTimelineID;
                var SalesStage;
                debugger;
                if (data.SaleRep == undefined) {
                    SaleRep = '';
                }
                else {
                    SaleRep = data.SaleRep;
                }
                if (data.LeadStatusID == undefined) {
                    status = '';
                }
                else {
                    status = data.LeadStatusID;
                }
                if (data.Itemcode == undefined) {
                    Itemcode = '';
                }
                else {
                    Itemcode = data.Itemcode;
                }
                if (data.Region == undefined) {
                    Region = '';
                }
                else {
                    Region = data.Region;
                }
                if (data.stateId == undefined) {
                    stateId = '';
                }
                else {
                    stateId = data.stateId;
                }
                if (data.PurchaseTimelineID == undefined) {
                    PurchaseTimelineID = '';
                }
                else {
                    PurchaseTimelineID = data.PurchaseTimelineID;
                }
                if (data.StageID == undefined) {
                    SalesStage = '';
                }
                else {
                    SalesStage = data.StageID;
                }
                console.log(data);
                var config = {
                    params: {
                        SaleRep: SaleRep,
                        status: status,
                        Itemcode: Itemcode,
                        Region: Region,
                        stateId: stateId,
                        PurchaseTimelineID: PurchaseTimelineID,
                        SalesStage: SalesStage,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        UserID: this.Cookie.get('UserInfo')['UserID'],
                        RoleID: this.Cookie.get('UserInfo')['RoleID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            LeadByStageGridfillService.prototype.GetLeadByStageListGrid = function (data) {
                //console.log(data);
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        LeadId: item.LeadID,
                        CustomerName: item.CustomerName,
                        Model: item.ModelNo,
                        ItemDescription: item.Description,
                        Probability: item.SalesProbability,
                        LeadNo: item.LeadNo,
                        PurchaseWithin: item.purchaseWithin,
                        Status: item.Status,
                        Stage: item.SalesStage,
                        quantity: item.Quantity,
                        Price: item.ItemPrice,
                        SaleRep: item.salesRep,
                        State: item.State,
                        Regionname: item.Regionname
                    });
                }
                return list;
            };
            LeadByStageGridfillService.prototype.FindStatus = function () {
                //var Description;
                //if (data.Description !== undefined) {
                //    Description = data.Description
                //}
                //else {
                //    Description = ''
                //}
                //console.log("listDescriptionnnnn");
                //console.log(Description);            
                var config = {
                    params: {
                    //Description: data.term,
                    //DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/LeadByStageReport",
                    Config: config
                });
            };
            LeadByStageGridfillService.prototype.GetStatus = function (data) {
                var list = Array();
                console.log(list);
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        LeadStatusID: item.LeadStatusID,
                        Status: item.Status,
                    });
                }
                return list;
            };
            LeadByStageGridfillService.$inject = ["$http", "$q", "$cookieStore"];
            return LeadByStageGridfillService;
        }(GCPL.Service.BaseService));
        Service.LeadByStageGridfillService = LeadByStageGridfillService;
        app.AddService("LeadByStageGridfillService", LeadByStageGridfillService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=LeadsByStageService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var LeadVisitReportSearch = /** @class */ (function () {
            function LeadVisitReportSearch() {
            }
            return LeadVisitReportSearch;
        }());
        Model.LeadVisitReportSearch = LeadVisitReportSearch;
        var LeadVisitRportGrid = /** @class */ (function () {
            function LeadVisitRportGrid() {
            }
            return LeadVisitRportGrid;
        }());
        Model.LeadVisitRportGrid = LeadVisitRportGrid;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VisitRepListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var VisitRepSearch = GCPL.Model.LeadVisitReportSearch;
            var VisitRepListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function VisitRepListController(_getAutoSalesrep, _Sservice, _Dservice, _LeadVisitReportService, _Autofillservice, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.LeadVisitRepList = null;
                    this.getVistReportSearch = null;
                    this.StateDropDown = null;
                    this.DistrictDropDown = null;
                    this.Cookie = null;
                    this.getAutoSalesrep = _getAutoSalesrep;
                    this.Cookie = _cookieStore;
                    this.Sservice = _Sservice;
                    this.Districtservice = _Dservice;
                    this.LeadVisitReportService = _LeadVisitReportService;
                    this.CustomerAutofill = _Autofillservice;
                    this.getVistReportSearch = new VisitRepSearch();
                    this.LeadVisitRepList = new Array();
                }
                VisitRepListController.prototype.$onInit = function () {
                    this.Init();
                    var that = this;
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                VisitRepListController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                VisitRepListController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                VisitRepListController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    var filters;
                    $("#txtSalesRep").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.getAutoSalesrep.FilterAutoComplete(request).then((function (response) {
                                var data = that.getAutoSalesrep.GetAutoFillSalesRep(response.data.Result);
                                console.log(data);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Name,
                                        value: item.Name,
                                        id: item.UserID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.getVistReportSearch.SaleRep = ui.item.id;
                            //console.log(that.getLeadSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                    $("#txtCustomer").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.CustomerAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.getVistReportSearch.CustomerId = ui.item.id;
                            //that.LeadListSerachA.SearchInput = ui.item.value;
                            //console.log(that.LeadListSerachA.SearchInput);
                        },
                        change: function () {
                        }
                    });
                };
                VisitRepListController.prototype.District = function (data) {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.getVistReportSearch.stateId).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                VisitRepListController.prototype.Search = function () {
                    this.getVistReportSearch.FromDate = document.getElementById("txtFromDate").value;
                    this.getVistReportSearch.ToDate = document.getElementById("txtToDate").value;
                    //this.getVistReportSearch.CustomerId = "";
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                VisitRepListController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.LeadVisitRepList = this.LeadVisitReportService.Find(this.getVistReportSearch).then((function (response) {
                        _this.LeadVisitRepList = _this.LeadVisitReportService.GetVisitreportGrid(response.data.Result);
                        if (_this.LeadVisitRepList.length > 0) {
                            $("#nullDataDiv").hide();
                            _this.LeadVisitRepList.forEach(function (value, key) {
                                that.incre = parseInt(key) + 1;
                            });
                            _this.maxPages = (that.incre / that.numRecords);
                            _this.ShowBack = false;
                            _this.ShowNext = that.maxPages > 1 ? true : false;
                            _this.shownItems = _this.LeadVisitRepList.slice(0, that.numRecords);
                        }
                        else {
                            $("#nullDataDiv").show();
                        }
                    }));
                };
                VisitRepListController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                VisitRepListController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.LeadVisitRepList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                VisitRepListController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.LeadVisitRepList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                VisitRepListController.prototype.Clear = function () {
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    this.getVistReportSearch.SaleRep = "";
                    this.getVistReportSearch.CustomerId = "";
                    this.getVistReportSearch.Region = "";
                    this.getVistReportSearch.stateId = "";
                    this.getVistReportSearch.FromDate = "";
                    this.getVistReportSearch.ToDate = "";
                    this.getVistReportSearch.Vstatus = "";
                    $("#txtSalesRep").val("");
                    $("#txtCustomer").val("");
                    $("#ddlstate").val("");
                    $("#ddlRegion").val("");
                    this.DistrictDropDown = "";
                    // $("#ddlRegion").empty();
                    $("#FromDate").val("");
                    $("#ToDate").val("");
                    $("#ddlStatus").val("");
                };
                VisitRepListController.prototype.downloadCSV = function (csv, filename) {
                    var csvFile;
                    var downloadLink;
                    // CSV file
                    csvFile = new Blob([csv], { type: "text/csv" });
                    // Download link
                    downloadLink = document.createElement("a");
                    // File name
                    downloadLink.download = filename;
                    // Create a link to the file
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    // Hide download link
                    downloadLink.style.display = "none";
                    // Add the link to DOM
                    document.body.appendChild(downloadLink);
                    // Click download link
                    downloadLink.click();
                };
                VisitRepListController.prototype.exportTableToCSV = function (filename) {
                    var csv = [];
                    var rows = document.querySelectorAll(".excel tr");
                    for (var i = 0; i < rows.length; i++) {
                        var row = [], cols = rows[i].querySelectorAll("td, th");
                        for (var j = 0; j < cols.length; j++)
                            row.push(cols[j].innerHTML);
                        csv.push(row.join(","));
                    }
                    // Download CSV file
                    this.downloadCSV(csv.join("\n"), filename);
                };
                VisitRepListController.$inject = ["SalesRepaAutofillService", "StateService", "DistrictService", "LeadVisitReportService", "CustomeraAtofillService", "$cookieStore"];
                return VisitRepListController;
            }());
            var VisitRepListComponentController = /** @class */ (function () {
                function VisitRepListComponentController() {
                    this.controller = VisitRepListController;
                    this.templateUrl = "/Scripts/App/LeadModelReport/VisitRepList/Template/_VisitRepList.html";
                }
                VisitRepListComponentController.Name = "visitreplistcomponent";
                return VisitRepListComponentController;
            }());
            app.AddComponent(VisitRepListComponentController.Name, new VisitRepListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VisitRepListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var VisitRepListController = /** @class */ (function (_super) {
            __extends(VisitRepListController, _super);
            function VisitRepListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return VisitRepListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.VisitRepListController = VisitRepListController;
        app.AddController("VisitRepListController", VisitRepListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VisitRepListController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var LeadVisitReportService = /** @class */ (function (_super) {
            __extends(LeadVisitReportService, _super);
            function LeadVisitReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            LeadVisitReportService.prototype.Find = function (data) {
                debugger;
                var url = this.apiUrl + "/LeadVisitReport";
                var SaleRep;
                var CustomerId;
                var Vstatus;
                var FromDate;
                var Region;
                var stateId;
                var ToDate;
                var LeadNo;
                if (data.FromDate == undefined) {
                    FromDate = '';
                }
                else {
                    FromDate = data.FromDate;
                }
                if (data.ToDate == undefined) {
                    ToDate = '';
                }
                else {
                    ToDate = data.ToDate;
                }
                if (data.Region == undefined) {
                    Region = '';
                }
                else {
                    Region = data.Region;
                }
                if (data.stateId == undefined) {
                    stateId = '';
                }
                else {
                    stateId = data.stateId;
                }
                if (data.Vstatus == undefined) {
                    Vstatus = '';
                }
                else {
                    Vstatus = data.Vstatus;
                }
                if (data.CustomerId == undefined) {
                    CustomerId = '';
                }
                else {
                    CustomerId = data.CustomerId;
                }
                if (data.SaleRep == undefined) {
                    SaleRep = '';
                }
                else {
                    SaleRep = data.SaleRep;
                }
                if (data.LeadNo == undefined) {
                    LeadNo = '';
                }
                else {
                    LeadNo = data.LeadNo;
                }
                var config = {
                    params: {
                        // string SaleRep, string CustomerId, string Vstatus, string Region, string stateId, string FromDate, string ToDate, string DealerID
                        SaleRep: SaleRep,
                        CustomerId: CustomerId,
                        Vstatus: Vstatus,
                        Region: Region,
                        stateId: stateId,
                        Fromdate: FromDate,
                        ToDate: ToDate,
                        LeadNo: LeadNo,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        UserID: this.Cookie.get('UserInfo')['UserID'],
                        RoleID: this.Cookie.get('UserInfo')['RoleID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            LeadVisitReportService.prototype.GetVisitreportGrid = function (data) {
                //console.log(data);
                var list = Array();
                console.log("4121516515151");
                console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        LeadId: item.LeadID,
                        CustomerName: item.CustomerName,
                        Model: item.ModelNo,
                        ItemDescription: item.Description,
                        Probability: item.SalesProbability,
                        LeadNo: item.LeadNo,
                        VisitDate: item.VisitDate,
                        Purpose: item.Purpose,
                        VisitStatus: item.VisitStatus,
                        Notes: item.Notes,
                        SaleRep: item.salesRep,
                        State: item.State,
                        Regionname: item.Regionname
                    });
                }
                return list;
            };
            LeadVisitReportService.$inject = ["$http", "$q", "$cookieStore"];
            return LeadVisitReportService;
        }(GCPL.Service.BaseService));
        Service.LeadVisitReportService = LeadVisitReportService;
        app.AddService("LeadVisitReportService", LeadVisitReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VisitRepListService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var RSearchmodel = /** @class */ (function () {
            function RSearchmodel() {
            }
            return RSearchmodel;
        }());
        Model.RSearchmodel = RSearchmodel;
        var PurchaseRegionFilter = /** @class */ (function () {
            function PurchaseRegionFilter() {
            }
            return PurchaseRegionFilter;
        }());
        Model.PurchaseRegionFilter = PurchaseRegionFilter;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseByRegionModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var PurchaseByRegionController = /** @class */ (function () {
                function PurchaseByRegionController(_PurchaseByRegionService, _WareHouse, _Sservice, _StateNewService, _RegionddlService, _Dservice) {
                    this.FillGrid = null;
                    this.PurchaseRegionFilters = null;
                    this.WareHousename = null;
                    this.StateDropDown = null;
                    this.RegionDropDown = null;
                    this.DistrictDropDown = null;
                    this.PurchaseByRegionService = _PurchaseByRegionService;
                    this.WareHouse = _WareHouse;
                    this.Sservice = _Sservice;
                    this.StateNewService = _StateNewService;
                    this.RegionddlService = _RegionddlService;
                    this.Districtservice = _Dservice;
                    this.PurchaseRegionFilters = new GCPL.Model.PurchaseRegionFilter();
                }
                PurchaseByRegionController.prototype.$onInit = function () {
                    this.Init();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                PurchaseByRegionController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                PurchaseByRegionController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                PurchaseByRegionController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    this.WareHousename = this.WareHouse.Find().then((function (response) {
                        _this.WareHousename = _this.WareHouse.GetWareHouse(response.data.Result);
                    }));
                    this.RegionDropDown = this.RegionddlService.Find().then((function (response) {
                        _this.RegionDropDown = _this.RegionddlService.GetRegionddl(response.data.Result);
                    }));
                    this.StateDropDown = this.StateNewService.Find().then((function (response) {
                        _this.StateDropDown = _this.StateNewService.StateName(response.data.Result);
                    }));
                };
                PurchaseByRegionController.prototype.District = function () {
                    var _this = this;
                    debugger;
                    this.DistrictDropDown = this.Districtservice.Find(this.PurchaseRegionFilters.StateID).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                PurchaseByRegionController.prototype.Search = function () {
                    this.PurchaseRegionFilters.FromDate = document.getElementById("txtFromDate").value;
                    this.PurchaseRegionFilters.ToDate = document.getElementById("txtToDate").value;
                    this.FillPRGrid();
                };
                PurchaseByRegionController.prototype.FillPRGrid = function () {
                    var _this = this;
                    var that = this;
                    this.FillGrid = this.PurchaseByRegionService.FindGrid(this.PurchaseRegionFilters).then((function (response) {
                        _this.FillGrid = _this.PurchaseByRegionService.GetGrid(response.data.Result);
                    }));
                };
                PurchaseByRegionController.$inject = ["PurchaseByRegionService", "StockListWarehousenameService", "StateService", "StateNewService",
                    "RegionddlService", "DistrictService"];
                return PurchaseByRegionController;
            }());
            var PurchaseOrderListComponentController = /** @class */ (function () {
                function PurchaseOrderListComponentController() {
                    this.controller = PurchaseByRegionController;
                    this.templateUrl = "/Scripts/App/Reports/PurchaseByRegion/Template/_PurchaseByRegion.html";
                }
                PurchaseOrderListComponentController.Name = "purchasebyregioncomponent";
                return PurchaseOrderListComponentController;
            }());
            app.AddComponent(PurchaseOrderListComponentController.Name, new PurchaseOrderListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseByRegionComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var PurchaseByRegion = /** @class */ (function (_super) {
            __extends(PurchaseByRegion, _super);
            function PurchaseByRegion() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PurchaseByRegion;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.PurchaseByRegion = PurchaseByRegion;
        app.AddController("purchasebyregionController", Controller.PurchaseRegisterController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseByRegionController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var PurchaseByRegionService = /** @class */ (function (_super) {
            __extends(PurchaseByRegionService, _super);
            function PurchaseByRegionService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/";
                _this.Cookie = _cookieStore;
                return _this;
            }
            PurchaseByRegionService.prototype.FindGrid = function (data) {
                var url = this.apiUrl + "PurchaseByRegionList";
                var FromDate;
                var ToDate;
                var Warehouse;
                var Region;
                var StateID;
                var District;
                if (data.FromDate == undefined) {
                    FromDate = "";
                }
                else {
                    FromDate = data.FromDate;
                }
                if (data.ToDate == undefined) {
                    ToDate = "";
                }
                else {
                    ToDate = data.ToDate;
                }
                if (data.Warehouse == undefined) {
                    Warehouse = "";
                }
                else {
                    Warehouse = data.Warehouse;
                }
                if (data.Region == undefined) {
                    Region = "";
                }
                else {
                    Region = data.Region;
                }
                if (data.StateID == undefined) {
                    StateID = "";
                }
                else {
                    StateID = data.StateID;
                }
                if (data.District == undefined) {
                    District = "";
                }
                else {
                    District = data.District;
                }
                var config = {
                    params: {
                        FromDate: FromDate,
                        ToDate: ToDate,
                        Warehouse: Warehouse,
                        Region: Region,
                        StateID: StateID,
                        District: District,
                        UserID: this.Cookie.get('UserInfo')['UserID'],
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            PurchaseByRegionService.prototype.GetGrid = function (data) {
                var list = new Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        Month: item.Month,
                        Warehouse: item.Warehouse,
                        Region: item.Region,
                        State: item.State,
                        District: item.District,
                        Amount: item.Amount
                    });
                }
                return list;
            };
            PurchaseByRegionService.$inject = ["$http", "$q", "$cookieStore"];
            return PurchaseByRegionService;
        }(GCPL.Service.BaseService));
        Service.PurchaseByRegionService = PurchaseByRegionService;
        app.AddService("PurchaseByRegionService", PurchaseByRegionService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseByRegionService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var GList = /** @class */ (function () {
            function GList() {
            }
            return GList;
        }());
        Model.GList = GList;
        var PurchaseItemFilter = /** @class */ (function () {
            function PurchaseItemFilter() {
            }
            return PurchaseItemFilter;
        }());
        Model.PurchaseItemFilter = PurchaseItemFilter;
        var Division = /** @class */ (function () {
            function Division() {
            }
            return Division;
        }());
        Model.Division = Division;
        var ProductName = /** @class */ (function () {
            function ProductName() {
            }
            return ProductName;
        }());
        Model.ProductName = ProductName;
        var PModelName = /** @class */ (function () {
            function PModelName() {
            }
            return PModelName;
        }());
        Model.PModelName = PModelName;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseByItemsModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var PurchaseByItemsController = /** @class */ (function () {
                function PurchaseByItemsController(_cookieStore, _PurchaseByItemsService, _WareHouse, _ItemAutoservice, _DivisionService, _ProductService, _ModelService) {
                    this._cookieStore = _cookieStore;
                    this.DivisionDropDown = null;
                    this.ProductDropDown = null;
                    this.ProductID = null;
                    this.DivisionID = null;
                    this.PurchaseItemFilters = null;
                    this.FillGrid = null;
                    this.WareHousename = null;
                    this.ModelDropDown = null;
                    this.DealerID = null;
                    this.Cookie = null;
                    this.TotalValueRs = 0;
                    this.Cookie = _cookieStore;
                    this.PurchaseByItemsService = _PurchaseByItemsService;
                    this.WareHouse = _WareHouse;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.DivisionService = _DivisionService;
                    this.ProductService = _ProductService;
                    this.PurchaseItemFilters = new GCPL.Model.PurchaseItemFilter();
                    this.ModelService = _ModelService;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                PurchaseByItemsController.prototype.$onInit = function () {
                    this.Clear();
                    this.Init();
                };
                PurchaseByItemsController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    this.WareHousename = this.WareHouse.Find().then((function (response) {
                        _this.WareHousename = _this.WareHouse.GetWareHouse(response.data.Result);
                    }));
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            that.ItemDescriptionAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //let SelectedItemID = ui.item.id;
                            //that.QtyChange.ItemID = ui.item.id;
                            //that.Description = ui.item.value;
                        },
                        change: function () {
                        }
                    });
                    this.DivisionDropDown = this.DivisionService.Find(this.DealerID).then((function (response) {
                        _this.DivisionDropDown = _this.DivisionService.GetDivisionName(response.data.Result);
                    }));
                };
                PurchaseByItemsController.prototype.Product = function () {
                    var _this = this;
                    this.ProductDropDown = this.ProductService.Find(this.PurchaseItemFilters.Division, this.DealerID).then((function (response) {
                        _this.ProductDropDown = _this.ProductService.GetProductName(response.data.Result);
                    }));
                };
                PurchaseByItemsController.prototype.Model = function () {
                    var _this = this;
                    this.ModelDropDown = this.ModelService.Find(this.PurchaseItemFilters.Product, this.DealerID).then((function (response) {
                        _this.ModelDropDown = _this.ModelService.GetModelSelected(response.data.Result);
                    }));
                };
                PurchaseByItemsController.prototype.Search = function () {
                    this.FillPGrid();
                };
                PurchaseByItemsController.prototype.FillPGrid = function () {
                    var _this = this;
                    var that = this;
                    this.FillGrid = this.PurchaseByItemsService.FindGrid(this.PurchaseItemFilters).then((function (response) {
                        _this.FillGrid = _this.PurchaseByItemsService.GetGrid(response.data.Result);
                        _this.TotalValueRs = 0;
                        debugger;
                        for (var i = 0; i < _this.FillGrid.length; i++) {
                            _this.TotalValueRs = _this.TotalValueRs + _this.FillGrid[i].Amount;
                        }
                        $("#lblTotalValue").text(_this.TotalValueRs.toFixed(2));
                    }));
                };
                PurchaseByItemsController.prototype.Clear = function () {
                    this.PurchaseItemFilters.Period = "";
                    this.PurchaseItemFilters.Division = "";
                    this.PurchaseItemFilters.Product = "";
                    this.PurchaseItemFilters.Model = "";
                    this.PurchaseItemFilters.ItemDescription = "";
                    this.PurchaseItemFilters.Warehouse = "";
                };
                PurchaseByItemsController.$inject = ["$cookieStore", "PurchaseByItemsService", "StockListWarehousenameService", "itemDescriptionService",
                    "PDivisionService", "ProductService", "PISelectedModelService"];
                return PurchaseByItemsController;
            }());
            var PurchaseByItemsComponentController = /** @class */ (function () {
                function PurchaseByItemsComponentController() {
                    this.controller = PurchaseByItemsController;
                    this.templateUrl = "/Scripts/App/Reports/PurchaseByItems/Template/_PurchaseByItems.html";
                }
                PurchaseByItemsComponentController.Name = "purchasebyitemscomponent";
                return PurchaseByItemsComponentController;
            }());
            app.AddComponent(PurchaseByItemsComponentController.Name, new PurchaseByItemsComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseByItemsComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var PurchaseByItemsController = /** @class */ (function (_super) {
            __extends(PurchaseByItemsController, _super);
            function PurchaseByItemsController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PurchaseByItemsController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.PurchaseByItemsController = PurchaseByItemsController;
        app.AddController("PurchaseByItemsController", PurchaseByItemsController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseByItemsController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var PurchaseByItemsService = /** @class */ (function (_super) {
            __extends(PurchaseByItemsService, _super);
            function PurchaseByItemsService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/";
                _this.Cookie = _cookieStore;
                return _this;
            }
            PurchaseByItemsService.prototype.FindGrid = function (data) {
                var url = this.apiUrl + "PurchaseByItems";
                var Period;
                var Division;
                var Product;
                var Model;
                var ItemDescription;
                var Warehouse;
                if (data.Period == undefined) {
                    Period = "";
                }
                else {
                    Period = data.Period;
                }
                if (data.Division == undefined) {
                    Division = "";
                }
                else {
                    Division = data.Division;
                }
                if (data.Product == undefined) {
                    Product = "";
                }
                else {
                    Product = data.Product;
                }
                if (data.Model == undefined) {
                    Model = "";
                }
                else {
                    Model = data.Model;
                }
                if (data.ItemDescription == undefined) {
                    ItemDescription = "";
                }
                else {
                    ItemDescription = data.ItemDescription;
                }
                if (data.Warehouse == undefined) {
                    Warehouse = "";
                }
                else {
                    Warehouse = data.Warehouse;
                }
                var config = {
                    params: {
                        Period: Period,
                        Division: Division,
                        Product: Product,
                        Model: Model,
                        ItemDescription: ItemDescription,
                        Warehouse: Warehouse,
                        UserID: this.Cookie.get('UserInfo')['UserID'],
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            PurchaseByItemsService.prototype.GetGrid = function (data) {
                var list = new Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        Month: item.Month,
                        Warehouse: item.Warehouse,
                        Division: item.Division,
                        Product: item.Product,
                        Model: item.Model,
                        ItemDescription: item.ItemDescription,
                        Amount: item.Amount
                    });
                }
                return list;
            };
            PurchaseByItemsService.$inject = ["$http", "$q", "$cookieStore"];
            return PurchaseByItemsService;
        }(GCPL.Service.BaseService));
        Service.PurchaseByItemsService = PurchaseByItemsService;
        app.AddService("PurchaseByItemsService", PurchaseByItemsService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Division
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var PDivisionService = /** @class */ (function (_super) {
            __extends(PDivisionService, _super);
            function PDivisionService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "PDivisionctrl";
                return _this;
            }
            PDivisionService.prototype.Find = function (DealerID) {
                var config = {
                    params: {
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            PDivisionService.prototype.GetDivisionName = function (data) {
                var list = new Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        DivisionID: item.DivisionID.toString(),
                        Division: item.Division,
                    });
                }
                return list;
            };
            PDivisionService.$inject = ["$http", "$q"];
            return PDivisionService;
        }(GCPL.Service.BaseService));
        Service.PDivisionService = PDivisionService;
        app.AddService("PDivisionService", PDivisionService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Product
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var PIProductService = /** @class */ (function (_super) {
            __extends(PIProductService, _super);
            function PIProductService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "Productctrl";
                return _this;
            }
            PIProductService.prototype.Find = function (data, DealerID) {
                var config = {
                    params: {
                        Division: data,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            PIProductService.prototype.GetProductName = function (data) {
                var list = new Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        ProductID: item.ProductID,
                        Product: item.Product,
                    });
                }
                return list;
            };
            PIProductService.$inject = ["$http", "$q"];
            return PIProductService;
        }(GCPL.Service.BaseService));
        Service.PIProductService = PIProductService;
        app.AddService("PIProductService", PIProductService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//model
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var PISelectedModelService = /** @class */ (function (_super) {
            __extends(PISelectedModelService, _super);
            function PISelectedModelService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "SelectModelctrl";
                return _this;
            }
            PISelectedModelService.prototype.Find = function (data, DealerID) {
                var config = {
                    params: {
                        Product: data,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            PISelectedModelService.prototype.GetModelSelected = function (data) {
                var list = new Array();
                debugger;
                for (var _i = 0, data_4 = data; _i < data_4.length; _i++) {
                    var item = data_4[_i];
                    console.log(item);
                    list.push({
                        ModelID: item.modelid,
                        ModelNo: item.model
                    });
                }
                return list;
            };
            PISelectedModelService.$inject = ["$http", "$q"];
            return PISelectedModelService;
        }(GCPL.Service.BaseService));
        Service.PISelectedModelService = PISelectedModelService;
        app.AddService("PISelectedModelService", PISelectedModelService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseByItemsService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var IWOTimeRevenueReportGridService = /** @class */ (function () {
            function IWOTimeRevenueReportGridService() {
            }
            return IWOTimeRevenueReportGridService;
        }());
        Model.IWOTimeRevenueReportGridService = IWOTimeRevenueReportGridService;
        var WOTimeRevenueSearchReportmodel = /** @class */ (function () {
            function WOTimeRevenueSearchReportmodel() {
            }
            return WOTimeRevenueSearchReportmodel;
        }());
        Model.WOTimeRevenueSearchReportmodel = WOTimeRevenueSearchReportmodel;
        var WOTimeRevAvgReportmodel = /** @class */ (function () {
            function WOTimeRevAvgReportmodel() {
            }
            return WOTimeRevAvgReportmodel;
        }());
        Model.WOTimeRevAvgReportmodel = WOTimeRevAvgReportmodel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WOTimeRevenueModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var servicecallmodel = GCPL.Model.WOTimeRevenueSearchReportmodel;
            var WOTimeRevenueController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function WOTimeRevenueController(_service, _cookieStore, _WorkOrderService, _WorkOrderReportListService, _Sservice, _Dservice, _Autofillservice) {
                    this._cookieStore = _cookieStore;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.UserName = null;
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.DealerID = null;
                    this.WOTimeRevenueList = null;
                    this.WOTimeRevenueAvgList = null;
                    this.SCStatus = null;
                    this.StateDropDown = null;
                    this.Status = null;
                    this.DistrictDropDown = null;
                    this.WOTimeRevenueSerachA = null;
                    this.Cookie = null;
                    this.Service = _service;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.WorkOrderService = _WorkOrderService;
                    this.WorkOrderReportListService = _WorkOrderReportListService;
                    this.WOTimeRevenueSerachA = new servicecallmodel();
                    this.Sservice = _Sservice;
                    this.Districtservice = _Dservice;
                    this.CustomerAutofill = _Autofillservice;
                }
                WOTimeRevenueController.prototype.$onInit = function () {
                    this.Init();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                WOTimeRevenueController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                WOTimeRevenueController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                WOTimeRevenueController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtCustomer").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.CustomerAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedCustomerID = ui.item.id;
                            that.WOTimeRevenueSerachA.CustomerID = ui.item.id;
                            console.log(that.WOTimeRevenueSerachA.CustomerID);
                        },
                        change: function () {
                        }
                    });
                    this.SCStatus = this.Service.FindSCDataStatus("1").then((function (response) {
                        console.log(response);
                        _this.SCStatus = _this.Service.GetSCDataStatus(response.data.Result);
                        //this.Status=1;
                    }));
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                    this.Status = this.WorkOrderReportListService.FindStatus("1").then((function (response) {
                        console.log(response);
                        _this.Status = _this.WorkOrderReportListService.GetStatus(response.data.Result);
                    }));
                };
                WOTimeRevenueController.prototype.Search = function () {
                    var _this = this;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                    debugger;
                    this.WOTimeRevenueAvgList = this.Service.FindAvg(this.WOTimeRevenueSerachA).then((function (response) {
                        _this.WOTimeRevenueAvgList = _this.Service.GetWOTimeRevenueAvgGrid(response.data.Result);
                        // this.WOTimeRevenueAvgList.forEach(function (value, key) 
                    }));
                    //this.FunnelRatioService.FindLeadtotal(this.getLeadSearch).then((response => {
                    //    this.getLeadCount = this.FunnelRatioService.GetLeadListTotal(response.data.Result);
                    //}));
                };
                WOTimeRevenueController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.WOTimeRevenueSerachA.FromDate = document.getElementById("txtFromDate").value;
                    this.WOTimeRevenueSerachA.ToDate = document.getElementById("txtToDate").value;
                    //this.SCListSerachA.status = this.Status;
                    //this.SCListSerachA.status = this.SCStatus;
                    this.WOTimeRevenueList = this.Service.Find(this.WOTimeRevenueSerachA).then((function (response) {
                        _this.WOTimeRevenueList = _this.Service.GetWOTimeRevenueGrid(response.data.Result);
                        _this.WOTimeRevenueList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.WOTimeRevenueList.slice(0, that.numRecords);
                    }));
                };
                WOTimeRevenueController.prototype.getStates = function () {
                    var _this = this;
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                };
                WOTimeRevenueController.prototype.District = function () {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.WOTimeRevenueSerachA.State).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                WOTimeRevenueController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                    this.Search();
                };
                WOTimeRevenueController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.WOTimeRevenueList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                WOTimeRevenueController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.WOTimeRevenueList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                WOTimeRevenueController.prototype.Clear = function () {
                    debugger;
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    document.getElementById("txtCustomer").value = "";
                    //(<HTMLInputElement>document.getElementById("txtUserName")).value = "";
                    this.WOTimeRevenueSerachA.WONo = "";
                    this.WOTimeRevenueSerachA.CustomerID = "";
                    this.WOTimeRevenueSerachA.State = "";
                    this.WOTimeRevenueSerachA.District = "";
                    this.DistrictDropDown = "";
                    this.WOTimeRevenueSerachA.status = "";
                    this.WOTimeRevenueSerachA.SCStatus = "";
                    $("#ddlState").val("");
                    $("#ddlDistrict").val("");
                    $("#ddlSCStatus").val("");
                    $("#ddlWoStatus").val("");
                    //this.Status = "";
                    //this.shownItems = null;
                    //this.WOTimeRevenueAvgList = null;
                    //this.WOTimeRevenueSerachA = null;
                    //this.WOTimeRevenueList = null;
                    // this.Search();
                };
                WOTimeRevenueController.prototype.downloadCSV = function (csv, filename) {
                    var csvFile;
                    var downloadLink;
                    // CSV file
                    csvFile = new Blob([csv], { type: "text/csv" });
                    // Download link
                    downloadLink = document.createElement("a");
                    // File name
                    downloadLink.download = filename;
                    // Create a link to the file
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    // Hide download link
                    downloadLink.style.display = "none";
                    // Add the link to DOM
                    document.body.appendChild(downloadLink);
                    // Click download link
                    downloadLink.click();
                };
                WOTimeRevenueController.prototype.exportTableToCSV = function (filename) {
                    var csv = [];
                    var rows = document.querySelectorAll(".excel tr");
                    for (var i = 0; i < rows.length; i++) {
                        var row = [], cols = rows[i].querySelectorAll("td, th");
                        for (var j = 0; j < cols.length; j++)
                            row.push(cols[j].innerHTML);
                        csv.push(row.join(","));
                    }
                    // Download CSV file
                    this.downloadCSV(csv.join("\n"), filename);
                };
                WOTimeRevenueController.$inject = ["WOTimeRevenueGridService", "$cookieStore", "WorkOrderService", "WorkOrderReportListService", "StateService", "DistrictService",
                    "CustomeraAtofillService"];
                return WOTimeRevenueController;
            }());
            var WOTimeRevenueComponentController = /** @class */ (function () {
                function WOTimeRevenueComponentController() {
                    this.controller = WOTimeRevenueController;
                    this.templateUrl = "/Scripts/App/Reports/WOTimeRevenue/Template/_WOTimeRevenue.html";
                }
                WOTimeRevenueComponentController.Name = "wotimerevenuecomponent";
                return WOTimeRevenueComponentController;
            }());
            app.AddComponent(WOTimeRevenueComponentController.Name, new WOTimeRevenueComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WOTimeRevenueComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var WOTimeRevenueController = /** @class */ (function (_super) {
            __extends(WOTimeRevenueController, _super);
            function WOTimeRevenueController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return WOTimeRevenueController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.WOTimeRevenueController = WOTimeRevenueController;
        app.AddController("WOTimeRevenueController", WOTimeRevenueController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WOTimeRevenueController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var WOTimeRevenueGridService = /** @class */ (function (_super) {
            __extends(WOTimeRevenueGridService, _super);
            function WOTimeRevenueGridService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.Cookie = null;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            WOTimeRevenueGridService.prototype.Find = function (data) {
                // console.log(this.apiUrl + `/FillWorkOrderSearchGrid`);
                var DealerID;
                var CustomerID;
                var WONo;
                var State;
                var District;
                var SCStatus;
                var status;
                var FromDate;
                var ToDate;
                var UserID;
                if (data.DealerID != undefined && data.DealerID != null) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = '';
                }
                if (data.CustomerID != undefined && data.CustomerID != null) {
                    CustomerID = data.CustomerID;
                }
                else {
                    CustomerID = '';
                }
                if (data.WONo != undefined && data.WONo != null) {
                    WONo = data.WONo;
                }
                else {
                    WONo = '';
                }
                if (data.State != undefined && data.State != null) {
                    State = data.State;
                }
                else {
                    State = '';
                }
                if (data.District != undefined && data.District != null) {
                    District = data.District;
                }
                else {
                    District = '';
                }
                if (data.SCStatus != undefined && data.SCStatus != null) {
                    SCStatus = data.SCStatus;
                }
                else {
                    SCStatus = '';
                }
                if (data.status != undefined && data.status != null) {
                    status = data.status;
                }
                else {
                    status = '';
                }
                if (data.FromDate != undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = '';
                }
                if (data.ToDate != undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                if (data.UserID != undefined && data.UserID != null) {
                    UserID = data.UserID;
                }
                else {
                    UserID = '';
                }
                console.log(this.apiUrl + "/WOTimeRevenue");
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        CustomerID: CustomerID,
                        //AssignToUser: AssignToUser,
                        WONo: WONo,
                        State: State,
                        District: District,
                        SCStatus: SCStatus,
                        status: status,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        UserID: UserID,
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    //+ `/${"FillWorkOrderSearchGrid"}`
                    Url: this.apiUrl + "/WOTimeRevenue",
                    Config: config
                });
            };
            WOTimeRevenueGridService.prototype.GetWOTimeRevenueGrid = function (data) {
                console.log(data);
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        DealerID: item.DealerID,
                        CustomerID: item.CustomerID,
                        ModelNo: item.ModelNo,
                        SCNo: item.SCNo,
                        SCCreatedOn: item.SCCreatedOn,
                        SCStatus: item.SCStatus,
                        WONo: item.WONo,
                        WOStatus: item.WOStatus,
                        AssignToUser: item.AssignToUser,
                        ActualStartTime: item.ActualStartTime,
                        ActualEndTime: item.ActualEndTime,
                        WorkStartTime: item.WorkStartTime,
                        WorkEndTime: item.WorkEndTime,
                        InvoiceNo: item.InvoiceNo,
                        TotalInvoiceAmount: item.TotalInvoiceAmount,
                        UserID: item.UserID,
                    });
                }
                return list;
            };
            WOTimeRevenueGridService.prototype.FindAvg = function (data) {
                //console.log(this.apiUrl + `/`);
                var DealerID;
                var AssignToUser;
                var CustomerID;
                var WONo;
                var State;
                var District;
                var SCStatus;
                var status;
                var FromDate;
                var ToDate;
                var UserID;
                if (data.DealerID != undefined && data.DealerID != null) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = '';
                }
                //  if (data.AssignToUser != undefined && data.AssignToUser != null) {
                //  AssignToUser = data.AssignToUser;
                // }
                //  else {
                //   AssignToUser = '';
                //  }
                if (data.CustomerID != undefined && data.CustomerID != null) {
                    CustomerID = data.CustomerID;
                }
                else {
                    CustomerID = '';
                }
                if (data.WONo != undefined && data.WONo != null) {
                    WONo = data.WONo;
                }
                else {
                    WONo = '';
                }
                if (data.State != undefined && data.State != null) {
                    State = data.State;
                }
                else {
                    State = '';
                }
                if (data.District != undefined && data.District != null) {
                    District = data.District;
                }
                else {
                    District = '';
                }
                if (data.SCStatus != undefined && data.SCStatus != null) {
                    SCStatus = data.SCStatus;
                }
                else {
                    SCStatus = '';
                }
                if (data.status != undefined && data.status != null) {
                    status = data.status;
                }
                else {
                    status = '';
                }
                if (data.FromDate != undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = '';
                }
                if (data.ToDate != undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                if (data.UserID != undefined && data.UserID != null) {
                    UserID = data.UserID;
                }
                else {
                    UserID = '';
                }
                console.log(this.apiUrl + "/WOTimeRevenueAvg");
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        CustomerID: CustomerID,
                        //AssignToUser: AssignToUser,
                        WONo: WONo,
                        State: State,
                        District: District,
                        SCStatus: SCStatus,
                        status: status,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        UserID: UserID,
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    //+ `/${"FillWorkOrderSearchGrid"}`
                    Url: this.apiUrl + "/WOTimeRevenueAvg",
                    Config: config
                });
            };
            WOTimeRevenueGridService.prototype.GetWOTimeRevenueAvgGrid = function (data) {
                console.log(data);
                var list = new model.WOTimeRevAvgReportmodel();
                if (data == null || data == undefined) {
                    list.TotalHrsSpent = "";
                    list.Revenue = "";
                    list.AvgRevenuePerHr = "";
                }
                else {
                    list.TotalHrsSpent = data.TotalHrsSpent,
                        list.Revenue = data.Revenue,
                        list.AvgRevenuePerHr = data.AvgRevenuePerHr;
                    //console.log(list);
                }
                return list;
            };
            WOTimeRevenueGridService.prototype.FindSCDataStatus = function (data) {
                var config = {
                    params: {
                        CalledFrom: 'data'
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "ServiceStatus",
                    Config: config
                });
                //ServiceStatus
            };
            WOTimeRevenueGridService.prototype.GetSCDataStatus = function (data) {
                console.log(data);
                var obj = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    obj.push({
                        //SCStatus: item.SCStatus,
                        Status: item.Status,
                        ID: item.ID
                    });
                }
                return obj;
            };
            WOTimeRevenueGridService.$inject = ["$http", "$q", "$cookieStore"];
            return WOTimeRevenueGridService;
        }(GCPL.Service.BaseService));
        Service.WOTimeRevenueGridService = WOTimeRevenueGridService;
        //inject service
        app.AddService("WOTimeRevenueGridService", WOTimeRevenueGridService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WOTimeRevenueService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var IWOAnalysisReportGridService = /** @class */ (function () {
            function IWOAnalysisReportGridService() {
            }
            return IWOAnalysisReportGridService;
        }());
        Model.IWOAnalysisReportGridService = IWOAnalysisReportGridService;
        var WOAnalysisSearchReportmodel = /** @class */ (function () {
            function WOAnalysisSearchReportmodel() {
            }
            return WOAnalysisSearchReportmodel;
        }());
        Model.WOAnalysisSearchReportmodel = WOAnalysisSearchReportmodel;
        var WOAnalysisAvgReportmodel = /** @class */ (function () {
            function WOAnalysisAvgReportmodel() {
            }
            return WOAnalysisAvgReportmodel;
        }());
        Model.WOAnalysisAvgReportmodel = WOAnalysisAvgReportmodel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WOAnalysisModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var servicecallmodel = GCPL.Model.WOAnalysisSearchReportmodel;
            var WOAnalysisController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function WOAnalysisController(_service, _cookieStore, _WorkOrderService, _WorkOrderReportListService, _Sservice, _Dservice, _Autofillservice) {
                    this._cookieStore = _cookieStore;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.UserName = null;
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.DealerID = null;
                    this.WOAnalysisList = null;
                    this.SCStatus = null;
                    this.StateDropDown = null;
                    this.Status = null;
                    this.WorkOrderType = null;
                    this.DistrictDropDown = null;
                    this.WOAnalysisAvgList = null;
                    this.WOAnalysisSerachA = null;
                    this.Cookie = null;
                    this.Service = _service;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.WorkOrderService = _WorkOrderService;
                    this.WorkOrderReportListService = _WorkOrderReportListService;
                    this.WOAnalysisSerachA = new servicecallmodel();
                    this.Sservice = _Sservice;
                    this.Districtservice = _Dservice;
                    this.CustomerAutofill = _Autofillservice;
                }
                WOAnalysisController.prototype.$onInit = function () {
                    this.Init();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                WOAnalysisController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                WOAnalysisController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                WOAnalysisController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtCustomer").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.CustomerAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedCustomerID = ui.item.id;
                            that.WOAnalysisSerachA.CustomerID = ui.item.id;
                            console.log(that.WOAnalysisSerachA.CustomerID);
                        },
                        change: function () {
                        }
                    });
                    this.SCStatus = this.Service.FindSCDataStatus("1").then((function (response) {
                        console.log(response);
                        _this.SCStatus = _this.Service.GetSCDataStatus(response.data.Result);
                        //this.Status=1;
                    }));
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                    this.Status = this.WorkOrderReportListService.FindStatus("1").then((function (response) {
                        console.log(response);
                        _this.Status = _this.WorkOrderReportListService.GetStatus(response.data.Result);
                    }));
                    this.WorkOrderType = this.WorkOrderService.Find().then((function (response) {
                        _this.WorkOrderType = _this.WorkOrderService.GetWorkOrderType(response.data.Result);
                        //  this.Search();
                        //this.ServiceCallListCreatedService.FindCreated(this.Mandatory).then((response => {
                        //    this.ServiceCallList = this.ServiceCallListCreatedService.GetServiceCallListCreated(response.data.Result);
                        //    this.shownItems = this.ServiceCallList;
                        //  }));
                    }));
                };
                WOAnalysisController.prototype.Search = function () {
                    var _this = this;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                    debugger;
                    this.WOAnalysisAvgList = this.Service.FindAvg(this.WOAnalysisSerachA).then((function (response) {
                        _this.WOAnalysisAvgList = _this.Service.GetWOAnalysisAvgGrid(response.data.Result);
                        //this.WOAnalysisAvgList.forEach(function (value, key) {
                    }));
                };
                WOAnalysisController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.WOAnalysisSerachA.FromDate = document.getElementById("txtFromDate").value;
                    this.WOAnalysisSerachA.ToDate = document.getElementById("txtToDate").value;
                    //this.SCListSerachA.status = this.Status;
                    //this.SCListSerachA.status = this.SCStatus;
                    this.WOAnalysisList = this.Service.Find(this.WOAnalysisSerachA).then((function (response) {
                        _this.WOAnalysisList = _this.Service.GetWOAnalysisGrid(response.data.Result);
                        _this.WOAnalysisList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.WOAnalysisList.slice(0, that.numRecords);
                    }));
                };
                WOAnalysisController.prototype.getStates = function () {
                    var _this = this;
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                };
                WOAnalysisController.prototype.District = function () {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.WOAnalysisSerachA.State).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                WOAnalysisController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                    this.Search();
                };
                WOAnalysisController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.WOAnalysisList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                WOAnalysisController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.WOAnalysisList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                WOAnalysisController.prototype.Clear = function () {
                    debugger;
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    document.getElementById("txtCustomer").value = "";
                    //(<HTMLInputElement>document.getElementById("txtUserName")).value = "";
                    this.WOAnalysisSerachA.WONo = "";
                    this.WOAnalysisSerachA.CustomerID = "";
                    this.WOAnalysisSerachA.State = "";
                    this.WOAnalysisSerachA.District = "";
                    this.DistrictDropDown = "";
                    this.WOAnalysisSerachA.status = "";
                    this.WOAnalysisSerachA.SCStatus = "";
                    this.WOAnalysisSerachA.WOTypeID = "";
                    $("#ddlState").val("");
                    $("#ddlDistrict").val("");
                    $("#ddlSCStatus").val("");
                    $("#ddlWoStatus").val("");
                    $("#ddlWoType").val("");
                    //this.Status = "";
                    //this.shownItems = null;
                    //this.WOAnalysisAvgList = null;
                    //this.WOAnalysisSerachA = null;
                    //this.WOAnalysisList = null;
                    //this.Search();
                };
                WOAnalysisController.prototype.downloadCSV = function (csv, filename) {
                    var csvFile;
                    var downloadLink;
                    // CSV file
                    csvFile = new Blob([csv], { type: "text/csv" });
                    // Download link
                    downloadLink = document.createElement("a");
                    // File name
                    downloadLink.download = filename;
                    // Create a link to the file
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    // Hide download link
                    downloadLink.style.display = "none";
                    // Add the link to DOM
                    document.body.appendChild(downloadLink);
                    // Click download link
                    downloadLink.click();
                };
                WOAnalysisController.prototype.exportTableToCSV = function (filename) {
                    var csv = [];
                    var rows = document.querySelectorAll(".excel tr");
                    for (var i = 0; i < rows.length; i++) {
                        var row = [], cols = rows[i].querySelectorAll("td, th");
                        for (var j = 0; j < cols.length; j++)
                            row.push(cols[j].innerHTML);
                        csv.push(row.join(","));
                    }
                    // Download CSV file
                    this.downloadCSV(csv.join("\n"), filename);
                };
                WOAnalysisController.$inject = ["WOAnalysisGridService", "$cookieStore", "WorkOrderService", "WorkOrderReportListService", "StateService", "DistrictService",
                    "CustomeraAtofillService"];
                return WOAnalysisController;
            }());
            var WOAnalysisComponentController = /** @class */ (function () {
                function WOAnalysisComponentController() {
                    this.controller = WOAnalysisController;
                    this.templateUrl = "/Scripts/App/Reports/WOAnalysis/Template/_WOAnalysis.html";
                }
                WOAnalysisComponentController.Name = "woanalysiscomponent";
                return WOAnalysisComponentController;
            }());
            app.AddComponent(WOAnalysisComponentController.Name, new WOAnalysisComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WOAnalysisComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var WOAnalysisController = /** @class */ (function (_super) {
            __extends(WOAnalysisController, _super);
            function WOAnalysisController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return WOAnalysisController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.WOAnalysisController = WOAnalysisController;
        app.AddController("WOAnalysisController", WOAnalysisController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WOAnalysisController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var WOAnalysisGridService = /** @class */ (function (_super) {
            __extends(WOAnalysisGridService, _super);
            function WOAnalysisGridService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.Cookie = null;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            WOAnalysisGridService.prototype.Find = function (data) {
                // console.log(this.apiUrl + `/FillWorkOrderSearchGrid`);
                var DealerID;
                var CustomerID;
                var WONo;
                var State;
                var District;
                var SCStatus;
                var status;
                var WOTypeID;
                var FromDate;
                var ToDate;
                var UserID;
                if (data.DealerID != undefined && data.DealerID != null) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = '';
                }
                if (data.CustomerID != undefined && data.CustomerID != null) {
                    CustomerID = data.CustomerID;
                }
                else {
                    CustomerID = '';
                }
                if (data.WONo != undefined && data.WONo != null) {
                    WONo = data.WONo;
                }
                else {
                    WONo = '';
                }
                if (data.State != undefined && data.State != null) {
                    State = data.State;
                }
                else {
                    State = '';
                }
                if (data.District != undefined && data.District != null) {
                    District = data.District;
                }
                else {
                    District = '';
                }
                if (data.SCStatus != undefined && data.SCStatus != null) {
                    SCStatus = data.SCStatus;
                }
                else {
                    SCStatus = '';
                }
                if (data.status != undefined && data.status != null) {
                    status = data.status;
                }
                else {
                    status = '';
                }
                if (data.WOTypeID != undefined && data.WOTypeID != null) {
                    WOTypeID = data.WOTypeID;
                }
                else {
                    WOTypeID = '';
                }
                if (data.FromDate != undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = '';
                }
                if (data.ToDate != undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                if (data.UserID != undefined && data.UserID != null) {
                    UserID = data.UserID;
                }
                else {
                    UserID = '';
                }
                console.log(this.apiUrl + "/WOAnalysis");
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        CustomerID: CustomerID,
                        WONo: WONo,
                        State: State,
                        District: District,
                        SCStatus: SCStatus,
                        status: status,
                        WOTypeID: WOTypeID,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        UserID: UserID,
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    //+ `/${"FillWorkOrderSearchGrid"}`
                    Url: this.apiUrl + "/WOAnalysis",
                    Config: config
                });
            };
            WOAnalysisGridService.prototype.GetWOAnalysisGrid = function (data) {
                console.log(data);
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        DealerID: item.DealerID,
                        CustomerID: item.CustomerID,
                        ModelNo: item.ModelNo,
                        SCNo: item.SCNo,
                        SCCreatedOn: item.SCCreatedOn,
                        SCStatus: item.SCStatus,
                        WONo: item.WONo,
                        WOStatus: item.WOStatus,
                        AssignToUser: item.AssignToUser,
                        WOTypeID: item.WOTypeID,
                        WOType: item.WOType,
                        InvoiceNo: item.InvoiceNo,
                        TotalInvoiceAmount: item.TotalInvoiceAmount,
                        UserID: item.UserID,
                    });
                }
                return list;
            };
            WOAnalysisGridService.prototype.FindAvg = function (data) {
                debugger;
                // console.log(this.apiUrl + `/FillWorkOrderSearchGrid`);
                var DealerID;
                var CustomerID;
                var WONo;
                var State;
                var District;
                var SCStatus;
                var status;
                var WOType;
                var FromDate;
                var ToDate;
                var UserID;
                if (data.DealerID != undefined && data.DealerID != null) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = '';
                }
                //if (data.AssignToUser != undefined && data.AssignToUser != null) {
                //    AssignToUser = data.AssignToUser;
                //}
                //else {
                //    AssignToUser = '';
                //}
                if (data.CustomerID != undefined && data.CustomerID != null) {
                    CustomerID = data.CustomerID;
                }
                else {
                    CustomerID = '';
                }
                if (data.WONo != undefined && data.WONo != null) {
                    WONo = data.WONo;
                }
                else {
                    WONo = '';
                }
                if (data.State != undefined && data.State != null) {
                    State = data.State;
                }
                else {
                    State = '';
                }
                if (data.District != undefined && data.District != null) {
                    District = data.District;
                }
                else {
                    District = '';
                }
                if (data.SCStatus != undefined && data.SCStatus != null) {
                    SCStatus = data.SCStatus;
                }
                else {
                    SCStatus = '';
                }
                if (data.status != undefined && data.status != null) {
                    status = data.status;
                }
                else {
                    status = '';
                }
                if (data.WOType != undefined && data.WOType != null) {
                    WOType = data.WOType;
                }
                else {
                    WOType = '';
                }
                if (data.FromDate != undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = '';
                }
                if (data.ToDate != undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                if (data.UserID != undefined && data.UserID != null) {
                    UserID = data.UserID;
                }
                else {
                    UserID = '';
                }
                console.log(this.apiUrl + "/WOAnalysisAvg");
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        CustomerID: CustomerID,
                        // AssignToUser: AssignToUser,
                        WONo: WONo,
                        State: State,
                        District: District,
                        SCStatus: SCStatus,
                        status: status,
                        WOType: WOType,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        UserID: UserID,
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    //+ `/${"FillWorkOrderSearchGrid"}`
                    Url: this.apiUrl + "/WOAnalysisAvg",
                    Config: config
                });
            };
            WOAnalysisGridService.prototype.GetWOAnalysisAvgGrid = function (data) {
                debugger;
                console.log(data);
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        FailureReason: item.FailureTypes,
                        NoofWos: item.NoofWos,
                        BillingAmount: item.BillingAmount
                    });
                }
                return list;
            };
            WOAnalysisGridService.prototype.FindSCDataStatus = function (data) {
                var config = {
                    params: {
                        CalledFrom: 'data'
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "ServiceStatus",
                    Config: config
                });
                //ServiceStatus
            };
            WOAnalysisGridService.prototype.GetSCDataStatus = function (data) {
                console.log(data);
                var obj = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    obj.push({
                        //SCStatus: item.SCStatus,
                        Status: item.Status,
                        ID: item.ID
                    });
                }
                return obj;
            };
            WOAnalysisGridService.$inject = ["$http", "$q", "$cookieStore"];
            return WOAnalysisGridService;
        }(GCPL.Service.BaseService));
        Service.WOAnalysisGridService = WOAnalysisGridService;
        //inject service
        app.AddService("WOAnalysisGridService", WOAnalysisGridService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WOAnalysisService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var IStockListwahrehousenamemodelChange1 = /** @class */ (function () {
            function IStockListwahrehousenamemodelChange1() {
            }
            return IStockListwahrehousenamemodelChange1;
        }());
        Model.IStockListwahrehousenamemodelChange1 = IStockListwahrehousenamemodelChange1;
        var StockListGridChange1 = /** @class */ (function () {
            function StockListGridChange1() {
            }
            return StockListGridChange1;
        }());
        Model.StockListGridChange1 = StockListGridChange1;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SpareStocksReportModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var SpareStocksReportComponentController = /** @class */ (function () {
                function SpareStocksReportComponentController(_ItemAutoservice, _WareHouse, _GridFill) {
                    this.Description = null;
                    this.WareHousename = null;
                    this.grid = null;
                    this.WHID = null;
                    this.Itemid = null;
                    this.QItemID = null;
                    this.IsWeb = null;
                    this.Total = null;
                    this.QtyChange = null;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.WareHouse = _WareHouse;
                    this.GridFill = _GridFill;
                }
                SpareStocksReportComponentController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                SpareStocksReportComponentController.prototype.Init = function () {
                    var _this = this;
                    this.WareHousename = this.WareHouse.Find().then((function (response) {
                        _this.WareHousename = _this.WareHouse.GetWareHouse(response.data.Result);
                    }));
                    this.grid = this.GridFill.Find('', '', 'false').then((function (response) {
                        _this.grid = _this.GridFill.GetGrid(response.data.Result);
                        _this.Total = 0;
                        var that = _this;
                        _this.grid.forEach(function (value, key) {
                            that.Total = that.Total + parseFloat(value.StockValue == "" ? 0 : value.StockValue);
                        });
                    }));
                };
                SpareStocksReportComponentController.prototype.search = function (data) {
                    var _this = this;
                    if (this.WHID == null) {
                        this.WHID = '';
                    }
                    if (this.Itemid == null) {
                        this.Itemid = '';
                    }
                    if (this.IsWeb == null) {
                        this.IsWeb = 'false';
                    }
                    if (data == '') {
                        this.Itemid = '';
                    }
                    this.grid = this.GridFill.Find(this.WHID, this.Itemid, this.IsWeb).then((function (response) {
                        _this.grid = _this.GridFill.GetGrid(response.data.Result);
                    }));
                };
                SpareStocksReportComponentController.prototype.Clear = function () {
                    this.Init();
                    document.getElementById("txtDescription").value = '';
                    this.IsWeb = 'false';
                    this.grid = null;
                };
                SpareStocksReportComponentController.prototype.AutoSearch = function () {
                    var that = this;
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            that.ItemDescriptionAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedItemID = ui.item.id;
                            that.QtyChange.ItemID = ui.item.id;
                            that.Itemid = that.QtyChange.ItemID;
                            that.Description = ui.item.value;
                        },
                        change: function () {
                        }
                    });
                };
                SpareStocksReportComponentController.$inject = ["itemDescriptionService", "StockListWarehousenameService", "StockGridServicenew"];
                return SpareStocksReportComponentController;
            }());
            var SpareStocksReportController = /** @class */ (function () {
                function SpareStocksReportController() {
                    this.controller = SpareStocksReportComponentController;
                    this.templateUrl = "/Scripts/App/Reports/SpareStocksReport/Template/_SpareStocksReport.html";
                }
                SpareStocksReportController.Name = "sparestocksreportcomponent";
                return SpareStocksReportController;
            }());
            app.AddComponent(SpareStocksReportController.Name, new SpareStocksReportController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SpareStocksReportComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var SpareStocksReportController = /** @class */ (function (_super) {
            __extends(SpareStocksReportController, _super);
            function SpareStocksReportController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SpareStocksReportController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.SpareStocksReportController = SpareStocksReportController;
        app.AddController("SpareStocksReportController", SpareStocksReportController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SpareStocksReportController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var StockListWarehousenameService1 = /** @class */ (function (_super) {
            __extends(StockListWarehousenameService1, _super);
            function StockListWarehousenameService1($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/" + "Warehousename";
                _this.Cookie = _cookieStore;
                return _this;
            }
            StockListWarehousenameService1.prototype.Find = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            StockListWarehousenameService1.prototype.GetWareHouse = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        WHID: item.WHID,
                        WHName: item.WHName
                    });
                }
                return list;
            };
            StockListWarehousenameService1.prototype.Findgrid = function (data) {
                var config = {
                    params: {
                        Dealerid: this.Cookie.get('UserInfo')['DealerID'],
                        Itemid: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            StockListWarehousenameService1.$inject = ["$http", "$q", "$cookieStore"];
            return StockListWarehousenameService1;
        }(GCPL.Service.BaseService));
        Service.StockListWarehousenameService1 = StockListWarehousenameService1;
        //inject service
        app.AddService("StockListWarehousenameService", Service.StockListWarehousenameService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//gtrid
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var StockGridService1 = /** @class */ (function (_super) {
            __extends(StockGridService1, _super);
            function StockGridService1($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/" + "StockListgridfill";
                _this.Cookie = _cookieStore;
                return _this;
            }
            StockGridService1.prototype.Find = function (WHID, ItemID) {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        Itemid: ItemID,
                        WHID: WHID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            StockGridService1.prototype.GetGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        StockID: item.StockID,
                        PartNumber: item.PartNumber,
                        Stock: item.Stock,
                        UOM: item.UOM,
                        UOMname: item.UOMname,
                        Description: item.Description,
                        WHName: item.WHName,
                        MAP: item.MAP,
                        StockValue: item.StockValue,
                        ItemNo: item.ItemNo,
                        TechStock: item.TechStock,
                        TotalStock: item.TotalStock,
                    });
                }
                return list;
            };
            StockGridService1.$inject = ["$http", "$q", "$cookieStore"];
            return StockGridService1;
        }(GCPL.Service.BaseService));
        Service.StockGridService1 = StockGridService1;
        //inject service
        app.AddService("StockGridService", Service.StockGridService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var StockGridServicenew1 = /** @class */ (function (_super) {
            __extends(StockGridServicenew1, _super);
            function StockGridServicenew1($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/" + "StaockListNewctrl";
                _this.Cookie = _cookieStore;
                return _this;
            }
            StockGridServicenew1.prototype.Find = function (WHID, ItemID, IsWeb) {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        Itemid: ItemID,
                        WHID: WHID,
                        IsWeb: IsWeb
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            StockGridServicenew1.prototype.GetGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        StockID: item.StockID,
                        PartNumber: item.PartNumber,
                        Stock: item.Stock,
                        UOM: item.UOM,
                        UOMname: item.UOMname,
                        Description: item.Description,
                        WHName: item.WHName,
                        MAP: item.MAP,
                        StockValue: item.StockValue,
                        ItemNo: item.ItemNo,
                        TechStock: item.TechStock,
                        TotalStock: item.TotalStock,
                    });
                }
                return list;
            };
            StockGridServicenew1.$inject = ["$http", "$q", "$cookieStore"];
            return StockGridServicenew1;
        }(GCPL.Service.BaseService));
        Service.StockGridServicenew1 = StockGridServicenew1;
        //inject service
        app.AddService("StockGridServicenew", Service.StockGridServicenew);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var UOMddlService1 = /** @class */ (function (_super) {
            __extends(UOMddlService1, _super);
            function UOMddlService1($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.Cookie = _cookieStore;
                _this.apiUrl = _this.url + "/" + "ItemMastergetUOM";
                return _this;
            }
            UOMddlService1.prototype.Find = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            UOMddlService1.prototype.GetUOM = function (data) {
                var list = Array();
                for (var _i = 0, data_4 = data; _i < data_4.length; _i++) {
                    var item = data_4[_i];
                    list.push({
                        UOMID: item.UOMID,
                        UOMName: item.UOMName,
                    });
                }
                return list;
            };
            UOMddlService1.$inject = ["$http", "$q", "$cookieStore"];
            return UOMddlService1;
        }(GCPL.Service.BaseService));
        Service.UOMddlService1 = UOMddlService1;
        //inject service
        app.AddService("UOMddlService", Service.UOMddlService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SpareStocksReportService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var LeadSalesAnalysisSearch = /** @class */ (function () {
            function LeadSalesAnalysisSearch() {
            }
            return LeadSalesAnalysisSearch;
        }());
        Model.LeadSalesAnalysisSearch = LeadSalesAnalysisSearch;
        var SalesAnalysisGrid = /** @class */ (function () {
            function SalesAnalysisGrid() {
            }
            return SalesAnalysisGrid;
        }());
        Model.SalesAnalysisGrid = SalesAnalysisGrid;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesRepAnalysisModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var SalesAnalysisSearch = GCPL.Model.LeadSalesAnalysisSearch;
            var SalesRepAnalysisController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function SalesRepAnalysisController(_getAutoSalesrep, _Sservice, _Dservice, _Autofillservice, _LeadSalesAnalysisGrid, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.LeadSalesAnalysisSearch = null;
                    this.StateDropDown = null;
                    this.DistrictDropDown = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.LeadSalesAnalysisList = null;
                    this.Cookie = null;
                    this.getAutoSalesrep = _getAutoSalesrep;
                    this.Cookie = _cookieStore;
                    this.Sservice = _Sservice;
                    this.Districtservice = _Dservice;
                    this.CustomerAutofill = _Autofillservice;
                    this.LeadSalesAnalysisGrid = _LeadSalesAnalysisGrid;
                    this.LeadSalesAnalysisSearch = new SalesAnalysisSearch();
                    this.LeadSalesAnalysisList = new Array();
                }
                SalesRepAnalysisController.prototype.$onInit = function () {
                    this.Init();
                    var that = this;
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                SalesRepAnalysisController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                SalesRepAnalysisController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                SalesRepAnalysisController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    var filters;
                    $("#txtSalesRep").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.getAutoSalesrep.FilterAutoComplete(request).then((function (response) {
                                var data = that.getAutoSalesrep.GetAutoFillSalesRep(response.data.Result);
                                console.log(data);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Name,
                                        value: item.Name,
                                        id: item.UserID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.LeadSalesAnalysisSearch.SaleRep = ui.item.id;
                            //console.log(that.getLeadSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    $("#txtAllocate").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.getAutoSalesrep.FilterAutoComplete(request).then((function (response) {
                                var data = that.getAutoSalesrep.GetAutoFillSalesRep(response.data.Result);
                                console.log(data);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Name,
                                        value: item.Name,
                                        id: item.UserID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.LeadSalesAnalysisSearch.AllocateTo = ui.item.id;
                            //console.log(that.getLeadSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    $("#txtCustomer").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.CustomerAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.LeadSalesAnalysisSearch.CustomerId = ui.item.id;
                            //that.LeadListSerachA.SearchInput = ui.item.value;
                            //console.log(that.LeadListSerachA.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                };
                SalesRepAnalysisController.prototype.District = function (data) {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.LeadSalesAnalysisSearch.stateId).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                SalesRepAnalysisController.prototype.Search = function () {
                    this.LeadSalesAnalysisSearch.FromDate = document.getElementById("txtFromDate").value;
                    this.LeadSalesAnalysisSearch.ToDate = document.getElementById("txtToDate").value;
                    //this.getVistReportSearch.CustomerId = "";
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                SalesRepAnalysisController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.LeadSalesAnalysisList = this.LeadSalesAnalysisGrid.Find(this.LeadSalesAnalysisSearch).then((function (response) {
                        _this.LeadSalesAnalysisList = _this.LeadSalesAnalysisGrid.GetAnalysisreportGrid(response.data.Result);
                        if (_this.LeadSalesAnalysisList.length > 0) {
                            $("#nullDataDiv").hide();
                            _this.LeadSalesAnalysisList.forEach(function (value, key) {
                                that.incre = parseInt(key) + 1;
                            });
                            _this.maxPages = (that.incre / that.numRecords);
                            _this.ShowBack = false;
                            _this.ShowNext = that.maxPages > 1 ? true : false;
                            _this.shownItems = _this.LeadSalesAnalysisList.slice(0, that.numRecords);
                        }
                        else {
                            $("#nullDataDiv").show();
                        }
                    }));
                };
                SalesRepAnalysisController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                SalesRepAnalysisController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.LeadSalesAnalysisList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                SalesRepAnalysisController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.LeadSalesAnalysisList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                SalesRepAnalysisController.prototype.Clear = function () {
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    this.LeadSalesAnalysisSearch.SaleRep = "";
                    this.LeadSalesAnalysisSearch.AllocateTo = "";
                    this.LeadSalesAnalysisSearch.CustomerId = "";
                    this.LeadSalesAnalysisSearch.Region = "";
                    this.LeadSalesAnalysisSearch.stateId = "";
                    this.LeadSalesAnalysisSearch.FromDate = "";
                    this.LeadSalesAnalysisSearch.ToDate = "";
                    $("#txtSalesRep").val("");
                    $("#txtAllocate").val("");
                    $("#txtCustomer").val("");
                    $("#ddlstate").val("");
                    $("#ddlRegion").val("");
                    this.DistrictDropDown = "";
                    // $("#ddlRegion").empty();
                    $("#FromDate").val("");
                    $("#ToDate").val("");
                };
                SalesRepAnalysisController.prototype.downloadCSV = function (csv, filename) {
                    var csvFile;
                    var downloadLink;
                    // CSV file
                    csvFile = new Blob([csv], { type: "text/csv" });
                    // Download link
                    downloadLink = document.createElement("a");
                    // File name
                    downloadLink.download = filename;
                    // Create a link to the file
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    // Hide download link
                    downloadLink.style.display = "none";
                    // Add the link to DOM
                    document.body.appendChild(downloadLink);
                    // Click download link
                    downloadLink.click();
                };
                SalesRepAnalysisController.prototype.exportTableToCSV = function (filename) {
                    var csv = [];
                    var rows = document.querySelectorAll(".excel tr");
                    for (var i = 0; i < rows.length; i++) {
                        var row = [], cols = rows[i].querySelectorAll("td, th");
                        for (var j = 0; j < cols.length; j++)
                            row.push(cols[j].innerHTML);
                        csv.push(row.join(","));
                    }
                    // Download CSV file
                    this.downloadCSV(csv.join("\n"), filename);
                };
                SalesRepAnalysisController.$inject = ["SalesRepaAutofillService", "StateService", "DistrictService", "CustomeraAtofillService", "LeadSalesAnalysisReportService", "$cookieStore"];
                return SalesRepAnalysisController;
            }());
            var SalesRepAnalysisComponentController = /** @class */ (function () {
                function SalesRepAnalysisComponentController() {
                    this.controller = SalesRepAnalysisController;
                    this.templateUrl = "/Scripts/App/LeadModelReport/SalesRepAnalysis/Template/_SalesRepAnalysis.html";
                }
                SalesRepAnalysisComponentController.Name = "salesrepanalysiscomponent";
                return SalesRepAnalysisComponentController;
            }());
            app.AddComponent(SalesRepAnalysisComponentController.Name, new SalesRepAnalysisComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesRepAnalysisComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var SalesRepAnalysisController = /** @class */ (function (_super) {
            __extends(SalesRepAnalysisController, _super);
            function SalesRepAnalysisController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SalesRepAnalysisController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.SalesRepAnalysisController = SalesRepAnalysisController;
        app.AddController("SalesRepAnalysisController", SalesRepAnalysisController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesRepAnalysisController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var LeadSalesAnalysisReportService = /** @class */ (function (_super) {
            __extends(LeadSalesAnalysisReportService, _super);
            function LeadSalesAnalysisReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            LeadSalesAnalysisReportService.prototype.Find = function (data) {
                debugger;
                var url = this.apiUrl + "/LeadSaleAnalysis";
                var SaleRep;
                var CustomerId;
                var FromDate;
                var Region;
                var stateId;
                var ToDate;
                var AllocateTo;
                if (data.FromDate == undefined) {
                    FromDate = '';
                }
                else {
                    FromDate = data.FromDate;
                }
                if (data.ToDate == undefined) {
                    ToDate = '';
                }
                else {
                    ToDate = data.ToDate;
                }
                if (data.Region == undefined) {
                    Region = '';
                }
                else {
                    Region = data.Region;
                }
                if (data.stateId == undefined) {
                    stateId = '';
                }
                else {
                    stateId = data.stateId;
                }
                if (data.CustomerId == undefined) {
                    CustomerId = '';
                }
                else {
                    CustomerId = data.CustomerId;
                }
                if (data.SaleRep == undefined) {
                    SaleRep = '';
                }
                else {
                    SaleRep = data.SaleRep;
                }
                if (data.AllocateTo == undefined) {
                    AllocateTo = '';
                }
                else {
                    AllocateTo = data.AllocateTo;
                }
                var config = {
                    params: {
                        // string SaleRep, string CustomerId, string Vstatus, string Region, string stateId, string FromDate, string ToDate, string DealerID
                        SaleRep: SaleRep,
                        CustomerId: CustomerId,
                        Region: Region,
                        stateId: stateId,
                        Fromdate: FromDate,
                        ToDate: ToDate,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        UserID: this.Cookie.get('UserInfo')['UserID'],
                        RoleID: this.Cookie.get('UserInfo')['RoleID'],
                        AllocateTo: AllocateTo
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            LeadSalesAnalysisReportService.prototype.GetAnalysisreportGrid = function (data) {
                //console.log(data);
                var list = Array();
                console.log("4121516515151");
                console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        Regionname: item.Regionname,
                        State: item.State,
                        SaleRep: item.SalesRep,
                        NoofVisits: item.NoofVisits,
                        UniqueVisits: item.uniquevisit,
                        LeadsCreated: item.LeadsCreated,
                        LeadsWorkedon: item.LeadsWorkedOn,
                        WON: item.won,
                        Lost: item.lost,
                        NoDeals: item.NoDeal,
                        Revenue: item.ItemPrice
                    });
                }
                return list;
            };
            LeadSalesAnalysisReportService.$inject = ["$http", "$q", "$cookieStore"];
            return LeadSalesAnalysisReportService;
        }(GCPL.Service.BaseService));
        Service.LeadSalesAnalysisReportService = LeadSalesAnalysisReportService;
        app.AddService("LeadSalesAnalysisReportService", LeadSalesAnalysisReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesRepAnalysisService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var Top10CustomerGridview = /** @class */ (function () {
            function Top10CustomerGridview() {
            }
            return Top10CustomerGridview;
        }());
        Model.Top10CustomerGridview = Top10CustomerGridview;
        var Top10CustomerSearchmodel = /** @class */ (function () {
            function Top10CustomerSearchmodel() {
            }
            return Top10CustomerSearchmodel;
        }());
        Model.Top10CustomerSearchmodel = Top10CustomerSearchmodel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=Top10CustomersModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var Top10CustomerModel = GCPL.Model.Top10CustomerSearchmodel;
            var Top10CustomersController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function Top10CustomersController(_Top10CustomerService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.Top10CustomerGridView = null;
                    this.Top10CustomerSearchModel = null;
                    this.GetCustomerSalesStatus = null;
                    this.DealerID = null;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.Cookie = null;
                    this.Top10CustomerService = _Top10CustomerService;
                    this.Cookie = _cookieStore;
                    this.Top10CustomerSearchModel = new Top10CustomerModel();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.Top10CustomerGridView = Array();
                }
                Top10CustomersController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                Top10CustomersController.prototype.Init = function () {
                };
                Top10CustomersController.prototype.Search = function () {
                    this.Top10CustomerSearchModel.Period = this.GetCustomerSalesStatus.Period;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                Top10CustomersController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.Top10CustomerService.Find(this.Top10CustomerSearchModel).then((function (response) {
                        _this.Top10CustomerGridView = _this.Top10CustomerService.GetTopCustomerGrid(response.data.Result);
                        _this.Top10CustomerGridView.forEach(function (value, key) {
                            that.incre = key + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.Top10CustomerGridView.slice(0, that.numRecords);
                    }));
                };
                Top10CustomersController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                Top10CustomersController.prototype.Clear = function () {
                    $('#PeriodSelect').prop('selectedIndex', 0);
                    this.GetCustomerSalesStatus.Period = $('#PeriodSelect').val();
                    this.shownItems = null;
                    this.Top10CustomerGridView.length = 0;
                };
                Top10CustomersController.$inject = ["Top10CustomersService", "$cookieStore"];
                return Top10CustomersController;
            }());
            var Top10CustomersComponentController = /** @class */ (function () {
                function Top10CustomersComponentController() {
                    this.controller = Top10CustomersController;
                    this.templateUrl = "/Scripts/App/Reports/TopTenCustomerReport/Template/_Top10Customers.html";
                }
                Top10CustomersComponentController.Name = "top10customerscomponent";
                return Top10CustomersComponentController;
            }());
            app.AddComponent(Top10CustomersComponentController.Name, new Top10CustomersComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=Top10CustomersComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var Top10CustomersController = /** @class */ (function (_super) {
            __extends(Top10CustomersController, _super);
            function Top10CustomersController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return Top10CustomersController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.Top10CustomersController = Top10CustomersController;
        app.AddController("Top10CustomersController", Top10CustomersController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=Top10CustomersController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var Top10CustomersService = /** @class */ (function (_super) {
            __extends(Top10CustomersService, _super);
            function Top10CustomersService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            Top10CustomersService.prototype.Find = function (data) {
                var url = this.apiUrl + "/Top10CustomerReport";
                var Period;
                if (data.Period !== undefined) {
                    Period = data.Period;
                }
                else {
                    Period = "";
                }
                var config = {
                    params: {
                        Period: Period,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            Top10CustomersService.prototype.GetTopCustomerGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        CustomerName: item.CustomerName,
                        Percentage: item.Percentage,
                        Sales: item.Sales,
                        TotalSales: item.TotalSales
                    });
                }
                return list;
            };
            Top10CustomersService.prototype.FindCustomerSalesStatus = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/Top10CustomerReport",
                    Config: config
                });
            };
            Top10CustomersService.prototype.GetCustomerSalesStatus = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        Period: item.Period,
                        DealerID: item.DealerID
                    });
                }
                return list;
            };
            Top10CustomersService.$inject = ["$http", "$q", "$cookieStore"];
            return Top10CustomersService;
        }(GCPL.Service.BaseService));
        Service.Top10CustomersService = Top10CustomersService;
        app.AddService("Top10CustomersService", Top10CustomersService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=Top10CustomersService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var Top10ItemsGridview = /** @class */ (function () {
            function Top10ItemsGridview() {
            }
            return Top10ItemsGridview;
        }());
        Model.Top10ItemsGridview = Top10ItemsGridview;
        var Top10ItemsSearchmodel = /** @class */ (function () {
            function Top10ItemsSearchmodel() {
            }
            return Top10ItemsSearchmodel;
        }());
        Model.Top10ItemsSearchmodel = Top10ItemsSearchmodel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=Top10ItemsModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var Top10ItemsModel = GCPL.Model.Top10ItemsSearchmodel;
            var Top10ItemsController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function Top10ItemsController(_Top10ItemsService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.Top10ItemsGridView = null;
                    this.Top10ItemsSearchModel = null;
                    this.GetItemsSalesStatus = null;
                    this.DealerID = null;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.Cookie = null;
                    this.Top10ItemsService = _Top10ItemsService;
                    this.Cookie = _cookieStore;
                    this.Top10ItemsSearchModel = new Top10ItemsModel();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.Top10ItemsGridView = Array();
                }
                Top10ItemsController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                Top10ItemsController.prototype.Init = function () {
                };
                Top10ItemsController.prototype.Search = function () {
                    this.Top10ItemsSearchModel.Period = this.GetItemsSalesStatus.Period;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                Top10ItemsController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.Top10ItemsService.Find(this.Top10ItemsSearchModel).then((function (response) {
                        _this.Top10ItemsGridView = _this.Top10ItemsService.GetTopItemsGrid(response.data.Result);
                        _this.Top10ItemsGridView.forEach(function (value, key) {
                            that.incre = key + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.Top10ItemsGridView.slice(0, that.numRecords);
                    }));
                };
                Top10ItemsController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                Top10ItemsController.prototype.Clear = function () {
                    $('#PeriodSelect').prop('selectedIndex', 0);
                    this.GetItemsSalesStatus.Period = $('#PeriodSelect').val();
                    this.shownItems = null;
                    this.Top10ItemsGridView.length = 0;
                };
                Top10ItemsController.$inject = ["Top10ItemsService", "$cookieStore"];
                return Top10ItemsController;
            }());
            var Top10ItemsComponentController = /** @class */ (function () {
                function Top10ItemsComponentController() {
                    this.controller = Top10ItemsController;
                    this.templateUrl = "/Scripts/App/Reports/Top10ItemsReport/Template/_Top10Items.html";
                }
                Top10ItemsComponentController.Name = "top10itemscomponent";
                return Top10ItemsComponentController;
            }());
            app.AddComponent(Top10ItemsComponentController.Name, new Top10ItemsComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=Top10ItemsComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var Top10ItemsController = /** @class */ (function (_super) {
            __extends(Top10ItemsController, _super);
            function Top10ItemsController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return Top10ItemsController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.Top10ItemsController = Top10ItemsController;
        app.AddController("Top10ItemsController", Top10ItemsController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=Top10ItemsController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var Top10ItemsService = /** @class */ (function (_super) {
            __extends(Top10ItemsService, _super);
            function Top10ItemsService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            Top10ItemsService.prototype.Find = function (data) {
                var url = this.apiUrl + "/Top10ItemsReport";
                var Period;
                if (data.Period !== undefined) {
                    Period = data.Period;
                }
                else {
                    Period = "";
                }
                var config = {
                    params: {
                        Period: Period,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            Top10ItemsService.prototype.GetTopItemsGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        ItemDescription: item.ItemDescription,
                        Percentage: item.Percentage,
                        Sales: item.Sales,
                        TotalSales: item.TotalSales
                    });
                }
                return list;
            };
            Top10ItemsService.prototype.FindItemsSalesStatus = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/Top10ItemsReport",
                    Config: config
                });
            };
            Top10ItemsService.prototype.GetItemsSalesStatus = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        Period: item.Period,
                        DealerID: item.DealerID
                    });
                }
                return list;
            };
            Top10ItemsService.$inject = ["$http", "$q", "$cookieStore"];
            return Top10ItemsService;
        }(GCPL.Service.BaseService));
        Service.Top10ItemsService = Top10ItemsService;
        app.AddService("Top10ItemsService", Top10ItemsService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=Top10ItemsService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var BillListDtlsSearch = /** @class */ (function () {
            function BillListDtlsSearch() {
            }
            return BillListDtlsSearch;
        }());
        Model.BillListDtlsSearch = BillListDtlsSearch;
        var BillingListDtlsGrid = /** @class */ (function () {
            function BillingListDtlsGrid() {
            }
            return BillingListDtlsGrid;
        }());
        Model.BillingListDtlsGrid = BillingListDtlsGrid;
        var HeaderdataDtls = /** @class */ (function () {
            function HeaderdataDtls() {
            }
            return HeaderdataDtls;
        }());
        Model.HeaderdataDtls = HeaderdataDtls;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BillingListDetailsModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var BillSearchModel = GCPL.Model.BillListDtlsSearch;
            var QtyListCount = GCPL.Model.HeaderdataDtls;
            var BillingListDetailsController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function BillingListDetailsController(_SalesOrderListService, _Autofillservice, _BillingListService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.BillSearchModel = null;
                    this.Cookie = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.num = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = 10;
                    this.ObjectType = null;
                    this.FillBillGrid = null;
                    this.getCount = null;
                    this.Cookie = _cookieStore;
                    this.SalesOrderListService = _SalesOrderListService;
                    this.CustomerAutofill = _Autofillservice;
                    this.BillingListService = _BillingListService;
                    this.getCount = new QtyListCount();
                    this.BillSearchModel = new BillSearchModel();
                    this.BillSearchModel.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                BillingListDetailsController.prototype.$onInit = function () {
                    this.Init();
                    this.BillSearchModel.billNumber = "";
                    this.BillSearchModel.CustomerID = "";
                    this.BillSearchModel.SalesOrderNo = "";
                    this.BillSearchModel.fromdate = "";
                    this.BillSearchModel.todate = "";
                    this.BillSearchModel.ObjectID = "";
                    this.BillSearchModel.CustomerName = "";
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                BillingListDetailsController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                BillingListDetailsController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                BillingListDetailsController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtCustomer").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.CustomerAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //let SelectedCustomerID = ui.item.id;
                            // that.Search(ui.item.id);
                            that.BillSearchModel.CustomerID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    this.ObjectType = this.SalesOrderListService.Find().then((function (response) {
                        _this.ObjectType = _this.SalesOrderListService.GetObjectType(response.data.Result);
                        //this.BillSearchModel.ObjectID = this.ObjectType[0].ObjectID.toString();
                    }));
                };
                BillingListDetailsController.prototype.SearchBilllist = function () {
                    var _this = this;
                    this.BillSearchModel.fromdate = document.getElementById("txtFromDate").value;
                    this.BillSearchModel.todate = document.getElementById("txtToDate").value;
                    this.numRecords = this.NoOfRds;
                    this.FillGrid(this.numRecords);
                    this.BillSearchModel.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.BillingListService.FindTotal(this.BillSearchModel).then((function (response) {
                        _this.getCount = _this.BillingListService.GetBillingDtlsTotal(response.data.Result);
                    }));
                };
                BillingListDetailsController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.FillBillGrid = this.BillingListService.FindSearchlist(this.BillSearchModel).then((function (response) {
                        _this.FillBillGrid = _this.BillingListService.GetBillingDtlslist(response.data.Result);
                        _this.FillBillGrid.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.FillBillGrid.slice(0, that.numRecords);
                    }));
                };
                BillingListDetailsController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                BillingListDetailsController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillBillGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                BillingListDetailsController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillBillGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                BillingListDetailsController.prototype.Clear = function () {
                    $("#txtNo").val("");
                    $("#txtCustomer").val("");
                    $("#txtNumber").val("");
                    $("#ddlObject").val("");
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    this.BillSearchModel.billNumber = "";
                    this.BillSearchModel.CustomerID = "";
                    this.BillSearchModel.SalesOrderNo = "";
                    this.BillSearchModel.fromdate = "";
                    this.BillSearchModel.todate = "";
                    this.BillSearchModel.ObjectID = "";
                    this.BillSearchModel.CustomerName = "";
                };
                BillingListDetailsController.$inject = ["SalesOrderListService", "CustomeraAtofillService", "BillingListDetailsReportService",
                    "$cookieStore"];
                return BillingListDetailsController;
            }());
            var BillingListDetailsComponentController = /** @class */ (function () {
                function BillingListDetailsComponentController() {
                    this.controller = BillingListDetailsController;
                    this.templateUrl = "/Scripts/App/SalesModuleReport/BillingListDetails/Template/_BillingListDetails.html";
                }
                BillingListDetailsComponentController.Name = "billinglistdetailscomponent";
                return BillingListDetailsComponentController;
            }());
            app.AddComponent(BillingListDetailsComponentController.Name, new BillingListDetailsComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BillingListDetailsComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var BillingListDetailsController = /** @class */ (function (_super) {
            __extends(BillingListDetailsController, _super);
            function BillingListDetailsController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return BillingListDetailsController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.BillingListDetailsController = BillingListDetailsController;
        app.AddController("BillingListDetailsController", BillingListDetailsController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BillingListDetailsController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var BillingListDetailsReportService = /** @class */ (function (_super) {
            __extends(BillingListDetailsReportService, _super);
            function BillingListDetailsReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            BillingListDetailsReportService.prototype.FindSearchlist = function (data) {
                debugger;
                var config = {
                    params: {
                        billNumber: data.billNumber,
                        CustomerID: data.CustomerID,
                        SalesOrderNo: data.SalesOrderNo,
                        fromdate: data.fromdate,
                        todate: data.todate,
                        ObjectID: data.ObjectID,
                        CustomerName: data.CustomerName,
                        DealerID: data.DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/BillingLIstDetails",
                    Config: config
                });
            };
            BillingListDetailsReportService.prototype.GetBillingDtlslist = function (data) {
                var list = Array();
                //console.log("1223656555");
                //console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        //TotalQuantity: item.TotalQuantity,
                        //TotalValue: item.TotalValue,
                        BillId: item.BillId,
                        billNumber: item.billNumber,
                        BillDate: item.BillDate,
                        SalesOrderNo: item.SalesOrderNo,
                        SalesOrderID: item.SalesOrderID,
                        CustomerName: item.CustomerName,
                        WhenCreated: item.WhenCreated,
                        ItemDescription: item.ItemDescription,
                        BilledAmnt: item.BilledAmnt,
                        ItemTotalPrice: item.ItemTotalPrice,
                        ObjectType: item.ObjectType,
                        Quantity: item.Quantity,
                        ObjectTypeID: item.ObjectTypeID
                    });
                }
                return list;
            };
            BillingListDetailsReportService.prototype.FindTotal = function (data) {
                var config = {
                    params: {
                        billNumber: data.billNumber,
                        CustomerID: data.CustomerID,
                        SalesOrderNo: data.SalesOrderNo,
                        fromdate: data.fromdate,
                        todate: data.todate,
                        ObjectID: data.ObjectID,
                        CustomerName: data.CustomerName,
                        DealerID: data.DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/BillingListDetailsCount",
                    Config: config
                });
            };
            BillingListDetailsReportService.prototype.GetBillingDtlsTotal = function (data) {
                console.log(data);
                var list = new model.HeaderdataDtls();
                if (data == null || data == undefined) {
                    list.TotalValue = "";
                    list.TotalQuantity = "";
                }
                else {
                    list.TotalValue = data.TotalValue;
                    list.TotalQuantity = data.TotalQuantity;
                    //console.log(list);
                }
                return list;
            };
            BillingListDetailsReportService.$inject = ["$http", "$q", "$cookieStore"];
            return BillingListDetailsReportService;
        }(GCPL.Service.BaseService));
        Service.BillingListDetailsReportService = BillingListDetailsReportService;
        app.AddService("BillingListDetailsReportService", BillingListDetailsReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BillingListDetailsService.js.map
//# sourceMappingURL=SalesOrderReportModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var SoSearch = GCPL.Model.SoSearchModel;
            var SalesOrderReportController = /** @class */ (function () {
                function SalesOrderReportController(_SalesOrderListService, _Autofillservice, _Custinfoservice) {
                    this.ObjectType = null;
                    this.Status = null;
                    this.SoSearchModel = null;
                    this.FillSOGrid = null;
                    this.CustInfo = null;
                    this.change = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = 10;
                    this.SalesOrderListService = _SalesOrderListService;
                    this.CustomerAutofill = _Autofillservice;
                    this.CustomerInfoService = _Custinfoservice;
                    this.SoSearchModel = new SoSearch();
                }
                SalesOrderReportController.prototype.$onInit = function () {
                    this.Init();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                SalesOrderReportController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                SalesOrderReportController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                SalesOrderReportController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtCustomer").autocomplete({
                        source: function (request, res) {
                            that.CustomerAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //let SelectedCustomerID = ui.item.id;
                            that.Search(ui.item.id);
                        },
                        change: function () {
                        }
                    });
                    this.ObjectType = this.SalesOrderListService.Find().then((function (response) {
                        _this.ObjectType = _this.SalesOrderListService.GetObjectType(response.data.Result);
                        _this.SoSearchModel.ObjectType = _this.ObjectType[0].ObjectID.toString();
                    }));
                    this.Status = this.SalesOrderListService.FindStatus().then((function (response) {
                        _this.Status = _this.SalesOrderListService.GetSOStatus(response.data.Result);
                        _this.SoSearchModel.Status = _this.Status[0].SalesOrderStatusID.toString();
                    }));
                };
                SalesOrderReportController.prototype.SearchSO = function () {
                    this.SoSearchModel.Fromdate = document.getElementById("txtFromDate").value;
                    this.SoSearchModel.Todate = document.getElementById("txtToDate").value;
                    this.numRecords = this.NoOfRds;
                    this.FillGrid(this.numRecords);
                };
                SalesOrderReportController.prototype.Search = function (data) {
                    var _this = this;
                    this.CustInfo = this.CustomerInfoService.Find(data).then((function (response) {
                        _this.CustInfo = _this.CustomerInfoService.GetCustomerNameSelectByAddress(response.data.Result);
                        _this.SoSearchModel.CustomerName = _this.CustInfo.CustomerName;
                    }));
                };
                SalesOrderReportController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    // this.SearchPara.DealerID = this.DealerID;
                    this.FillSOGrid = this.SalesOrderListService.FindSOGrid(this.SoSearchModel).then((function (response) {
                        _this.FillSOGrid = _this.SalesOrderListService.GetSOGrid(response.data.Result);
                        $("#lblTotalValue").text((parseFloat(_this.FillSOGrid.TotalValue)).toFixed(2));
                        $("#lblTotalQuantity").text((parseFloat(_this.FillSOGrid.TotalQuantity)).toFixed(2));
                        _this.FillSOGrid.DetailList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                            if (value.Status == "Created") {
                                value.ChangeText = "Change";
                            }
                            else {
                                value.ChangeText = "";
                            }
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.FillSOGrid.DetailList.slice(0, that.numRecords);
                    }));
                };
                SalesOrderReportController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                SalesOrderReportController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillSOGrid.DetailList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                SalesOrderReportController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillSOGrid.DetailList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                SalesOrderReportController.prototype.Clear = function () {
                    this.SoSearchModel.Fromdate = null;
                    this.SoSearchModel.Todate = null;
                    this.SoSearchModel.CustomerName = null;
                    this.SoSearchModel.ObjectType = null;
                    this.SoSearchModel.SalesOrderNO = null;
                    this.SoSearchModel.Status = null;
                    this.FillSOGrid.TotalValue = null;
                    this.FillSOGrid.TotalQuantity = null;
                };
                SalesOrderReportController.$inject = ["SalesOrderListService", "CustomeraAtofillService", "SelectedByCustomer"];
                return SalesOrderReportController;
            }());
            var SalesOrderReportComponentController = /** @class */ (function () {
                function SalesOrderReportComponentController() {
                    this.controller = SalesOrderReportController;
                    this.templateUrl = "/Scripts/App/SalesModuleReport/SalesOrderReport/Template/_SalesOrderReport.html";
                }
                SalesOrderReportComponentController.Name = "salesordereportcomponent";
                return SalesOrderReportComponentController;
            }());
            app.AddComponent(SalesOrderReportComponentController.Name, new SalesOrderReportComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesOrderReportComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var SalesOrderReportController = /** @class */ (function (_super) {
            __extends(SalesOrderReportController, _super);
            function SalesOrderReportController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SalesOrderReportController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.SalesOrderReportController = SalesOrderReportController;
        app.AddController("SalesOrderReportController", SalesOrderReportController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesOrderReportController.js.map
//# sourceMappingURL=SalesOrderReportSerive.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var SoDtlsRptSearchModel = /** @class */ (function () {
            function SoDtlsRptSearchModel() {
            }
            return SoDtlsRptSearchModel;
        }());
        Model.SoDtlsRptSearchModel = SoDtlsRptSearchModel;
        var SoDtlsRptFillGrid = /** @class */ (function () {
            function SoDtlsRptFillGrid() {
            }
            return SoDtlsRptFillGrid;
        }());
        Model.SoDtlsRptFillGrid = SoDtlsRptFillGrid;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesOrdersDetailsModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var SalesOrdersDetailsController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function SalesOrdersDetailsController(_Autofillservice, _PipelineOrderReportService, _SalesOrderListService, _leaddescription, _SalesOrderDtlsService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    // CustInfo = null;
                    this.ObjectType = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.GetSoDtlsRptSearch = null;
                    this.FillSoDtlsRpt = null;
                    this.Cookie = null;
                    this.CustomerAutofill = _Autofillservice;
                    this.PipelineListReportService = _PipelineOrderReportService;
                    this.SalesOrderListService = _SalesOrderListService;
                    this.leaddescription = _leaddescription;
                    this.SalesOrderDtlsService = _SalesOrderDtlsService;
                    this.Cookie = _cookieStore;
                    this.GetSoDtlsRptSearch = new GCPL.Model.SoDtlsRptSearchModel();
                    this.FillSoDtlsRpt = new Array();
                    this.ObjectType = new Array();
                }
                SalesOrdersDetailsController.prototype.$onInit = function () {
                    this.Init();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                SalesOrdersDetailsController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                SalesOrdersDetailsController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                SalesOrdersDetailsController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    var filters;
                    $("#txtCustomer").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.CustomerAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.GetSoDtlsRptSearch.CustomerID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    $("#txtModel").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.PipelineListReportService.FindModel(request).then((function (response) {
                                var data = that.PipelineListReportService.GetModel(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.ModelNo,
                                        value: item.ModelNo,
                                        id: item.ModelID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.GetSoDtlsRptSearch.ModelId = ui.item.id;
                            //console.log(that.getLeadSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            that.leaddescription.FilterAutoComplete(request).then((function (response) {
                                var data = that.leaddescription.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //that.SelectedItemPrice(ui.item.id);
                            that.GetSoDtlsRptSearch.Itemcode = ui.item.id;
                            //that.getLeadSearch.ItemDescription = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    this.ObjectType = this.SalesOrderListService.Find().then((function (response) {
                        _this.ObjectType = _this.SalesOrderListService.GetObjectType(response.data.Result);
                        //this.GetSoDtlsRptSearch.ObjectID = this.ObjectType[0].ObjectID.toString();
                    }));
                };
                SalesOrdersDetailsController.prototype.Search = function () {
                    this.GetSoDtlsRptSearch.FromDate = document.getElementById("txtFromDate").value;
                    this.GetSoDtlsRptSearch.ToDate = document.getElementById("txtToDate").value;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                SalesOrdersDetailsController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.FillSoDtlsRpt = this.SalesOrderDtlsService.FindSODetails(this.GetSoDtlsRptSearch).then((function (response) {
                        _this.FillSoDtlsRpt = _this.SalesOrderDtlsService.GetSODtlsGrid(response.data.Result);
                        _this.FillSoDtlsRpt.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.FillSoDtlsRpt.slice(0, that.numRecords);
                    }));
                };
                SalesOrdersDetailsController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                SalesOrdersDetailsController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillSoDtlsRpt.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                SalesOrdersDetailsController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillSoDtlsRpt.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                SalesOrdersDetailsController.prototype.Clear = function () {
                    //(<HTMLInputElement>document.getElementById("txtFromDate")).value = "";
                    //(<HTMLInputElement>document.getElementById("txtToDate")).value = "";
                    //this.GetSoDtlsRptSearch = null;
                    //this.shownItems = null;
                    //this.FillSoDtlsRpt = null;
                    this.GetSoDtlsRptSearch.ModelId = null;
                    this.GetSoDtlsRptSearch.Itemcode = null;
                    this.GetSoDtlsRptSearch.CustomerID = null;
                    this.GetSoDtlsRptSearch.DocSalesOrderNO = null;
                    this.GetSoDtlsRptSearch.FromDate = null;
                    this.GetSoDtlsRptSearch.ToDate = null;
                    this.GetSoDtlsRptSearch.ObjectID = null;
                    // this.ObjectType = null;
                    $("#txtModel").val("");
                    $("#txtDescription").val("");
                    $("#txtSonumber").val("");
                    $("#txtCustomer").val("");
                    $("#FromDate").val("");
                    $("#ToDate").val("");
                    //$("#ddlobjecttype").val("");
                };
                SalesOrdersDetailsController.$inject = ["CustomeraAtofillService", "PipelineOrderReportService", "SalesOrderListService", "itemDescriptionService", "SalesOrderDtlsReportService", "$cookieStore"];
                return SalesOrdersDetailsController;
            }());
            var SalesOrdersDetailsComponentController = /** @class */ (function () {
                function SalesOrdersDetailsComponentController() {
                    this.controller = SalesOrdersDetailsController;
                    this.templateUrl = "/Scripts/App/SalesModuleReport/SalesOrdersDetails/Template/_SalesOrdersDetails.html";
                }
                SalesOrdersDetailsComponentController.Name = "salesordersdetailscomponent";
                return SalesOrdersDetailsComponentController;
            }());
            app.AddComponent(SalesOrdersDetailsComponentController.Name, new SalesOrdersDetailsComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesOrdersDetailsComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var SalesOrdersDetailsController = /** @class */ (function (_super) {
            __extends(SalesOrdersDetailsController, _super);
            function SalesOrdersDetailsController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SalesOrdersDetailsController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.SalesOrdersDetailsController = SalesOrdersDetailsController;
        app.AddController("SalesOrdersDetailsController", SalesOrdersDetailsController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesOrdersDetailsController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var SalesOrderDtlsReportService = /** @class */ (function (_super) {
            __extends(SalesOrderDtlsReportService, _super);
            function SalesOrderDtlsReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            SalesOrderDtlsReportService.prototype.FindSODetails = function (data) {
                var url = this.apiUrl + "/SODetailsReportNew";
                var SaleObjectTypeId;
                var FromDate;
                var ToDate;
                var Itemcode;
                var DocSalesOrderNO;
                var CustomerID;
                var ModelId;
                debugger;
                if (data.ObjectID == undefined) {
                    SaleObjectTypeId = '';
                }
                else {
                    SaleObjectTypeId = data.ObjectID;
                }
                if (data.FromDate == undefined) {
                    FromDate = '';
                }
                else {
                    FromDate = data.FromDate;
                }
                if (data.ToDate == undefined) {
                    ToDate = '';
                }
                else {
                    ToDate = data.ToDate;
                }
                if (data.Itemcode == undefined) {
                    Itemcode = '';
                }
                else {
                    Itemcode = data.Itemcode;
                }
                if (data.DocSalesOrderNO == undefined) {
                    DocSalesOrderNO = '';
                }
                else {
                    DocSalesOrderNO = data.DocSalesOrderNO;
                }
                if (data.CustomerID == undefined) {
                    CustomerID = '';
                }
                else {
                    CustomerID = data.CustomerID;
                }
                if (data.ModelId == undefined) {
                    ModelId = '';
                }
                else {
                    ModelId = data.ModelId;
                }
                console.log("aaaaaaaaaaaaaaaa");
                console.log(FromDate);
                var config = {
                    params: {
                        FromDate: FromDate,
                        ToDate: ToDate,
                        SaleObjectTypeId: SaleObjectTypeId,
                        DocSalesOrderNO: DocSalesOrderNO,
                        CustomerID: CustomerID,
                        ModelId: ModelId,
                        Itemcode: Itemcode,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                        //SearchInput: this.Cookie.get('UserInfo')['UserID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            SalesOrderDtlsReportService.prototype.GetSODtlsGrid = function (data) {
                console.log(data);
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        CustomerName: item.CustomerName,
                        SalesOrderNo: item.SalesOrderNo,
                        SaleOrderDate: item.SaleOrderDate,
                        SOstatus: item.SOstatus,
                        ItemDescription: item.ItemDescription,
                        Quantity: item.Quantity,
                        UOM: item.UOM,
                        UnitPrice: item.UnitPrice,
                        TotalPrice: item.TotalPrice,
                        TaxesTotal: item.TaxesTotal,
                        ItemTotal: item.ItemTotal,
                        WHName: item.WHName
                    });
                }
                return list;
            };
            SalesOrderDtlsReportService.$inject = ["$http", "$q", "$cookieStore"];
            return SalesOrderDtlsReportService;
        }(GCPL.Service.BaseService));
        Service.SalesOrderDtlsReportService = SalesOrderDtlsReportService;
        app.AddService("SalesOrderDtlsReportService", SalesOrderDtlsReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesOrdersDetailsService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var PricinglistNew = /** @class */ (function () {
            function PricinglistNew() {
            }
            return PricinglistNew;
        }());
        Model.PricinglistNew = PricinglistNew;
        var PricinglistNewSearch = /** @class */ (function () {
            function PricinglistNewSearch() {
            }
            return PricinglistNewSearch;
        }());
        Model.PricinglistNewSearch = PricinglistNewSearch;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesPriceListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var PricinglistNewSearch = GCPL.Model.PricinglistNewSearch;
            var SalesPriceListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function SalesPriceListController(_PricingMasterService, _cookieStore, _leaddescription) {
                    this._cookieStore = _cookieStore;
                    this.GetPM = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.getSearch = null;
                    this.Cookie = null;
                    this.PricingMasterService = _PricingMasterService;
                    this.Cookie = _cookieStore;
                    this.leaddescription = _leaddescription;
                    this.GetPM = new Array();
                    this.getSearch = new PricinglistNewSearch();
                }
                SalesPriceListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                SalesPriceListController.prototype.Init = function () {
                    var that = this;
                    var filters;
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            that.leaddescription.FilterAutoComplete(request).then((function (response) {
                                var data = that.leaddescription.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //that.SelectedItemPrice(ui.item.id);
                            that.getSearch.Itemcode = ui.item.id;
                            // that.getLeadSearch.ItemDescription = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                };
                SalesPriceListController.prototype.Search = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                SalesPriceListController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.GetPM = this.PricingMasterService.FindPricingList(this.getSearch).then((function (response) {
                        _this.GetPM = _this.PricingMasterService.GetPricingList(response.data.Result);
                        _this.GetPM.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.GetPM.slice(0, that.numRecords);
                    }));
                };
                SalesPriceListController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                SalesPriceListController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.GetPM.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                SalesPriceListController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.GetPM.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                SalesPriceListController.prototype.Clear = function () {
                    this.getSearch.Itemcode = "";
                    $("#txtDescription").val("");
                };
                SalesPriceListController.$inject = ["PricingMasterNewService", "$cookieStore", "itemDescriptionService"];
                return SalesPriceListController;
            }());
            var SalesPriceListComponentController = /** @class */ (function () {
                function SalesPriceListComponentController() {
                    this.controller = SalesPriceListController;
                    this.templateUrl = "/Scripts/App/SalesModuleReport/SalesPriceList/Template/_SalesPriceList.html";
                }
                SalesPriceListComponentController.Name = "salespricelistcomponent";
                return SalesPriceListComponentController;
            }());
            app.AddComponent(SalesPriceListComponentController.Name, new SalesPriceListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesPriceListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var SalesPriceListController = /** @class */ (function (_super) {
            __extends(SalesPriceListController, _super);
            function SalesPriceListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SalesPriceListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.SalesPriceListController = SalesPriceListController;
        app.AddController("SalesPriceListController", SalesPriceListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesPriceListController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var PricingMasterNewService = /** @class */ (function (_super) {
            __extends(PricingMasterNewService, _super);
            function PricingMasterNewService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            PricingMasterNewService.prototype.FindPricingList = function (data) {
                var Itemcode;
                if (data.Itemcode == undefined) {
                    Itemcode = '';
                }
                else {
                    Itemcode = data.Itemcode;
                }
                var config = {
                    params: {
                        Itemcode: Itemcode,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/BillingLIstDetails",
                    Config: config
                });
            };
            PricingMasterNewService.prototype.GetPricingList = function (data) {
                console.log("2525252");
                console.log(data);
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        // ID: item.ID,
                        ItemId: item.ItemId,
                        Description: item.Description,
                        basicsalesprice: item.basicsalesprice,
                        mrp: item.mrp,
                        BUOM: item.BUOM
                    });
                }
                return list;
            };
            PricingMasterNewService.$inject = ["$http", "$q", "$cookieStore"];
            return PricingMasterNewService;
        }(GCPL.Service.BaseService));
        Service.PricingMasterNewService = PricingMasterNewService;
        app.AddService("PricingMasterNewService", PricingMasterNewService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesPriceListService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var Top10itemsPurchaseReportModel = /** @class */ (function () {
            function Top10itemsPurchaseReportModel() {
            }
            return Top10itemsPurchaseReportModel;
        }());
        Model.Top10itemsPurchaseReportModel = Top10itemsPurchaseReportModel;
        var Top10itemsPurchaseReportHeader = /** @class */ (function () {
            function Top10itemsPurchaseReportHeader() {
            }
            return Top10itemsPurchaseReportHeader;
        }());
        Model.Top10itemsPurchaseReportHeader = Top10itemsPurchaseReportHeader;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=Top10ItemsPurchaseReportModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var Top10ItemsController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function Top10ItemsController(_Top10itemsPurchaseReportService) {
                    this.Top10itemsPurchaseReportModel = null;
                    this.FillItemGrid = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = 10;
                    this.Top10itemsPurchaseReportService = _Top10itemsPurchaseReportService;
                    this.Top10itemsPurchaseReportModel = new GCPL.Model.Top10itemsPurchaseReportModel();
                }
                Top10ItemsController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                Top10ItemsController.prototype.Init = function () {
                };
                Top10ItemsController.prototype.Search = function () {
                    // this.numRecords = this.NoOfRds;
                    this.FillGrid(this.numRecords);
                    // console.log(this.PartReportModel);
                };
                Top10ItemsController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.FillItemGrid = this.Top10itemsPurchaseReportService.FindGrid(this.Top10itemsPurchaseReportModel).then((function (response) {
                        console.log(_this.FillItemGrid);
                        _this.FillItemGrid = _this.Top10itemsPurchaseReportService.GetPartGrid(response.data.Result);
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.FillItemGrid.slice(0, that.numRecords);
                    }));
                };
                Top10ItemsController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                Top10ItemsController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillItemGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                Top10ItemsController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillItemGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                Top10ItemsController.prototype.Clear = function () {
                    this.Top10itemsPurchaseReportModel = null;
                    this.FillItemGrid = null;
                    this.shownItems = null;
                    this.Search();
                };
                Top10ItemsController.$inject = ["Top10itemsPurchaseReportService"];
                return Top10ItemsController;
            }());
            var Top10ItemsComponentController = /** @class */ (function () {
                function Top10ItemsComponentController() {
                    this.controller = Top10ItemsController;
                    this.templateUrl = "/Scripts/App/Reports/Top10ItemsPurchaseReport/Template/_Top10ItemsPurchaseReport.html";
                }
                Top10ItemsComponentController.Name = "top10itemspurchasereportcomponent";
                return Top10ItemsComponentController;
            }());
            app.AddComponent(Top10ItemsComponentController.Name, new Top10ItemsComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=Top10ItemsPurchaseReportComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var Top10ItemController = /** @class */ (function (_super) {
            __extends(Top10ItemController, _super);
            function Top10ItemController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return Top10ItemController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.Top10ItemController = Top10ItemController;
        app.AddController("Top10ItemController", Top10ItemController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=Top10ItemsPurchaseReportController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var Top10itemsPurchaseReportService = /** @class */ (function (_super) {
            __extends(Top10itemsPurchaseReportService, _super);
            function Top10itemsPurchaseReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/";
                _this.Cookie = _cookieStore;
                return _this;
            }
            Top10itemsPurchaseReportService.prototype.FindGrid = function (data) {
                // FromDate: any, ToDate: any, SoNumber: any, ObjectTpe: any, CustName: any, Status: any
                var url = this.apiUrl + "Top10ItemsPurchaseReport";
                var DealerID;
                var Period;
                if (data.DealerID == undefined) {
                    DealerID = "";
                }
                else {
                    DealerID = data.DealerID;
                }
                if (data.Period == undefined) {
                    Period = "";
                }
                else {
                    Period = data.Period;
                }
                var config = {
                    params: {
                        Period: Period,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            Top10itemsPurchaseReportService.prototype.GetPartGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        ItemDescription: item.ItemDescription,
                        Purchase: item.Purchase,
                        TotalPurchases: item.TotalPurchases,
                        Percentage: item.Percentage,
                    });
                }
                return list;
            };
            Top10itemsPurchaseReportService.$inject = ["$http", "$q", "$cookieStore"];
            return Top10itemsPurchaseReportService;
        }(GCPL.Service.BaseService));
        Service.Top10itemsPurchaseReportService = Top10itemsPurchaseReportService;
        app.AddService("Top10itemsPurchaseReportService", Top10itemsPurchaseReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=Top10ItemsPurchaseReportService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var NewCustomerSearch = /** @class */ (function () {
            function NewCustomerSearch() {
            }
            return NewCustomerSearch;
        }());
        Model.NewCustomerSearch = NewCustomerSearch;
        var GetGrdNewCustomer = /** @class */ (function () {
            function GetGrdNewCustomer() {
            }
            return GetGrdNewCustomer;
        }());
        Model.GetGrdNewCustomer = GetGrdNewCustomer;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=NewCustomersAndVolumeModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var NewCustomersAndVolumeController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function NewCustomersAndVolumeController(_NewCustomerSalesGrid, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.NewCustomerSearch = null;
                    this.GetGridNewCustomer = null;
                    this.Cookie = null;
                    this.NewCustomerSalesGrid = _NewCustomerSalesGrid;
                    this.Cookie = _cookieStore;
                    this.NewCustomerSearch = new GCPL.Model.NewCustomerSearch();
                    this.GetGridNewCustomer = new Array();
                }
                NewCustomersAndVolumeController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                NewCustomersAndVolumeController.prototype.Init = function () {
                };
                NewCustomersAndVolumeController.prototype.Search = function () {
                    var _this = this;
                    this.GetGridNewCustomer = this.NewCustomerSalesGrid.FindSearchlist(this.NewCustomerSearch).then((function (response) {
                        _this.GetGridNewCustomer = _this.NewCustomerSalesGrid.GetNewCustsalelist(response.data.Result);
                    }));
                };
                NewCustomersAndVolumeController.prototype.Clear = function () {
                    //this.NewCustomerSearch.Period = null;
                    //$("#PeriodSelect").val("");
                    $('#PeriodSelect').prop('selectedIndex', 0);
                };
                NewCustomersAndVolumeController.$inject = ["NewCustSalesReportService", "$cookieStore"];
                return NewCustomersAndVolumeController;
            }());
            var NewCustomersAndVolumeComponentController = /** @class */ (function () {
                function NewCustomersAndVolumeComponentController() {
                    this.controller = NewCustomersAndVolumeController;
                    this.templateUrl = "/Scripts/App/SalesModuleReport/NewCustomersAndVolume/Template/_NewCustomersAndVolume.html";
                }
                NewCustomersAndVolumeComponentController.Name = "newcustomersandvolumecomponent";
                return NewCustomersAndVolumeComponentController;
            }());
            app.AddComponent(NewCustomersAndVolumeComponentController.Name, new NewCustomersAndVolumeComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=NewCustomersAndVolumeComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var NewCustomersAndVolumeController = /** @class */ (function (_super) {
            __extends(NewCustomersAndVolumeController, _super);
            function NewCustomersAndVolumeController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return NewCustomersAndVolumeController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.NewCustomersAndVolumeController = NewCustomersAndVolumeController;
        app.AddController("NewCustomersAndVolumeController", NewCustomersAndVolumeController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=NewCustomersAndVolumeController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var NewCustSalesReportService = /** @class */ (function (_super) {
            __extends(NewCustSalesReportService, _super);
            function NewCustSalesReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            NewCustSalesReportService.prototype.FindSearchlist = function (data) {
                debugger;
                var config = {
                    params: {
                        Period: data.Period,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SODetailsReportNew",
                    Config: config
                });
            };
            NewCustSalesReportService.prototype.GetNewCustsalelist = function (data) {
                var list = Array();
                //console.log("1223656555");
                //console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        Period: item.Period,
                        NewCustomers: item.NewCustomers,
                        TotalCustomers: item.TotalCustomers,
                        SalesNewCustomers: item.SalesNewCustomers,
                        TotalSales: item.TotalSales,
                        percentageTotalVolume: item.percentageTotalVolume
                    });
                }
                return list;
            };
            NewCustSalesReportService.$inject = ["$http", "$q", "$cookieStore"];
            return NewCustSalesReportService;
        }(GCPL.Service.BaseService));
        Service.NewCustSalesReportService = NewCustSalesReportService;
        app.AddService("NewCustSalesReportService", NewCustSalesReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=NewCustomersAndVolumeService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var SalesProductivitySearch = /** @class */ (function () {
            function SalesProductivitySearch() {
            }
            return SalesProductivitySearch;
        }());
        Model.SalesProductivitySearch = SalesProductivitySearch;
        var SalesProductivityGrid = /** @class */ (function () {
            function SalesProductivityGrid() {
            }
            return SalesProductivityGrid;
        }());
        Model.SalesProductivityGrid = SalesProductivityGrid;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesPersonProductivityModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var SalesPersonProductivityController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function SalesPersonProductivityController(_Sservice, _Dservice, _cookieStore, _consi, _CollectionService, _SalesProductivityService) {
                    this._cookieStore = _cookieStore;
                    this.StateDropDown = null;
                    this.DistrictDropDown = null;
                    this.SearchInputOfsalesProductivity = null;
                    this.filGrid = null;
                    this.SalesOfficddl = null;
                    // SalesPerson = null;
                    this.Cookie = null;
                    this.Sservice = _Sservice;
                    this.Districtservice = _Dservice;
                    this.Cookie = _cookieStore;
                    this.ConsigneeCategoryservice = _consi;
                    this.CollectionService = _CollectionService;
                    this.SalesProductivityService = _SalesProductivityService;
                    this.SearchInputOfsalesProductivity = new GCPL.Model.SalesProductivitySearch();
                    this.filGrid = new Array();
                }
                SalesPersonProductivityController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                SalesPersonProductivityController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                        // this.getLeadSearch.stateId = this.StateDropDown[0].Region_Code.toString();   
                    }));
                    this.SalesOfficddl = this.ConsigneeCategoryservice.FindSalesOffic().then((function (response) {
                        _this.SalesOfficddl = _this.ConsigneeCategoryservice.GetSalesOffic(response.data.Result);
                        if (_this.SalesOfficddl[0].SalesOfficID == "0") {
                            _this.SalesOfficddl.splice(0, 1);
                        }
                    }));
                    $("#txtSalesPerson").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.CollectionService.FindSalesP(request).then((function (response) {
                                var data = that.CollectionService.GetSalesPerson(response.data.Result);
                                console.log(data);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.UName,
                                        value: item.UName,
                                        id: item.UserId
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.SearchInputOfsalesProductivity.SalesPerson = ui.item.id;
                            //console.log(that.CollectionAndBalSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                };
                SalesPersonProductivityController.prototype.District = function (data) {
                    var _this = this;
                    debugger;
                    this.DistrictDropDown = this.Districtservice.Find(this.SearchInputOfsalesProductivity.stateId).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                SalesPersonProductivityController.prototype.Search = function () {
                    var _this = this;
                    this.SalesProductivityService.FindGrid(this.SearchInputOfsalesProductivity).then((function (response) {
                        _this.filGrid = _this.SalesProductivityService.GetGrid(response.data.Result);
                    }));
                };
                SalesPersonProductivityController.prototype.Clear = function () {
                    //this.NewCustomerSearch.Period = null;
                    //$("#PeriodSelect").val("");
                    $('#PeriodSelect').prop('selectedIndex', 0);
                    this.SearchInputOfsalesProductivity.stateId = "";
                    this.SearchInputOfsalesProductivity.Region = "";
                    this.SearchInputOfsalesProductivity.SalesOfficeId = "";
                    this.SearchInputOfsalesProductivity.SalesPerson = "";
                    $("#txtSalesPerson").val("");
                    $("#ddlSalesOffc").val("");
                    $("#ddlstate").val("");
                    $("#ddlRegion").val("");
                    this.DistrictDropDown = "";
                };
                SalesPersonProductivityController.$inject = ["StateService", "DistrictService", "$cookieStore", "ConsigneeCategoryService", "CollectionAndBalanceReportService", "SalesProductivityReportService"];
                return SalesPersonProductivityController;
            }());
            var SalesPersonProductivityComponentController = /** @class */ (function () {
                function SalesPersonProductivityComponentController() {
                    this.controller = SalesPersonProductivityController;
                    this.templateUrl = "/Scripts/App/SalesModuleReport/SalesPersonProductivity/Template/_SalesPersonProductivity.html";
                }
                SalesPersonProductivityComponentController.Name = "salespersonproductivitycomponent";
                return SalesPersonProductivityComponentController;
            }());
            app.AddComponent(SalesPersonProductivityComponentController.Name, new SalesPersonProductivityComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=SalesPersonProductivityComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var SalesPersonProductivityController = /** @class */ (function (_super) {
            __extends(SalesPersonProductivityController, _super);
            function SalesPersonProductivityController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SalesPersonProductivityController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.SalesPersonProductivityController = SalesPersonProductivityController;
        app.AddController("SalesPersonProductivityController", SalesPersonProductivityController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesPersonProductivityController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var SalesProductivityReportService = /** @class */ (function (_super) {
            __extends(SalesProductivityReportService, _super);
            function SalesProductivityReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            SalesProductivityReportService.prototype.FindGrid = function (data) {
                debugger;
                var Region;
                var stateId;
                var SalesOfficeId;
                var SalesPerson;
                var Period;
                if (data.Region !== undefined) {
                    Region = data.Region;
                }
                else {
                    Region = '';
                }
                if (data.stateId !== undefined) {
                    stateId = data.stateId;
                }
                else {
                    stateId = '';
                }
                if (data.SalesOfficeId !== undefined) {
                    SalesOfficeId = data.SalesOfficeId;
                }
                else {
                    SalesOfficeId = '';
                }
                if (data.SalesPerson !== undefined) {
                    SalesPerson = data.SalesPerson;
                }
                else {
                    SalesPerson = '';
                }
                if (data.Period !== undefined) {
                    Period = data.Period;
                }
                else {
                    Period = '';
                }
                var config = {
                    params: {
                        UserID: this.Cookie.get('UserInfo')['UserID'],
                        //DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        stateId: stateId,
                        Region: Region,
                        SalesOfficeId: SalesOfficeId,
                        SalesPerson: SalesPerson,
                        Period: Period
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SODetailsReportNew",
                    Config: config
                });
            };
            SalesProductivityReportService.prototype.GetGrid = function (data) {
                console.log(data);
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        SalesPerson: item.SalesPerson,
                        SalesOrdersNos: item.SalesOrdersNos,
                        SalesOrderAmount: item.SalesOrderAmount,
                        NewCustomers: item.NewCustomers,
                        CustomerVisits: item.CustomerVisits,
                        existingCustomers: item.existingCustomers
                    });
                }
                return list;
            };
            SalesProductivityReportService.$inject = ["$http", "$q", "$cookieStore"];
            return SalesProductivityReportService;
        }(GCPL.Service.BaseService));
        Service.SalesProductivityReportService = SalesProductivityReportService;
        app.AddService("SalesProductivityReportService", SalesProductivityReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesPersonProductivityService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var CollectionAndBalSearch = /** @class */ (function () {
            function CollectionAndBalSearch() {
            }
            return CollectionAndBalSearch;
        }());
        Model.CollectionAndBalSearch = CollectionAndBalSearch;
        var GridOfCollectionAndBal = /** @class */ (function () {
            function GridOfCollectionAndBal() {
            }
            return GridOfCollectionAndBal;
        }());
        Model.GridOfCollectionAndBal = GridOfCollectionAndBal;
        var SalesPerson = /** @class */ (function () {
            function SalesPerson() {
            }
            return SalesPerson;
        }());
        Model.SalesPerson = SalesPerson;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CollectionBalancesModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var CollectionBalancesController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function CollectionBalancesController(_Sservice, _Dservice, _cookieStore, _consi, _CollectionService) {
                    this._cookieStore = _cookieStore;
                    this.StateDropDown = null;
                    this.DistrictDropDown = null;
                    this.CollectionAndBalSearch = null;
                    this.filGrid = null;
                    this.SalesOfficddl = null;
                    // SalesPerson = null;
                    this.Cookie = null;
                    this.Sservice = _Sservice;
                    this.Districtservice = _Dservice;
                    this.Cookie = _cookieStore;
                    this.ConsigneeCategoryservice = _consi;
                    this.CollectionService = _CollectionService;
                    this.CollectionAndBalSearch = new GCPL.Model.CollectionAndBalSearch();
                    this.filGrid = new Array();
                    // this.SalesPerson = new Array<GCPL.Model.SalesPerson>();
                }
                CollectionBalancesController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                CollectionBalancesController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                        // this.getLeadSearch.stateId = this.StateDropDown[0].Region_Code.toString();   
                    }));
                    this.SalesOfficddl = this.ConsigneeCategoryservice.FindSalesOffic().then((function (response) {
                        _this.SalesOfficddl = _this.ConsigneeCategoryservice.GetSalesOffic(response.data.Result);
                        if (_this.SalesOfficddl[0].SalesOfficID == "0") {
                            _this.SalesOfficddl.splice(0, 1);
                        }
                    }));
                    $("#txtSalesPerson").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.CollectionService.FindSalesP(request).then((function (response) {
                                var data = that.CollectionService.GetSalesPerson(response.data.Result);
                                console.log(data);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.UName,
                                        value: item.UName,
                                        id: item.UserId
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.CollectionAndBalSearch.SalesPerson = ui.item.id;
                            //console.log(that.CollectionAndBalSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                };
                CollectionBalancesController.prototype.District = function (data) {
                    var _this = this;
                    debugger;
                    this.DistrictDropDown = this.Districtservice.Find(this.CollectionAndBalSearch.stateId).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                CollectionBalancesController.prototype.Clear = function () {
                    this.CollectionAndBalSearch.stateId = "";
                    this.CollectionAndBalSearch.Region = "";
                    this.CollectionAndBalSearch.SalesOfficeId = "";
                    this.CollectionAndBalSearch.SalesPerson = "";
                    $("#txtSalesPerson").val("");
                    $("#ddlSalesOffc").val("");
                    $("#ddlstate").val("");
                    $("#ddlRegion").val("");
                    this.DistrictDropDown = "";
                };
                CollectionBalancesController.prototype.Search = function () {
                    var _this = this;
                    this.CollectionService.FindGrid(this.CollectionAndBalSearch).then((function (response) {
                        _this.filGrid = _this.CollectionService.GetGrid(response.data.Result);
                    }));
                };
                CollectionBalancesController.$inject = ["StateService", "DistrictService", "$cookieStore", "ConsigneeCategoryService", "CollectionAndBalanceReportService"];
                return CollectionBalancesController;
            }());
            var CollectionBalancesComponentController = /** @class */ (function () {
                function CollectionBalancesComponentController() {
                    this.controller = CollectionBalancesController;
                    this.templateUrl = "/Scripts/App/SalesModuleReport/CollectionBalances/Template/_CollectionBalances.html";
                }
                CollectionBalancesComponentController.Name = "collectionbalancescomponent";
                return CollectionBalancesComponentController;
            }());
            app.AddComponent(CollectionBalancesComponentController.Name, new CollectionBalancesComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CollectionBalancesComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var CollectionBalancesController = /** @class */ (function (_super) {
            __extends(CollectionBalancesController, _super);
            function CollectionBalancesController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CollectionBalancesController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.CollectionBalancesController = CollectionBalancesController;
        app.AddController("CollectionBalancesController", CollectionBalancesController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CollectionBalancesController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var CollectionAndBalanceReportService = /** @class */ (function (_super) {
            __extends(CollectionAndBalanceReportService, _super);
            function CollectionAndBalanceReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            CollectionAndBalanceReportService.prototype.FindSalesP = function (data) {
                var Description;
                if (data.Description !== undefined) {
                    Description = data.Description;
                }
                else {
                    Description = '';
                }
                var config = {
                    params: {
                        Description: data.term,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SODetailsReportNew",
                    Config: config
                });
            };
            CollectionAndBalanceReportService.prototype.GetSalesPerson = function (data) {
                console.log(data);
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        UserId: item.UserId,
                        UName: item.UName
                    });
                }
                return list;
            };
            CollectionAndBalanceReportService.prototype.FindGrid = function (data) {
                debugger;
                var Region;
                var stateId;
                var SalesOfficeId;
                var SalesPerson;
                if (data.Region !== undefined) {
                    Region = data.Region;
                }
                else {
                    Region = '';
                }
                if (data.stateId !== undefined) {
                    stateId = data.stateId;
                }
                else {
                    stateId = '';
                }
                if (data.SalesOfficeId !== undefined) {
                    SalesOfficeId = data.SalesOfficeId;
                }
                else {
                    SalesOfficeId = '';
                }
                if (data.SalesPerson !== undefined) {
                    SalesPerson = data.SalesPerson;
                }
                else {
                    SalesPerson = '';
                }
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        stateId: stateId,
                        Region: Region,
                        SalesOfficeId: SalesOfficeId,
                        SalesPerson: SalesPerson
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SODetailsReportNew",
                    Config: config
                });
            };
            CollectionAndBalanceReportService.prototype.GetGrid = function (data) {
                console.log(data);
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        Period: item.Period,
                        TotalBill: item.TotalBill,
                        Collection: item.Collection,
                        BalanceOutstanding: item.BalanceOutstanding
                    });
                }
                return list;
            };
            CollectionAndBalanceReportService.$inject = ["$http", "$q", "$cookieStore"];
            return CollectionAndBalanceReportService;
        }(GCPL.Service.BaseService));
        Service.CollectionAndBalanceReportService = CollectionAndBalanceReportService;
        app.AddService("CollectionAndBalanceReportService", CollectionAndBalanceReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CollectionBalancesService.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StockRegisterPerWHController = /** @class */ (function (_super) {
            __extends(StockRegisterPerWHController, _super);
            function StockRegisterPerWHController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StockRegisterPerWHController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StockRegisterPerWHController = StockRegisterPerWHController;
        app.AddController("StockRegisterPerWHController", StockRegisterPerWHController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StockRegisterPerWHController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var StockRegisterPerWHController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function StockRegisterPerWHController(_StockRegisterPerWHController, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.GetStockRegisterPerWHState = null;
                    this.WarehouseName = null;
                    this.Cookie = null;
                    this.UserID = null;
                    this.numRecords = 10;
                    this.NoOfRds = "10";
                    this.incre = 0;
                    this.page = 0;
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.shownItems = [];
                    this.StockRegisterPerWHList = null;
                    this.StockRegisterPerWHSerachA = null;
                    this.StockRegisterPerWHService = _StockRegisterPerWHController;
                    this.Cookie = _cookieStore;
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.StockRegisterPerWHList = Array();
                }
                StockRegisterPerWHController.prototype.$onInit = function () {
                    this.Init();
                    this.WarehouseName.WHID = "";
                };
                //Page Load Define Values//
                StockRegisterPerWHController.prototype.Init = function () {
                    var _this = this;
                    debugger;
                    this.StockRegisterPerWHService.FindState().then((function (response) {
                        _this.GetStockRegisterPerWHState = _this.StockRegisterPerWHService.GetState(response.data.Result);
                    }));
                    this.WarehouseName = this.StockRegisterPerWHService.FindWHName().then((function (response) {
                        _this.WarehouseName = _this.StockRegisterPerWHService.GetWHName(response.data.Result);
                    }));
                };
                StockRegisterPerWHController.prototype.Search = function () {
                    debugger;
                    this.StockRegisterPerWHSerachA.stateID = this.StockRegisterPerWHSerachA.stateID;
                    this.StockRegisterPerWHSerachA.WHID = this.StockRegisterPerWHSerachA.WHID;
                    console.log(this.StockRegisterPerWHSerachA);
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                StockRegisterPerWHController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    debugger;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.StockRegisterPerWHList = this.StockRegisterPerWHService.Find(this.StockRegisterPerWHSerachA).then((function (response) {
                        _this.StockRegisterPerWHList = _this.StockRegisterPerWHService.GetStockRegisterPerWHGrid(response.data.Result);
                        console.log(_this.StockRegisterPerWHList);
                        _this.StockRegisterPerWHList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.StockRegisterPerWHList.slice(0, that.numRecords);
                    }));
                };
                StockRegisterPerWHController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                StockRegisterPerWHController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.StockRegisterPerWHList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                StockRegisterPerWHController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.StockRegisterPerWHList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                StockRegisterPerWHController.prototype.Clear = function () {
                    this.StockRegisterPerWHSerachA.stateID = "";
                    //this.GetStockRegisterPerWHState.stateID = "";
                    this.StockRegisterPerWHSerachA.WHID = "";
                    $("#ddlstate").val("");
                };
                StockRegisterPerWHController.$inject = ["StockRegisterPerWHService", "$cookieStore"];
                return StockRegisterPerWHController;
            }());
            var StockRegisterPerWHComponentController = /** @class */ (function () {
                function StockRegisterPerWHComponentController() {
                    this.controller = StockRegisterPerWHController;
                    this.templateUrl = "/Scripts/App/Inventory/StockRegisterPerWH/Template/_StockRegisterPerWH.html";
                }
                StockRegisterPerWHComponentController.Name = "stockregisterperwhcomponent";
                return StockRegisterPerWHComponentController;
            }());
            app.AddComponent(StockRegisterPerWHComponentController.Name, new StockRegisterPerWHComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StockRegisterPerWHComponent.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var StockRegisterPerWHGrid = /** @class */ (function () {
            function StockRegisterPerWHGrid() {
            }
            return StockRegisterPerWHGrid;
        }());
        Model.StockRegisterPerWHGrid = StockRegisterPerWHGrid;
        var StockRegisterPerWHState = /** @class */ (function () {
            function StockRegisterPerWHState() {
            }
            return StockRegisterPerWHState;
        }());
        Model.StockRegisterPerWHState = StockRegisterPerWHState;
        var StockRegisterPerWHSearchmodel = /** @class */ (function () {
            function StockRegisterPerWHSearchmodel() {
            }
            return StockRegisterPerWHSearchmodel;
        }());
        Model.StockRegisterPerWHSearchmodel = StockRegisterPerWHSearchmodel;
        var StockWarehouseNames = /** @class */ (function () {
            function StockWarehouseNames() {
            }
            return StockWarehouseNames;
        }());
        Model.StockWarehouseNames = StockWarehouseNames;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StockRegisterPerWHModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var StockRegisterPerWHService = /** @class */ (function (_super) {
            __extends(StockRegisterPerWHService, _super);
            function StockRegisterPerWHService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            StockRegisterPerWHService.prototype.FindWHName = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/Warehousename",
                    Config: config
                });
            };
            StockRegisterPerWHService.prototype.GetWHName = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        WHID: item.WHID,
                        WHName: item.WHName,
                    });
                }
                return list;
            };
            StockRegisterPerWHService.prototype.Find = function (data) {
                var url = this.apiUrl + "/StockRegisterPerWH";
                var stateID;
                var WHID;
                if (data.stateID !== undefined) {
                    stateID = data.stateID;
                }
                else {
                    stateID = "";
                }
                if (data.WHID !== undefined) {
                    WHID = data.WHID;
                }
                else {
                    WHID = "";
                }
                var config = {
                    params: {
                        stateID: stateID,
                        WHID: WHID,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            StockRegisterPerWHService.prototype.GetStockRegisterPerWHGrid = function (data) {
                console.log("data");
                console.log(data);
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        WHName: item.WHName,
                        Receipts: item.Receipts,
                        Issues: item.Issues,
                        CurrentStock: item.CurrentStock
                    });
                    console.log("listitem");
                    console.log(list);
                }
                return list;
            };
            StockRegisterPerWHService.prototype.FindState = function () {
                //
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/Statectrl",
                    Config: config
                });
            };
            StockRegisterPerWHService.prototype.GetState = function (data) {
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        Region_Code: item.Region_Code,
                        State: item.State
                    });
                }
                return list;
            };
            StockRegisterPerWHService.$inject = ["$http", "$q", "$cookieStore"];
            return StockRegisterPerWHService;
        }(GCPL.Service.BaseService));
        Service.StockRegisterPerWHService = StockRegisterPerWHService;
        app.AddService("StockRegisterPerWHService", StockRegisterPerWHService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StockRegisterPerWHService.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var StockRegisterPerWHItemController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function StockRegisterPerWHItemController(_StockRegisterPerWHItemService, _ItemAutoservice, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.GetStockRegisterPerWHItemState = null;
                    this.WarehouseName = null;
                    this.Cookie = null;
                    this.Description = null;
                    this.UserID = null;
                    this.numRecords = 10;
                    this.NoOfRds = "10";
                    this.incre = 0;
                    this.page = 0;
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.shownItems = [];
                    this.StockRegisterPerWHItemList = null;
                    this.StockRegisterPerWHItemSerachA = null;
                    this.StockRegisterPerWHItemService = _StockRegisterPerWHItemService;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.Cookie = _cookieStore;
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.StockRegisterPerWHItemList = Array();
                }
                StockRegisterPerWHItemController.prototype.$onInit = function () {
                    this.Init();
                    this.WarehouseName.WHID = "";
                };
                //Page Load Define Values//
                StockRegisterPerWHItemController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            that.ItemDescriptionAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //let SelectedItemID = ui.item.id;
                            //that.QtyChange.ItemID = ui.item.id;
                            //that.Description = ui.item.value;
                            that.StockRegisterPerWHItemSerachA.Description = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    this.StockRegisterPerWHItemService.FindState().then((function (response) {
                        _this.GetStockRegisterPerWHItemState = _this.StockRegisterPerWHItemService.GetState(response.data.Result);
                    }));
                    this.WarehouseName = this.StockRegisterPerWHItemService.FindWHName().then((function (response) {
                        _this.WarehouseName = _this.StockRegisterPerWHItemService.GetWHName(response.data.Result);
                    }));
                };
                StockRegisterPerWHItemController.prototype.Search = function () {
                    debugger;
                    //this.StockRegisterPerWHItemSerachA.stateID = this.StockRegisterPerWHItemSerachA.stateID;
                    //this.StockRegisterPerWHItemSerachA.WHID = this.WarehouseName.WHID;
                    //console.log(this.StockRegisterPerWHItemSerachA);
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                StockRegisterPerWHItemController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    debugger;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.StockRegisterPerWHItemList = this.StockRegisterPerWHItemService.Find(this.StockRegisterPerWHItemSerachA).then((function (response) {
                        _this.StockRegisterPerWHItemList = _this.StockRegisterPerWHItemService.GetStockRegisterPerWHItemGrid(response.data.Result);
                        console.log(_this.StockRegisterPerWHItemList);
                        _this.StockRegisterPerWHItemList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.StockRegisterPerWHItemList.slice(0, that.numRecords);
                    }));
                };
                StockRegisterPerWHItemController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                StockRegisterPerWHItemController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.StockRegisterPerWHItemList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                StockRegisterPerWHItemController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.StockRegisterPerWHItemList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                StockRegisterPerWHItemController.prototype.Clear = function () {
                    this.StockRegisterPerWHItemSerachA.stateID = "";
                    this.GetStockRegisterPerWHItemState.stateID = "";
                    this.StockRegisterPerWHItemSerachA.Description = "";
                    this.StockRegisterPerWHItemSerachA.WHID = "";
                    $("#ddlstate").val("");
                };
                StockRegisterPerWHItemController.$inject = ["StockRegisterPerWHItemService", "itemDescriptionService", "$cookieStore"];
                return StockRegisterPerWHItemController;
            }());
            var StockRegisterPerWHItemComponentController = /** @class */ (function () {
                function StockRegisterPerWHItemComponentController() {
                    this.controller = StockRegisterPerWHItemController;
                    this.templateUrl = "/Scripts/App/Inventory/StockRegisterPerWHItem/Template/_StockRegisterPerWHItem.html";
                }
                StockRegisterPerWHItemComponentController.Name = "stockregisterperwhitemcomponent";
                return StockRegisterPerWHItemComponentController;
            }());
            app.AddComponent(StockRegisterPerWHItemComponentController.Name, new StockRegisterPerWHItemComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StockRegisterPerWHItemComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StockRegisterPerWHItemController = /** @class */ (function (_super) {
            __extends(StockRegisterPerWHItemController, _super);
            function StockRegisterPerWHItemController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StockRegisterPerWHItemController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StockRegisterPerWHItemController = StockRegisterPerWHItemController;
        app.AddController("StockRegisterPerWHItemController", StockRegisterPerWHItemController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StockRegisterPerWHItemController.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var StockRegisterPerWHItemGrid = /** @class */ (function () {
            function StockRegisterPerWHItemGrid() {
            }
            return StockRegisterPerWHItemGrid;
        }());
        Model.StockRegisterPerWHItemGrid = StockRegisterPerWHItemGrid;
        var StockRegisterPerWHItemState = /** @class */ (function () {
            function StockRegisterPerWHItemState() {
            }
            return StockRegisterPerWHItemState;
        }());
        Model.StockRegisterPerWHItemState = StockRegisterPerWHItemState;
        var StockRegisterPerWHItemSearchmodel = /** @class */ (function () {
            function StockRegisterPerWHItemSearchmodel() {
            }
            return StockRegisterPerWHItemSearchmodel;
        }());
        Model.StockRegisterPerWHItemSearchmodel = StockRegisterPerWHItemSearchmodel;
        var StockItemWarehouseNames = /** @class */ (function () {
            function StockItemWarehouseNames() {
            }
            return StockItemWarehouseNames;
        }());
        Model.StockItemWarehouseNames = StockItemWarehouseNames;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StockRegisterPerWHItemModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var StockRegisterPerWHItemService = /** @class */ (function (_super) {
            __extends(StockRegisterPerWHItemService, _super);
            function StockRegisterPerWHItemService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            StockRegisterPerWHItemService.prototype.FindWHName = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/Warehousename",
                    Config: config
                });
            };
            StockRegisterPerWHItemService.prototype.GetWHName = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        WHID: item.WHID,
                        WHName: item.WHName,
                    });
                }
                return list;
            };
            StockRegisterPerWHItemService.prototype.Find = function (data) {
                var url = this.apiUrl + "/StockRegisterPerWHItem";
                var stateID;
                var WHID;
                var Description;
                if (data.Description !== undefined) {
                    Description = data.Description;
                }
                else {
                    Description = '';
                }
                if (data.stateID !== undefined) {
                    stateID = data.stateID;
                }
                else {
                    stateID = "";
                }
                if (data.WHID !== undefined) {
                    WHID = data.WHID;
                }
                else {
                    WHID = "";
                }
                var config = {
                    params: {
                        stateID: stateID,
                        WHID: WHID,
                        Description: Description,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            StockRegisterPerWHItemService.prototype.GetStockRegisterPerWHItemGrid = function (data) {
                debugger;
                console.log(data);
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        WHName: item.WHName,
                        Description: item.Description,
                        Month: item.Month,
                        Receipt: item.Receipt,
                        IssuesINR: item.IssuesINR,
                        StockINR: item.StockINR
                    });
                    console.log("listitem");
                    console.log(list);
                }
                return list;
            };
            StockRegisterPerWHItemService.prototype.FindState = function () {
                //
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/Statectrl",
                    Config: config
                });
            };
            StockRegisterPerWHItemService.prototype.GetState = function (data) {
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        Region_Code: item.Region_Code,
                        State: item.State
                    });
                }
                return list;
            };
            StockRegisterPerWHItemService.$inject = ["$http", "$q", "$cookieStore"];
            return StockRegisterPerWHItemService;
        }(GCPL.Service.BaseService));
        Service.StockRegisterPerWHItemService = StockRegisterPerWHItemService;
        app.AddService("StockRegisterPerWHItemService", StockRegisterPerWHItemService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StockRegisterPerWHItemService.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var WHMovementReportController = /** @class */ (function (_super) {
            __extends(WHMovementReportController, _super);
            function WHMovementReportController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return WHMovementReportController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.WHMovementReportController = WHMovementReportController;
        app.AddController("WHMovementReportController", WHMovementReportController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WHMovementReportController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var WHMovementReportController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function WHMovementReportController(_WHMovementReportService, _ItemAutoservice, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.WarehouseName = null;
                    this.Cookie = null;
                    this.Description = null;
                    this.UserID = null;
                    this.GetPINO = null;
                    this.numRecords = 10;
                    this.NoOfRds = "10";
                    this.incre = 0;
                    this.page = 0;
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.shownItems = [];
                    this.WHMovementList = null;
                    this.WHMovementReportSerachA = null;
                    this.WHMovementReportService = _WHMovementReportService;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.Cookie = _cookieStore;
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.WHMovementList = Array();
                }
                WHMovementReportController.prototype.$onInit = function () {
                    this.Init();
                    this.WarehouseName.WHID = "";
                    var that = this;
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                WHMovementReportController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                WHMovementReportController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                WHMovementReportController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            that.ItemDescriptionAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //let SelectedItemID = ui.item.id;
                            //that.QtyChange.ItemID = ui.item.id;
                            //that.Description = ui.item.value;
                            that.WHMovementReportSerachA.Description = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    this.WarehouseName = this.WHMovementReportService.FindWHName().then((function (response) {
                        _this.WarehouseName = _this.WHMovementReportService.GetWHName(response.data.Result);
                    }));
                    this.WHMovementReportService.FindPIDocNo().then((function (response) {
                        _this.GetPINO = _this.WHMovementReportService.GetPIDocNo(response.data.Result);
                    }));
                };
                WHMovementReportController.prototype.Search = function () {
                    debugger;
                    this.WHMovementReportSerachA.PIID = this.GetPINO.PIID;
                    this.WHMovementReportSerachA.FromDate = document.getElementById("txtFromDate").value;
                    this.WHMovementReportSerachA.ToDate = document.getElementById("txtToDate").value;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                WHMovementReportController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    debugger;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.WHMovementList = this.WHMovementReportService.Find(this.WHMovementReportSerachA).then((function (response) {
                        _this.WHMovementList = _this.WHMovementReportService.GetStockDispositionGrid(response.data.Result);
                        console.log(_this.WHMovementList);
                        _this.WHMovementList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.WHMovementList.slice(0, that.numRecords);
                    }));
                };
                WHMovementReportController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                WHMovementReportController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.WHMovementList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                WHMovementReportController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.WHMovementList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                WHMovementReportController.prototype.Clear = function () {
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    this.WHMovementReportSerachA.Description = "";
                    this.WHMovementReportSerachA.WHID = "";
                    this.GetPINO.PIID = "";
                    $("#ddlstate").val("");
                };
                WHMovementReportController.$inject = ["WHMovementReportService", "itemDescriptionService", "$cookieStore"];
                return WHMovementReportController;
            }());
            var WHMovementReportComponentController = /** @class */ (function () {
                function WHMovementReportComponentController() {
                    this.controller = WHMovementReportController;
                    this.templateUrl = "/Scripts/App/Reports/WHMovementReport/Template/_WHMovementReport.html";
                }
                WHMovementReportComponentController.Name = "whmovementreportcomponent";
                return WHMovementReportComponentController;
            }());
            app.AddComponent(WHMovementReportComponentController.Name, new WHMovementReportComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WHMovementReportComponent.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var WHMovementReportGrid = /** @class */ (function () {
            function WHMovementReportGrid() {
            }
            return WHMovementReportGrid;
        }());
        Model.WHMovementReportGrid = WHMovementReportGrid;
        var WHMovementSearchmodel = /** @class */ (function () {
            function WHMovementSearchmodel() {
            }
            return WHMovementSearchmodel;
        }());
        Model.WHMovementSearchmodel = WHMovementSearchmodel;
        var WHMovementWarehouseNames = /** @class */ (function () {
            function WHMovementWarehouseNames() {
            }
            return WHMovementWarehouseNames;
        }());
        Model.WHMovementWarehouseNames = WHMovementWarehouseNames;
        var WHMovementPIDocNo = /** @class */ (function () {
            function WHMovementPIDocNo() {
            }
            return WHMovementPIDocNo;
        }());
        Model.WHMovementPIDocNo = WHMovementPIDocNo;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WHMovementReportModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var WHMovementReportService = /** @class */ (function (_super) {
            __extends(WHMovementReportService, _super);
            function WHMovementReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            WHMovementReportService.prototype.FindWHName = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/Warehousename",
                    Config: config
                });
            };
            WHMovementReportService.prototype.GetWHName = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        WHID: item.WHID,
                        WHName: item.WHName,
                    });
                }
                return list;
            };
            WHMovementReportService.prototype.FindPIDocNo = function () {
                //
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/PINO",
                    Config: config
                });
            };
            WHMovementReportService.prototype.GetPIDocNo = function (data) {
                //
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        PIID: item.PIID,
                        PINO: item.PINO,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    });
                }
                return list;
            };
            WHMovementReportService.prototype.Find = function (data) {
                debugger;
                var url = this.apiUrl + "/WHMovement";
                var FromDate;
                var ToDate;
                var PIID;
                var Description;
                var WHID;
                debugger;
                if (data.FromDate !== undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = '';
                }
                console.log(FromDate);
                if (data.ToDate !== undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                if (data.PIID !== undefined) {
                    PIID = data.PIID;
                }
                else {
                    PIID = "";
                }
                if (data.Description !== undefined) {
                    Description = data.Description;
                }
                else {
                    Description = '';
                }
                if (data.WHID !== undefined) {
                    WHID = data.WHID;
                }
                else {
                    WHID = "";
                }
                console.log(ToDate);
                //console.log(abc);
                var config = {
                    params: {
                        FromDate: FromDate,
                        ToDate: ToDate,
                        PIID: PIID,
                        Description: Description,
                        WHID: WHID,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            WHMovementReportService.prototype.GetStockDispositionGrid = function (data) {
                debugger;
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        Description: item.Description,
                        FrWHName: item.FrWHName,
                        ToWHName: item.ToWHName,
                        DocumentNo: item.DocumentNo,
                        DocumentDate: item.DocumentDate,
                        QtyDispositioned: item.QtyDispositioned,
                        UOM: item.UOM,
                        TransferValue: item.TransferValue
                    });
                }
                return list;
            };
            WHMovementReportService.$inject = ["$http", "$q", "$cookieStore"];
            return WHMovementReportService;
        }(GCPL.Service.BaseService));
        Service.WHMovementReportService = WHMovementReportService;
        app.AddService("WHMovementReportService", WHMovementReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WHMovementReportService.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ItemStockReportController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ItemStockReportController(_ItemStockReportService, _ItemAutoservice, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.WarehouseName = null;
                    this.Cookie = null;
                    this.Description = null;
                    this.UserID = null;
                    this.numRecords = 10;
                    this.NoOfRds = "10";
                    this.incre = 0;
                    this.page = 0;
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.shownItems = [];
                    this.ItemStockList = null;
                    this.ItemStockSerachA = null;
                    this.ItemStockReportService = _ItemStockReportService;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.Cookie = _cookieStore;
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.ItemStockList = Array();
                }
                ItemStockReportController.prototype.$onInit = function () {
                    this.Init();
                    this.WarehouseName.WHID = "";
                    var that = this;
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                ItemStockReportController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                ItemStockReportController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                ItemStockReportController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            that.ItemDescriptionAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //let SelectedItemID = ui.item.id;
                            //that.QtyChange.ItemID = ui.item.id;
                            //that.Description = ui.item.value;
                            that.ItemStockSerachA.Description = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    this.WarehouseName = this.ItemStockReportService.FindWHName().then((function (response) {
                        _this.WarehouseName = _this.ItemStockReportService.GetWHName(response.data.Result);
                    }));
                };
                ItemStockReportController.prototype.Search = function () {
                    debugger;
                    this.ItemStockSerachA.FromDate = document.getElementById("txtFromDate").value;
                    this.ItemStockSerachA.ToDate = document.getElementById("txtToDate").value;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                ItemStockReportController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    debugger;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.ItemStockList = this.ItemStockReportService.Find(this.ItemStockSerachA).then((function (response) {
                        _this.ItemStockList = _this.ItemStockReportService.GetItemStockGrid(response.data.Result);
                        console.log(_this.ItemStockList);
                        _this.ItemStockList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.ItemStockList.slice(0, that.numRecords);
                    }));
                };
                ItemStockReportController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                ItemStockReportController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ItemStockList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                ItemStockReportController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ItemStockList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                ItemStockReportController.prototype.Clear = function () {
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    this.ItemStockSerachA.Description = "";
                    this.ItemStockSerachA.WHID = "";
                    $("#ddlstate").val("");
                };
                ItemStockReportController.$inject = ["ItemStockReportService", "itemDescriptionService", "$cookieStore"];
                return ItemStockReportController;
            }());
            var ItemStockReportComponentController = /** @class */ (function () {
                function ItemStockReportComponentController() {
                    this.controller = ItemStockReportController;
                    this.templateUrl = "/Scripts/App/Reports/ItemStockReport/Template/_ItemStockReport.html";
                }
                ItemStockReportComponentController.Name = "itemstockreportcomponent";
                return ItemStockReportComponentController;
            }());
            app.AddComponent(ItemStockReportComponentController.Name, new ItemStockReportComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ItemStockReportComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ItemStockReportController = /** @class */ (function (_super) {
            __extends(ItemStockReportController, _super);
            function ItemStockReportController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ItemStockReportController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ItemStockReportController = ItemStockReportController;
        app.AddController("ItemStockReportController", ItemStockReportController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ItemStockReportContoller.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var ItemStockReportGrid = /** @class */ (function () {
            function ItemStockReportGrid() {
            }
            return ItemStockReportGrid;
        }());
        Model.ItemStockReportGrid = ItemStockReportGrid;
        var ItemStockSearchmodel = /** @class */ (function () {
            function ItemStockSearchmodel() {
            }
            return ItemStockSearchmodel;
        }());
        Model.ItemStockSearchmodel = ItemStockSearchmodel;
        var ItemStockWarehouseNames = /** @class */ (function () {
            function ItemStockWarehouseNames() {
            }
            return ItemStockWarehouseNames;
        }());
        Model.ItemStockWarehouseNames = ItemStockWarehouseNames;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ItemStockReportModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var ItemStockReportService = /** @class */ (function (_super) {
            __extends(ItemStockReportService, _super);
            function ItemStockReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            ItemStockReportService.prototype.FindWHName = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/Warehousename",
                    Config: config
                });
            };
            ItemStockReportService.prototype.GetWHName = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        WHID: item.WHID,
                        WHName: item.WHName,
                    });
                }
                return list;
            };
            ItemStockReportService.prototype.Find = function (data) {
                debugger;
                var url = this.apiUrl + "/ItemStockReport";
                var Description;
                var WHID;
                var FromDate;
                var ToDate;
                debugger;
                if (data.Description !== undefined) {
                    Description = data.Description;
                }
                else {
                    Description = '';
                }
                if (data.WHID !== undefined) {
                    WHID = data.WHID;
                }
                else {
                    WHID = "";
                }
                if (data.FromDate !== undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = '';
                }
                console.log(FromDate);
                if (data.ToDate !== undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                console.log(ToDate);
                //console.log(abc);
                var config = {
                    params: {
                        Description: Description,
                        WHID: WHID,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            ItemStockReportService.prototype.GetItemStockGrid = function (data) {
                debugger;
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        Description: item.Description,
                        UOM: item.UOM,
                        WHName: item.WHName,
                        InitialStock: item.InitialStock,
                        Receipts: item.Receipts,
                        Issues: item.Issues,
                        FinalStock: item.FinalStock
                    });
                }
                return list;
            };
            ItemStockReportService.$inject = ["$http", "$q", "$cookieStore"];
            return ItemStockReportService;
        }(GCPL.Service.BaseService));
        Service.ItemStockReportService = ItemStockReportService;
        app.AddService("ItemStockReportService", ItemStockReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ItemStockReportService.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var StockRegisterPerWHItemController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function StockRegisterPerWHItemController(_StockRegisterPerWHItemService, _ItemAutoservice, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.GetStockRegisterPerWHItemState = null;
                    this.WarehouseName = null;
                    this.Cookie = null;
                    this.Description = null;
                    this.UserID = null;
                    this.numRecords = 10;
                    this.NoOfRds = "10";
                    this.incre = 0;
                    this.page = 0;
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.shownItems = [];
                    this.StockRegisterPerWHItemList = null;
                    this.StockRegisterPerWHItemSerachA = null;
                    this.StockRegisterPerWHItemService = _StockRegisterPerWHItemService;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.Cookie = _cookieStore;
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.StockRegisterPerWHItemList = Array();
                }
                StockRegisterPerWHItemController.prototype.$onInit = function () {
                    this.Init();
                    this.WarehouseName.WHID = "";
                };
                //Page Load Define Values//
                StockRegisterPerWHItemController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            that.ItemDescriptionAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //let SelectedItemID = ui.item.id;
                            //that.QtyChange.ItemID = ui.item.id;
                            //that.Description = ui.item.value;
                            that.StockRegisterPerWHItemSerachA.Description = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    this.StockRegisterPerWHItemService.FindState().then((function (response) {
                        _this.GetStockRegisterPerWHItemState = _this.StockRegisterPerWHItemService.GetState(response.data.Result);
                    }));
                    this.WarehouseName = this.StockRegisterPerWHItemService.FindWHName().then((function (response) {
                        _this.WarehouseName = _this.StockRegisterPerWHItemService.GetWHName(response.data.Result);
                    }));
                };
                StockRegisterPerWHItemController.prototype.Search = function () {
                    debugger;
                    //this.StockRegisterPerWHItemSerachA.stateID = this.StockRegisterPerWHItemSerachA.stateID;
                    //this.StockRegisterPerWHItemSerachA.WHID = this.WarehouseName.WHID;
                    //console.log(this.StockRegisterPerWHItemSerachA);
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                StockRegisterPerWHItemController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    debugger;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.StockRegisterPerWHItemList = this.StockRegisterPerWHItemService.Find(this.StockRegisterPerWHItemSerachA).then((function (response) {
                        _this.StockRegisterPerWHItemList = _this.StockRegisterPerWHItemService.GetStockRegisterPerWHItemGrid(response.data.Result);
                        console.log(_this.StockRegisterPerWHItemList);
                        _this.StockRegisterPerWHItemList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.StockRegisterPerWHItemList.slice(0, that.numRecords);
                    }));
                };
                StockRegisterPerWHItemController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                StockRegisterPerWHItemController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.StockRegisterPerWHItemList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                StockRegisterPerWHItemController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.StockRegisterPerWHItemList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                StockRegisterPerWHItemController.prototype.Clear = function () {
                    this.StockRegisterPerWHItemSerachA.stateID = "";
                    this.GetStockRegisterPerWHItemState.stateID = "";
                    this.StockRegisterPerWHItemSerachA.Description = "";
                    this.StockRegisterPerWHItemSerachA.WHID = "";
                    $("#ddlstate").val("");
                };
                StockRegisterPerWHItemController.$inject = ["StockRegisterPerWHItemService", "itemDescriptionService", "$cookieStore"];
                return StockRegisterPerWHItemController;
            }());
            var StockRegisterPerWHItemComponentController = /** @class */ (function () {
                function StockRegisterPerWHItemComponentController() {
                    this.controller = StockRegisterPerWHItemController;
                    this.templateUrl = "/Scripts/App/Inventory/StockRegisterPerWHItem/Template/_StockRegisterPerWHItem.html";
                }
                StockRegisterPerWHItemComponentController.Name = "stockregisterperwhitemcomponent";
                return StockRegisterPerWHItemComponentController;
            }());
            app.AddComponent(StockRegisterPerWHItemComponentController.Name, new StockRegisterPerWHItemComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StockRegisterPerWHItemComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StockRegisterPerWHItemController = /** @class */ (function (_super) {
            __extends(StockRegisterPerWHItemController, _super);
            function StockRegisterPerWHItemController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StockRegisterPerWHItemController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StockRegisterPerWHItemController = StockRegisterPerWHItemController;
        app.AddController("StockRegisterPerWHItemController", StockRegisterPerWHItemController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StockRegisterPerWHItemController.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var StockRegisterPerWHItemGrid = /** @class */ (function () {
            function StockRegisterPerWHItemGrid() {
            }
            return StockRegisterPerWHItemGrid;
        }());
        Model.StockRegisterPerWHItemGrid = StockRegisterPerWHItemGrid;
        var StockRegisterPerWHItemState = /** @class */ (function () {
            function StockRegisterPerWHItemState() {
            }
            return StockRegisterPerWHItemState;
        }());
        Model.StockRegisterPerWHItemState = StockRegisterPerWHItemState;
        var StockRegisterPerWHItemSearchmodel = /** @class */ (function () {
            function StockRegisterPerWHItemSearchmodel() {
            }
            return StockRegisterPerWHItemSearchmodel;
        }());
        Model.StockRegisterPerWHItemSearchmodel = StockRegisterPerWHItemSearchmodel;
        var StockItemWarehouseNames = /** @class */ (function () {
            function StockItemWarehouseNames() {
            }
            return StockItemWarehouseNames;
        }());
        Model.StockItemWarehouseNames = StockItemWarehouseNames;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StockRegisterPerWHItemModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var StockRegisterPerWHItemService = /** @class */ (function (_super) {
            __extends(StockRegisterPerWHItemService, _super);
            function StockRegisterPerWHItemService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            StockRegisterPerWHItemService.prototype.FindWHName = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/Warehousename",
                    Config: config
                });
            };
            StockRegisterPerWHItemService.prototype.GetWHName = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        WHID: item.WHID,
                        WHName: item.WHName,
                    });
                }
                return list;
            };
            StockRegisterPerWHItemService.prototype.Find = function (data) {
                var url = this.apiUrl + "/StockRegisterPerWHItem";
                var stateID;
                var WHID;
                var Description;
                if (data.Description !== undefined) {
                    Description = data.Description;
                }
                else {
                    Description = '';
                }
                if (data.stateID !== undefined) {
                    stateID = data.stateID;
                }
                else {
                    stateID = "";
                }
                if (data.WHID !== undefined) {
                    WHID = data.WHID;
                }
                else {
                    WHID = "";
                }
                var config = {
                    params: {
                        stateID: stateID,
                        WHID: WHID,
                        Description: Description,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            StockRegisterPerWHItemService.prototype.GetStockRegisterPerWHItemGrid = function (data) {
                debugger;
                console.log(data);
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        WHName: item.WHName,
                        Description: item.Description,
                        Month: item.Month,
                        Receipt: item.Receipt,
                        IssuesINR: item.IssuesINR,
                        StockINR: item.StockINR
                    });
                    console.log("listitem");
                    console.log(list);
                }
                return list;
            };
            StockRegisterPerWHItemService.prototype.FindState = function () {
                //
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/Statectrl",
                    Config: config
                });
            };
            StockRegisterPerWHItemService.prototype.GetState = function (data) {
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        Region_Code: item.Region_Code,
                        State: item.State
                    });
                }
                return list;
            };
            StockRegisterPerWHItemService.$inject = ["$http", "$q", "$cookieStore"];
            return StockRegisterPerWHItemService;
        }(GCPL.Service.BaseService));
        Service.StockRegisterPerWHItemService = StockRegisterPerWHItemService;
        app.AddService("StockRegisterPerWHItemService", StockRegisterPerWHItemService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StockRegisterPerWHItemService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var OverallSalesGridview = /** @class */ (function () {
            function OverallSalesGridview() {
            }
            return OverallSalesGridview;
        }());
        Model.OverallSalesGridview = OverallSalesGridview;
        var OverallSalesStatusGridview = /** @class */ (function () {
            function OverallSalesStatusGridview() {
            }
            return OverallSalesStatusGridview;
        }());
        Model.OverallSalesStatusGridview = OverallSalesStatusGridview;
        var SalesByItemsOffice = /** @class */ (function () {
            function SalesByItemsOffice() {
            }
            return SalesByItemsOffice;
        }());
        Model.SalesByItemsOffice = SalesByItemsOffice;
        var salesByItemsSalesOrg = /** @class */ (function () {
            function salesByItemsSalesOrg() {
            }
            return salesByItemsSalesOrg;
        }());
        Model.salesByItemsSalesOrg = salesByItemsSalesOrg;
        var salesByItemsDistChannel = /** @class */ (function () {
            function salesByItemsDistChannel() {
            }
            return salesByItemsDistChannel;
        }());
        Model.salesByItemsDistChannel = salesByItemsDistChannel;
        var OverallSalesSearchModel = /** @class */ (function () {
            function OverallSalesSearchModel() {
            }
            return OverallSalesSearchModel;
        }());
        Model.OverallSalesSearchModel = OverallSalesSearchModel;
        var OverallSalesStatusSearchModel = /** @class */ (function () {
            function OverallSalesStatusSearchModel() {
            }
            return OverallSalesStatusSearchModel;
        }());
        Model.OverallSalesStatusSearchModel = OverallSalesStatusSearchModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=OverallSalesVolumeModel.js.map
/// <reference path="../../../../typings/jqueryui/jqueryui.d.ts" />
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var OverallSalesModel = GCPL.Model.OverallSalesSearchModel;
            var OverallSalesStatusModel = GCPL.Model.OverallSalesStatusSearchModel;
            var OverallSalesVolumeController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function OverallSalesVolumeController(_cookieStore, _ModelMasterListService, _ItemAutoservice, _OverallSalesService, _Sservice, _Districtservice) {
                    this._cookieStore = _cookieStore;
                    this.OverallSalesGridView = null;
                    this.OverallSalesSearchModel = null;
                    this.OverallSalesStatusSearchModel = null;
                    this.OverallSalesStatusGrid = null;
                    this.GetOverallSales = null;
                    this.shownItems = null;
                    this.ShownStatus = null;
                    this.DealerID = null;
                    this.GetSalesOffice = null;
                    this.GetSalesOrg = null;
                    this.GetDistChannel = null;
                    this.SearchModelDesc = null;
                    this.SearchItemDesc = null;
                    this.StateDropDown = null;
                    this.DistrictDrop = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = "10";
                    this.Selected = null;
                    this.arr1 = null;
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.ModelMasterListService = _ModelMasterListService;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.OverallSalesService = _OverallSalesService;
                    this.Stateservice = _Sservice;
                    this.Districtservice = _Districtservice;
                    this.OverallSalesSearchModel = new OverallSalesModel();
                    this.OverallSalesStatusSearchModel = new OverallSalesStatusModel();
                    this.SearchItemDesc = new GCPL.Model.ItemDescriptionserch;
                    this.SearchModelDesc = new GCPL.Model.ModelMasterListModel;
                    this.OverallSalesGridView = new Array();
                    this.OverallSalesStatusGrid = new Array();
                    this.arr1 = [
                        { name: "Model", value: "MM.Description" },
                        { name: "Sales-Office", value: "SOM.SalesOffice" },
                        { name: "State", value: "SM.State" },
                        { name: "District", value: "CYM.Name" },
                        { name: "Sales-Organization", value: "srg.SalesOrg" },
                        { name: "Distribution-Channel", value: "DC.DistributionChannel" }
                    ];
                }
                OverallSalesVolumeController.prototype.$onInit = function () {
                    var options = [];
                    $('.dropdown-menu a').on('click', function (event) {
                        var $target = $(event.currentTarget), val = $target.attr('data-value'), $inp = $target.find('input'), idx;
                        if ((idx = options.indexOf(val)) > -1) {
                            options.splice(idx, 1);
                            setTimeout(function () { $inp.prop('checked', false); }, 0);
                        }
                        else {
                            options.push(val);
                            setTimeout(function () { $inp.prop('checked', true); }, 0);
                        }
                        $(event.target).blur();
                        console.log(options);
                        return false;
                    });
                    this.Init();
                };
                //Page Load Define Values//
                OverallSalesVolumeController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtModel").autocomplete({
                        source: function (request, res) {
                            that.ModelMasterListService.Find(request).then((function (response) {
                                var data = that.ModelMasterListService.GetModelMasterList(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ModelID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //let SelectedItemID = ui.item.id;
                            that.OverallSalesSearchModel.ModelDescription = ui.item.id;
                            //that.Description = ui.item.value;
                        },
                        change: function () {
                        }
                    });
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            debugger;
                            that.ItemDescriptionAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //let SelectedItemID = ui.item.id;
                            //that.QtyChange.ItemID = ui.item.id;
                            //that.Description = ui.item.value;
                            that.OverallSalesSearchModel.ItemDescription = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    this.OverallSalesService.FindSalesOffice().then((function (response) {
                        _this.GetSalesOffice = _this.OverallSalesService.GetSalesOffice(response.data.Result);
                    }));
                    this.OverallSalesService.FindSalesOrg().then((function (response) {
                        _this.GetSalesOrg = _this.OverallSalesService.GetSalesOrg(response.data.Result);
                    }));
                    this.OverallSalesService.FindDistributionChannel().then((function (response) {
                        _this.GetDistChannel = _this.OverallSalesService.GetDistributionChannel(response.data.Result);
                    }));
                    this.StateDropDown = this.Stateservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Stateservice.GetStateDDl(response.data.Result);
                    }));
                    this.DistrictDrop = this.Districtservice.Find(this.StateDropDown.StateID).then((function (response) {
                        _this.DistrictDrop = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                    $(".Model").css('opacity', '0');
                    $(".Sales-Office").css('opacity', '0');
                    $(".State").css('opacity', '0');
                    $(".District").css('opacity', '0');
                    $(".Sales-Organization").css('opacity', '0');
                    $(".Distribution-Channel").css('opacity', '0');
                    $(".Amount").css('opacity', '0');
                };
                OverallSalesVolumeController.prototype.CBox = function (item) {
                    var that = this;
                    var SelectedColumns = [];
                    var UnSelectedCol = [];
                    var SelectedItems = "";
                    var count = 0;
                    var index = -1;
                    $.each(this.arr1, function (key, item) {
                        if (item.IsSelected == false) {
                            UnSelectedCol.push(item);
                        }
                    });
                    $.each(this.arr1, function (key, item) {
                        if (item.IsSelected == true) {
                            SelectedColumns.push(item);
                        }
                    });
                    for (var i = 0; i < UnSelectedCol.length; i++) {
                        $('.' + UnSelectedCol[i].name).animate({ opacity: 0 }, 1000);
                        $(".Amount").animate({ opacity: 0 }, 500);
                    }
                    this.Selected = SelectedColumns;
                    for (var i = 0; i < SelectedColumns.length; i++) {
                        if (i < (SelectedColumns.length - 1)) {
                            SelectedItems = SelectedItems + (SelectedColumns[i].value + ",");
                        }
                        else {
                            SelectedItems = SelectedItems + SelectedColumns[i].value;
                        }
                        $('.' + SelectedColumns[i].name).animate({ opacity: 1 }, 1000);
                        $(".Amount").animate({ opacity: 1 }, 500);
                        //$(".Amount").css("visibility", "visible").fadeIn(2000);
                    }
                    this.Selected = SelectedItems;
                    this.OverallSalesStatusSearchModel.Columns = this.Selected;
                    console.log(this.OverallSalesStatusSearchModel.Columns);
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillStatusGrid(this.numRecords);
                };
                OverallSalesVolumeController.prototype.District = function () {
                    var _this = this;
                    this.DistrictDrop = this.Districtservice.Find(this.StateDropDown.StateID).then((function (response) {
                        _this.DistrictDrop = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                OverallSalesVolumeController.prototype.Search = function () {
                    this.OverallSalesSearchModel.DistributionChannel = this.GetDistChannel.DistributionChannelID;
                    this.OverallSalesSearchModel.Period = this.OverallSalesSearchModel.Period;
                    this.OverallSalesSearchModel.SalesOffice = this.GetSalesOffice.SalesOfficeID;
                    this.OverallSalesSearchModel.SalesOrganization = this.GetSalesOrg.SalesOrganisationID;
                    this.OverallSalesSearchModel.ItemDescription = this.SearchItemDesc.Description;
                    this.OverallSalesSearchModel.ModelDescription = this.SearchModelDesc.Description;
                    this.OverallSalesSearchModel.State = this.StateDropDown.StateID;
                    this.OverallSalesSearchModel.District = this.DistrictDrop.CityCode;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                OverallSalesVolumeController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    debugger;
                    this.OverallSalesService.Find(this.OverallSalesSearchModel).then((function (response) {
                        _this.OverallSalesGridView = _this.OverallSalesService.GetOverallGrid(response.data.Result);
                        _this.OverallSalesGridView.forEach(function (value, key) {
                            that.incre = key + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.OverallSalesGridView.slice(0, that.numRecords);
                    }));
                };
                OverallSalesVolumeController.prototype.FillStatusGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    this.OverallSalesService.FindStatusData(this.OverallSalesStatusSearchModel.Columns).then((function (response) {
                        console.log(_this.OverallSalesStatusSearchModel.Columns);
                        _this.OverallSalesStatusGrid = _this.OverallSalesService.GetStatusData(response.data.Result);
                        _this.OverallSalesStatusGrid.forEach(function (value, key) {
                            that.incre = key + 1;
                        });
                        _this.ShownStatus = _this.OverallSalesStatusGrid.slice(0, that.numRecords);
                    }));
                };
                OverallSalesVolumeController.prototype.Clear = function () {
                    $('#PeriodSelect').prop('selectedIndex', 0);
                    this.OverallSalesSearchModel.Period = $('#PeriodSelect').val();
                    $('#DistrictSelect').prop('selectedIndex', 0);
                    this.DistrictDrop.CityCode = $('#DistrictSelect').val();
                    $('#StateSelect').prop('selectedIndex', 0);
                    this.StateDropDown.StateID = $('#StateSelect').val();
                    $('#OfficeSelect').prop('selectedIndex', 0);
                    this.GetSalesOffice.SalesOfficeID = $('#OfficeSelect').val();
                    $('#OrgSelect').prop('selectedIndex', 0);
                    this.GetSalesOrg.SalesOrganisationID = $('#OrgSelect').val();
                    $('#DistSelect').prop('selectedIndex', 0);
                    this.GetDistChannel.DistributionChannelID = $('#DistSelect').val();
                    $("#txtModel").val("");
                    this.SearchModelDesc.Description = "";
                    $("#txtDescription").val("");
                    this.SearchItemDesc.Description = "";
                    this.shownItems = null;
                    this.OverallSalesGridView.length = 0;
                };
                OverallSalesVolumeController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                OverallSalesVolumeController.$inject = ["$cookieStore", "ModelMasterListComponentService", "itemDescriptionService", "OverallSalesVolumeService", "StateModelServices", "DistrictService"];
                return OverallSalesVolumeController;
            }());
            var OverallSalesVolumeComponentController = /** @class */ (function () {
                function OverallSalesVolumeComponentController() {
                    this.controller = OverallSalesVolumeController;
                    this.templateUrl = "/Scripts/App/Reports/OverallSalesVolume/Template/_OverallSalesVolume.html";
                }
                OverallSalesVolumeComponentController.Name = "overallsalesvolumecomponent";
                return OverallSalesVolumeComponentController;
            }());
            app.AddComponent(OverallSalesVolumeComponentController.Name, new OverallSalesVolumeComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=OverallSalesVolumeComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var OverallSalesVolumeController = /** @class */ (function (_super) {
            __extends(OverallSalesVolumeController, _super);
            function OverallSalesVolumeController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return OverallSalesVolumeController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.OverallSalesVolumeController = OverallSalesVolumeController;
        app.AddController("OverallSalesVolumeController", OverallSalesVolumeController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=OverallSalesVolumeController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var OverallSalesVolumeService = /** @class */ (function (_super) {
            __extends(OverallSalesVolumeService, _super);
            function OverallSalesVolumeService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            OverallSalesVolumeService.prototype.Find = function (data) {
                var url = this.apiUrl + "/OverallSalesVolume";
                var Period;
                var ModelDescription;
                var ItemDescription;
                var SalesOffice;
                var SalesOrganization;
                var DistributionChannel;
                var State;
                var District;
                if (data.Period !== undefined) {
                    Period = data.Period;
                }
                else {
                    Period = "";
                }
                if (data.ModelDescription !== undefined) {
                    ModelDescription = data.ModelDescription;
                }
                else {
                    ModelDescription = "";
                }
                if (data.ItemDescription !== undefined) {
                    ItemDescription = data.ItemDescription;
                }
                else {
                    ItemDescription = "";
                }
                if (data.SalesOffice !== undefined) {
                    SalesOffice = data.SalesOffice;
                }
                else {
                    SalesOffice = "";
                }
                if (data.SalesOrganization !== undefined) {
                    SalesOrganization = data.SalesOrganization;
                }
                else {
                    SalesOrganization = "";
                }
                if (data.DistributionChannel !== undefined) {
                    DistributionChannel = data.DistributionChannel;
                }
                else {
                    DistributionChannel = "";
                }
                if (data.State !== undefined) {
                    State = data.State;
                }
                else {
                    State = "";
                }
                if (data.District !== undefined) {
                    District = data.District;
                }
                else {
                    District = "";
                }
                var config = {
                    params: {
                        Period: Period,
                        ModelDescription: ModelDescription,
                        ItemDescription: ItemDescription,
                        SalesOffice: SalesOffice,
                        SalesOrganization: SalesOrganization,
                        DistributionChannel: DistributionChannel,
                        State: State,
                        District: District,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            OverallSalesVolumeService.prototype.GetOverallGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        DistributionChannel: item.DistributionChannel,
                        District: item.District,
                        ItemDescription: item.ItemDescription,
                        ModelDescription: item.ModelDescription,
                        Months: item.Months,
                        SalesOffice: item.SalesOffice,
                        SalesOrganization: item.SalesOrganization,
                        State: item.State,
                        Amount: item.Amount
                    });
                }
                return list;
            };
            OverallSalesVolumeService.prototype.FindStatusData = function (data) {
                var Columns;
                debugger;
                console.log(data);
                //if (data.Columns !== undefined) {
                //    Columns = data.Columns
                //}
                //else {
                //    Columns = ""
                //}
                var config = {
                    params: {
                        Columns: data,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/OverallSalesStatus",
                    Config: config
                });
            };
            OverallSalesVolumeService.prototype.GetStatusData = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        Amount: item.Amount,
                        Description: item.Description,
                        DistributionChannel: item.DistributionChannel,
                        Name: item.Name,
                        SalesOffice: item.SalesOffice,
                        SalesOrg: item.SalesOrg,
                        State: item.State
                    });
                }
                return list;
            };
            OverallSalesVolumeService.prototype.FindSalesOffice = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SalesOfficeDDL",
                    Config: config
                });
            };
            OverallSalesVolumeService.prototype.GetSalesOffice = function (data) {
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        SalesOfficeID: item.SalesOfficeID,
                        SalesOffice: item.SalesOffice
                    });
                }
                return list;
            };
            OverallSalesVolumeService.prototype.FindSalesOrg = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/GetSalesOrganisationctrl",
                    Config: config
                });
            };
            OverallSalesVolumeService.prototype.GetSalesOrg = function (data) {
                var list = Array();
                for (var _i = 0, data_4 = data; _i < data_4.length; _i++) {
                    var item = data_4[_i];
                    list.push({
                        SalesOrganisationID: item.SalesOrganisationID,
                        Description: item.Description
                    });
                }
                return list;
            };
            OverallSalesVolumeService.prototype.FindDistributionChannel = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/DistChannelDDL",
                    Config: config
                });
            };
            OverallSalesVolumeService.prototype.GetDistributionChannel = function (data) {
                var list = Array();
                for (var _i = 0, data_5 = data; _i < data_5.length; _i++) {
                    var item = data_5[_i];
                    list.push({
                        DistributionChannelID: item.DistributionChannelID,
                        DistributionChannel: item.DistributionChannel
                    });
                }
                return list;
            };
            OverallSalesVolumeService.prototype.FindOverallStatus = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/OverallSalesVolume",
                    Config: config
                });
            };
            OverallSalesVolumeService.prototype.GetOverallStatus = function (data) {
                var list = Array();
                for (var _i = 0, data_6 = data; _i < data_6.length; _i++) {
                    var item = data_6[_i];
                    list.push({
                        DealerID: item.DealerID,
                        DistributionChannel: item.DistributionChannel,
                        District: item.District,
                        ItemDescription: item.ItemDescription,
                        ModelDescription: item.ModelDescription,
                        Period: item.Period,
                        SalesOffice: item.SalesOffice,
                        SalesOrganization: item.SalesOrganization,
                        State: item.State
                    });
                }
                return list;
            };
            OverallSalesVolumeService.prototype.FindStatus = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/OverallSalesStatus",
                    Config: config
                });
            };
            OverallSalesVolumeService.prototype.GetStatus = function (data) {
                var list = Array();
                for (var _i = 0, data_7 = data; _i < data_7.length; _i++) {
                    var item = data_7[_i];
                    list.push({
                        Columns: item.Columns,
                        DealerID: item.DealerID
                    });
                }
                return list;
            };
            OverallSalesVolumeService.$inject = ["$http", "$q", "$cookieStore"];
            return OverallSalesVolumeService;
        }(GCPL.Service.BaseService));
        Service.OverallSalesVolumeService = OverallSalesVolumeService;
        app.AddService("OverallSalesVolumeService", OverallSalesVolumeService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=OverallSalesVolumeService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var SalesByItemsGridview = /** @class */ (function () {
            function SalesByItemsGridview() {
            }
            return SalesByItemsGridview;
        }());
        Model.SalesByItemsGridview = SalesByItemsGridview;
        var SalesByItemsDivision = /** @class */ (function () {
            function SalesByItemsDivision() {
            }
            return SalesByItemsDivision;
        }());
        Model.SalesByItemsDivision = SalesByItemsDivision;
        var SalesByItemsProduct = /** @class */ (function () {
            function SalesByItemsProduct() {
            }
            return SalesByItemsProduct;
        }());
        Model.SalesByItemsProduct = SalesByItemsProduct;
        //export class SalesByItemsOffice {
        //    SalesOfficeID: number;
        //    SalesOffice: string;
        //}
        //export class salesByItemsSalesOrg {
        //    SalesOrganisationID: number;
        //    Description: string;
        //}
        //export class salesByItemsDistChannel {
        //    DistributionChannelID: number;
        //    DistributionChannel: string;
        //}
        var SalesByItemsSearchmodel = /** @class */ (function () {
            function SalesByItemsSearchmodel() {
            }
            return SalesByItemsSearchmodel;
        }());
        Model.SalesByItemsSearchmodel = SalesByItemsSearchmodel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesByItemsModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var SalesByItemsModel = GCPL.Model.SalesByItemsSearchmodel;
            var SalesByItemsController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function SalesByItemsController(_SalesByItemsService, _cookieStore, _ModelMasterListService, _ItemAutoservice) {
                    this._cookieStore = _cookieStore;
                    this.SalesByItemsGridView = null;
                    this.SalesByItemsSearchModel = null;
                    this.GetSalesByItemsSalesStatus = null;
                    this.GetDivision = null;
                    this.GetProduct = null;
                    this.GetSalesOffice = null;
                    this.GetSalesOrg = null;
                    this.GetDistChannel = null;
                    this.SearchModelDesc = null;
                    this.SearchItemDesc = null;
                    this.DealerID = null;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.Cookie = null;
                    this.SalesByItemsService = _SalesByItemsService;
                    this.Cookie = _cookieStore;
                    this.ModelMasterListService = _ModelMasterListService;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.SalesByItemsSearchModel = new SalesByItemsModel();
                    this.SalesByItemsGridView = new Array();
                    this.SearchItemDesc = new GCPL.Model.ItemDescriptionserch;
                    this.SearchModelDesc = new GCPL.Model.ModelMasterListModel;
                }
                SalesByItemsController.prototype.$onInit = function () {
                    var options = [];
                    $('.dropdown-menu a').on('click', function (event) {
                        var $target = $(event.currentTarget), val = $target.attr('data-value'), $inp = $target.find('input'), idx;
                        if ((idx = options.indexOf(val)) > -1) {
                            options.splice(idx, 1);
                            setTimeout(function () { $inp.prop('checked', false); }, 0);
                        }
                        else {
                            options.push(val);
                            setTimeout(function () { $inp.prop('checked', true); }, 0);
                        }
                        $(event.target).blur();
                        console.log(options);
                        return false;
                    });
                    this.Init();
                };
                //Page Load Define Values//
                SalesByItemsController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtModel").autocomplete({
                        source: function (request, res) {
                            that.ModelMasterListService.Find(request).then((function (response) {
                                var data = that.ModelMasterListService.GetModelMasterList(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ModelID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //let SelectedItemID = ui.item.id;
                            that.SalesByItemsSearchModel.Model = ui.item.id;
                            //that.Description = ui.item.value;
                        },
                        change: function () {
                        }
                    });
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            debugger;
                            that.ItemDescriptionAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //let SelectedItemID = ui.item.id;
                            //that.QtyChange.ItemID = ui.item.id;
                            //that.Description = ui.item.value;
                            that.SalesByItemsSearchModel.ItemDescription = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    this.SalesByItemsService.FindDivision().then((function (response) {
                        _this.GetDivision = _this.SalesByItemsService.GetDivision(response.data.Result);
                    }));
                    this.SalesByItemsService.FindProduct().then((function (response) {
                        _this.GetProduct = _this.SalesByItemsService.GetProduct(response.data.Result);
                    }));
                    this.SalesByItemsService.FindSalesOffice().then((function (response) {
                        _this.GetSalesOffice = _this.SalesByItemsService.GetSalesOffice(response.data.Result);
                    }));
                    this.SalesByItemsService.FindSalesOrg().then((function (response) {
                        _this.GetSalesOrg = _this.SalesByItemsService.GetSalesOrg(response.data.Result);
                    }));
                    this.SalesByItemsService.FindDistributionChannel().then((function (response) {
                        _this.GetDistChannel = _this.SalesByItemsService.GetDistributionChannel(response.data.Result);
                    }));
                };
                SalesByItemsController.prototype.Search = function () {
                    this.SalesByItemsSearchModel.DistributionChannel = this.GetDistChannel.DistributionChannelID;
                    this.SalesByItemsSearchModel.Division = this.GetDivision.DivisionID;
                    this.SalesByItemsSearchModel.ItemDescription = this.SearchItemDesc.Description;
                    this.SalesByItemsSearchModel.Model = this.SearchModelDesc.Description;
                    this.SalesByItemsSearchModel.Period = this.GetSalesByItemsSalesStatus.Period;
                    this.SalesByItemsSearchModel.Product = this.GetProduct.ProductID;
                    this.SalesByItemsSearchModel.SalesOffice = this.GetSalesOffice.SalesOfficeID;
                    this.SalesByItemsSearchModel.SalesOrganization = this.GetSalesOrg.SalesOrganisationID;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                SalesByItemsController.prototype.Clear = function () {
                    $('#PeriodSelect').prop('selectedIndex', 0);
                    this.GetSalesByItemsSalesStatus.Period = $('#PeriodSelect').val();
                    $('#DivisionSelect').prop('selectedIndex', 0);
                    this.GetDivision.DivisionID = $('#DivisionSelect').val();
                    $('#ProductSelect').prop('selectedIndex', 0);
                    this.GetProduct.ProductID = $("#ProductSelect").val();
                    $('#OfficeSelect').prop('selectedIndex', 0);
                    this.GetSalesOffice.SalesOfficeID = $('#OfficeSelect').val();
                    $('#OrgSelect').prop('selectedIndex', 0);
                    this.GetSalesOrg.SalesOrganisationID = $('#OrgSelect').val();
                    $('#DistSelect').prop('selectedIndex', 0);
                    this.GetDistChannel.DistributionChannelID = $('#DistSelect').val();
                    $("#txtModel").val("");
                    this.SearchModelDesc.Description = "";
                    $("#txtDescription").val("");
                    this.SearchItemDesc.Description = "";
                    this.shownItems = null;
                    this.SalesByItemsGridView.length = 0;
                };
                SalesByItemsController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.SalesByItemsService.Find(this.SalesByItemsSearchModel).then((function (response) {
                        _this.SalesByItemsGridView = _this.SalesByItemsService.GetSalesByItemsGrid(response.data.Result);
                        _this.SalesByItemsGridView.forEach(function (value, key) {
                            that.incre = key + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.SalesByItemsGridView.slice(0, that.numRecords);
                    }));
                };
                SalesByItemsController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                SalesByItemsController.$inject = ["SalesByItemsService", "$cookieStore", "ModelMasterListComponentService", "itemDescriptionService"];
                return SalesByItemsController;
            }());
            var SalesByItemsComponentController = /** @class */ (function () {
                function SalesByItemsComponentController() {
                    this.controller = SalesByItemsController;
                    this.templateUrl = "/Scripts/App/Reports/SalesByItemsReport/Template/_SalesByItems.html";
                }
                SalesByItemsComponentController.Name = "salesbyitemscomponent";
                return SalesByItemsComponentController;
            }());
            app.AddComponent(SalesByItemsComponentController.Name, new SalesByItemsComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesByItemsComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var SalesByItemsController = /** @class */ (function (_super) {
            __extends(SalesByItemsController, _super);
            function SalesByItemsController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SalesByItemsController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.SalesByItemsController = SalesByItemsController;
        app.AddController("SalesByItemsController", SalesByItemsController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesByItemsController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var SalesByItemsService = /** @class */ (function (_super) {
            __extends(SalesByItemsService, _super);
            function SalesByItemsService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            SalesByItemsService.prototype.Find = function (data) {
                var url = this.apiUrl + "/SalesByItems";
                var Period;
                var Division;
                var Product;
                var Model;
                var ItemDescription;
                var SalesOffice;
                var SalesOrganization;
                var DistributionChannel;
                if (data.Period !== undefined) {
                    Period = data.Period;
                }
                else {
                    Period = "";
                }
                if (data.Division !== undefined) {
                    Division = data.Division;
                }
                else {
                    Division = "";
                }
                if (data.Product !== undefined) {
                    Product = data.Product;
                }
                else {
                    Product = "";
                }
                if (data.Model !== undefined) {
                    Model = data.Model;
                }
                else {
                    Model = "";
                }
                if (data.ItemDescription !== undefined) {
                    ItemDescription = data.ItemDescription;
                }
                else {
                    ItemDescription = "";
                }
                if (data.SalesOffice !== undefined) {
                    SalesOffice = data.SalesOffice;
                }
                else {
                    SalesOffice = "";
                }
                if (data.SalesOrganization !== undefined) {
                    SalesOrganization = data.SalesOrganization;
                }
                else {
                    SalesOrganization = "";
                }
                if (data.DistributionChannel !== undefined) {
                    DistributionChannel = data.DistributionChannel;
                }
                else {
                    DistributionChannel = "";
                }
                var config = {
                    params: {
                        Period: Period,
                        Division: Division,
                        Product: Product,
                        Model: Model,
                        ItemDescription: ItemDescription,
                        SalesOffice: SalesOffice,
                        SalesOrganization: SalesOrganization,
                        DistributionChannel: DistributionChannel,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            SalesByItemsService.prototype.GetSalesByItemsGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        Division: item.Division,
                        ItemDescription: item.ItemDescription,
                        Model: item.Model,
                        Months: item.Months,
                        Product: item.Product,
                        SalesOffice: item.SalesOffice,
                        Amount: item.Amount
                    });
                }
                return list;
            };
            SalesByItemsService.prototype.FindDivision = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/DivisionDDL",
                    Config: config
                });
            };
            SalesByItemsService.prototype.GetDivision = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        DivisionID: item.DivisionID,
                        Division: item.Division,
                    });
                }
                return list;
            };
            SalesByItemsService.prototype.FindProduct = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/ProductDDL",
                    Config: config
                });
            };
            SalesByItemsService.prototype.GetProduct = function (data) {
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        ProductID: item.ProductID,
                        Product: item.Product
                    });
                }
                return list;
            };
            SalesByItemsService.prototype.FindSalesOffice = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SalesOfficeDDL",
                    Config: config
                });
            };
            SalesByItemsService.prototype.GetSalesOffice = function (data) {
                var list = Array();
                for (var _i = 0, data_4 = data; _i < data_4.length; _i++) {
                    var item = data_4[_i];
                    list.push({
                        SalesOfficeID: item.SalesOfficeID,
                        SalesOffice: item.SalesOffice
                    });
                }
                return list;
            };
            SalesByItemsService.prototype.FindSalesOrg = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/GetSalesOrganisationctrl",
                    Config: config
                });
            };
            SalesByItemsService.prototype.GetSalesOrg = function (data) {
                var list = Array();
                for (var _i = 0, data_5 = data; _i < data_5.length; _i++) {
                    var item = data_5[_i];
                    list.push({
                        SalesOrganisationID: item.SalesOrganisationID,
                        Description: item.Description
                    });
                }
                return list;
            };
            SalesByItemsService.prototype.FindDistributionChannel = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/DistChannelDDL",
                    Config: config
                });
            };
            SalesByItemsService.prototype.GetDistributionChannel = function (data) {
                var list = Array();
                for (var _i = 0, data_6 = data; _i < data_6.length; _i++) {
                    var item = data_6[_i];
                    list.push({
                        DistributionChannelID: item.DistributionChannelID,
                        DistributionChannel: item.DistributionChannel
                    });
                }
                return list;
            };
            SalesByItemsService.prototype.FindSalesByItemsStatus = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SalesByItems",
                    Config: config
                });
            };
            SalesByItemsService.prototype.GetSalesByItemsStatus = function (data) {
                var list = Array();
                for (var _i = 0, data_7 = data; _i < data_7.length; _i++) {
                    var item = data_7[_i];
                    list.push({
                        Period: item.Period,
                        DistributionChannel: item.DistributionChannel,
                        Division: item.Division,
                        ItemDescription: item.ItemDescription,
                        Model: item.Model,
                        Product: item.Product,
                        SalesOffice: item.SalesOffice,
                        SalesOrganization: item.SalesOrganization,
                        DealerID: item.DealerID
                    });
                }
                return list;
            };
            SalesByItemsService.$inject = ["$http", "$q", "$cookieStore"];
            return SalesByItemsService;
        }(GCPL.Service.BaseService));
        Service.SalesByItemsService = SalesByItemsService;
        app.AddService("SalesByItemsService", SalesByItemsService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesByItemsService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var SalesByRegionGridview = /** @class */ (function () {
            function SalesByRegionGridview() {
            }
            return SalesByRegionGridview;
        }());
        Model.SalesByRegionGridview = SalesByRegionGridview;
        var SalesByRegionOffice = /** @class */ (function () {
            function SalesByRegionOffice() {
            }
            return SalesByRegionOffice;
        }());
        Model.SalesByRegionOffice = SalesByRegionOffice;
        var salesByRegionSalesOrg = /** @class */ (function () {
            function salesByRegionSalesOrg() {
            }
            return salesByRegionSalesOrg;
        }());
        Model.salesByRegionSalesOrg = salesByRegionSalesOrg;
        var salesByRegionDistChannel = /** @class */ (function () {
            function salesByRegionDistChannel() {
            }
            return salesByRegionDistChannel;
        }());
        Model.salesByRegionDistChannel = salesByRegionDistChannel;
        var SalesByRegionSearchmodel = /** @class */ (function () {
            function SalesByRegionSearchmodel() {
            }
            return SalesByRegionSearchmodel;
        }());
        Model.SalesByRegionSearchmodel = SalesByRegionSearchmodel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesByRegionModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var SalesByRegionModel = GCPL.Model.SalesByRegionSearchmodel;
            var Insert = GCPL.Model.InsertCustMastermodel;
            var SalesByRegionController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function SalesByRegionController(_SalesByRegionService, _cookieStore, _Sservice, _RegionFillService, _Districtservice) {
                    this._cookieStore = _cookieStore;
                    this.SalesByRegionGridView = null;
                    this.SalesByRegionSearchModel = null;
                    this.GetSalesByRegionStatus = null;
                    this.GetSalesOffice = null;
                    this.GetSalesOrg = null;
                    this.GetDistChannel = null;
                    this.DealerID = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = "10";
                    this.BilltoStateDropDown = null;
                    this.RegionDropDown = null;
                    this.DistrictDrop = null;
                    this.InsertDistrict = null;
                    this.Cookie = null;
                    this.SalesByRegionService = _SalesByRegionService;
                    this.Cookie = _cookieStore;
                    this.Stateservice = _Sservice;
                    this.RegionFillService = _RegionFillService;
                    this.Districtservice = _Districtservice;
                    this.SalesByRegionSearchModel = new SalesByRegionModel();
                    this.SalesByRegionGridView = new Array();
                    this.InsertDistrict = new Insert();
                }
                SalesByRegionController.prototype.$onInit = function () {
                    var options = [];
                    $('.dropdown-menu a').on('click', function (event) {
                        var $target = $(event.currentTarget), val = $target.attr('data-value'), $inp = $target.find('input'), idx;
                        if ((idx = options.indexOf(val)) > -1) {
                            options.splice(idx, 1);
                            setTimeout(function () { $inp.prop('checked', false); }, 0);
                        }
                        else {
                            options.push(val);
                            setTimeout(function () { $inp.prop('checked', true); }, 0);
                        }
                        $(event.target).blur();
                        console.log(options);
                        return false;
                    });
                    this.Init();
                };
                //Page Load Define Values//
                SalesByRegionController.prototype.Init = function () {
                    var _this = this;
                    this.SalesByRegionService.FindSalesOffice().then((function (response) {
                        _this.GetSalesOffice = _this.SalesByRegionService.GetSalesOffice(response.data.Result);
                    }));
                    this.SalesByRegionService.FindSalesOrg().then((function (response) {
                        _this.GetSalesOrg = _this.SalesByRegionService.GetSalesOrg(response.data.Result);
                    }));
                    this.SalesByRegionService.FindDistributionChannel().then((function (response) {
                        _this.GetDistChannel = _this.SalesByRegionService.GetDistributionChannel(response.data.Result);
                    }));
                    this.BilltoStateDropDown = this.Stateservice.Find().then((function (response) {
                        _this.BilltoStateDropDown = _this.Stateservice.GetStateDDl(response.data.Result);
                    }));
                    this.RegionDropDown = this.RegionFillService.Find().then((function (response) {
                        _this.RegionDropDown = _this.RegionFillService.GetRegionListGrid(response.data.Result);
                    }));
                    //this.DistrictDrop = this.Districtservice.Find().then((response => {
                    //    this.DistrictDrop = this.CityFillService.GetCityListGrid(response.data.Result);
                    //}));
                    this.DistrictDrop = this.Districtservice.Find(this.BilltoStateDropDown.StateID).then((function (response) {
                        _this.DistrictDrop = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                SalesByRegionController.prototype.District = function () {
                    var _this = this;
                    this.DistrictDrop = this.Districtservice.Find(this.BilltoStateDropDown.StateID).then((function (response) {
                        _this.DistrictDrop = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                SalesByRegionController.prototype.Search = function () {
                    this.SalesByRegionSearchModel.DistChannel = this.GetDistChannel.DistributionChannelID;
                    this.SalesByRegionSearchModel.Period = this.GetSalesByRegionStatus.Period;
                    this.SalesByRegionSearchModel.SalesOffice = this.GetSalesOffice.SalesOfficeID;
                    this.SalesByRegionSearchModel.SalesOrganization = this.GetSalesOrg.SalesOrganisationID;
                    //this.SalesByRegionSearchModel.Region = this.RegionDropDown.RegionID;
                    this.SalesByRegionSearchModel.State = this.BilltoStateDropDown.StateID;
                    this.SalesByRegionSearchModel.District = this.DistrictDrop.CityCode;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                SalesByRegionController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    debugger;
                    this.SalesByRegionService.Find(this.SalesByRegionSearchModel).then((function (response) {
                        _this.SalesByRegionGridView = _this.SalesByRegionService.GetSalesByRegionGrid(response.data.Result);
                        _this.SalesByRegionGridView.forEach(function (value, key) {
                            that.incre = key + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.SalesByRegionGridView.slice(0, that.numRecords);
                    }));
                };
                SalesByRegionController.prototype.Clear = function () {
                    $('#PeriodSelect').prop('selectedIndex', 0);
                    this.GetSalesByRegionStatus.Period = $("#PeriodSelect").val();
                    //$('#DistrictSelect').val("0");
                    //this.DistrictDrop.CityCode = $('#DistrictSelect').val();
                    $('#StateSelect').prop('selectedIndex', 0);
                    this.BilltoStateDropDown.StateID = $('#StateSelect').val();
                    $('#OfficeSelect').prop('selectedIndex', 0);
                    this.GetSalesOffice.SalesOfficeID = $('#OfficeSelect').val();
                    $('#OrgSelect').prop('selectedIndex', 0);
                    this.GetSalesOrg.SalesOrganisationID = $('#OrgSelect').val();
                    $('#DistSelect').prop('selectedIndex', 0);
                    this.GetDistChannel.DistributionChannelID = $('#DistSelect').val();
                    this.shownItems = null;
                    this.SalesByRegionGridView.length = 0;
                };
                SalesByRegionController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                SalesByRegionController.$inject = ["SalesByRegionService", "$cookieStore", "StateModelServices", "RegionMasterGridService", "DistrictService"];
                return SalesByRegionController;
            }());
            var SalesByRegionComponentController = /** @class */ (function () {
                function SalesByRegionComponentController() {
                    this.controller = SalesByRegionController;
                    this.templateUrl = "/Scripts/App/Reports/SalesByRegion/Template/_SalesByRegion.html";
                }
                SalesByRegionComponentController.Name = "salesbyregioncomponent";
                return SalesByRegionComponentController;
            }());
            app.AddComponent(SalesByRegionComponentController.Name, new SalesByRegionComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesByRegionComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var SalesByRegionController = /** @class */ (function (_super) {
            __extends(SalesByRegionController, _super);
            function SalesByRegionController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SalesByRegionController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.SalesByRegionController = SalesByRegionController;
        app.AddController("SalesByRegionController", SalesByRegionController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesByRegionController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var SalesByRegionService = /** @class */ (function (_super) {
            __extends(SalesByRegionService, _super);
            function SalesByRegionService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            SalesByRegionService.prototype.Find = function (data) {
                var url = this.apiUrl + "/SalesByRegionReport";
                var Period;
                var SalesOffice;
                var SalesOrganization;
                var DistChannel;
                var Region;
                var State;
                var District;
                debugger;
                if (data.Period !== undefined) {
                    Period = data.Period;
                }
                else {
                    Period = "";
                }
                if (data.Region !== undefined) {
                    Region = data.Region;
                }
                else {
                    Region = "";
                }
                if (data.State !== undefined) {
                    State = data.State;
                }
                else {
                    State = "";
                }
                if (data.District !== undefined) {
                    District = data.District;
                }
                else {
                    District = "";
                }
                if (data.SalesOffice !== undefined) {
                    SalesOffice = data.SalesOffice;
                }
                else {
                    SalesOffice = "";
                }
                if (data.SalesOrganization !== undefined) {
                    SalesOrganization = data.SalesOrganization;
                }
                else {
                    SalesOrganization = "";
                }
                if (data.DistChannel !== undefined) {
                    DistChannel = data.DistChannel;
                }
                else {
                    DistChannel = "";
                }
                var config = {
                    params: {
                        Period: Period,
                        SalesOffice: SalesOffice,
                        SalesOrganization: SalesOrganization,
                        DistChannel: DistChannel,
                        Region: Region,
                        State: State,
                        District: District,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            SalesByRegionService.prototype.GetSalesByRegionGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        Amount: item.Amount,
                        DistributionChannel: item.DistributionChannel,
                        District: item.District,
                        Month: item.Month,
                        Region: item.Region,
                        SalesOffice: item.SalesOffice,
                        SalesOrg: item.SalesOrg,
                        State: item.State
                    });
                }
                return list;
            };
            SalesByRegionService.prototype.FindSalesOffice = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SalesOfficeDDL",
                    Config: config
                });
            };
            SalesByRegionService.prototype.GetSalesOffice = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        SalesOfficeID: item.SalesOfficeID,
                        SalesOffice: item.SalesOffice
                    });
                }
                return list;
            };
            SalesByRegionService.prototype.FindSalesOrg = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/GetSalesOrganisationctrl",
                    Config: config
                });
            };
            SalesByRegionService.prototype.GetSalesOrg = function (data) {
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        SalesOrganisationID: item.SalesOrganisationID,
                        Description: item.Description
                    });
                }
                return list;
            };
            SalesByRegionService.prototype.FindDistributionChannel = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/DistChannelDDL",
                    Config: config
                });
            };
            SalesByRegionService.prototype.GetDistributionChannel = function (data) {
                var list = Array();
                for (var _i = 0, data_4 = data; _i < data_4.length; _i++) {
                    var item = data_4[_i];
                    list.push({
                        DistributionChannelID: item.DistributionChannelID,
                        DistributionChannel: item.DistributionChannel
                    });
                }
                return list;
            };
            SalesByRegionService.prototype.FindSalesByRegionStatus = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SalesByRegionReport",
                    Config: config
                });
            };
            SalesByRegionService.prototype.GetSalesByRegionStatus = function (data) {
                var list = Array();
                for (var _i = 0, data_5 = data; _i < data_5.length; _i++) {
                    var item = data_5[_i];
                    list.push({
                        DealerID: item.DealerID,
                        DistChannel: item.DistChannel,
                        District: item.District,
                        Period: item.Period,
                        Region: item.Region,
                        SalesOffice: item.SalesOffice,
                        SalesOrganization: item.SalesOrganization,
                        State: item.State
                    });
                }
                return list;
            };
            SalesByRegionService.$inject = ["$http", "$q", "$cookieStore"];
            return SalesByRegionService;
        }(GCPL.Service.BaseService));
        Service.SalesByRegionService = SalesByRegionService;
        app.AddService("SalesByRegionService", SalesByRegionService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SalesByRegionService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var SparesSaleGridview = /** @class */ (function () {
            function SparesSaleGridview() {
            }
            return SparesSaleGridview;
        }());
        Model.SparesSaleGridview = SparesSaleGridview;
        var SparesSaleSearchmodel = /** @class */ (function () {
            function SparesSaleSearchmodel() {
            }
            return SparesSaleSearchmodel;
        }());
        Model.SparesSaleSearchmodel = SparesSaleSearchmodel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SparesSaleByItemsModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var SparesSaleByItemModel = GCPL.Model.SparesSaleSearchmodel;
            var SparesSaleByItemsController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function SparesSaleByItemsController(_ModelMasterListService, _ItemAutoservice, _SparesSaleByItemService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.SparesListGridView = null;
                    this.SparesListSearchModel = null;
                    this.GetSparesSaleGrid = null;
                    this.GetSparesStatus = null;
                    this.SearchModelDesc = null;
                    this.SearchItemDesc = null;
                    this.DealerID = null;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.Cookie = null;
                    this.ModelMasterListService = _ModelMasterListService;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.SparesSaleByItemService = _SparesSaleByItemService;
                    this.SparesListSearchModel = new SparesSaleByItemModel();
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.SparesListGridView = Array();
                    this.SearchModelDesc = new GCPL.Model.ModelMasterListModel;
                    this.SearchItemDesc = new GCPL.Model.ItemDescriptionserch;
                }
                SparesSaleByItemsController.prototype.$onInit = function () {
                    this.Init();
                };
                SparesSaleByItemsController.prototype.Init = function () {
                    var that = this;
                    $("#txtModel").autocomplete({
                        source: function (request, res) {
                            that.ModelMasterListService.Find(request).then((function (response) {
                                var data = that.ModelMasterListService.GetModelMasterList(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ModelID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //let SelectedItemID = ui.item.id;
                            that.SparesListSearchModel.ModelDescription = ui.item.id;
                            //that.Description = ui.item.value;
                        },
                        change: function () {
                        }
                    });
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            debugger;
                            that.ItemDescriptionAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //let SelectedItemID = ui.item.id;
                            //that.QtyChange.ItemID = ui.item.id;
                            //that.Description = ui.item.value;
                            that.SparesListSearchModel.Description = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                };
                //Page Load Define Values//
                SparesSaleByItemsController.prototype.Search = function () {
                    this.SparesListSearchModel.Description = this.SearchItemDesc.Description;
                    this.SparesListSearchModel.ModelDescription = this.SearchModelDesc.Description;
                    this.SparesListSearchModel.Period = this.GetSparesStatus.Period;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                SparesSaleByItemsController.prototype.Clear = function () {
                    this.SearchItemDesc.Description = "";
                    this.SearchModelDesc.Description = "";
                    $('#PeriodSelect').prop('selectedIndex', 0);
                    this.GetSparesStatus.Period = $('#PeriodSelect').val();
                    $("#txtModel").val("");
                    $("#txtDescription").val("");
                    // this.SparesListSearchModel = null;
                    this.shownItems = null;
                    this.SparesListGridView.length = 0;
                };
                SparesSaleByItemsController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.SparesSaleByItemService.Find(this.SparesListSearchModel).then((function (response) {
                        console.log(response);
                        _this.SparesListGridView = _this.SparesSaleByItemService.GetSparesSaleGrid(response.data.Result);
                        _this.SparesListGridView.forEach(function (value, key) {
                            that.incre = key + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.SparesListGridView.slice(0, that.numRecords);
                    }));
                };
                SparesSaleByItemsController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                SparesSaleByItemsController.$inject = ["ModelMasterListComponentService", "itemDescriptionService", "SparesSaleByItemService", "$cookieStore"];
                return SparesSaleByItemsController;
            }());
            var SparesSaleByItemsComponentController = /** @class */ (function () {
                function SparesSaleByItemsComponentController() {
                    this.controller = SparesSaleByItemsController;
                    this.templateUrl = "/Scripts/App/Reports/SparePartsByItemReport/Template/_SparesSaleByItems.html";
                }
                SparesSaleByItemsComponentController.Name = "sparessalebyitemscomponent";
                return SparesSaleByItemsComponentController;
            }());
            app.AddComponent(SparesSaleByItemsComponentController.Name, new SparesSaleByItemsComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SparesSaleByItemsComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var SparesSaleByItemsController = /** @class */ (function (_super) {
            __extends(SparesSaleByItemsController, _super);
            function SparesSaleByItemsController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SparesSaleByItemsController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.SparesSaleByItemsController = SparesSaleByItemsController;
        app.AddController("SparesSaleByItemsController", SparesSaleByItemsController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SparesSaleByItemsController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var SparesSaleByItemService = /** @class */ (function (_super) {
            __extends(SparesSaleByItemService, _super);
            function SparesSaleByItemService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            SparesSaleByItemService.prototype.Find = function (data) {
                var url = this.apiUrl + "/SparesByItemReport";
                var ModelDescription;
                var Description;
                var Period;
                if (data.ModelDescription !== undefined) {
                    ModelDescription = data.ModelDescription;
                }
                else {
                    ModelDescription = '';
                }
                if (data.Description !== undefined) {
                    Description = data.Description;
                }
                else {
                    Description = '';
                }
                if (data.Period !== undefined) {
                    Period = data.Period;
                }
                else {
                    Period = "";
                }
                var config = {
                    params: {
                        ModelDescription: ModelDescription,
                        Description: Description,
                        Period: Period,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            SparesSaleByItemService.prototype.GetSparesSaleGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        ModelDescription: item.ModelDescription,
                        Description: item.Description,
                        Stock: item.Stock,
                        UOM: item.UOM,
                        StockValue: item.SalesValue,
                        Months: item.Months
                    });
                }
                return list;
            };
            SparesSaleByItemService.prototype.FindSparesStatus = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SparesByItemReport",
                    Config: config
                });
            };
            SparesSaleByItemService.prototype.GetSparesStatus = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        ModelDescription: item.ModelDescription,
                        Description: item.Description,
                        Period: item.Period,
                        DealerID: item.DealerID
                    });
                }
                return list;
            };
            SparesSaleByItemService.$inject = ["$http", "$q", "$cookieStore"];
            return SparesSaleByItemService;
        }(GCPL.Service.BaseService));
        Service.SparesSaleByItemService = SparesSaleByItemService;
        app.AddService("SparesSaleByItemService", SparesSaleByItemService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SparesSaleByItemsService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var IPurchaseByVendorsReportGridService = /** @class */ (function () {
            function IPurchaseByVendorsReportGridService() {
            }
            return IPurchaseByVendorsReportGridService;
        }());
        Model.IPurchaseByVendorsReportGridService = IPurchaseByVendorsReportGridService;
        var PurchaseByVendorsSearchReportmodel = /** @class */ (function () {
            function PurchaseByVendorsSearchReportmodel() {
            }
            return PurchaseByVendorsSearchReportmodel;
        }());
        Model.PurchaseByVendorsSearchReportmodel = PurchaseByVendorsSearchReportmodel;
        var VendorsAutoSearchReportmodel = /** @class */ (function () {
            function VendorsAutoSearchReportmodel() {
            }
            return VendorsAutoSearchReportmodel;
        }());
        Model.VendorsAutoSearchReportmodel = VendorsAutoSearchReportmodel;
        var IPurchaseDivision = /** @class */ (function () {
            function IPurchaseDivision() {
            }
            return IPurchaseDivision;
        }());
        Model.IPurchaseDivision = IPurchaseDivision;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseByVendorsModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var servicecallmodel = GCPL.Model.PurchaseByVendorsSearchReportmodel;
            var PurchaseByVendorsController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function PurchaseByVendorsController(_service, _cookieStore, _ModelMasterListService, _ItemAutoservice, _DivisionService, _ProductService, _Vendorservice, _CreatePIService) {
                    this._cookieStore = _cookieStore;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.UserName = null;
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.DealerID = null;
                    this.WHName = null;
                    this.ProductDropDown = null;
                    this.InsertItem = null;
                    this.DivisionDropDown = null;
                    // ModelMasterListService = null;
                    this.PurchaseByVendorsList = null;
                    this.PurchaseOrderModel = null;
                    this.PurchaseByVendorsSerachA = null;
                    this.Cookie = null;
                    this.Service = _service;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.PurchaseByVendorsSerachA = new servicecallmodel();
                    this.ProductService = _ProductService;
                    this.DivisionService = _DivisionService;
                    this.VendornameAutofill = _Vendorservice;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.CreatePIService = _CreatePIService;
                    this.ModelMasterListService = _ModelMasterListService;
                }
                PurchaseByVendorsController.prototype.$onInit = function () {
                    this.Init();
                    this.Division();
                    this.Product();
                };
                //Page Load Define Values//
                PurchaseByVendorsController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtVendorName").autocomplete({
                        source: function (request, res) {
                            that.VendornameAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.VendornameAutofill.GetVendorName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.VendorName,
                                        value: item.VendorName,
                                        id: item.VendorID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.VendorID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    $("#txtModel").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.ModelMasterListService.Find(request).then((function (response) {
                                var data = that.ModelMasterListService.GetModelMasterList(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.ModelNo,
                                        value: item.ModelNo,
                                        id: item.ModelID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.PurchaseByVendorsSerachA.Model = ui.item.id;
                            //console.log(that.getLeadSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            debugger;
                            that.ItemDescriptionAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.PurchaseByVendorsSerachA.ItemDescription = ui.item.id;
                            //let SelectedItemID = ui.item.id;
                            //that.QtyChange.ItemID = ui.item.id;
                            //that.Description = ui.item.value;
                        },
                        change: function () {
                        }
                    });
                    debugger;
                    this.WHName = this.CreatePIService.Find().then((function (response) {
                        _this.WHName = _this.CreatePIService.GetWarehouseName(response.data.Result);
                    }));
                };
                PurchaseByVendorsController.prototype.Division = function () {
                    var _this = this;
                    this.DivisionDropDown = this.Service.FindDivision().then((function (response) {
                        _this.DivisionDropDown = _this.Service.GetDivisionName(response.data.Result);
                        //this.DivisionID = this.DivisionDropDown[0].DivisionID.toString();
                    }));
                };
                PurchaseByVendorsController.prototype.Product = function () {
                    var _this = this;
                    this.ProductDropDown = this.ProductService.Find(this.PurchaseByVendorsSerachA.Division, this.DealerID).then((function (response) {
                        _this.ProductDropDown = _this.ProductService.GetProductName(response.data.Result);
                        //this.ProductID = this.ProductDropDown[0].ProductID.toString();
                    }));
                };
                PurchaseByVendorsController.prototype.Search = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                PurchaseByVendorsController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    debugger;
                    this.PurchaseByVendorsList = this.Service.Find(this.PurchaseByVendorsSerachA).then((function (response) {
                        _this.PurchaseByVendorsList = _this.Service.GetPurchaseByVendorsGrid(response.data.Result);
                        _this.PurchaseByVendorsList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.PurchaseByVendorsList.slice(0, that.numRecords);
                    }));
                };
                PurchaseByVendorsController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                    this.Search();
                };
                PurchaseByVendorsController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.PurchaseByVendorsList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                PurchaseByVendorsController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.PurchaseByVendorsList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                PurchaseByVendorsController.prototype.Clear = function () {
                    this.shownItems = null;
                    this.PurchaseByVendorsSerachA = null;
                    this.PurchaseByVendorsList = null;
                    this.Search();
                };
                PurchaseByVendorsController.$inject = ["PurchaseByVendorsGridService", "$cookieStore", "ModelMasterListComponentService", "itemDescriptionService", "DivisionService", "ProductService",
                    "VendorMasterAutofillService", "CreatePIServiceComponentService", "CustomeraAtofillService"];
                return PurchaseByVendorsController;
            }());
            var PurchaseByVendorsComponentController = /** @class */ (function () {
                function PurchaseByVendorsComponentController() {
                    this.controller = PurchaseByVendorsController;
                    this.templateUrl = "/Scripts/App/Reports/PurchaseByVendors/Template/_PurchaseByVendors.html";
                }
                PurchaseByVendorsComponentController.Name = "purchasebyvendorscomponent";
                return PurchaseByVendorsComponentController;
            }());
            app.AddComponent(PurchaseByVendorsComponentController.Name, new PurchaseByVendorsComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseByVendorsComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var PurchaseByVendorsController = /** @class */ (function (_super) {
            __extends(PurchaseByVendorsController, _super);
            function PurchaseByVendorsController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PurchaseByVendorsController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.PurchaseByVendorsController = PurchaseByVendorsController;
        app.AddController("PurchaseByVendorsController", PurchaseByVendorsController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseByVendorsController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var PurchaseByVendorsGridService = /** @class */ (function (_super) {
            __extends(PurchaseByVendorsGridService, _super);
            function PurchaseByVendorsGridService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.Cookie = null;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            PurchaseByVendorsGridService.prototype.Find = function (data) {
                // console.log(this.apiUrl + `/FillWorkOrderSearchGrid`);
                var DealerID;
                var Period;
                var Division;
                var Product;
                var Model;
                //var VendorID
                var ItemDescription;
                var WHName;
                var VendorName;
                if (data.DealerID != undefined && data.DealerID != null) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = '';
                }
                if (data.Period != undefined && data.Period != null) {
                    Period = data.Period;
                }
                else {
                    Period = '';
                }
                if (data.Division != undefined && data.Division != null) {
                    Division = data.Division;
                }
                else {
                    Division = '';
                }
                if (data.Product != undefined && data.Product != null) {
                    Product = data.Product;
                }
                else {
                    Product = '';
                }
                if (data.Model != undefined && data.Model != null) {
                    Model = data.Model;
                }
                else {
                    Model = '';
                }
                //if (data.VendorID != undefined && data.VendorID != null) {
                //    VendorID = data.VendorID;
                //}
                //else {
                //    VendorID = '';
                //}
                if (data.ItemDescription != undefined && data.ItemDescription != null) {
                    ItemDescription = data.ItemDescription;
                }
                else {
                    ItemDescription = '';
                }
                if (data.WHName != undefined && data.WHName != null) {
                    WHName = data.WHName;
                }
                else {
                    WHName = '';
                }
                if (data.VendorName != undefined && data.VendorName != null) {
                    VendorName = data.VendorName;
                }
                else {
                    VendorName = '';
                }
                //  console.log(this.apiUrl + "/PurchaseByVendors");
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        Period: Period,
                        Division: Division,
                        Product: Product,
                        Model: Model,
                        ItemDescription: ItemDescription,
                        WHName: WHName,
                        VendorName: VendorName
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    //+ `/${"FillWorkOrderSearchGrid"}`
                    Url: this.apiUrl + "/PurchaseByVendors",
                    Config: config
                });
            };
            PurchaseByVendorsGridService.prototype.GetPurchaseByVendorsGrid = function (data) {
                console.log(data);
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        DealerID: item.DealerID,
                        Month: item.Month,
                        Division: item.Division,
                        Product: item.Product,
                        Model: item.Model,
                        Description: item.Description,
                        WHName: item.WHName,
                        VendorName: item.VendorName,
                        Amount: item.Amount,
                    });
                }
                return list;
            };
            PurchaseByVendorsGridService.prototype.FindDivision = function () {
                debugger;
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    //+ `/${"FillWorkOrderSearchGrid"}`
                    Url: this.apiUrl + "/DivisionToProduct",
                    Config: config
                });
            };
            PurchaseByVendorsGridService.prototype.GetDivisionName = function (data) {
                debugger;
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        DivisionID: item.DivisionID,
                        Division: item.Division
                    });
                }
                return list;
            };
            PurchaseByVendorsGridService.$inject = ["$http", "$q", "$cookieStore"];
            return PurchaseByVendorsGridService;
        }(GCPL.Service.BaseService));
        Service.PurchaseByVendorsGridService = PurchaseByVendorsGridService;
        //inject service
        app.AddService("PurchaseByVendorsGridService", PurchaseByVendorsGridService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseByVendorsService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var TSStatusGridView = /** @class */ (function () {
            function TSStatusGridView() {
            }
            return TSStatusGridView;
        }());
        Model.TSStatusGridView = TSStatusGridView;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSStatusesModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var TSStatusesController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function TSStatusesController(_TSShowService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.TSStatusGridView = null;
                    this.DealerID = null;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.Cookie = null;
                    this.TSShowService = _TSShowService;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.TSStatusGridView = Array();
                }
                TSStatusesController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                TSStatusesController.prototype.Init = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                TSStatusesController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.TSStatusGridView = this.TSShowService.FindTSStatus(this.DealerID).then((function (response) {
                        _this.TSStatusGridView = _this.TSShowService.GetTSStatus(response.data.Result);
                        _this.TSStatusGridView.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.TSStatusGridView.slice(0, that.numRecords);
                    }));
                };
                TSStatusesController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TSStatusGridView.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                TSStatusesController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TSStatusGridView.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                TSStatusesController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                TSStatusesController.$inject = ["TSStatusService", "$cookieStore"];
                return TSStatusesController;
            }());
            var TSStatusesComponentController = /** @class */ (function () {
                function TSStatusesComponentController() {
                    this.controller = TSStatusesController;
                    this.templateUrl = "/Scripts/App/TSStatuses/Template/_TSStatuses.html";
                }
                TSStatusesComponentController.Name = "tsstatusescomponent";
                return TSStatusesComponentController;
            }());
            app.AddComponent(TSStatusesComponentController.Name, new TSStatusesComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSStatusesComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var TSStatusesController = /** @class */ (function (_super) {
            __extends(TSStatusesController, _super);
            function TSStatusesController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TSStatusesController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.TSStatusesController = TSStatusesController;
        app.AddController("TSStatusesController", TSStatusesController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSStatusesController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var TSStatusService = /** @class */ (function (_super) {
            __extends(TSStatusService, _super);
            function TSStatusService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            TSStatusService.prototype.FindTSStatus = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/TSStatusShow",
                    Config: config
                });
            };
            TSStatusService.prototype.GetTSStatus = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        IsActive: item.IsActive,
                        Meaning: item.Meaning,
                        SrNo: item.SrNo,
                        Status: item.Status,
                        TSObjectName: item.TSObjectName,
                        TSStatusID: item.TSStatusID
                    });
                }
                return list;
            };
            TSStatusService.$inject = ["$http", "$q", "$cookieStore"];
            return TSStatusService;
        }(GCPL.Service.BaseService));
        Service.TSStatusService = TSStatusService;
        app.AddService("TSStatusService", TSStatusService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSStatusesService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var TSObjectModel = /** @class */ (function () {
            function TSObjectModel() {
            }
            return TSObjectModel;
        }());
        Model.TSObjectModel = TSObjectModel;
        var InsertTSStatus = /** @class */ (function () {
            function InsertTSStatus() {
            }
            return InsertTSStatus;
        }());
        Model.InsertTSStatus = InsertTSStatus;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateTSStatusesModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var TSStatusModel = GCPL.Model.InsertTSStatus;
            var CreateTSStatusesController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function CreateTSStatusesController(_cookieStore, _CreateTSStatusService, _InsertTSStatusService, $location, _TSStatusEditService) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.GetTSObject = null;
                    this.insertTSStatus = null;
                    this.DealerID = null;
                    this.alert = null;
                    this.TSStatusID = null;
                    this.showBtnSubmit = true;
                    this.showAddUserTitle = true;
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.CreateTSStatusService = _CreateTSStatusService;
                    this.InsertTSStatusService = _InsertTSStatusService;
                    this.TSStatusID = $location.search().TSStatusID;
                    this.TSStatusEditService = _TSStatusEditService;
                    this.insertTSStatus = new TSStatusModel();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                CreateTSStatusesController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                CreateTSStatusesController.prototype.Init = function () {
                    var _this = this;
                    this.CreateTSStatusService.FindTSObject().then((function (response) {
                        _this.GetTSObject = _this.CreateTSStatusService.GetTSObject(response.data.Result);
                    }));
                    //Edit
                    if (this.TSStatusID != null) {
                        this.showBtnSubmit = false;
                        this.showAddUserTitle = false;
                        $("#title").html("Update TS Status");
                        this.TSStatusEditService.Find(this.TSStatusID).then((function (response) {
                            _this.insertTSStatus = _this.TSStatusEditService.GetEdit(response.data.Result);
                            console.log(_this.insertTSStatus);
                        }));
                    }
                };
                CreateTSStatusesController.prototype.insertTSStatusMaster = function () {
                    if (this.insertTSStatus.Meaning == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter Meaning";
                    }
                    else if (this.insertTSStatus.Status == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter Status";
                    }
                    else if ($("#selectActive").val() == "Please Select") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Status";
                    }
                    else if ($("#TSObjectSelect").val() == "Please Select") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select an Object";
                    }
                    else {
                        this.insertTSStatus.DealerID = this.DealerID;
                        this.InsertTSStatusService.PostTSStatusMaster(this.insertTSStatus);
                        this.alert = "Data Successfully inserted";
                        $("#errorclose").hide();
                        $("#close").show();
                    }
                };
                CreateTSStatusesController.prototype.Close = function () {
                    location.href = "#!/TSStatuses";
                };
                CreateTSStatusesController.prototype.ErrorClose = function () {
                };
                CreateTSStatusesController.$inject = ["$cookieStore", "CreateTSStatusesService", "InsertTSStatusService", "$location", "TSStatusEditService"];
                return CreateTSStatusesController;
            }());
            var CreateTSStatusesComponentController = /** @class */ (function () {
                function CreateTSStatusesComponentController() {
                    this.controller = CreateTSStatusesController;
                    this.templateUrl = "/Scripts/App/CreateTSStatuses/Template/_CreateTSStatuses.html";
                }
                CreateTSStatusesComponentController.Name = "createtsstatusescomponent";
                return CreateTSStatusesComponentController;
            }());
            app.AddComponent(CreateTSStatusesComponentController.Name, new CreateTSStatusesComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateTSStatusesComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var CreateTSStatusesController = /** @class */ (function (_super) {
            __extends(CreateTSStatusesController, _super);
            function CreateTSStatusesController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CreateTSStatusesController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.CreateTSStatusesController = CreateTSStatusesController;
        app.AddController("CreateTSStatusesController", CreateTSStatusesController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateTSStatusesController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var CreateTSStatusesService = /** @class */ (function (_super) {
            __extends(CreateTSStatusesService, _super);
            function CreateTSStatusesService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.cookie = _cookieStore;
                return _this;
            }
            CreateTSStatusesService.prototype.FindTSObject = function () {
                var config = {
                    params: {
                        DealerID: this.cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/TSObjectDDL",
                    Config: config
                });
            };
            CreateTSStatusesService.prototype.GetTSObject = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        TSObjectName: item.TSObjectName,
                        TSObjectID: item.TSObjectID
                    });
                }
                return list;
            };
            CreateTSStatusesService.$inject = ["$http", "$q", "$cookieStore"];
            return CreateTSStatusesService;
        }(GCPL.Service.BaseService));
        Service.CreateTSStatusesService = CreateTSStatusesService;
        app.AddService("CreateTSStatusesService", CreateTSStatusesService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Insert
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var InsertTSStatusService = /** @class */ (function (_super) {
            __extends(InsertTSStatusService, _super);
            function InsertTSStatusService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "InsertTSStatus";
                return _this;
            }
            InsertTSStatusService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            InsertTSStatusService.prototype.PostTSStatusMaster = function (data) {
                var url = this.apiUrl;
                // console.log(url);
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            InsertTSStatusService.$inject = ["$http", "$q"];
            return InsertTSStatusService;
        }(GCPL.Service.BaseService));
        Service.InsertTSStatusService = InsertTSStatusService;
        app.AddService("InsertTSStatusService", InsertTSStatusService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Edit
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var TSStatusEditService = /** @class */ (function (_super) {
            __extends(TSStatusEditService, _super);
            function TSStatusEditService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "TSStatusEditctrl";
                return _this;
            }
            TSStatusEditService.prototype.Find = function (data) {
                var config = {
                    params: {
                        TSStatusID: data
                    }
                };
                // console.log(config);
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            TSStatusEditService.prototype.GetEdit = function (data) {
                var obj = new model.InsertTSStatus();
                obj.DealerID = data.DealerID;
                obj.IsActive = data.IsActive;
                obj.Meaning = data.Meaning;
                obj.Status = data.Status;
                obj.TSObjectID = data.TSObjectID;
                obj.TSStatusID = data.TSStatusID;
                return obj;
            };
            TSStatusEditService.$inject = ["$http", "$q"];
            return TSStatusEditService;
        }(GCPL.Service.BaseService));
        Service.TSStatusEditService = TSStatusEditService;
        app.AddService("TSStatusEditService", TSStatusEditService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateTSStatusesService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var InsertProjectType = /** @class */ (function () {
            function InsertProjectType() {
            }
            return InsertProjectType;
        }());
        Model.InsertProjectType = InsertProjectType;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateProjectTypesModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ProjectTypeModel = GCPL.Model.InsertProjectType;
            var CreateProjectTypesController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function CreateProjectTypesController(_cookieStore, $location, _InsertProjectTypeService, _ProjectTypeEditService) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.InsertProjectStatus = null;
                    this.ProjectTypeID = null;
                    this.DealerID = null;
                    this.alert = null;
                    this.UserID = null;
                    this.showBtnSubmit = true;
                    this.showAddUserTitle = true;
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.ProjectTypeID = $location.search().ProjectTypeID;
                    this.InsertProjectTypeService = _InsertProjectTypeService;
                    this.ProjectTypeEditService = _ProjectTypeEditService;
                    this.InsertProjectStatus = new ProjectTypeModel();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                }
                CreateProjectTypesController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                CreateProjectTypesController.prototype.Init = function () {
                    var _this = this;
                    if (this.ProjectTypeID != null) {
                        this.showBtnSubmit = false;
                        this.showAddUserTitle = false;
                        //$("#TSObjectSelect").prop('selectedIndex', 0);
                        //$("#title").html("Update TS Status");
                        this.ProjectTypeEditService.Find(this.ProjectTypeID).then((function (response) {
                            _this.InsertProjectStatus = _this.ProjectTypeEditService.GetEdit(response.data.Result);
                            console.log(_this.InsertProjectStatus);
                        }));
                    }
                };
                CreateProjectTypesController.prototype.InsertProjectMaster = function () {
                    if (this.InsertProjectStatus.ProjectType == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter ProjectType";
                    }
                    else if (this.InsertProjectStatus.Description == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter Description";
                    }
                    else if ($("#selectActive").val() == "Please Select") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Status";
                    }
                    else {
                        this.InsertProjectStatus.DealerID = this.DealerID;
                        this.InsertProjectStatus.CreatedBy = this.UserID;
                        this.InsertProjectTypeService.PostProjectTypeMaster(this.InsertProjectStatus);
                        this.alert = "Data Successfully inserted";
                        $("#errorclose").hide();
                        $("#close").show();
                    }
                };
                CreateProjectTypesController.prototype.Close = function () {
                    location.href = "#!/ProjectTypes";
                };
                CreateProjectTypesController.prototype.ErrorClose = function () {
                };
                CreateProjectTypesController.$inject = ["$cookieStore", "$location", "InsertProjectTypeService", "ProjectTypeEditService"];
                return CreateProjectTypesController;
            }());
            var CreateProjectTypesComponentController = /** @class */ (function () {
                function CreateProjectTypesComponentController() {
                    this.controller = CreateProjectTypesController;
                    this.templateUrl = "/Scripts/App/CreateProjectTypes/Template/_CreateProjectTypes.html";
                }
                CreateProjectTypesComponentController.Name = "createprojectypescomponent";
                return CreateProjectTypesComponentController;
            }());
            app.AddComponent(CreateProjectTypesComponentController.Name, new CreateProjectTypesComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateProjectTypesComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var CreateProjectTypesController = /** @class */ (function (_super) {
            __extends(CreateProjectTypesController, _super);
            function CreateProjectTypesController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CreateProjectTypesController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.CreateProjectTypesController = CreateProjectTypesController;
        app.AddController("CreateProjectTypesController", CreateProjectTypesController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateProjectTypesController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
//Insert
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var InsertProjectTypeService = /** @class */ (function (_super) {
            __extends(InsertProjectTypeService, _super);
            function InsertProjectTypeService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "InsertProjectType";
                return _this;
            }
            InsertProjectTypeService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            InsertProjectTypeService.prototype.PostProjectTypeMaster = function (data) {
                var url = this.apiUrl;
                // console.log(url);
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            InsertProjectTypeService.$inject = ["$http", "$q"];
            return InsertProjectTypeService;
        }(GCPL.Service.BaseService));
        Service.InsertProjectTypeService = InsertProjectTypeService;
        app.AddService("InsertProjectTypeService", InsertProjectTypeService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Edit
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var ProjectTypeEditService = /** @class */ (function (_super) {
            __extends(ProjectTypeEditService, _super);
            function ProjectTypeEditService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "ProjectTypeEditctrl";
                return _this;
            }
            ProjectTypeEditService.prototype.Find = function (data) {
                var config = {
                    params: {
                        ProjectTypeID: data
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            ProjectTypeEditService.prototype.GetEdit = function (data) {
                var obj = new model.InsertProjectType();
                obj.DealerID = data.DealerID;
                obj.IsActive = data.IsActive;
                obj.CreatedBy = data.CreatedBy;
                obj.Description = data.Description;
                obj.ProjectType = data.ProjectType;
                obj.ProjectTypeID = data.ProjectTypeID;
                return obj;
            };
            ProjectTypeEditService.$inject = ["$http", "$q"];
            return ProjectTypeEditService;
        }(GCPL.Service.BaseService));
        Service.ProjectTypeEditService = ProjectTypeEditService;
        app.AddService("ProjectTypeEditService", ProjectTypeEditService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateProjectTypesService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var ProjectStatusGridView = /** @class */ (function () {
            function ProjectStatusGridView() {
            }
            return ProjectStatusGridView;
        }());
        Model.ProjectStatusGridView = ProjectStatusGridView;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ProjectTypesModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ProjectTypesController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ProjectTypesController(_ProjectTypeService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.ProjectStatusGridView = null;
                    this.DealerID = null;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.Cookie = null;
                    this.ProjectTypeService = _ProjectTypeService;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.ProjectStatusGridView = Array();
                }
                ProjectTypesController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ProjectTypesController.prototype.Init = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                ProjectTypesController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.ProjectStatusGridView = this.ProjectTypeService.FindProjectStatus(this.DealerID).then((function (response) {
                        _this.ProjectStatusGridView = _this.ProjectTypeService.GetProjectStatus(response.data.Result);
                        _this.ProjectStatusGridView.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.ProjectStatusGridView.slice(0, that.numRecords);
                    }));
                };
                ProjectTypesController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ProjectStatusGridView.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                ProjectTypesController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ProjectStatusGridView.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                ProjectTypesController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                ProjectTypesController.$inject = ["ProjectTypeService", "$cookieStore"];
                return ProjectTypesController;
            }());
            var ProjectTypesComponentController = /** @class */ (function () {
                function ProjectTypesComponentController() {
                    this.controller = ProjectTypesController;
                    this.templateUrl = "/Scripts/App/ProjectTypes/Template/_ProjectTypes.html";
                }
                ProjectTypesComponentController.Name = "projecttypescomponent";
                return ProjectTypesComponentController;
            }());
            app.AddComponent(ProjectTypesComponentController.Name, new ProjectTypesComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ProjectTypesComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ProjectTypesController = /** @class */ (function (_super) {
            __extends(ProjectTypesController, _super);
            function ProjectTypesController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProjectTypesController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ProjectTypesController = ProjectTypesController;
        app.AddController("ProjectTypesController", ProjectTypesController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ProjectTypesController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var ProjectTypeService = /** @class */ (function (_super) {
            __extends(ProjectTypeService, _super);
            function ProjectTypeService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            ProjectTypeService.prototype.FindProjectStatus = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/ProjectTypeShow",
                    Config: config
                });
            };
            ProjectTypeService.prototype.GetProjectStatus = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        IsActive: item.IsActive,
                        Description: item.Description,
                        ProjectType: item.ProjectType,
                        ProjectTypeID: item.ProjectTypeID,
                        SrNo: item.SrNo
                    });
                }
                return list;
            };
            ProjectTypeService.$inject = ["$http", "$q", "$cookieStore"];
            return ProjectTypeService;
        }(GCPL.Service.BaseService));
        Service.ProjectTypeService = ProjectTypeService;
        app.AddService("ProjectTypeService", ProjectTypeService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ProjectTypesService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var InsertTaskType = /** @class */ (function () {
            function InsertTaskType() {
            }
            return InsertTaskType;
        }());
        Model.InsertTaskType = InsertTaskType;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateTaskTypesModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var TaskTypeModel = GCPL.Model.InsertTaskType;
            var CreateTaskTypesController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function CreateTaskTypesController(_cookieStore, $location, _InsertTaskService, _TaskTypeEditService) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.InsertTaskStatus = null;
                    this.TaskTypeID = null;
                    this.DealerID = null;
                    this.alert = null;
                    this.UserID = null;
                    this.showBtnSubmit = true;
                    this.showAddUserTitle = true;
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.TaskTypeID = $location.search().TaskTypeID;
                    this.InsertTaskService = _InsertTaskService;
                    this.TaskTypeEditService = _TaskTypeEditService;
                    this.InsertTaskStatus = new TaskTypeModel();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                }
                CreateTaskTypesController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                CreateTaskTypesController.prototype.Init = function () {
                    var _this = this;
                    if (this.TaskTypeID != null) {
                        this.showBtnSubmit = false;
                        this.showAddUserTitle = false;
                        //$("#TSObjectSelect").prop('selectedIndex', 0);
                        //$("#title").html("Update TS Status");
                        this.TaskTypeEditService.Find(this.TaskTypeID).then((function (response) {
                            _this.InsertTaskStatus = _this.TaskTypeEditService.GetEdit(response.data.Result);
                            console.log(_this.InsertTaskStatus);
                        }));
                    }
                };
                CreateTaskTypesController.prototype.InsertTaskMaster = function () {
                    if (this.InsertTaskStatus.TaskType == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter Task Type";
                    }
                    else if (this.InsertTaskStatus.Description == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter Description";
                    }
                    else if ($("#selectActive").val() == "Please Select") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Status";
                    }
                    else if ($("#selectBillable").val() == "Please Select") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Billable";
                    }
                    else {
                        this.InsertTaskStatus.DealerID = this.DealerID;
                        this.InsertTaskStatus.CreatedBy = this.UserID;
                        this.InsertTaskService.PostTaskTypeMaster(this.InsertTaskStatus);
                        this.alert = "Data Successfully inserted";
                        $("#errorclose").hide();
                        $("#close").show();
                    }
                };
                CreateTaskTypesController.prototype.Close = function () {
                    location.href = "#!/TaskType";
                };
                CreateTaskTypesController.prototype.ErrorClose = function () {
                };
                CreateTaskTypesController.$inject = ["$cookieStore", "$location", "InsertTaskTypeService", "TaskTypeEditService"];
                return CreateTaskTypesController;
            }());
            var CreateTaskTypesComponentController = /** @class */ (function () {
                function CreateTaskTypesComponentController() {
                    this.controller = CreateTaskTypesController;
                    this.templateUrl = "/Scripts/App/CreateTaskTypes/Template/_CreateTaskTypes.html";
                }
                CreateTaskTypesComponentController.Name = "createtasktypescomponent";
                return CreateTaskTypesComponentController;
            }());
            app.AddComponent(CreateTaskTypesComponentController.Name, new CreateTaskTypesComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateTaskTypesComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var CreateTaskTypesController = /** @class */ (function (_super) {
            __extends(CreateTaskTypesController, _super);
            function CreateTaskTypesController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CreateTaskTypesController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.CreateTaskTypesController = CreateTaskTypesController;
        app.AddController("CreateTaskTypesController", CreateTaskTypesController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateTaskTypesController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
//Insert
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var InsertTaskTypeService = /** @class */ (function (_super) {
            __extends(InsertTaskTypeService, _super);
            function InsertTaskTypeService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "InsertTaskType";
                return _this;
            }
            InsertTaskTypeService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            InsertTaskTypeService.prototype.PostTaskTypeMaster = function (data) {
                var url = this.apiUrl;
                // console.log(url);
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            InsertTaskTypeService.$inject = ["$http", "$q"];
            return InsertTaskTypeService;
        }(GCPL.Service.BaseService));
        Service.InsertTaskTypeService = InsertTaskTypeService;
        app.AddService("InsertTaskTypeService", InsertTaskTypeService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Edit
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var TaskTypeEditService = /** @class */ (function (_super) {
            __extends(TaskTypeEditService, _super);
            function TaskTypeEditService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "TaskTypeEditctrl";
                return _this;
            }
            TaskTypeEditService.prototype.Find = function (data) {
                var config = {
                    params: {
                        TaskTypeID: data
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            TaskTypeEditService.prototype.GetEdit = function (data) {
                var obj = new model.InsertTaskType();
                obj.DealerID = data.DealerID;
                obj.IsActive = data.IsActive;
                obj.CreatedBy = data.CreatedBy;
                obj.Description = data.Description;
                obj.TaskType = data.TaskType;
                obj.TaskTypeID = data.TaskTypeID;
                obj.Billable = data.Billable;
                return obj;
            };
            TaskTypeEditService.$inject = ["$http", "$q"];
            return TaskTypeEditService;
        }(GCPL.Service.BaseService));
        Service.TaskTypeEditService = TaskTypeEditService;
        app.AddService("TaskTypeEditService", TaskTypeEditService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateTaskTypesService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var TaskStatusGridView = /** @class */ (function () {
            function TaskStatusGridView() {
            }
            return TaskStatusGridView;
        }());
        Model.TaskStatusGridView = TaskStatusGridView;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TaskTypeModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var TaskTypeController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function TaskTypeController(_TaskTypeService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.TaskStatusGridView = null;
                    this.DealerID = null;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.Cookie = null;
                    this.TaskTypeService = _TaskTypeService;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.TaskStatusGridView = Array();
                }
                TaskTypeController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                TaskTypeController.prototype.Init = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                TaskTypeController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.TaskStatusGridView = this.TaskTypeService.FindTaskStatus(this.DealerID).then((function (response) {
                        _this.TaskStatusGridView = _this.TaskTypeService.GetTaskStatus(response.data.Result);
                        _this.TaskStatusGridView.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.TaskStatusGridView.slice(0, that.numRecords);
                    }));
                };
                TaskTypeController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TaskStatusGridView.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                TaskTypeController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TaskStatusGridView.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                TaskTypeController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                TaskTypeController.$inject = ["TaskTypeService", "$cookieStore"];
                return TaskTypeController;
            }());
            var TaskTypeComponentController = /** @class */ (function () {
                function TaskTypeComponentController() {
                    this.controller = TaskTypeController;
                    this.templateUrl = "/Scripts/App/TaskType/Template/_TaskType.html";
                }
                TaskTypeComponentController.Name = "tasktypecomponent";
                return TaskTypeComponentController;
            }());
            app.AddComponent(TaskTypeComponentController.Name, new TaskTypeComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TaskTypeComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var TaskTypeController = /** @class */ (function (_super) {
            __extends(TaskTypeController, _super);
            function TaskTypeController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TaskTypeController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.TaskTypeController = TaskTypeController;
        app.AddController("TaskTypeController", TaskTypeController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TaskTypeController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var TaskTypeService = /** @class */ (function (_super) {
            __extends(TaskTypeService, _super);
            function TaskTypeService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            TaskTypeService.prototype.FindTaskStatus = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/TaskTypeShow",
                    Config: config
                });
            };
            TaskTypeService.prototype.GetTaskStatus = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        IsActive: item.IsActive,
                        Description: item.Description,
                        TaskType: item.TaskType,
                        TaskTypeID: item.TaskTypeID,
                        SrNo: item.SrNo,
                        Billable: item.Billable
                    });
                }
                return list;
            };
            TaskTypeService.$inject = ["$http", "$q", "$cookieStore"];
            return TaskTypeService;
        }(GCPL.Service.BaseService));
        Service.TaskTypeService = TaskTypeService;
        app.AddService("TaskTypeService", TaskTypeService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TaskTypeService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var InsertProjectHeader = /** @class */ (function () {
            function InsertProjectHeader() {
            }
            return InsertProjectHeader;
        }());
        Model.InsertProjectHeader = InsertProjectHeader;
        var ProjectStatus = /** @class */ (function () {
            function ProjectStatus() {
            }
            return ProjectStatus;
        }());
        Model.ProjectStatus = ProjectStatus;
        var MaxBillable = /** @class */ (function () {
            function MaxBillable() {
            }
            return MaxBillable;
        }());
        Model.MaxBillable = MaxBillable;
        var ProjectTypeStatus = /** @class */ (function () {
            function ProjectTypeStatus() {
            }
            return ProjectTypeStatus;
        }());
        Model.ProjectTypeStatus = ProjectTypeStatus;
        var UserStatus = /** @class */ (function () {
            function UserStatus() {
            }
            return UserStatus;
        }());
        Model.UserStatus = UserStatus;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateProjectModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ProjectHeaderModel = GCPL.Model.InsertProjectHeader;
            var CreateProjectController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function CreateProjectController(_cookieStore, $location, __CreateProjectService, __InsertProjectHeaderService, _ProjectHeaderEditService, _Autofillservice, _CreateProjectTask, _UserNameService) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.InsertProjectHeader = null;
                    this.ProjectHeaderID = null;
                    this.GetProjectStatus = null;
                    this.GetProjectType = null;
                    this.GetMaxBillable = null;
                    this.GetTotalPeriod = null;
                    this.GetUser = null;
                    this.GetClientCode = null;
                    this.DealerID = null;
                    this.alert = null;
                    this.UserID = null;
                    this.showBtnSubmit = true;
                    this.showAddUserTitle = true;
                    this.SearchCustomerName = null;
                    this.tempID = null;
                    this.DisplayName = null;
                    this.tempManagerID = null;
                    this.displayManagerName = null;
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.ProjectHeaderID = $location.search().ProjectHeaderID;
                    this.CreateProjectService = __CreateProjectService;
                    this.InsertProjectHeaderService = __InsertProjectHeaderService;
                    this.ProjectHeaderEditService = _ProjectHeaderEditService;
                    this.CustomerAutofill = _Autofillservice;
                    this.CreateProjectTask = _CreateProjectTask;
                    this.UserNameService = _UserNameService;
                    this.InsertProjectHeader = new ProjectHeaderModel();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                }
                CreateProjectController.prototype.$onInit = function () {
                    this.Init();
                    var that = this;
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                CreateProjectController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                CreateProjectController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                CreateProjectController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtCustomer").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.CustomerAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //let SelectedCustomerID = ui.item.id;
                            // that.Search(ui.item.id);
                            that.InsertProjectHeader.ClientName = ui.item.id;
                            that.DisplayName = ui.item.value;
                            //that.LeadListSerachA.SearchInput = ui.item.value;
                            that.tempID = ui.item.id;
                            that.ClientCode();
                        },
                        change: function () {
                        }
                    });
                    //User Autocomplete
                    $("#projectManager").autocomplete({
                        source: function (request, res) {
                            that.UserNameService.FilterAutoComplete(request).then((function (response) {
                                var data = that.UserNameService.GetUserName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Name,
                                        value: item.Name,
                                        id: item.UserID,
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var UserID = ui.item.id;
                            //that.UserListSearch.Name = ui.item.value;
                            that.InsertProjectHeader.ProjectCoOwner = ui.item.id;
                            that.displayManagerName = ui.item.value;
                            that.tempManagerID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    this.CreateProjectService.FindProjectStatus().then((function (response) {
                        _this.GetProjectStatus = _this.CreateProjectService.GetProjectStatus(response.data.Result);
                    }));
                    this.CreateProjectService.FindProjectType().then((function (response) {
                        _this.GetProjectType = _this.CreateProjectService.GetProjectType(response.data.Result);
                    }));
                    this.CreateProjectService.FindUsername().then((function (response) {
                        _this.GetUser = _this.CreateProjectService.GetUsername(response.data.Result);
                    }));
                    this.CreateProjectService.FindMaxBillable().then((function (response) {
                        _this.GetMaxBillable = _this.CreateProjectService.GetMaxBillable(response.data.Result);
                    }));
                    if (this.ProjectHeaderID == null) {
                        var now = new Date();
                        var day = ("0" + now.getDate()).slice(-2);
                        var month = ("0" + (now.getMonth() + 1)).slice(-2);
                        var today = now.getFullYear() + "-" + (month) + "-" + (day);
                        var currentTime = new Date();
                        var currentOffset = currentTime.getTimezoneOffset();
                        var ISTOffset = 330; // IST offset UTC +5:30 
                        var ISTTime = new Date(currentTime.getTime() + (ISTOffset + currentOffset) * 60000);
                        // ISTTime now represents the time in IST coordinates
                        var hoursIST = ISTTime.getHours();
                        var minutesIST = ISTTime.getMinutes();
                        today = today + " " + hoursIST + ":" + minutesIST;
                        $('#datePicker').val(today);
                        this.CreateProjectService.FindUsername().then((function (response) {
                            _this.GetUser = _this.CreateProjectService.GetUsername(response.data.Result);
                            var username = _this.GetUser[0].Name;
                            $("#CreatedBy").val(username);
                        }));
                    }
                    if (this.ProjectHeaderID != null) {
                        this.showBtnSubmit = false;
                        this.showAddUserTitle = false;
                        this.ProjectHeaderEditService.Find(this.ProjectHeaderID).then((function (response) {
                            _this.InsertProjectHeader = _this.ProjectHeaderEditService.GetEdit(response.data.Result);
                            console.log("********* DATA RECIEVED **************");
                            console.log(_this.InsertProjectHeader);
                            $("#txtCustomer").val(_this.InsertProjectHeader.ClientName);
                            $("#projectManager").val(_this.InsertProjectHeader.ProjectCoOwner);
                            $("#txtFromDate").val(_this.InsertProjectHeader.ProjectStartDate);
                            $("#txtToDate").val(_this.InsertProjectHeader.ProjectEndDate);
                            $("#TotalPeriod").val(_this.InsertProjectHeader.TotalPeriod);
                            $("#TotalPeriodDuration").val(_this.InsertProjectHeader.TotalPeriodDuration);
                            $("#MaxProjectTimeDuration").val(_this.InsertProjectHeader.TotalPeriodDuration);
                            _this.tempManagerID = _this.InsertProjectHeader.ManagerID;
                            _this.tempID = _this.InsertProjectHeader.ClientID;
                            _this.InsertProjectHeader.MaxBillablePeriod = _this.InsertProjectHeader.MaxID;
                            _this.InsertProjectHeader.TotalPeriod = _this.InsertProjectHeader.TotalID;
                            _this.ClientCode();
                            //this.InsertProjectHeader.MaxBillablePeriod = this.GetMaxBillable[0].ID;;
                            //this.InsertProjectHeader.TotalPeriod = this.GetTotalPeriod[0].ID;
                            _this.InsertProjectHeader.ModifiedBy = _this.UserID;
                            $('#datePicker').val(_this.InsertProjectHeader.WhenCreated);
                            $("#CreatedBy").val(_this.InsertProjectHeader.CreatedBy);
                        }));
                    }
                };
                CreateProjectController.prototype.ClientCode = function () {
                    var _this = this;
                    this.GetClientCode = this.CreateProjectTask.FindClientCode(this.tempID).then((function (response) {
                        _this.GetClientCode = _this.CreateProjectTask.GetClientCode(response.data.Result);
                        var ProjectCode = _this.GetClientCode[0].CustomerNo;
                        $("#ClientCode").val(ProjectCode);
                        _this.InsertProjectHeader.ClientCode = ProjectCode;
                    }));
                };
                CreateProjectController.prototype.TotalPeriod = function () {
                    var _this = this;
                    this.GetTotalPeriod = this.CreateProjectService.FindTotalPeriod(this.InsertProjectHeader.MaxBillablePeriod).then((function (response) {
                        _this.GetTotalPeriod = _this.CreateProjectService.GetTotalPeriod(response.data.Result);
                        var totalName = _this.GetTotalPeriod[0].BillingUnit;
                        $("#TotalPeriod").val(totalName);
                        _this.InsertProjectHeader.TotalPeriod = _this.GetTotalPeriod[0].ID;
                    }));
                };
                CreateProjectController.prototype.InsertProjectHeaderMaster = function () {
                    var _this = this;
                    if (this.InsertProjectHeader.ProjectName == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter the Project Name";
                    }
                    else if (this.InsertProjectHeader.ProjectCode == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter the Project Code";
                    }
                    else if ($("#ProjectTypeSelect").val() == "Please Select") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Project Type";
                    }
                    else if ($("#ProjectStatusSelect").val() == "Please Select") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Project Status";
                    }
                    else if (this.InsertProjectHeader.ProjectOwner == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter the Project Owner name";
                    }
                    else if (this.InsertProjectHeader.ProjectCoOwner == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter the Project Manager name";
                    }
                    else if (this.InsertProjectHeader.ClientName == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter the Client Name";
                    }
                    else if (this.InsertProjectHeader.ClientCode == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter the Client Code";
                    }
                    else if (this.InsertProjectHeader.ProjectDescription == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter the Project Description";
                    }
                    else {
                        var now = new Date();
                        var day = ("0" + now.getDate()).slice(-2);
                        var month = ("0" + (now.getMonth() + 1)).slice(-2);
                        var today = now.getFullYear() + "-" + (month) + "-" + (day);
                        var currentTime = new Date();
                        var currentOffset = currentTime.getTimezoneOffset();
                        var ISTOffset = 330; // IST offset UTC +5:30 
                        var ISTTime = new Date(currentTime.getTime() + (ISTOffset + currentOffset) * 60000);
                        // ISTTime now represents the time in IST coordinates
                        var hoursIST = ISTTime.getHours();
                        var minutesIST = ISTTime.getMinutes();
                        today = today + " " + hoursIST + ":" + minutesIST;
                        this.InsertProjectHeader.DealerID = this.DealerID;
                        this.InsertProjectHeader.CreatedBy = this.UserID;
                        this.InsertProjectHeader.WhenCreated = today;
                        this.InsertProjectHeader.ClientName = this.tempID;
                        this.InsertProjectHeader.ProjectCoOwner = this.tempManagerID;
                        this.InsertProjectHeader.ProjectStartDate = $("#txtFromDate").val();
                        this.InsertProjectHeader.ProjectEndDate = $("#txtToDate").val();
                        console.log("*** PROJECT HEADER DATA ***");
                        console.log(this.InsertProjectHeader);
                        this.InsertProjectHeaderService.PostProjectHeaderMaster(this.InsertProjectHeader).then((function (response) {
                            if ((response.data.Result !== null)) {
                                _this.alert = "Data Successfully inserted";
                                $("#errorclose").hide();
                                $("#close").show();
                            }
                            else {
                                _this.alert = "Oops some error occured";
                                $("#errorclose").show();
                                $("#close").hdie();
                            }
                        }));
                    }
                };
                CreateProjectController.prototype.Close = function () {
                    location.href = "#!/ListProject";
                };
                CreateProjectController.prototype.ErrorClose = function () {
                };
                CreateProjectController.$inject = ["$cookieStore", "$location", "CreateProjectService", "InsertProjectHeaderService", "ProjectHeaderEditService", "CustomeraAtofillService", "CreateProjectTask", "UserNameService"];
                return CreateProjectController;
            }());
            var CreateProjectComponentController = /** @class */ (function () {
                function CreateProjectComponentController() {
                    this.controller = CreateProjectController;
                    this.templateUrl = "/Scripts/App/CreateProject/Template/_CreateProject.html";
                }
                CreateProjectComponentController.Name = "createprojectcomponent";
                return CreateProjectComponentController;
            }());
            app.AddComponent(CreateProjectComponentController.Name, new CreateProjectComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateProjectComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var CreateProjectController = /** @class */ (function (_super) {
            __extends(CreateProjectController, _super);
            function CreateProjectController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CreateProjectController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.CreateProjectController = CreateProjectController;
        app.AddController("CreateProjectController", CreateProjectController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateProjectController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var CreateProjectService = /** @class */ (function (_super) {
            __extends(CreateProjectService, _super);
            function CreateProjectService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            CreateProjectService.prototype.FindProjectStatus = function () {
                var config = {
                    params: {
                        ObjectName: 'Project',
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/TSStatusDDL",
                    Config: config
                });
            };
            CreateProjectService.prototype.GetProjectStatus = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        Status: item.Status,
                        TSObjectName: item.TSObjectName,
                        TSStatusID: item.TSStatusID
                    });
                }
                return list;
            };
            CreateProjectService.prototype.FindMaxBillable = function () {
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/ProjectBillingUnitDDL"
                });
            };
            CreateProjectService.prototype.GetMaxBillable = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        BillingUnit: item.BillingUnit,
                        ID: item.ID
                    });
                }
                return list;
            };
            CreateProjectService.prototype.FindTotalPeriod = function (data) {
                var config = {
                    params: {
                        ID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/ProjectTotalTimeDDL",
                    Config: config
                });
            };
            CreateProjectService.prototype.GetTotalPeriod = function (data) {
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        BillingUnit: item.BillingUnit,
                        ID: item.ID
                    });
                }
                return list;
            };
            CreateProjectService.prototype.FindTimesheetStatus = function () {
                var config = {
                    params: {
                        ObjectName: 'Timesheet',
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/TSStatusDDL",
                    Config: config
                });
            };
            CreateProjectService.prototype.GetTimesheetStatus = function (data) {
                var list = Array();
                for (var _i = 0, data_4 = data; _i < data_4.length; _i++) {
                    var item = data_4[_i];
                    list.push({
                        Status: item.Status,
                        TSObjectName: item.TSObjectName,
                        TSStatusID: item.TSStatusID
                    });
                }
                return list;
            };
            CreateProjectService.prototype.FindProjectType = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/ProjectTypeDDL",
                    Config: config
                });
            };
            CreateProjectService.prototype.GetProjectType = function (data) {
                var list = Array();
                for (var _i = 0, data_5 = data; _i < data_5.length; _i++) {
                    var item = data_5[_i];
                    list.push({
                        ProjectType: item.ProjectType,
                        ProjectTypeID: item.ProjectTypeID
                    });
                }
                return list;
            };
            CreateProjectService.prototype.FindUsername = function () {
                var config = {
                    params: {
                        UserID: this.Cookie.get('UserInfo')['UserID'],
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/CreatedByUser",
                    Config: config
                });
            };
            CreateProjectService.prototype.GetUsername = function (data) {
                var list = Array();
                for (var _i = 0, data_6 = data; _i < data_6.length; _i++) {
                    var item = data_6[_i];
                    list.push({
                        Name: item.Name,
                        UserID: item.UserID
                    });
                }
                return list;
            };
            CreateProjectService.$inject = ["$http", "$q", "$cookieStore"];
            return CreateProjectService;
        }(GCPL.Service.BaseService));
        Service.CreateProjectService = CreateProjectService;
        app.AddService("CreateProjectService", CreateProjectService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Insert
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var InsertProjectHeaderService = /** @class */ (function (_super) {
            __extends(InsertProjectHeaderService, _super);
            function InsertProjectHeaderService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "InsertProjectHeader";
                return _this;
            }
            InsertProjectHeaderService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            InsertProjectHeaderService.prototype.PostProjectHeaderMaster = function (data) {
                var url = this.apiUrl;
                // console.log(url);
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            InsertProjectHeaderService.$inject = ["$http", "$q"];
            return InsertProjectHeaderService;
        }(GCPL.Service.BaseService));
        Service.InsertProjectHeaderService = InsertProjectHeaderService;
        app.AddService("InsertProjectHeaderService", InsertProjectHeaderService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Edit
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var ProjectHeaderEditService = /** @class */ (function (_super) {
            __extends(ProjectHeaderEditService, _super);
            function ProjectHeaderEditService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "ProjectHeaderEditctrl";
                return _this;
            }
            ProjectHeaderEditService.prototype.Find = function (data) {
                debugger;
                var config = {
                    params: {
                        ProjectHeaderID: data
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            ProjectHeaderEditService.prototype.GetEdit = function (data) {
                var obj = new model.InsertProjectHeader();
                obj.ClientCode = data.ClientCode;
                obj.ClientName = data.ClientName;
                obj.CreatedBy = data.CreatedBy;
                obj.DealerID = data.DealerID;
                obj.ModifiedBy = data.ModifiedBy;
                obj.ModifiedDate = data.ModifiedData;
                obj.ProjectCode = data.ProjectCode;
                obj.ProjectCoOwner = data.ProjectCoOwner;
                obj.ProjectDescription = data.ProjectDescription;
                obj.ProjectHeaderID = data.ProjectHeaderID;
                obj.ProjectName = data.ProjectName;
                obj.ProjectOwner = data.ProjectOwner;
                obj.ProjectStatus = data.ProjectStatus;
                obj.ProjectType = data.ProjectType;
                obj.WhenCreated = data.WhenCreated;
                obj.ProjectStartDate = data.ProjectStartDate;
                obj.ProjectEndDate = data.ProjectEndDate;
                obj.MaxBillablePeriod = data.MaxBillablePeriod;
                obj.MaxBillablePeriodDuration = data.MaxBillablePeriodDuration;
                obj.TotalPeriod = data.TotalPeriod;
                obj.TotalPeriodDuration = data.TotalPeriodDuration;
                obj.ClientID = data.ClientID;
                obj.ManagerID = data.ManagerID;
                obj.MaxID = data.MaxID;
                obj.TotalID = data.TotalID;
                return obj;
            };
            ProjectHeaderEditService.$inject = ["$http", "$q"];
            return ProjectHeaderEditService;
        }(GCPL.Service.BaseService));
        Service.ProjectHeaderEditService = ProjectHeaderEditService;
        app.AddService("ProjectHeaderEditService", ProjectHeaderEditService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateProjectService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var ProjectHeaderGridView = /** @class */ (function () {
            function ProjectHeaderGridView() {
            }
            return ProjectHeaderGridView;
        }());
        Model.ProjectHeaderGridView = ProjectHeaderGridView;
        var ProjectHeaderSearchModel = /** @class */ (function () {
            function ProjectHeaderSearchModel() {
            }
            return ProjectHeaderSearchModel;
        }());
        Model.ProjectHeaderSearchModel = ProjectHeaderSearchModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ListProjectModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ListProjectController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ListProjectController(_ProjectHeaderService, _cookieStore, _CreateProjectTaskService) {
                    this._cookieStore = _cookieStore;
                    this.ProjectHeaderGridView = null;
                    this.GetProjectName = null;
                    this.DealerID = null;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.Cookie = null;
                    this.ProjectHeaderService = _ProjectHeaderService;
                    this.Cookie = _cookieStore;
                    this.CreateProjectTaskService = _CreateProjectTaskService;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.ProjectHeaderGridView = Array();
                }
                ListProjectController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ListProjectController.prototype.Init = function () {
                    var _this = this;
                    this.CreateProjectTaskService.FindProjectName().then((function (response) {
                        _this.GetProjectName = _this.CreateProjectTaskService.GetProjectName(response.data.Result);
                    }));
                    //this.numRecords = parseInt(this.NoOfRds);
                    //this.FillGrid(this.numRecords);
                };
                ListProjectController.prototype.Search = function () {
                    console.log(this.ProjectHeaderGridView.ProjectHeaderID);
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                ListProjectController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.ProjectHeaderGridView = this.ProjectHeaderService.FindProjectHeaderStatus(this.DealerID, this.ProjectHeaderGridView.ProjectHeaderID).then((function (response) {
                        _this.ProjectHeaderGridView = _this.ProjectHeaderService.GetProjectHeaderStatus(response.data.Result);
                        _this.ProjectHeaderGridView.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.ProjectHeaderGridView.slice(0, that.numRecords);
                    }));
                };
                ListProjectController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ProjectHeaderGridView.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                ListProjectController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ProjectHeaderGridView.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                ListProjectController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                ListProjectController.prototype.Clear = function () {
                    this.shownItems = null;
                };
                ListProjectController.$inject = ["ProjectHeaderTypeService", "$cookieStore", "CreateProjectTask"];
                return ListProjectController;
            }());
            var ListProjectComponentController = /** @class */ (function () {
                function ListProjectComponentController() {
                    this.controller = ListProjectController;
                    this.templateUrl = "/Scripts/App/ListProject/Template/_Listproject.html";
                }
                ListProjectComponentController.Name = "listprojectcomponent";
                return ListProjectComponentController;
            }());
            app.AddComponent(ListProjectComponentController.Name, new ListProjectComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ListProjectComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ListProjectController = /** @class */ (function (_super) {
            __extends(ListProjectController, _super);
            function ListProjectController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ListProjectController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ListProjectController = ListProjectController;
        app.AddController("ListProjectController", ListProjectController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ListProjectController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var ProjectHeaderTypeService = /** @class */ (function (_super) {
            __extends(ProjectHeaderTypeService, _super);
            function ProjectHeaderTypeService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            ProjectHeaderTypeService.prototype.FindProjectHeaderStatus = function (data, data2) {
                var ProjectHeaderID;
                if (data2 !== undefined) {
                    ProjectHeaderID = data2;
                }
                else {
                    ProjectHeaderID = "";
                }
                var config = {
                    params: {
                        DealerID: data,
                        ProjectHeaderID: ProjectHeaderID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/ProjectHeaderShow",
                    Config: config
                });
            };
            ProjectHeaderTypeService.prototype.GetProjectHeaderStatus = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        ClientCode: item.ClientCode,
                        ClientName: item.ClientName,
                        Name: item.Name,
                        ProjectCode: item.ProjectCode,
                        ProjectHeaderID: item.ProjectHeaderID,
                        ProjectName: item.ProjectName,
                        ProjectType: item.ProjectType,
                        Status: item.Status,
                        WhenCreated: item.WhenCreated
                    });
                }
                return list;
            };
            ProjectHeaderTypeService.$inject = ["$http", "$q", "$cookieStore"];
            return ProjectHeaderTypeService;
        }(GCPL.Service.BaseService));
        Service.ProjectHeaderTypeService = ProjectHeaderTypeService;
        app.AddService("ProjectHeaderTypeService", ProjectHeaderTypeService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ListProjectService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var InsertProjectTask = /** @class */ (function () {
            function InsertProjectTask() {
            }
            return InsertProjectTask;
        }());
        Model.InsertProjectTask = InsertProjectTask;
        var ProjectNameCode = /** @class */ (function () {
            function ProjectNameCode() {
            }
            return ProjectNameCode;
        }());
        Model.ProjectNameCode = ProjectNameCode;
        var ProjectUser = /** @class */ (function () {
            function ProjectUser() {
            }
            return ProjectUser;
        }());
        Model.ProjectUser = ProjectUser;
        var ProjectCode = /** @class */ (function () {
            function ProjectCode() {
            }
            return ProjectCode;
        }());
        Model.ProjectCode = ProjectCode;
        var ClientCodeDDL = /** @class */ (function () {
            function ClientCodeDDL() {
            }
            return ClientCodeDDL;
        }());
        Model.ClientCodeDDL = ClientCodeDDL;
        var TaskTypeStatus = /** @class */ (function () {
            function TaskTypeStatus() {
            }
            return TaskTypeStatus;
        }());
        Model.TaskTypeStatus = TaskTypeStatus;
        var ProjectByUser = /** @class */ (function () {
            function ProjectByUser() {
            }
            return ProjectByUser;
        }());
        Model.ProjectByUser = ProjectByUser;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateProjectTasksModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var CreateProjectTaskModel = GCPL.Model.InsertProjectTask;
            var CreateProjectTasksController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function CreateProjectTasksController(_cookieStore, $location, _CreateProjectTaskService, _TaskTypeService, _InsertTimesheetTaskService, _TimesheetTaskEditService) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.InsertProjectTask = null;
                    this.TimesheetTaskID = null;
                    this.GetProjectName = null;
                    this.GetProjectCode = null;
                    this.GetTaskStatus = null;
                    this.GetUser = null;
                    this.GetTaskType = null;
                    this.DealerID = null;
                    this.alert = null;
                    this.UserID = null;
                    this.showBtnSubmit = true;
                    this.showAddUserTitle = true;
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.TimesheetTaskID = $location.search().TimesheetTaskID;
                    this.CreateProjectTaskService = _CreateProjectTaskService;
                    this.TaskTypeService = _TaskTypeService;
                    this.InsertTimesheetTaskService = _InsertTimesheetTaskService;
                    this.TimesheetTaskEditService = _TimesheetTaskEditService;
                    this.InsertProjectTask = new CreateProjectTaskModel();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                }
                CreateProjectTasksController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                CreateProjectTasksController.prototype.Init = function () {
                    var _this = this;
                    this.CreateProjectTaskService.FindProjectName().then((function (response) {
                        _this.GetProjectName = _this.CreateProjectTaskService.GetProjectName(response.data.Result);
                    }));
                    this.CreateProjectTaskService.FindUsername().then((function (response) {
                        _this.GetUser = _this.CreateProjectTaskService.GetUsername(response.data.Result);
                    }));
                    this.TaskTypeService.FindTaskStatus(this.DealerID).then((function (response) {
                        _this.GetTaskType = _this.TaskTypeService.GetTaskStatus(response.data.Result);
                    }));
                    this.CreateProjectTaskService.FindTaskStatus().then((function (response) {
                        _this.GetTaskStatus = _this.CreateProjectTaskService.GetTaskStatus(response.data.Result);
                    }));
                    if (this.TimesheetTaskID == null) {
                        this.CreateProjectTaskService.FindUsername().then((function (response) {
                            _this.GetUser = _this.CreateProjectTaskService.GetUsername(response.data.Result);
                            var username = _this.GetUser[0].Name;
                            $("#CreatedBy").val(username);
                            var now = new Date();
                            var day = ("0" + now.getDate()).slice(-2);
                            var month = ("0" + (now.getMonth() + 1)).slice(-2);
                            var today = now.getFullYear() + "-" + (month) + "-" + (day);
                            var currentTime = new Date();
                            var currentOffset = currentTime.getTimezoneOffset();
                            var ISTOffset = 330; // IST offset UTC +5:30 
                            var ISTTime = new Date(currentTime.getTime() + (ISTOffset + currentOffset) * 60000);
                            // ISTTime now represents the time in IST coordinates
                            var hoursIST = ISTTime.getHours();
                            var minutesIST = ISTTime.getMinutes();
                            today = today + " " + hoursIST + ":" + minutesIST;
                            console.log(today);
                            $('#datePicker').val(today);
                            _this.InsertProjectTask.WhenCreated = today;
                        }));
                    }
                    if (this.TimesheetTaskID != null) {
                        this.showBtnSubmit = false;
                        this.showAddUserTitle = false;
                        this.TimesheetTaskEditService.Find(this.TimesheetTaskID).then((function (response) {
                            _this.InsertProjectTask = _this.TimesheetTaskEditService.GetEdit(response.data.Result);
                            console.log(_this.InsertProjectTask);
                            _this.InsertProjectTask.ModifiedBy = _this.UserID;
                            $('#datePicker').val(_this.InsertProjectTask.WhenCreated);
                            $("#CreatedBy").val(_this.InsertProjectTask.CreatedBy);
                            $("#ProjectCode").val(_this.InsertProjectTask.ProjectCode);
                        }));
                    }
                };
                CreateProjectTasksController.prototype.ProjectCode = function () {
                    var _this = this;
                    this.GetProjectCode = this.CreateProjectTaskService.FindProjectCode(this.InsertProjectTask.ProjectNameID).then((function (response) {
                        _this.GetProjectCode = _this.CreateProjectTaskService.GetProjectCode(response.data.Result);
                        var ProjectCode = _this.GetProjectCode[0].ProjectCode;
                        console.log(_this.GetProjectCode);
                        $("#ProjectCode").val(ProjectCode);
                        _this.InsertProjectTask.ProjectCode = ProjectCode;
                    }));
                };
                CreateProjectTasksController.prototype.InsertProjectTaskMaster = function () {
                    if ($("#ProjectNameSelect").val() == "Please Select") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select the Project Name";
                    }
                    else if (this.InsertProjectTask.TaskName == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter the Task Name";
                    }
                    else if (this.InsertProjectTask.TaskCode == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter the Task Code";
                    }
                    else if ($("#TaskTypeSelect").val() == "Please Select") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Task Type";
                    }
                    else if ($("#TaskStatusSelect").val() == "Please Select") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Task Status";
                    }
                    else if (this.InsertProjectTask.TaskDescription == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter the Task Description";
                    }
                    else {
                        this.InsertProjectTask.DealerID = this.DealerID;
                        this.InsertProjectTask.CreatedBy = this.UserID;
                        this.InsertTimesheetTaskService.PostTimesheetTaskMaster(this.InsertProjectTask);
                        this.alert = "Data Successfully inserted";
                        $("#errorclose").hide();
                        $("#close").show();
                    }
                };
                CreateProjectTasksController.prototype.Close = function () {
                    location.href = "#!/ListProjectTasks";
                };
                CreateProjectTasksController.prototype.ErrorClose = function () {
                };
                CreateProjectTasksController.$inject = ["$cookieStore", "$location", "CreateProjectTask", "TaskTypeService", "InsertTimesheetTaskService", "TimesheetTaskEditService"];
                return CreateProjectTasksController;
            }());
            var CreateProjectTasksComponentController = /** @class */ (function () {
                function CreateProjectTasksComponentController() {
                    this.controller = CreateProjectTasksController;
                    this.templateUrl = "/Scripts/App/CreateProjectTasks/Template/_CreateProjectTasks.html";
                }
                CreateProjectTasksComponentController.Name = "createprojecttaskscomponent";
                return CreateProjectTasksComponentController;
            }());
            app.AddComponent(CreateProjectTasksComponentController.Name, new CreateProjectTasksComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateProjectTasksComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var CreateProjectTasksController = /** @class */ (function (_super) {
            __extends(CreateProjectTasksController, _super);
            function CreateProjectTasksController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CreateProjectTasksController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.CreateProjectTasksController = CreateProjectTasksController;
        app.AddController("CreateProjectTasksController", CreateProjectTasksController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateProjectTasksController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var CreateProjectTask = /** @class */ (function (_super) {
            __extends(CreateProjectTask, _super);
            function CreateProjectTask($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            CreateProjectTask.prototype.FindProjectName = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/ProjectHeaderNameDDL",
                    Config: config
                });
            };
            CreateProjectTask.prototype.GetProjectName = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        ProjectCode: item.ProjectCode,
                        ProjectHeaderID: item.ProjectHeaderID,
                        ProjectName: item.ProjectName
                    });
                }
                return list;
            };
            CreateProjectTask.prototype.FindProjectUser = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        UserID: this.Cookie.get('UserInfo')['UserID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/ProjectUserDDL",
                    Config: config
                });
            };
            CreateProjectTask.prototype.GetProjectUser = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        ProjectName: item.ProjectName,
                        ProjectNameID: item.ProjectNameID
                    });
                }
                return list;
            };
            CreateProjectTask.prototype.FindUsername = function () {
                var config = {
                    params: {
                        UserID: this.Cookie.get('UserInfo')['UserID'],
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/CreatedByUser",
                    Config: config
                });
            };
            CreateProjectTask.prototype.GetUsername = function (data) {
                debugger;
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        Name: item.Name,
                        UserID: item.UserID
                    });
                }
                return list;
            };
            CreateProjectTask.prototype.FindProjectCode = function (data) {
                var config = {
                    params: {
                        ProjectHeaderID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/ProjectHeaderCodeDDL",
                    Config: config
                });
            };
            CreateProjectTask.prototype.GetProjectCode = function (data) {
                var list = Array();
                for (var _i = 0, data_4 = data; _i < data_4.length; _i++) {
                    var item = data_4[_i];
                    list.push({
                        ProjectCode: item.ProjectCode,
                        ProjectHeaderID: item.ProjectHeaderID
                    });
                }
                return list;
            };
            CreateProjectTask.prototype.FindClientCode = function (data) {
                debugger;
                var config = {
                    params: {
                        CustomerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/ClientCodeDDL",
                    Config: config
                });
            };
            CreateProjectTask.prototype.GetClientCode = function (data) {
                var list = Array();
                for (var _i = 0, data_5 = data; _i < data_5.length; _i++) {
                    var item = data_5[_i];
                    list.push({
                        CustomerID: item.CustomerID,
                        CustomerNo: item.CustomerNo
                    });
                }
                return list;
            };
            CreateProjectTask.prototype.FindTaskStatus = function () {
                var config = {
                    params: {
                        ObjectName: 'Task',
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/TSStatusDDL",
                    Config: config
                });
            };
            CreateProjectTask.prototype.GetTaskStatus = function (data) {
                var list = Array();
                for (var _i = 0, data_6 = data; _i < data_6.length; _i++) {
                    var item = data_6[_i];
                    list.push({
                        Status: item.Status,
                        TSObjectName: item.TSObjectName,
                        TSStatusID: item.TSStatusID
                    });
                }
                return list;
            };
            CreateProjectTask.prototype.FindTaskbyProject = function (data) {
                var ProjectHeaderID;
                if (data !== undefined) {
                    ProjectHeaderID = data;
                }
                else {
                    ProjectHeaderID = "";
                }
                var config = {
                    params: {
                        ProjectHeaderID: ProjectHeaderID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/TaskByProject",
                    Config: config
                });
            };
            CreateProjectTask.prototype.GetTaskbyProject = function (data) {
                var list = Array();
                for (var _i = 0, data_7 = data; _i < data_7.length; _i++) {
                    var item = data_7[_i];
                    list.push({
                        ProjectHeaderID: item.ProjectHeaderID,
                        ProjectName: item.ProjectName,
                        TaskName: item.TaskName,
                        TimesheetTaskID: item.TimesheetTaskID
                    });
                }
                return list;
            };
            CreateProjectTask.prototype.FindProjectByUser = function (data) {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        ProjectNameID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/ProjectByUserDDL",
                    Config: config
                });
            };
            CreateProjectTask.prototype.GetProjectByUser = function (data) {
                var list = Array();
                for (var _i = 0, data_8 = data; _i < data_8.length; _i++) {
                    var item = data_8[_i];
                    list.push({
                        EmployeeID: item.EmployeeID,
                        Name: item.Name,
                        ManagerID: item.ManagerID,
                        TimesheetTaskID: item.TimesheetTaskID
                    });
                }
                return list;
            };
            CreateProjectTask.prototype.FindTaskByProjectAllocated = function (data) {
                var config = {
                    params: {
                        ProjectHeaderID: data,
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        EmployeeID: this.Cookie.get('UserInfo')['UserID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/TaskByAllocatedProject",
                    Config: config
                });
            };
            CreateProjectTask.prototype.GetTaskByProjectAllocated = function (data) {
                var list = Array();
                for (var _i = 0, data_9 = data; _i < data_9.length; _i++) {
                    var item = data_9[_i];
                    list.push({
                        TimesheetTaskID: item.TaskID,
                        TaskName: item.TaskName
                    });
                }
                return list;
            };
            // Get AllocationTask Grid
            CreateProjectTask.prototype.FindAllocationTaskGrid = function (data) {
                var ProjectNameID;
                var UserID;
                if (data.ProjectNameID !== undefined) {
                    ProjectNameID = data.ProjectNameID;
                }
                else {
                    ProjectNameID = '';
                }
                if (data.EmployeeID !== undefined) {
                    UserID = data.UserID;
                }
                else {
                    UserID = '';
                }
                debugger;
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        ProjectNameID: ProjectNameID,
                        EmployeeID: UserID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/TaskAllocationDDL",
                    Config: config
                });
            };
            CreateProjectTask.prototype.GetAllocationTaskGrid = function (data) {
                debugger;
                var list = Array();
                for (var _i = 0, data_10 = data; _i < data_10.length; _i++) {
                    var item = data_10[_i];
                    list.push({
                        EmployeeID: item.EmployeeID,
                        ManagerID: item.ManagerID,
                        TaskAllocationID: item.TaskAllocationID,
                        TaskName: item.TaskName,
                        Name: item.Name
                    });
                }
                return list;
            };
            CreateProjectTask.$inject = ["$http", "$q", "$cookieStore"];
            return CreateProjectTask;
        }(GCPL.Service.BaseService));
        Service.CreateProjectTask = CreateProjectTask;
        app.AddService("CreateProjectTask", CreateProjectTask);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Insert
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var InsertTimesheetTaskService = /** @class */ (function (_super) {
            __extends(InsertTimesheetTaskService, _super);
            function InsertTimesheetTaskService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "InsertTimesheetTask";
                return _this;
            }
            InsertTimesheetTaskService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            InsertTimesheetTaskService.prototype.PostTimesheetTaskMaster = function (data) {
                var url = this.apiUrl;
                // console.log(url);
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            InsertTimesheetTaskService.$inject = ["$http", "$q"];
            return InsertTimesheetTaskService;
        }(GCPL.Service.BaseService));
        Service.InsertTimesheetTaskService = InsertTimesheetTaskService;
        app.AddService("InsertTimesheetTaskService", InsertTimesheetTaskService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Edit
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var TimesheetTaskEditService = /** @class */ (function (_super) {
            __extends(TimesheetTaskEditService, _super);
            function TimesheetTaskEditService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "TimesheetTaskEditctrl";
                return _this;
            }
            TimesheetTaskEditService.prototype.Find = function (data) {
                debugger;
                var config = {
                    params: {
                        TimesheetTaskID: data
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            TimesheetTaskEditService.prototype.GetEdit = function (data) {
                var obj = new model.InsertProjectTask();
                obj.CreatedBy = data.CreatedBy;
                obj.DealerID = data.DealerID;
                obj.ModifiedBy = data.ModifiedBy;
                obj.ModifiedDate = data.ModifiedDate;
                obj.ProjectCode = data.ProjectCode;
                obj.ProjectNameID = data.ProjectNameID;
                obj.TaskCode = data.TaskCode;
                obj.TaskDescription = data.TaskDescription;
                obj.TaskName = data.TaskName;
                obj.TaskStatus = data.TaskStatus;
                obj.TaskType = data.TaskType;
                obj.TimesheetTaskID = data.TimesheetTaskID;
                obj.WhenCreated = data.WhenCreated;
                return obj;
            };
            TimesheetTaskEditService.$inject = ["$http", "$q"];
            return TimesheetTaskEditService;
        }(GCPL.Service.BaseService));
        Service.TimesheetTaskEditService = TimesheetTaskEditService;
        app.AddService("TimesheetTaskEditService", TimesheetTaskEditService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateProjectTasksService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var TimesheetTaskGridView = /** @class */ (function () {
            function TimesheetTaskGridView() {
            }
            return TimesheetTaskGridView;
        }());
        Model.TimesheetTaskGridView = TimesheetTaskGridView;
        var TimesheetTaskSearchModel = /** @class */ (function () {
            function TimesheetTaskSearchModel() {
            }
            return TimesheetTaskSearchModel;
        }());
        Model.TimesheetTaskSearchModel = TimesheetTaskSearchModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ListProjectTasksModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var TimesheetTaskSearch = GCPL.Model.TimesheetTaskSearchModel;
            var ListProjectTasksController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ListProjectTasksController(_TimesheetTaskService, _cookieStore, _CreateProjectTaskService) {
                    this._cookieStore = _cookieStore;
                    this.TimesheetTaskGridView = null;
                    this.TimesheetTaskSearchModel = null;
                    this.DealerID = null;
                    this.numRecords = 10;
                    this.GetProjectName = null;
                    this.GetTaskName = null;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.sortBy = 'ProjectName';
                    this.sortingOrder = false;
                    this.Cookie = null;
                    this.TimesheetTaskService = _TimesheetTaskService;
                    this.Cookie = _cookieStore;
                    this.CreateProjectTaskService = _CreateProjectTaskService;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.TimesheetTaskGridView = Array();
                    this.TimesheetTaskSearchModel = new TimesheetTaskSearch();
                }
                ListProjectTasksController.prototype.$onInit = function () {
                    this.Init();
                };
                ListProjectTasksController.prototype.TaskName = function () {
                    var _this = this;
                    this.GetTaskName = this.CreateProjectTaskService.FindTaskbyProject(this.TimesheetTaskSearchModel.ProjectNameID).then((function (response) {
                        _this.GetTaskName = _this.CreateProjectTaskService.GetTaskbyProject(response.data.Result);
                    }));
                };
                //Page Load Define Values//
                ListProjectTasksController.prototype.Init = function () {
                    var _this = this;
                    this.CreateProjectTaskService.FindProjectName().then((function (response) {
                        _this.GetProjectName = _this.CreateProjectTaskService.GetProjectName(response.data.Result);
                    }));
                };
                ListProjectTasksController.prototype.Search = function () {
                    console.log(this.TimesheetTaskGridView.TimesheetTaskID);
                    console.log(this.TimesheetTaskSearchModel.ProjectNameID);
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                ListProjectTasksController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.TimesheetTaskGridView = this.TimesheetTaskService.FindTimesheetTaskStatus(this.DealerID, this.TimesheetTaskSearchModel.ProjectNameID, this.TimesheetTaskGridView.TimesheetTaskID).then((function (response) {
                        _this.TimesheetTaskGridView = _this.TimesheetTaskService.GetTimesheetTaskStatus(response.data.Result);
                        _this.TimesheetTaskGridView.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.TimesheetTaskGridView.slice(0, that.numRecords);
                    }));
                };
                ListProjectTasksController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TimesheetTaskGridView.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                ListProjectTasksController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TimesheetTaskGridView.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                ListProjectTasksController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                ListProjectTasksController.prototype.Clear = function () {
                    this.shownItems = null;
                    $('#ProjectTypeSelect').prop('selectedIndex', 0);
                    this.TimesheetTaskSearchModel.ProjectNameID = $('#ProjectTypeSelect').val();
                    $('#TaskTypeSelect').prop('selectedIndex', 0);
                    this.TimesheetTaskGridView.TimesheetTaskID = $('#TaskTypeSelect').val();
                };
                ListProjectTasksController.prototype.sorrt = function (a) {
                    if (a == this.sortBy) {
                        this.sortingOrder = !this.sortingOrder;
                    }
                    this.sortBy = a;
                };
                ListProjectTasksController.prototype.downloadCSV = function (csv, filename) {
                    var csvFile;
                    var downloadLink;
                    // CSV file
                    csvFile = new Blob([csv], { type: "text/csv" });
                    // Download link
                    downloadLink = document.createElement("a");
                    // File name
                    downloadLink.download = filename;
                    // Create a link to the file
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    // Hide download link
                    downloadLink.style.display = "none";
                    // Add the link to DOM
                    document.body.appendChild(downloadLink);
                    // Click download link
                    downloadLink.click();
                };
                ListProjectTasksController.prototype.exportTableToCSV = function (filename) {
                    var csv = [];
                    var rows = document.querySelectorAll("table tr");
                    for (var i = 0; i < rows.length; i++) {
                        var row = [], cols = rows[i].querySelectorAll("td, th");
                        for (var j = 0; j < cols.length; j++)
                            row.push(cols[j].innerHTML);
                        csv.push(row.join(","));
                    }
                    // Download CSV file
                    this.downloadCSV(csv.join("\n"), filename);
                };
                ListProjectTasksController.$inject = ["TimesheetTaskService", "$cookieStore", "CreateProjectTask"];
                return ListProjectTasksController;
            }());
            var ListProjectTasksComponentController = /** @class */ (function () {
                function ListProjectTasksComponentController() {
                    this.controller = ListProjectTasksController;
                    this.templateUrl = "/Scripts/App/ListProjectTasks/Template/_ListProjectTasks.html";
                }
                ListProjectTasksComponentController.Name = "listprojecttaskscomponent";
                return ListProjectTasksComponentController;
            }());
            app.AddComponent(ListProjectTasksComponentController.Name, new ListProjectTasksComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ListProjectTasksComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ListProjectTasksController = /** @class */ (function (_super) {
            __extends(ListProjectTasksController, _super);
            function ListProjectTasksController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ListProjectTasksController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ListProjectTasksController = ListProjectTasksController;
        app.AddController("ListProjectTasksController", ListProjectTasksController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ListProjectTasksController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var TimesheetTaskService = /** @class */ (function (_super) {
            __extends(TimesheetTaskService, _super);
            function TimesheetTaskService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            TimesheetTaskService.prototype.FindTimesheetTaskStatus = function (data, data2, data3) {
                var ProjectNameID;
                var TimesheetTaskID;
                if (data2 !== undefined) {
                    ProjectNameID = data2;
                }
                else {
                    ProjectNameID = "";
                }
                if (data3 !== undefined) {
                    TimesheetTaskID = data3;
                }
                else {
                    TimesheetTaskID = "";
                }
                var config = {
                    params: {
                        DealerID: data,
                        ProjectNameID: ProjectNameID,
                        TimesheetTaskID: TimesheetTaskID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/TimesheetTaskShow",
                    Config: config
                });
            };
            TimesheetTaskService.prototype.GetTimesheetTaskStatus = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        CreatedBy: item.CreatedBy,
                        ProjectCode: item.ProjectCode,
                        ProjectName: item.ProjectName,
                        TaskCode: item.TaskCode,
                        TaskName: item.TaskName,
                        TaskType: item.TaskType,
                        TimesheetTaskID: item.TimesheetTaskID
                    });
                }
                return list;
            };
            TimesheetTaskService.$inject = ["$http", "$q", "$cookieStore"];
            return TimesheetTaskService;
        }(GCPL.Service.BaseService));
        Service.TimesheetTaskService = TimesheetTaskService;
        app.AddService("TimesheetTaskService", TimesheetTaskService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ListProjectTasksService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var TimesheetEntryModel = /** @class */ (function () {
            function TimesheetEntryModel() {
            }
            return TimesheetEntryModel;
        }());
        Model.TimesheetEntryModel = TimesheetEntryModel;
        var TSEntryDTO = /** @class */ (function () {
            function TSEntryDTO() {
            }
            return TSEntryDTO;
        }());
        Model.TSEntryDTO = TSEntryDTO;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSEntryCreateModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var CreateTimesheetEntryModel = GCPL.Model.TimesheetEntryModel;
            var sendModel = GCPL.Model.TSEntryDTO;
            var TSEntryCreateController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function TSEntryCreateController(_TimesheetEntryEditService, _cookieStore, $location, _CreateProjectTaskService, _TimesheetTaskService, _InsertTimesheetEntryService, _TimesheetSettingsEditService) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.InsertTimesheetEntry = null;
                    this.TimesheetSettingsModel = null;
                    this.SendTSData = null;
                    this.TimesheetEntryID = null;
                    this.GetUser = null;
                    this.GetProjectName = null;
                    this.GetTaskName = null;
                    this.DealerID = null;
                    this.alert = null;
                    this.UserID = null;
                    this.showBtnSubmit = true;
                    this.showAddUserTitle = true;
                    this.InsertNow = true;
                    this.DirectSubmit = false;
                    this.createArray = [];
                    this.postArray = [];
                    this.sendData = null;
                    this.showProjectName = null;
                    this.showProjectTask = null;
                    this.dataList = [];
                    this.SettingsID = 1;
                    this.totalTimeByDay = [];
                    this.totalDayTime = 0;
                    this.TSDate = null;
                    this.UserNameID = null;
                    this.showTotalTime = false;
                    this.TempTotal = null;
                    this.Cookie = null;
                    this.TimesheetEntryEditService = _TimesheetEntryEditService;
                    this.Cookie = _cookieStore;
                    this.TimesheetEntryID = $location.search().TimesheetEntryID;
                    this.UserNameID = $location.search().UserID;
                    this.TSDate = $location.search().TSDate;
                    this.CreateProjectTaskService = _CreateProjectTaskService;
                    this.TimesheetTaskService = _TimesheetTaskService;
                    this.InsertTimesheetEntryService = _InsertTimesheetEntryService;
                    this.TimesheetSettingsEditService = _TimesheetSettingsEditService;
                    this.InsertTimesheetEntry = new CreateTimesheetEntryModel();
                    this.SendTSData = new sendModel();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                }
                TSEntryCreateController.prototype.$onInit = function () {
                    this.Init();
                    $('.clockpicker').clockpicker({
                        placement: 'bottom',
                        align: 'left',
                        donetext: 'Done'
                    });
                    var that = this;
                    var date = new Date();
                    var currentMonth = date.getMonth();
                    var currentDate = date.getDate();
                    var currentYear = date.getFullYear();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate,
                        maxDate: new Date(currentYear, currentMonth, currentDate)
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                TSEntryCreateController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                TSEntryCreateController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                TSEntryCreateController.prototype.Init = function () {
                    var _this = this;
                    //Select current user
                    this.CreateProjectTaskService.FindUsername().then((function (response) {
                        _this.GetUser = _this.CreateProjectTaskService.GetUsername(response.data.Result);
                        console.log(_this.GetUser);
                        var username = _this.GetUser[0].Name;
                        $("#CreatedBy").val(username);
                    }));
                    //Select today's time by default
                    Date.prototype.toDateString = (function () {
                        var local = new Date(this);
                        local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
                        return local.toJSON().slice(0, 10);
                    });
                    $(document).ready(function () {
                        $('#txtFromDate').val(new Date().toDateString());
                    });
                    //Project Name Dropdown
                    this.CreateProjectTaskService.FindProjectUser().then((function (response) {
                        _this.GetProjectName = _this.CreateProjectTaskService.GetProjectUser(response.data.Result);
                        _this.showProjectName = _this.GetProjectName.ProjectName;
                    }));
                    $("#TSStatus").val("Created");
                    // TSEntryBy for Timesheet Settings page
                    this.TimesheetSettingsEditService.Find(this.SettingsID).then((function (response) {
                        _this.TimesheetSettingsModel = _this.TimesheetSettingsEditService.GetEdit(response.data.Result);
                        console.log(_this.TimesheetSettingsModel);
                        if (_this.TimesheetSettingsModel.TSEntryBy === '1') {
                            _this.changeEntry();
                        }
                    }));
                    if (this.TimesheetEntryID != null) {
                        $('#txtFromDate').prop('disabled', true);
                        this.showBtnSubmit = false;
                        this.showAddUserTitle = false;
                        this.InsertNow = false;
                        this.DirectSubmit = true;
                        $("#titleShow").html("Update Timesheet");
                        this.TimesheetEntryEditService.Find(this.TimesheetEntryID, this.UserNameID, this.TSDate).then((function (response) {
                            _this.InsertTimesheetEntry = _this.TimesheetEntryEditService.GetEdit(response.data.Result);
                            console.log(" Check Below");
                            console.log(_this.InsertTimesheetEntry);
                            console.log("total time for user: " + parseInt(_this.InsertTimesheetEntry.TotalDayTime));
                            _this.totalDayTime = parseInt(_this.InsertTimesheetEntry.TotalDayTime);
                            _this.showTotalTime = true;
                            _this.TempTotal = _this.InsertTimesheetEntry.TotalTime;
                            _this.TaskName();
                        }));
                    }
                };
                TSEntryCreateController.prototype.TaskName = function () {
                    var _this = this;
                    this.GetTaskName = this.CreateProjectTaskService.FindTaskByProjectAllocated(this.InsertTimesheetEntry.ProjectNameID).then((function (response) {
                        _this.GetTaskName = _this.CreateProjectTaskService.GetTaskByProjectAllocated(response.data.Result);
                        _this.showProjectTask = _this.GetTaskName.TaskName;
                    }));
                };
                TSEntryCreateController.prototype.DirectCart = function () {
                    this.postArray = [];
                    $("#userComment").val(this.InsertTimesheetEntry.UserComments);
                    this.InsertTimesheetEntry.StartTime = $("#StartTime").val();
                    this.InsertTimesheetEntry.EndTime = $("#EndTime").val();
                    var update = new Date(this.InsertTimesheetEntry.TSDate);
                    //Calculating the total time
                    var start = this.InsertTimesheetEntry.StartTime;
                    var end = this.InsertTimesheetEntry.EndTime;
                    function diff(start, end) {
                        start = start.split(":");
                        end = end.split(":");
                        var startDate = new Date(0, 0, 0, start[0], start[1], 0);
                        var endDate = new Date(0, 0, 0, end[0], end[1], 0);
                        var diff = endDate.getTime() - startDate.getTime();
                        var hours = Math.floor(diff / 1000 / 60 / 60);
                        diff -= hours * 1000 * 60 * 60;
                        var minutes = Math.floor(diff / 1000 / 60);
                        // If using time pickers with 24 hours format, add the below line get exact hours
                        if (hours < 0)
                            hours = hours + 24;
                        return (hours <= 9 ? "0" : "") + hours + ":" + (minutes <= 9 ? "0" : "") + minutes;
                    }
                    var total = diff(start, end);
                    if (this.TimesheetSettingsModel.TSEntryBy === '0') {
                        this.InsertTimesheetEntry.TotalTime = total;
                    }
                    else {
                        this.InsertTimesheetEntry.TotalTime = $("#directHour").val();
                        total = $("#directHour").val();
                    }
                    if ((parseInt(this.InsertTimesheetEntry.TotalTime) + this.totalDayTime - parseInt(this.TempTotal)) < parseInt(this.TimesheetSettingsModel.MeanTimePerDay)) {
                        this.alert = "Total Hours for a day should not be less than " + this.TimesheetSettingsModel.MeanTimePerDay + " Hours";
                        $("#errorclose").show();
                        $("#close").hide();
                        return false;
                    }
                    if ((parseInt(this.InsertTimesheetEntry.TotalTime) + this.totalDayTime - parseInt(this.TempTotal)) > parseInt(this.TimesheetSettingsModel.MaxTimePerDay)) {
                        this.alert = "Total Hours for a day should not be more than " + this.TimesheetSettingsModel.MaxTimePerDay + " Hours";
                        $("#errorclose").show();
                        $("#close").hide();
                        return false;
                    }
                    if (this.TimesheetSettingsModel.TSEntryBy === '0') {
                        this.postArray.push({
                            TimesheetEntryID: this.InsertTimesheetEntry.TimesheetEntryID,
                            UserNameID: null,
                            TimesheetTaskID: null,
                            TSDate: update,
                            ProjectNameID: this.InsertTimesheetEntry.ProjectNameID,
                            TaskNameID: this.InsertTimesheetEntry.TaskNameID,
                            StartTime: this.InsertTimesheetEntry.StartTime,
                            EndTime: this.InsertTimesheetEntry.EndTime,
                            TotalTime: this.InsertTimesheetEntry.TotalTime,
                            TSStatus: null,
                            TicketNo: null,
                            CreatedBy: null,
                            WhenCreated: null,
                            ApprovedBy: null,
                            ApprovalDate: null,
                            ApprovalComments: null,
                            UserComments: this.InsertTimesheetEntry.UserComments,
                            DealerID: null
                        });
                    }
                    else {
                        this.postArray.push({
                            TimesheetEntryID: this.InsertTimesheetEntry.TimesheetEntryID,
                            UserNameID: null,
                            TimesheetTaskID: null,
                            TSDate: update,
                            ProjectNameID: this.InsertTimesheetEntry.ProjectNameID,
                            TaskNameID: this.InsertTimesheetEntry.TaskNameID,
                            StartTime: this.InsertTimesheetEntry.StartTime,
                            EndTime: this.InsertTimesheetEntry.EndTime,
                            TotalTime: this.InsertTimesheetEntry.TotalTime,
                            TSStatus: null,
                            TicketNo: null,
                            CreatedBy: null,
                            WhenCreated: null,
                            ApprovedBy: null,
                            ApprovalDate: null,
                            ApprovalComments: null,
                            UserComments: this.InsertTimesheetEntry.UserComments,
                            DealerID: null
                        });
                    }
                    this.InsertTimesheetEntryService.PostTimesheetEntryMaster(this.postArray);
                    this.alert = "Data Updated Successfully";
                    $("#errorclose").hide();
                    $("#close").show();
                };
                TSEntryCreateController.prototype.InsertTimesheetTaskMaster = function () {
                    console.log(this.totalTimeByDay);
                    console.log(this.TimesheetSettingsModel.MeanTimePerDay);
                    if (this.postArray.length > 0) {
                        console.log("Total Time By Day   *******");
                        console.log(this.totalTimeByDay);
                        var flag = 1;
                        for (var i = 0; i < this.totalTimeByDay.length; i++) {
                            if (parseInt(this.totalTimeByDay[i]) < parseInt(this.TimesheetSettingsModel.MeanTimePerDay)) {
                                this.alert = "Total Hours for a day should not be less than " + this.TimesheetSettingsModel.MeanTimePerDay + " Hours";
                                $("#errorclose").show();
                                $("#close").hide();
                                flag = 0;
                                return false;
                            }
                            else if (parseInt(this.totalTimeByDay[i]) > parseInt(this.TimesheetSettingsModel.MaxTimePerDay)) {
                                this.alert = "Total Hours for a day should not be more than " + this.TimesheetSettingsModel.MaxTimePerDay + " Hours";
                                $("#errorclose").show();
                                $("#close").hide();
                                flag = 0;
                                return false;
                            }
                            else {
                                flag = 1;
                            }
                        }
                        if (flag = 1) {
                            console.log("POSTING DATA : ");
                            console.log(this.postArray);
                            this.InsertTimesheetEntryService.PostTimesheetEntryMaster(this.postArray);
                            this.alert = "Data Successfully inserted";
                            $("#errorclose").hide();
                            $("#close").show();
                        }
                        else {
                            this.alert = "Please provide proper entries";
                            $("#errorclose").show();
                            $("#close").hide();
                        }
                        this.postArray = [];
                    }
                    else {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Add Entries to Timesheet";
                    }
                };
                TSEntryCreateController.prototype.AddToCart = function () {
                    this.InsertTimesheetEntry.UserNameID = $("#CreatedBy").val();
                    this.InsertTimesheetEntry.StartTime = $("#StartTime").val();
                    this.InsertTimesheetEntry.EndTime = $("#EndTime").val();
                    this.InsertTimesheetEntry.TSDate = $('#txtFromDate').val();
                    //Calculating the total time
                    var start = this.InsertTimesheetEntry.StartTime;
                    var end = this.InsertTimesheetEntry.EndTime;
                    function diff(start, end) {
                        start = start.split(":");
                        end = end.split(":");
                        var startDate = new Date(0, 0, 0, start[0], start[1], 0);
                        var endDate = new Date(0, 0, 0, end[0], end[1], 0);
                        var diff = endDate.getTime() - startDate.getTime();
                        var hours = Math.floor(diff / 1000 / 60 / 60);
                        diff -= hours * 1000 * 60 * 60;
                        var minutes = Math.floor(diff / 1000 / 60);
                        // If using time pickers with 24 hours format, add the below line get exact hours
                        if (hours < 0)
                            hours = hours + 24;
                        return (hours <= 9 ? "0" : "") + hours + ":" + (minutes <= 9 ? "0" : "") + minutes;
                    }
                    var total = diff(start, end);
                    if (this.TimesheetSettingsModel.TSEntryBy === '0') {
                        this.InsertTimesheetEntry.TotalTime = total;
                    }
                    else {
                        this.InsertTimesheetEntry.TotalTime = $("#directHour").val();
                        total = $("#directHour").val();
                    }
                    if (this.TimesheetSettingsModel.TSEntryBy === '0') {
                        if ($("#StartTime").val() == "" || $("#StartTime").val() == null) {
                            this.alert = "Start time cannot be blank";
                            $("#errorclose").show();
                            $("#close").hide();
                            return false;
                        }
                        else if ($("#EndTime").val() == "" || $("#EndTime").val() == null) {
                            this.alert = "End Time cannot be Blank";
                            $("#errorclose").show();
                            $("#close").hide();
                            return false;
                        }
                        else if (this.InsertTimesheetEntry.EndTime < this.InsertTimesheetEntry.StartTime || this.InsertTimesheetEntry.EndTime == this.InsertTimesheetEntry.StartTime) {
                            this.alert = "Start time cannot be greater than end time";
                            $("#errorclose").show();
                            $("#close").hide();
                            return false;
                        }
                        else {
                            this.alert = "Record added. Click submit to save timesheet.";
                            $("#errorclose").show();
                            $("#close").hide();
                        }
                    }
                    if (this.TimesheetSettingsModel.TSEntryBy === '1') {
                        var timeFormat = /^([0-9]{2})\:([0-9]{2})$/;
                        var timeInput = $("#directHour").val();
                        if (timeInput === "") {
                            this.alert = "Total Time cannot be blank";
                            $("#errorclose").show();
                            $("#close").hide();
                            return false;
                        }
                        else if (!timeInput.match(timeFormat)) {
                            this.alert = "Please enter Hours in proper format (HH:MM)";
                            $("#errorclose").show();
                            $("#close").hide();
                            return false;
                        }
                        else {
                            this.alert = "Record added. Click submit to save timesheet.";
                            $("#errorclose").show();
                            $("#close").hide();
                        }
                    }
                    //Add 2 time
                    function addTimes(startTime, endTime) {
                        var times = [0, 0, 0];
                        var max = times.length;
                        var a = (startTime || '').split(':');
                        var b = (endTime || '').split(':');
                        // normalize time values
                        for (var i = 0; i < max; i++) {
                            a[i] = isNaN(parseInt(a[i])) ? 0 : parseInt(a[i]);
                            b[i] = isNaN(parseInt(b[i])) ? 0 : parseInt(b[i]);
                        }
                        // store time values
                        for (var i = 0; i < max; i++) {
                            times[i] = a[i] + b[i];
                        }
                        var hours = times[0];
                        var minutes = times[1];
                        var seconds = times[2];
                        if (seconds >= 60) {
                            var m = (seconds / 60) << 0;
                            minutes += m;
                            seconds -= 60 * m;
                        }
                        if (minutes >= 60) {
                            var h = (minutes / 60) << 0;
                            hours += h;
                            minutes -= 60 * h;
                        }
                        return ('0' + hours).slice(-2) + ':' + ('0' + minutes).slice(-2) + ':' + ('0' + seconds).slice(-2);
                    }
                    if ($("#txtFromDate").val() === "") {
                        this.alert = "Date cannot be blank";
                        $("#errorclose").show();
                        $("#close").hide();
                        return false;
                    }
                    //When Created Date and Time 
                    var now = new Date();
                    var day = ("0" + now.getDate()).slice(-2);
                    var month = ("0" + (now.getMonth() + 1)).slice(-2);
                    var today = now.getFullYear() + "-" + (month) + "-" + (day);
                    var currentTime = new Date();
                    var currentOffset = currentTime.getTimezoneOffset();
                    var ISTOffset = 330; // IST offset UTC +5:30 
                    var ISTTime = new Date(currentTime.getTime() + (ISTOffset + currentOffset) * 60000);
                    // ISTTime now represents the time in IST coordinates
                    var hoursIST = ISTTime.getHours();
                    var minutesIST = ISTTime.getMinutes();
                    today = today + " " + hoursIST + ":" + minutesIST;
                    console.log(today);
                    $('#datePicker').val(today);
                    this.InsertTimesheetEntry.WhenCreated = today;
                    var today1 = new Date();
                    var date = today1.getFullYear() + '-' + (today1.getMonth() + 1) + '-' + today1.getDate();
                    var newDate = new Date(today1.getTime() - (parseInt(this.TimesheetSettingsModel.DaysInHistory) * 24 * 60 * 60 * 1000));
                    console.log("NewDate");
                    console.log(newDate);
                    var d2 = new Date(this.InsertTimesheetEntry.TSDate);
                    console.log("d2");
                    console.log(d2);
                    if (d2 < newDate) {
                        this.alert = "Please Enter Timesheet Entry for date less than " + this.TimesheetSettingsModel.DaysInHistory + " Days";
                        $("#errorclose").show();
                        $("#close").hide();
                        return false;
                    }
                    else if (d2 > today1) {
                        this.alert = "Timesheet Entry for future dates is not allowed";
                        $("#errorclose").show();
                        $("#close").hide();
                        return false;
                    }
                    this.showProjectName = $("#ProjectTypeSelect option:selected").text();
                    this.showProjectTask = $("#TaskTypeSelect option:selected").text();
                    //var totalTime = (parseInt(this.InsertTimesheetEntry.EndTime) - parseInt(this.InsertTimesheetEntry.StartTime));
                    //This array is only used for display purpose 
                    this.createArray.push({
                        Username: this.InsertTimesheetEntry.UserNameID,
                        Date: this.InsertTimesheetEntry.TSDate,
                        ProjectName: this.InsertTimesheetEntry.ProjectNameID,
                        TaskName: this.InsertTimesheetEntry.TaskNameID,
                        StartTime: this.InsertTimesheetEntry.StartTime,
                        EndTime: this.InsertTimesheetEntry.EndTime,
                        TotalTime: total,
                        showProjectName: this.showProjectName,
                        showProjectTask: this.showProjectTask
                    });
                    //This array will be used for POST
                    this.postArray.push({
                        UserNameID: this.UserID,
                        TimesheetTaskID: this.InsertTimesheetEntry.TaskNameID,
                        TSDate: this.InsertTimesheetEntry.TSDate,
                        ProjectNameID: this.InsertTimesheetEntry.ProjectNameID,
                        TaskNameID: this.InsertTimesheetEntry.TaskNameID,
                        StartTime: this.InsertTimesheetEntry.StartTime,
                        EndTime: this.InsertTimesheetEntry.EndTime,
                        TotalTime: this.InsertTimesheetEntry.TotalTime,
                        TSStatus: 11,
                        TicketNo: null,
                        CreatedBy: this.UserID,
                        WhenCreated: this.InsertTimesheetEntry.WhenCreated,
                        ApprovedBy: null,
                        ApprovalDate: null,
                        ApprovalComments: null,
                        UserComments: this.InsertTimesheetEntry.UserComments,
                        DealerID: this.DealerID
                    });
                    console.log(this.postArray);
                    var valDate1 = [];
                    var valDate2 = [];
                    for (var i = 0; i < this.postArray.length; i++) {
                        valDate1.push({
                            CheckDate: this.postArray[i].TSDate,
                            TotalHours: this.postArray[i].TotalTime
                        });
                    }
                    for (var i = 0; i < this.postArray.length; i++) {
                        valDate2[i] = this.postArray[i].TSDate;
                    }
                    var unique = [];
                    unique = valDate2.filter(function (itm, i, valDate2) {
                        return i == valDate2.indexOf(itm);
                    });
                    this.totalTimeByDay = [];
                    for (var i = 0; i < unique.length; i++) {
                        for (var j = 0; j < valDate1.length; j++) {
                            if (unique[i] === valDate1[j].CheckDate) {
                                this.totalTimeByDay[i] = addTimes(this.totalTimeByDay[i], valDate1[j].TotalHours);
                            }
                        }
                    }
                };
                TSEntryCreateController.prototype.Clear = function () {
                    $("#StartTime").val("");
                    $("#EndTime").val("");
                    $('#txtFromDate').val(new Date().toDateString());
                    $('#ProjectTypeSelect').prop('selectedIndex', 0);
                    $('#TaskTypeSelect').prop('selectedIndex', 0);
                };
                TSEntryCreateController.prototype.Close = function () {
                    location.href = "#!/TSEntryList";
                };
                TSEntryCreateController.prototype.ErrorClose = function () {
                };
                TSEntryCreateController.prototype.changeEntry = function () {
                    $(".toggleStart").hide();
                    $("#toggleHour").show();
                };
                TSEntryCreateController.prototype.ClearCart = function () {
                    this.postArray = [];
                    this.createArray = [];
                };
                TSEntryCreateController.prototype.deleteItem = function (item) {
                    console.log(this.postArray);
                    console.log(this.createArray);
                    var index = this.createArray.indexOf(item);
                    this.postArray.splice(index, 1);
                    this.createArray.splice(index, 1);
                    console.log(this.postArray);
                    console.log(this.createArray);
                };
                TSEntryCreateController.$inject = ["TimesheetEntryEditService", "$cookieStore", "$location", "CreateProjectTask", "TimesheetTaskService", "InsertTimesheetEntryService", "TimesheetSettingsEditService"];
                return TSEntryCreateController;
            }());
            var TSEntryCreateComponentController = /** @class */ (function () {
                function TSEntryCreateComponentController() {
                    this.controller = TSEntryCreateController;
                    this.templateUrl = "/Scripts/App/ListProject/TSEntryCreate/Template/_TSEntryCreate.html";
                }
                TSEntryCreateComponentController.Name = "tsentrycreatecomponent";
                return TSEntryCreateComponentController;
            }());
            app.AddComponent(TSEntryCreateComponentController.Name, new TSEntryCreateComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSEntryCreateComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var TSEntryCreateController = /** @class */ (function (_super) {
            __extends(TSEntryCreateController, _super);
            function TSEntryCreateController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TSEntryCreateController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.TSEntryCreateController = TSEntryCreateController;
        app.AddController("TSEntryCreateController", TSEntryCreateController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSEntryCreateController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
//Insert
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var InsertTimesheetEntryService = /** @class */ (function (_super) {
            __extends(InsertTimesheetEntryService, _super);
            function InsertTimesheetEntryService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "InsertTimesheeEntry";
                return _this;
            }
            InsertTimesheetEntryService.prototype.Find = function () {
                debugger;
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            InsertTimesheetEntryService.prototype.PostTimesheetEntryMaster = function (data) {
                var url = this.apiUrl;
                // console.log(url);
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data
                });
            };
            InsertTimesheetEntryService.$inject = ["$http", "$q"];
            return InsertTimesheetEntryService;
        }(GCPL.Service.BaseService));
        Service.InsertTimesheetEntryService = InsertTimesheetEntryService;
        app.AddService("InsertTimesheetEntryService", InsertTimesheetEntryService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
// Edit
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var TimesheetEntryEditService = /** @class */ (function (_super) {
            __extends(TimesheetEntryEditService, _super);
            function TimesheetEntryEditService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "TimesheetEntryEditctrl";
                return _this;
            }
            TimesheetEntryEditService.prototype.Find = function (data, data2, data3) {
                debugger;
                var config = {
                    params: {
                        TimesheetEntryID: data,
                        TSDate: data3,
                        UserNameID: data2
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            TimesheetEntryEditService.prototype.GetEdit = function (data) {
                var obj = new model.TimesheetEntryModel();
                obj.ApprovalComments = data.ApprovalComments;
                obj.ApprovalDate = data.ApprovalDate;
                obj.ApprovedBy = data.ApprovedBy;
                obj.CreatedBy = data.CreatedBy;
                obj.DealerID = data.DealerID;
                obj.EndTime = data.EndTime;
                obj.ProjectNameID = data.ProjectNameID;
                obj.StartTime = data.StartTime;
                obj.TaskNameID = data.TaskNameID;
                obj.TicketNo = data.TicketNo;
                obj.TimesheetEntryID = data.TimesheetEntryID;
                obj.TimesheetTaskID = data.TimesheetTaskID;
                obj.TotalTime = data.TotalTime;
                obj.TSDate = data.TSDate;
                obj.TSStatus = data.TSStatus;
                obj.UserNameID = data.UserNameID;
                obj.WhenCreated = data.WhenCreated;
                obj.UserComments = data.UserComments;
                obj.TotalDayTime = data.TotalDayTime;
                return obj;
            };
            TimesheetEntryEditService.$inject = ["$http", "$q"];
            return TimesheetEntryEditService;
        }(GCPL.Service.BaseService));
        Service.TimesheetEntryEditService = TimesheetEntryEditService;
        app.AddService("TimesheetEntryEditService", TimesheetEntryEditService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Update Approve or Reject
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var UpdateTimesheetEntryService = /** @class */ (function (_super) {
            __extends(UpdateTimesheetEntryService, _super);
            function UpdateTimesheetEntryService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "TimesheetApprove";
                return _this;
            }
            UpdateTimesheetEntryService.prototype.Find = function () {
                debugger;
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            UpdateTimesheetEntryService.prototype.PostTimesheetUpdateMaster = function (data) {
                var url = this.apiUrl;
                // console.log(url);
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data
                });
            };
            UpdateTimesheetEntryService.$inject = ["$http", "$q"];
            return UpdateTimesheetEntryService;
        }(GCPL.Service.BaseService));
        Service.UpdateTimesheetEntryService = UpdateTimesheetEntryService;
        app.AddService("UpdateTimesheetEntryService", UpdateTimesheetEntryService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Delete
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var DeleteTimesheetEntryService = /** @class */ (function (_super) {
            __extends(DeleteTimesheetEntryService, _super);
            function DeleteTimesheetEntryService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "TimesheeEntryDel";
                return _this;
            }
            DeleteTimesheetEntryService.prototype.Find = function () {
                debugger;
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            DeleteTimesheetEntryService.prototype.PostTimesheetEntryMaster = function (data) {
                var url = this.apiUrl;
                // console.log(url);
                debugger;
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data
                });
            };
            DeleteTimesheetEntryService.$inject = ["$http", "$q"];
            return DeleteTimesheetEntryService;
        }(GCPL.Service.BaseService));
        Service.DeleteTimesheetEntryService = DeleteTimesheetEntryService;
        app.AddService("DeleteTimesheetEntryService", DeleteTimesheetEntryService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSEntryCreateService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var TimesheetEntryGrid = /** @class */ (function () {
            function TimesheetEntryGrid() {
            }
            return TimesheetEntryGrid;
        }());
        Model.TimesheetEntryGrid = TimesheetEntryGrid;
        var TimesheetDeleteModel = /** @class */ (function () {
            function TimesheetDeleteModel() {
            }
            return TimesheetDeleteModel;
        }());
        Model.TimesheetDeleteModel = TimesheetDeleteModel;
        var TimesheetEntrySearch = /** @class */ (function () {
            function TimesheetEntrySearch() {
            }
            return TimesheetEntrySearch;
        }());
        Model.TimesheetEntrySearch = TimesheetEntrySearch;
        var TimesheetApprovalSearch = /** @class */ (function () {
            function TimesheetApprovalSearch() {
            }
            return TimesheetApprovalSearch;
        }());
        Model.TimesheetApprovalSearch = TimesheetApprovalSearch;
        var TaskByProject = /** @class */ (function () {
            function TaskByProject() {
            }
            return TaskByProject;
        }());
        Model.TaskByProject = TaskByProject;
        var TaskByProjectAllocation = /** @class */ (function () {
            function TaskByProjectAllocation() {
            }
            return TaskByProjectAllocation;
        }());
        Model.TaskByProjectAllocation = TaskByProjectAllocation;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSEntryListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var TSEntrySearchModel = GCPL.Model.TimesheetEntrySearch;
            var TSEntryDeleteModel = GCPL.Model.TimesheetDeleteModel;
            var TSEntryListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function TSEntryListController(_cookieStore, _TimesheetEntryTypeService, _CreateProjectTaskService, _TimesheetTaskService, _DeleteTimesheetEntryService) {
                    this._cookieStore = _cookieStore;
                    this.TSEntryGrid = null;
                    this.TSEntrySearch = null;
                    this.TSEntryDelete = null;
                    this.DealerID = null;
                    this.numRecords = 10;
                    this.GetProjectName = null;
                    this.GetTaskName = null;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.UserID = null;
                    this.GetUser = null;
                    this.alert = "All timesheet entries for this date will be Deleted!";
                    this.postArray = [];
                    this.postDeleteID = null;
                    this.postDeleteDate = null;
                    //Services
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.TimesheetEntryTypeService = _TimesheetEntryTypeService;
                    this.CreateProjectTaskService = _CreateProjectTaskService;
                    this.TimesheetTaskService = _TimesheetTaskService;
                    this.TimesheetEntryDeleteService = _DeleteTimesheetEntryService;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.TSEntryGrid = Array();
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.TSEntrySearch = new TSEntrySearchModel();
                    this.TSEntryDelete = new TSEntryDeleteModel();
                }
                TSEntryListController.prototype.$onInit = function () {
                    this.Init();
                    var that = this;
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                TSEntryListController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                TSEntryListController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                TSEntryListController.prototype.Init = function () {
                    var _this = this;
                    //Select current user
                    this.CreateProjectTaskService.FindUsername().then((function (response) {
                        _this.GetUser = _this.CreateProjectTaskService.GetUsername(response.data.Result);
                        console.log(_this.GetUser);
                        var username = _this.GetUser[0].Name;
                        $("#CreatedBy").val(username);
                    }));
                    //Project Name Dropdown
                    this.CreateProjectTaskService.FindProjectUser().then((function (response) {
                        _this.GetProjectName = _this.CreateProjectTaskService.GetProjectUser(response.data.Result);
                    }));
                    ////Task Name Dropdown
                    //this.TimesheetTaskService.FindTimesheetTaskStatus(this.DealerID).then((response => {
                    //    this.GetTaskName = this.TimesheetTaskService.GetTimesheetTaskStatus(response.data.Result);
                    //}));
                };
                TSEntryListController.prototype.TaskName = function () {
                    var _this = this;
                    this.GetTaskName = this.CreateProjectTaskService.FindTaskByProjectAllocated(this.TSEntryGrid.ProjectNameID).then((function (response) {
                        _this.GetTaskName = _this.CreateProjectTaskService.GetTaskByProjectAllocated(response.data.Result);
                    }));
                };
                TSEntryListController.prototype.Search = function () {
                    debugger;
                    this.TSEntrySearch.UserNameID = this.UserID;
                    this.TSEntrySearch.ProjectNameID = this.TSEntryGrid.ProjectNameID;
                    this.TSEntrySearch.TaskNameID = this.TSEntryGrid.TaskNameID;
                    this.TSEntrySearch.TSDate = $("#txtFromDate").val();
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                TSEntryListController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    debugger;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.TSEntryGrid = this.TimesheetEntryTypeService.FindTimesheetEntryStatus(this.TSEntrySearch).then((function (response) {
                        _this.TSEntryGrid = _this.TimesheetEntryTypeService.GetTimesheetEntryStatus(response.data.Result);
                        _this.TSEntryGrid.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.TSEntryGrid.slice(0, that.numRecords);
                    }));
                };
                TSEntryListController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TSEntryGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                TSEntryListController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TSEntryGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                TSEntryListController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                TSEntryListController.prototype.Close = function () {
                    location.href = "#!/TSEntryList";
                };
                TSEntryListController.prototype.ErrorClose = function () {
                    this.TSEntryDelete.UserNameID = this.postDeleteID;
                    this.TSEntryDelete.TSDate = this.postDeleteDate;
                    this.TimesheetEntryDeleteService.PostTimesheetEntryMaster(this.TSEntryDelete);
                    setTimeout(function () { location.reload(); }, 0);
                };
                TSEntryListController.prototype.InitDelete = function (userID, DelDate) {
                    this.postDeleteID = userID;
                    this.postDeleteDate = DelDate;
                };
                TSEntryListController.$inject = ["$cookieStore", "TimesheetEntryTypeService", "CreateProjectTask", "TimesheetTaskService", "DeleteTimesheetEntryService"];
                return TSEntryListController;
            }());
            var TSEntryListComponentController = /** @class */ (function () {
                function TSEntryListComponentController() {
                    this.controller = TSEntryListController;
                    this.templateUrl = "/Scripts/App/TSEntryList/Template/_TSEntryList.html";
                }
                TSEntryListComponentController.Name = "tsentrylistcomponent";
                return TSEntryListComponentController;
            }());
            app.AddComponent(TSEntryListComponentController.Name, new TSEntryListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSEntryListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var TSEntryListController = /** @class */ (function (_super) {
            __extends(TSEntryListController, _super);
            function TSEntryListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TSEntryListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.TSEntryListController = TSEntryListController;
        app.AddController("TSEntryListController", TSEntryListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSEntryListController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var TimesheetEntryTypeService = /** @class */ (function (_super) {
            __extends(TimesheetEntryTypeService, _super);
            function TimesheetEntryTypeService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            TimesheetEntryTypeService.prototype.FindTimesheetEntryStatus = function (data) {
                var url = this.apiUrl + "/TimesheetEntryShow";
                var UserNameID;
                var TSDate;
                var ProjectNameID;
                var TaskNameID;
                var TSStatus;
                if (data.UserNameID !== undefined) {
                    UserNameID = data.UserNameID;
                }
                else {
                    UserNameID = "";
                }
                if (data.TSDate !== undefined) {
                    TSDate = data.TSDate;
                }
                else {
                    TSDate = "";
                }
                if (data.ProjectNameID !== undefined) {
                    ProjectNameID = data.ProjectNameID;
                }
                else {
                    ProjectNameID = "";
                }
                if (data.TaskNameID !== undefined) {
                    TaskNameID = data.TaskNameID;
                }
                else {
                    TaskNameID = "";
                }
                if (data.TSStatus !== undefined) {
                    TSStatus = data.TSStatus;
                }
                else {
                    TSStatus = "";
                }
                debugger;
                var config = {
                    params: {
                        UserNameID: UserNameID,
                        TSDate: TSDate,
                        ProjectNameID: ProjectNameID,
                        TaskNameID: TaskNameID,
                        TSStatus: TSStatus,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            TimesheetEntryTypeService.prototype.GetTimesheetEntryStatus = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        EndTime: item.EndTime,
                        ProjectNameID: item.ProjectNameID,
                        StartTime: item.StartTime,
                        TaskNameID: item.TaskNameID,
                        TicketNo: item.TicketNo,
                        TimesheetEntryID: item.TimesheetEntryID,
                        TotalTime: item.TotalTime,
                        TSDate: item.TSDate,
                        UserNameID: item.UserNameID,
                        TSStatus: item.TSStatus,
                        TSStatusID: item.TSStatusID,
                        ApprovalComments: item.ApprovalComments,
                        ApprovalDate: item.ApprovalDate,
                        ApprovedBy: item.ApprovedBy,
                        UserComments: item.UserComments,
                        UserID: item.UserID
                    });
                }
                return list;
            };
            TimesheetEntryTypeService.prototype.FindTimesheetApprovalStatus = function (data) {
                var url = this.apiUrl + "/TimesheetAR";
                var UserNameID;
                var ProjectNameID;
                var TaskNameID;
                var TSStatus;
                var ManagerID;
                if (data.UserNameID !== undefined) {
                    UserNameID = data.UserNameID;
                }
                else {
                    UserNameID = "";
                }
                if (data.TSStatus !== undefined) {
                    TSStatus = data.TSStatus;
                }
                else {
                    TSStatus = "";
                }
                if (data.ProjectNameID !== undefined) {
                    ProjectNameID = data.ProjectNameID;
                }
                else {
                    ProjectNameID = "";
                }
                if (data.TaskNameID !== undefined) {
                    TaskNameID = data.TaskNameID;
                }
                else {
                    TaskNameID = "";
                }
                if (data.ManagerID !== ManagerID) {
                    ManagerID = data.ManagerID;
                }
                else {
                    ManagerID = "";
                }
                debugger;
                var config = {
                    params: {
                        UserNameID: UserNameID,
                        TSStatus: TSStatus,
                        ProjectNameID: ProjectNameID,
                        TaskNameID: TaskNameID,
                        ManagerID: ManagerID,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            TimesheetEntryTypeService.prototype.GetTimesheetApprovalStatus = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        EndTime: item.EndTime,
                        ProjectNameID: item.ProjectNameID,
                        StartTime: item.StartTime,
                        TaskNameID: item.TaskNameID,
                        TicketNo: item.TicketNo,
                        TimesheetEntryID: item.TimesheetEntryID,
                        TotalTime: item.TotalTime,
                        TSDate: item.TSDate,
                        UserNameID: item.UserNameID,
                        TSStatus: item.TSStatus,
                        TSStatusID: item.TSStatusID,
                        ApprovalComments: item.ApprovalComments,
                        ApprovalDate: item.ApprovalDate,
                        ApprovedBy: item.ApprovedBy,
                        UserComments: item.UserComments,
                        UserID: item.UserID
                    });
                }
                return list;
            };
            TimesheetEntryTypeService.$inject = ["$http", "$q", "$cookieStore"];
            return TimesheetEntryTypeService;
        }(GCPL.Service.BaseService));
        Service.TimesheetEntryTypeService = TimesheetEntryTypeService;
        app.AddService("TimesheetEntryTypeService", TimesheetEntryTypeService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSEntryListService.js.map
//# sourceMappingURL=TSApprovalListViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var TSApprovalSearchModel = GCPL.Model.TimesheetApprovalSearch;
            var TSApprovalListViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function TSApprovalListViewController(_cookieStore, _CreateProjectTaskService, _TimesheetEntryTypeService, _CreateProjectService, _UpdateTimesheetEntry, _UserNameService) {
                    this._cookieStore = _cookieStore;
                    this.TSEntryGrid = null;
                    this.TSApprovalSearch = null;
                    this.DealerID = null;
                    this.numRecords = 10;
                    this.GetProjectName = null;
                    this.GetTaskName = null;
                    this.GetTimesheetStatus = null;
                    this.UserName = null;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.UserID = null;
                    this.postArray = [];
                    this.ApprDate = null;
                    this.alert = null;
                    this.UserNameID = null;
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.CreateProjectTaskService = _CreateProjectTaskService;
                    this.TimesheetEntryTypeService = _TimesheetEntryTypeService;
                    this.CreateProjectService = _CreateProjectService;
                    this.UpdateTimesheetEntryService = _UpdateTimesheetEntry;
                    this.UserNameService = _UserNameService;
                    this.TSEntryGrid = Array();
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.TSApprovalSearch = new TSApprovalSearchModel();
                }
                TSApprovalListViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                TSApprovalListViewController.prototype.Init = function () {
                    //User Autocomplete
                    var _this = this;
                    var that = this;
                    $("#txtUserName").autocomplete({
                        source: function (request, res) {
                            that.UserNameService.FilterAutoComplete(request).then((function (response) {
                                var data = that.UserNameService.GetUserName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Name,
                                        value: item.Name,
                                        id: item.UserID,
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            console.log(ui.item.id);
                            var UserID = ui.item.id;
                            //that.UserListSearch.Name = ui.item.value;
                            that.TSApprovalSearch.UserNameID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    //Project Name Dropdown
                    this.CreateProjectTaskService.FindProjectName().then((function (response) {
                        _this.GetProjectName = _this.CreateProjectTaskService.GetProjectName(response.data.Result);
                    }));
                    this.CreateProjectService.FindTimesheetStatus().then((function (response) {
                        _this.GetTimesheetStatus = _this.CreateProjectService.GetTimesheetStatus(response.data.Result);
                    }));
                    //Approval Date
                    var now = new Date();
                    var day = ("0" + now.getDate()).slice(-2);
                    var month = ("0" + (now.getMonth() + 1)).slice(-2);
                    var today = now.getFullYear() + "-" + (month) + "-" + (day);
                    var currentTime = new Date();
                    var currentOffset = currentTime.getTimezoneOffset();
                    var ISTOffset = 330; // IST offset UTC +5:30 
                    var ISTTime = new Date(currentTime.getTime() + (ISTOffset + currentOffset) * 60000);
                    // ISTTime now represents the time in IST coordinates
                    var hoursIST = ISTTime.getHours();
                    var minutesIST = ISTTime.getMinutes();
                    today = today + " " + hoursIST + ":" + minutesIST;
                    this.ApprDate = today;
                };
                TSApprovalListViewController.prototype.TaskName = function () {
                    var _this = this;
                    this.GetTaskName = this.CreateProjectTaskService.FindTaskbyProject(this.TSEntryGrid.ProjectNameID).then((function (response) {
                        _this.GetTaskName = _this.CreateProjectTaskService.GetTaskbyProject(response.data.Result);
                    }));
                };
                TSApprovalListViewController.prototype.Search = function () {
                    console.log(this.UserID);
                    this.TSApprovalSearch.ManagerID = this.UserID;
                    this.TSApprovalSearch.ProjectNameID = this.TSEntryGrid.ProjectNameID;
                    this.TSApprovalSearch.TaskNameID = this.TSEntryGrid.TaskNameID;
                    this.TSApprovalSearch.TSStatus = this.TSEntryGrid.TSStatus;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                TSApprovalListViewController.prototype.Clear = function () {
                    this.TSApprovalSearch.UserNameID = "";
                    $('#ProjectTypeSelect').prop('selectedIndex', 0);
                    $('#TaskTypeSelect').prop('selectedIndex', 0);
                    $('#statusSelect').prop('selectedIndex', 0);
                };
                TSApprovalListViewController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.TSEntryGrid = this.TimesheetEntryTypeService.FindTimesheetApprovalStatus(this.TSApprovalSearch).then((function (response) {
                        _this.TSEntryGrid = _this.TimesheetEntryTypeService.GetTimesheetApprovalStatus(response.data.Result);
                        _this.TSEntryGrid.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.TSEntryGrid.slice(0, that.numRecords);
                    }));
                };
                TSApprovalListViewController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TSEntryGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                TSApprovalListViewController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TSEntryGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                TSApprovalListViewController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                TSApprovalListViewController.prototype.ApproveTS = function () {
                    var that = this;
                    this.postArray = [];
                    var SelectedData = [];
                    var ApprovedBy = this.UserID;
                    var ApprovalDate = this.ApprDate;
                    $.each(this.shownItems, function (key, item) {
                        if (item.IsSelected == true) {
                            SelectedData.push({
                                TimesheetEntryID: item.TimesheetEntryID,
                                TSStatus: 13,
                                ApprovedBy: ApprovedBy,
                                ApprovalDate: ApprovalDate,
                                ApprovalComments: null
                            });
                        }
                    });
                    this.postArray = SelectedData;
                };
                TSApprovalListViewController.prototype.RejectTS = function () {
                    var that = this;
                    this.postArray = [];
                    var SelectedData = [];
                    var ApprovedBy = this.UserID;
                    var ApprovalDate = this.ApprDate;
                    $.each(this.shownItems, function (key, item) {
                        if (item.IsSelected == true) {
                            SelectedData.push({
                                TimesheetEntryID: item.TimesheetEntryID,
                                TSStatus: 14,
                                ApprovedBy: ApprovedBy,
                                ApprovalDate: ApprovalDate,
                                ApprovalComments: null
                            });
                        }
                    });
                    this.postArray = SelectedData;
                };
                TSApprovalListViewController.prototype.ApproveSendTS = function () {
                    this.ApproveTS();
                    this.UpdateTS();
                };
                TSApprovalListViewController.prototype.RejectSendTS = function () {
                    this.RejectTS();
                    this.UpdateTS();
                };
                TSApprovalListViewController.prototype.UpdateTS = function () {
                    this.UpdateTimesheetEntryService.PostTimesheetUpdateMaster(this.postArray);
                    this.alert = "Timesheet Status Submitted";
                    $("#errorclose").hide();
                    $("#close").show();
                    this.postArray = [];
                };
                TSApprovalListViewController.prototype.Close = function () {
                    this.Refresh();
                    location.href = "#!/TSApprovalListView";
                };
                TSApprovalListViewController.prototype.ErrorClose = function () {
                };
                TSApprovalListViewController.$inject = ["$cookieStore", "CreateProjectTask", "TimesheetEntryTypeService", "CreateProjectService", "UpdateTimesheetEntryService", "UserNameService"];
                return TSApprovalListViewController;
            }());
            var TSApprovalListViewComponentController = /** @class */ (function () {
                function TSApprovalListViewComponentController() {
                    this.controller = TSApprovalListViewController;
                    this.templateUrl = "/Scripts/App/TSApprovalListView/Template/_TSApprovalListView.html";
                }
                TSApprovalListViewComponentController.Name = "tsapprovallistviewcomponent";
                return TSApprovalListViewComponentController;
            }());
            app.AddComponent(TSApprovalListViewComponentController.Name, new TSApprovalListViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSApprovalListViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var TSApprovalListViewController = /** @class */ (function (_super) {
            __extends(TSApprovalListViewController, _super);
            function TSApprovalListViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TSApprovalListViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.TSApprovalListViewController = TSApprovalListViewController;
        app.AddController("TSApprovalListViewController", TSApprovalListViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSApprovalListViewController.js.map
//# sourceMappingURL=TSApprovalListViewService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var InsertEmpManager = /** @class */ (function () {
            function InsertEmpManager() {
            }
            return InsertEmpManager;
        }());
        Model.InsertEmpManager = InsertEmpManager;
        var EmpUserModel = /** @class */ (function () {
            function EmpUserModel() {
            }
            return EmpUserModel;
        }());
        Model.EmpUserModel = EmpUserModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=EmpManagerAdminModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var EmpManagerAdminModel = GCPL.Model.InsertEmpManager;
            var EmpManagerAdminController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function EmpManagerAdminController(_EmpManagerService, _cookieStore, $location, _InsertEmpManagerService, _CreateProjectTask, _TSApproverEditService, _TSApproverListTypeService, _SkillsAvailabilityService) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.InsertEmpManager = null;
                    this.UserDetailsGrid = null;
                    this.TSApproverID = null;
                    this.GetTotalAllocation = null;
                    this.alert = null;
                    this.showBtnSubmit = true;
                    this.showAddUserTitle = true;
                    this.GetEmpName = null;
                    this.GetEmpID = null;
                    this.GetManagerName = null;
                    this.GetManagerID = null;
                    this.DealerID = null;
                    this.GetProject = null;
                    this.allUsersArray = [];
                    this.postArray = [];
                    this.displayProjectName = null;
                    this.checkAllocationPercentage = null;
                    this.SkillsAvailabilityView = null;
                    this.SkillsDetailView = null;
                    this.checkID = null;
                    this.DistinctEmpSkills = null;
                    this.currentItem = null;
                    this.Cookie = null;
                    this.EmpManagerService = _EmpManagerService;
                    this.Cookie = _cookieStore;
                    this.TSApproverID = $location.search().TSApproverID;
                    this.InsertEmpManagerService = _InsertEmpManagerService;
                    this.CreateProjectTaskService = _CreateProjectTask;
                    this.TSApproverEditService = _TSApproverEditService;
                    this.TSApproverListTypeService = _TSApproverListTypeService;
                    this.SkillsAvailabilityService = _SkillsAvailabilityService;
                    this.InsertEmpManager = new EmpManagerAdminModel();
                    this.UserDetailsGrid = Array();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.SkillsAvailabilityView = new Array();
                    this.SkillsDetailView = new Array();
                }
                EmpManagerAdminController.prototype.$onInit = function () {
                    this.Init();
                    var that = this;
                    $(".txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $(".txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                EmpManagerAdminController.prototype.selectFromDate = function (e) {
                    $(".txtFromDate").val(e);
                };
                EmpManagerAdminController.prototype.selectToDate = function (e) {
                    $(".txtToDate").val(e);
                };
                //Page Load Define Values//
                EmpManagerAdminController.prototype.Init = function () {
                    var _this = this;
                    //this.EmpManagerService.FindUserName().then((response => {
                    //    this.GetManagerName = this.EmpManagerService.GetUserName(response.data.Result);
                    //}));
                    this.EmpManagerService.FindUserName().then((function (response) {
                        _this.GetEmpName = _this.EmpManagerService.GetUserName(response.data.Result);
                        _this.allUsersArray = _this.GetEmpName;
                        console.log("*** ALL USERS ARRAY");
                        console.log(_this.allUsersArray);
                    }));
                    //Project Name Dropdown
                    this.CreateProjectTaskService.FindProjectName().then((function (response) {
                        _this.GetProject = _this.CreateProjectTaskService.GetProjectName(response.data.Result);
                    }));
                    //Get Total Allocation
                    this.TSApproverListTypeService.FindTotalAllocation(this.DealerID).then((function (response) {
                        _this.GetTotalAllocation = _this.TSApproverListTypeService.GetTotalAllocation(response.data.Result);
                        console.log("Get Total Allocation ");
                        console.log(_this.GetTotalAllocation);
                    }));
                    this.UserDetailsGrid = this.TSApproverListTypeService.FindTSApproverListStatus(this.DealerID).then((function (response) {
                        _this.UserDetailsGrid = _this.TSApproverListTypeService.GetTSApproverListStatus(response.data.Result);
                        console.log("User Details");
                        console.log(_this.UserDetailsGrid);
                    }));
                    $("#showAllEmp").click(function () {
                        $("#empListDisplay").show(500);
                        var that = this;
                        $(".txtFromDate").datepicker({
                            dateFormat: 'dd M yy', changeMonth: true,
                            changeYear: true,
                            onSelect: this.selectFromDate
                        });
                        $(".txtToDate").datepicker({
                            dateFormat: 'dd M yy', changeMonth: true,
                            changeYear: true,
                            onSelect: this.selectToDate
                        });
                    });
                    //Skillset
                    this.SkillsAvailabilityService.FindEmployeeSkills(this.DealerID).then((function (response) {
                        _this.SkillsAvailabilityView = _this.SkillsAvailabilityService.GetEmployeeSkills(response.data.Result);
                        console.log(_this.SkillsAvailabilityView);
                    }));
                    //SKillsDeatials
                    this.SkillsAvailabilityService.FindEmployeeSkills(this.DealerID).then((function (response) {
                        _this.SkillsDetailView = _this.SkillsAvailabilityService.GetEmployeeSkills(response.data.Result);
                        console.log("*** SKill Details ***");
                        console.log(_this.SkillsDetailView);
                    }));
                    //Distinct Skills
                    this.SkillsAvailabilityService.FindEmployeeDistinctSkills(this.DealerID).then((function (response) {
                        _this.DistinctEmpSkills = _this.SkillsAvailabilityService.GetEmployeeDistinctSkills(response.data.Result);
                        console.log("*** SKill Details ***");
                        console.log(_this.SkillsDetailView);
                    }));
                };
                EmpManagerAdminController.prototype.SkillsDetail = function (id) {
                    this.checkID = id;
                };
                EmpManagerAdminController.prototype.ManagerName = function () {
                    var _this = this;
                    this.GetManagerName = this.EmpManagerService.FindManagerName(this.InsertEmpManager.ProjectNameID).then((function (response) {
                        _this.GetManagerName = _this.EmpManagerService.GetManagerName(response.data.Result);
                        var ManagerName = _this.GetManagerName[0].Name;
                        $("#ManagerNameSelect").val(ManagerName);
                    }));
                };
                EmpManagerAdminController.prototype.ManagerID = function () {
                    var _this = this;
                    this.GetManagerID = this.EmpManagerService.FindUserID(this.InsertEmpManager.ManagerID).then((function (response) {
                        _this.GetManagerID = _this.EmpManagerService.GetUserID(response.data.Result);
                        var ManagerID = _this.GetManagerID[0].UserID;
                        $("#ManagerIDShow").val(ManagerID);
                    }));
                };
                EmpManagerAdminController.prototype.EmpID = function () {
                    var _this = this;
                    this.GetEmpID = this.EmpManagerService.FindUserID(this.InsertEmpManager.EmployeeID).then((function (response) {
                        _this.GetEmpID = _this.EmpManagerService.GetUserID(response.data.Result);
                        var EmpID = _this.GetManagerID[0].UserID;
                        $("#EmpIDShow").val(EmpID);
                    }));
                };
                EmpManagerAdminController.prototype.CBox = function (item) {
                    this.currentItem = item;
                    this.postArray = [];
                    this.checkAllocationPercentage = $("#" + item.UserID + "pc").text();
                    console.log("ap = " + this.checkAllocationPercentage);
                    console.log(item.TotalAllocationPercentage);
                    this.InsertEmpManager.DealerID = this.DealerID;
                    this.InsertEmpManager.ManagerName = $("#ManagerNameSelect :selected").text();
                    this.InsertEmpManager.EmployeeName = $("#EmpNameSelect :selected").text();
                    //this.InsertEmpManager.EmpEndDate = $("#txtFromDate").val();
                    //this.InsertEmpManager.EmpStartDate = $("#txtToDate").val();
                    this.InsertEmpManager.TSApproverID = this.TSApproverID;
                    var that = this;
                    var endDate = $("#" + item.UserID + "EndDate").val();
                    var startDate = $("#" + item.UserID + "StartDate").val();
                    console.log("End Date: " + endDate);
                    that.postArray.push({
                        TSApproverID: that.InsertEmpManager.TSApproverID,
                        ProjectNameID: that.InsertEmpManager.ProjectNameID,
                        ManagerID: that.InsertEmpManager.ManagerID,
                        ManagerName: that.InsertEmpManager.ManagerName,
                        EmployeeID: item.UserID,
                        EmployeeName: item.Name,
                        EmpStartDate: startDate,
                        EmpEndDate: endDate,
                        AllocationPercentage: item.AllocationPercentage,
                        DealerID: that.InsertEmpManager.DealerID,
                        Status: that.InsertEmpManager.Status,
                        AllocationComment: item.AllocationComment
                    });
                    this.checkAllocationPercentage = (parseInt(this.checkAllocationPercentage) + parseInt(this.postArray[0].AllocationPercentage));
                    console.log("Final CP = " + this.checkAllocationPercentage);
                    console.log("Posting Information : ");
                    console.log(this.postArray);
                    var id = this.currentItem.UserID;
                    $("#" + id + "StartDate").val('');
                    $("#" + id + "EndDate").val('');
                    $("#" + id + "AllocationPercentage").val('');
                    $("#" + id + "AllocationComment").val('');
                    this.InsertEmpManagerAdmin();
                };
                EmpManagerAdminController.prototype.InsertEmpManagerAdmin = function () {
                    if ($("#ProjectTypeSelect").val() == "Please Select") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Project Name";
                    }
                    else if ($("#ManagerNameSelect").val() == "Please Select") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Manager Name";
                    }
                    else if ($("#EmpNameSelect").val() == "Please Select") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Employee Name";
                    }
                    else if ($("#selectActive").val() == "Please Select") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Status";
                    }
                    else if (this.checkAllocationPercentage > 100) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Total allocation percentage should not be greater than 100";
                    }
                    else {
                        this.InsertEmpManagerService.PostEmpManagerMaster(this.postArray);
                        var empName = this.postArray[0].EmployeeName;
                        var projectName = $("#ProjectTypeSelect :selected").text();
                        this.alert = empName + " has been allocated to the project : " + projectName;
                        $("#errorclose").hide();
                        $("#close").show();
                    }
                };
                EmpManagerAdminController.prototype.Close = function () {
                    var _this = this;
                    this.UserDetailsGrid = this.TSApproverListTypeService.FindTSApproverListStatus(this.DealerID).then((function (response) {
                        _this.UserDetailsGrid = _this.TSApproverListTypeService.GetTSApproverListStatus(response.data.Result);
                        console.log("User Details");
                        console.log(_this.UserDetailsGrid);
                    }));
                    this.TSApproverListTypeService.FindTotalAllocation(this.DealerID).then((function (response) {
                        _this.GetTotalAllocation = _this.TSApproverListTypeService.GetTotalAllocation(response.data.Result);
                        console.log("Get Total Allocation ");
                        console.log(_this.GetTotalAllocation);
                    }));
                };
                EmpManagerAdminController.prototype.ErrorClose = function () {
                };
                EmpManagerAdminController.prototype.backButton = function () {
                    location.href = "#!/TSApproverList";
                };
                EmpManagerAdminController.$inject = ["EmpManagerService", "$cookieStore", "$location", "InsertEmpManagerService", "CreateProjectTask", "TSApproverEditService", "TSApproverListTypeService", "SkillsAvailabilityService"];
                return EmpManagerAdminController;
            }());
            var EmpManagerAdminComponentController = /** @class */ (function () {
                function EmpManagerAdminComponentController() {
                    this.controller = EmpManagerAdminController;
                    this.templateUrl = "/Scripts/App/EmpManagerAdmin/Template/EmpManagerAdmin.html";
                }
                EmpManagerAdminComponentController.Name = "empmanageradmincomponent";
                return EmpManagerAdminComponentController;
            }());
            app.AddComponent(EmpManagerAdminComponentController.Name, new EmpManagerAdminComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=EmpManagerAdminComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var EmpManagerAdminController = /** @class */ (function (_super) {
            __extends(EmpManagerAdminController, _super);
            function EmpManagerAdminController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return EmpManagerAdminController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.EmpManagerAdminController = EmpManagerAdminController;
        app.AddController("EmpManagerAdminController", EmpManagerAdminController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=EmpManagerAdminController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var EmpManagerService = /** @class */ (function (_super) {
            __extends(EmpManagerService, _super);
            function EmpManagerService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            EmpManagerService.prototype.FindUserName = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SelectUserDD",
                    Config: config
                });
            };
            EmpManagerService.prototype.GetUserName = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        Name: item.Name,
                        UserID: item.UserID,
                        AllocationPercentage: item.AllocationPercentage,
                        EmpEndDate: item.EmpEndDate,
                        EmpStartDate: item.EmpStartDate,
                        TotalAllocationPercentage: item.TotalAllocationPercentage
                    });
                }
                return list;
            };
            EmpManagerService.prototype.FindManagerName = function (data) {
                var config = {
                    params: {
                        ProjectHeaderID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/ManagerByProjectDDL",
                    Config: config
                });
            };
            EmpManagerService.prototype.GetManagerName = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        Name: item.Name,
                        UserID: item.UserID,
                        AllocationPercentage: item.AllocationPercentage,
                        EmpEndDate: item.EmpEndDate,
                        EmpStartDate: item.EmpStartDate,
                        TotalAllocationPercentage: item.TotalAllocationPercentage
                    });
                }
                return list;
            };
            EmpManagerService.prototype.FindUserID = function (data) {
                var config = {
                    params: {
                        UserID: data,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/CreatedByUser",
                    Config: config
                });
            };
            EmpManagerService.prototype.GetUserID = function (data) {
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        Name: item.Name,
                        UserID: item.UserID,
                        AllocationPercentage: item.AllocationPercentage,
                        EmpEndDate: item.EmpEndDate,
                        EmpStartDate: item.EmpStartDate,
                        TotalAllocationPercentage: item.TotalAllocationPercentage
                    });
                }
                return list;
            };
            EmpManagerService.$inject = ["$http", "$q", "$cookieStore"];
            return EmpManagerService;
        }(GCPL.Service.BaseService));
        Service.EmpManagerService = EmpManagerService;
        app.AddService("EmpManagerService", EmpManagerService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Insert
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var InsertEmpManagerService = /** @class */ (function (_super) {
            __extends(InsertEmpManagerService, _super);
            function InsertEmpManagerService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "InsertTSApprovers";
                return _this;
            }
            InsertEmpManagerService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            InsertEmpManagerService.prototype.PostEmpManagerMaster = function (data) {
                var url = this.apiUrl;
                // console.log(url);
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            InsertEmpManagerService.$inject = ["$http", "$q"];
            return InsertEmpManagerService;
        }(GCPL.Service.BaseService));
        Service.InsertEmpManagerService = InsertEmpManagerService;
        app.AddService("InsertEmpManagerService", InsertEmpManagerService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Edit
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var TSApproverEditService = /** @class */ (function (_super) {
            __extends(TSApproverEditService, _super);
            function TSApproverEditService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "TSApproverEditctrl";
                return _this;
            }
            TSApproverEditService.prototype.Find = function (data) {
                debugger;
                var config = {
                    params: {
                        TSApproverID: data
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            TSApproverEditService.prototype.GetEdit = function (data) {
                var obj = new model.InsertEmpManager();
                obj.EmployeeID = data.EmployeeID;
                obj.EmployeeName = data.EmployeeName;
                obj.ManagerID = data.ManagerID;
                obj.ManagerName = data.ManagerName;
                obj.ProjectNameID = data.ProjectNameID;
                obj.Status = data.Status;
                obj.TSApproverID = data.ApprovedID;
                return obj;
            };
            TSApproverEditService.$inject = ["$http", "$q"];
            return TSApproverEditService;
        }(GCPL.Service.BaseService));
        Service.TSApproverEditService = TSApproverEditService;
        app.AddService("TSApproverEditService", TSApproverEditService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Delete
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var DeleteEmpManagerService = /** @class */ (function (_super) {
            __extends(DeleteEmpManagerService, _super);
            function DeleteEmpManagerService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "ProjectAllocationDelete";
                return _this;
            }
            DeleteEmpManagerService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            DeleteEmpManagerService.prototype.PostEmpDeleteMaster = function (data) {
                var url = this.apiUrl;
                // console.log(url);
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            DeleteEmpManagerService.$inject = ["$http", "$q"];
            return DeleteEmpManagerService;
        }(GCPL.Service.BaseService));
        Service.DeleteEmpManagerService = DeleteEmpManagerService;
        app.AddService("DeleteEmpManagerService", DeleteEmpManagerService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=EmpManagerAdminService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var TSApproverGridView = /** @class */ (function () {
            function TSApproverGridView() {
            }
            return TSApproverGridView;
        }());
        Model.TSApproverGridView = TSApproverGridView;
        var TotalAllocationGrid = /** @class */ (function () {
            function TotalAllocationGrid() {
            }
            return TotalAllocationGrid;
        }());
        Model.TotalAllocationGrid = TotalAllocationGrid;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSApproverListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var TSApproverListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function TSApproverListController(_TSApproverListTypeService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.TSApproverGridView = null;
                    this.DealerID = null;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.Cookie = null;
                    this.TSApproverListTypeService = _TSApproverListTypeService;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.TSApproverGridView = Array();
                }
                TSApproverListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                TSApproverListController.prototype.Init = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                TSApproverListController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.TSApproverGridView = this.TSApproverListTypeService.FindTSApproverListStatus(this.DealerID).then((function (response) {
                        _this.TSApproverGridView = _this.TSApproverListTypeService.GetTSApproverListStatus(response.data.Result);
                        _this.TSApproverGridView.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.TSApproverGridView.slice(0, that.numRecords);
                    }));
                };
                TSApproverListController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TSApproverGridView.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                TSApproverListController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TSApproverGridView.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                TSApproverListController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                TSApproverListController.$inject = ["TSApproverListTypeService", "$cookieStore"];
                return TSApproverListController;
            }());
            var TSApproverListComponentController = /** @class */ (function () {
                function TSApproverListComponentController() {
                    this.controller = TSApproverListController;
                    this.templateUrl = "/Scripts/App/TSApproverList/Template/_TSApproverList.html";
                }
                TSApproverListComponentController.Name = "tsapproverlistcomponent";
                return TSApproverListComponentController;
            }());
            app.AddComponent(TSApproverListComponentController.Name, new TSApproverListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=TSApproverListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var TSApproverListController = /** @class */ (function (_super) {
            __extends(TSApproverListController, _super);
            function TSApproverListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TSApproverListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.TSApproverListController = TSApproverListController;
        app.AddController("TSApproverListController", TSApproverListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSApproverListController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var TSApproverListTypeService = /** @class */ (function (_super) {
            __extends(TSApproverListTypeService, _super);
            function TSApproverListTypeService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            TSApproverListTypeService.prototype.FindTSApproverListStatus = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/TSApproverShow",
                    Config: config
                });
            };
            TSApproverListTypeService.prototype.FindTotalAllocation = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/TotalAllocationCalc",
                    Config: config
                });
            };
            TSApproverListTypeService.prototype.GetTSApproverListStatus = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        EmployeeName: item.EmployeeName,
                        ManagerName: item.ManagerName,
                        ProjectName: item.ProjectName,
                        TSApproverID: item.TSApproverID,
                        Status: item.Status,
                        AllocationPercentage: item.AllocationPercentage,
                        EmpEndDate: item.EmpEndDate,
                        EmployeeID: item.EmployeeID,
                        EmpStartDate: item.EmpStartDate,
                        TotalAllocationPercentage: item.TotalAllocationPercentage,
                        ProjectEndDate: item.ProjectEndDate
                    });
                }
                return list;
            };
            TSApproverListTypeService.prototype.GetTotalAllocation = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        EmployeeID: item.EmployeeID,
                        TotalAllocationPercentage: item.TotalAllocationPercentage
                    });
                }
                return list;
            };
            TSApproverListTypeService.$inject = ["$http", "$q", "$cookieStore"];
            return TSApproverListTypeService;
        }(GCPL.Service.BaseService));
        Service.TSApproverListTypeService = TSApproverListTypeService;
        app.AddService("TSApproverListTypeService", TSApproverListTypeService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSApproverListService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var ITSReportListGridService = /** @class */ (function () {
            function ITSReportListGridService() {
            }
            return ITSReportListGridService;
        }());
        Model.ITSReportListGridService = ITSReportListGridService;
        var TSSearchReportListmodel = /** @class */ (function () {
            function TSSearchReportListmodel() {
            }
            return TSSearchReportListmodel;
        }());
        Model.TSSearchReportListmodel = TSSearchReportListmodel;
        var TSUserStatus = /** @class */ (function () {
            function TSUserStatus() {
            }
            return TSUserStatus;
        }());
        Model.TSUserStatus = TSUserStatus;
        var TSProjectStatus = /** @class */ (function () {
            function TSProjectStatus() {
            }
            return TSProjectStatus;
        }());
        Model.TSProjectStatus = TSProjectStatus;
        var TSProjectTypeStatus = /** @class */ (function () {
            function TSProjectTypeStatus() {
            }
            return TSProjectTypeStatus;
        }());
        Model.TSProjectTypeStatus = TSProjectTypeStatus;
        var TSTimesheetTaskGridView = /** @class */ (function () {
            function TSTimesheetTaskGridView() {
            }
            return TSTimesheetTaskGridView;
        }());
        Model.TSTimesheetTaskGridView = TSTimesheetTaskGridView;
        var TSTaskStatusGridView = /** @class */ (function () {
            function TSTaskStatusGridView() {
            }
            return TSTaskStatusGridView;
        }());
        Model.TSTaskStatusGridView = TSTaskStatusGridView;
        var TSInsertProjectTask = /** @class */ (function () {
            function TSInsertProjectTask() {
            }
            return TSInsertProjectTask;
        }());
        Model.TSInsertProjectTask = TSInsertProjectTask;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSReportModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var TSReportcallmodel = GCPL.Model.TSSearchReportListmodel;
            var TimeSheetController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function TimeSheetController(_service, _cookieStore, _EmployeeNameAutoService, _ProjectNameAutoService, _ClientNameService, _TSCreateProjectService, _TSTimesheetTaskService, _TSTaskTypeService, _UserNameService) {
                    this._cookieStore = _cookieStore;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.UserName = null;
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.DealerID = null;
                    this.Cookie = null;
                    this.GetProjectStatus = null;
                    this.GetProjectType = null;
                    this.GetTaskName = null;
                    this.showProjectTask = null;
                    this.GetTaskType = null;
                    this.TSReportDataList = null;
                    this.InsertProjectTask = null;
                    this.TSReportDataSerachA = null;
                    this.Service = _service;
                    this.Cookie = _cookieStore;
                    this.EmployeeNameService = _EmployeeNameAutoService;
                    this.ProjectNameService = _ProjectNameAutoService;
                    this.ClientNameService = _ClientNameService;
                    this.TSCreateProjectService = _TSCreateProjectService;
                    this.TSTimesheetTaskService = _TSTimesheetTaskService;
                    this.TSTaskTypeService = _TSTaskTypeService;
                    this.TSReportDataSerachA = new TSReportcallmodel();
                    this.UserNameService = _UserNameService;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                TimeSheetController.prototype.$onInit = function () {
                    this.Init();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                TimeSheetController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                TimeSheetController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                TimeSheetController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    //$("#txtEmployeeName").autocomplete({
                    //    source: function (request, res) {
                    //        that.EmployeeNameService.FilterAutoComplete(request).then((response => {
                    //            let data = that.EmployeeNameService.GetEmployeeName(response.data.Result);
                    //            res($.map(data, function (item, index) {
                    //                return {
                    //                    label: item.EmployeeName,
                    //                    value: item.EmployeeName,
                    //                    id: item.EmployeeID,
                    //                }
                    //            }));
                    //        }));
                    //    },
                    //    minLength: 2,
                    //    focus: (event, ui) => {
                    //        event.preventDefault();
                    //    },
                    //    select: function (e, ui) {
                    //        console.log(ui.item.id);
                    //        let EmployeeID = ui.item.id;
                    //        //that.ShowEmpCode(UserID);  /*use for textchange*/
                    //        //console.log(ui.item.UserID);
                    //        //let SelectedUserID = ui.item.UserID;
                    //        //that.ShowEmpCode(ui.item.UserID);
                    //        this.EmployeeID = ui.item.id;
                    //    },
                    //    change: function () {
                    //    }
                    //});
                    $("#txtUserName").autocomplete({
                        source: function (request, res) {
                            that.UserNameService.FilterAutoComplete(request).then((function (response) {
                                var data = that.UserNameService.GetUserName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Name,
                                        value: item.Name,
                                        id: item.UserID,
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            console.log(ui.item.id);
                            var UserID = ui.item.id;
                            //that.ShowEmpCode(UserID);  /*use for textchange*/
                            //console.log(ui.item.UserID);
                            //let SelectedUserID = ui.item.UserID;
                            //that.ShowEmpCode(ui.item.UserID);
                            this.UserID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    $("#txtProjectName").autocomplete({
                        source: function (request, res) {
                            that.ProjectNameService.FilterAutoComplete(request).then((function (response) {
                                var data = that.ProjectNameService.GetProjectName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.ProjectName,
                                        value: item.ProjectName,
                                        id: item.ProjectHeaderID,
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            console.log(ui.item.id);
                            var ProjectHeaderID = ui.item.id;
                            //that.ShowEmpCode(UserID);  /*use for textchange*/
                            //console.log(ui.item.UserID);
                            //let SelectedUserID = ui.item.UserID;
                            //that.ShowEmpCode(ui.item.UserID);
                            this.ProjectHeaderID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    $("#txtClientName").autocomplete({
                        source: function (request, res) {
                            that.ClientNameService.FilterAutoComplete(request).then((function (response) {
                                var data = that.ClientNameService.GetClientName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.ClientName,
                                        value: item.ClientName,
                                        id: item.ClientNo,
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            console.log(ui.item.id);
                            var ClientNo = ui.item.id;
                            //that.ShowEmpCode(UserID);  /*use for textchange*/
                            //console.log(ui.item.UserID);
                            //let SelectedUserID = ui.item.UserID;
                            //that.ShowEmpCode(ui.item.UserID);
                            this.ClientNo = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    this.TSCreateProjectService.FindProjectStatus().then((function (response) {
                        _this.GetProjectStatus = _this.TSCreateProjectService.GetProjectStatus(response.data.Result);
                    }));
                    this.TSCreateProjectService.FindProjectType().then((function (response) {
                        _this.GetProjectType = _this.TSCreateProjectService.GetProjectType(response.data.Result);
                    }));
                    debugger;
                    this.TSTimesheetTaskService.FindTimesheetTaskStatus(this.DealerID).then((function (response) {
                        _this.GetTaskName = _this.TSTimesheetTaskService.GetTimesheetTaskStatus(response.data.Result);
                        _this.showProjectTask = _this.GetTaskName.TaskName;
                    }));
                    this.TSTaskTypeService.FindTaskStatus(this.DealerID).then((function (response) {
                        _this.GetTaskType = _this.TSTaskTypeService.GetTaskStatus(response.data.Result);
                    }));
                };
                TimeSheetController.prototype.Search = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                    // $("#txtFromDate").val();
                };
                TimeSheetController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.TSReportDataSerachA.FromDate = document.getElementById("txtFromDate").value;
                    this.TSReportDataSerachA.ToDate = document.getElementById("txtToDate").value;
                    //this.SCListSerachA.status = this.Status;
                    //this.SCListSerachA.status = this.SCStatus;
                    this.TSReportDataList = this.Service.Find(this.TSReportDataSerachA).then((function (response) {
                        _this.TSReportDataList = _this.Service.GetTSReportDataGrid(response.data.Result);
                        _this.TSReportDataList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.TSReportDataList.slice(0, that.numRecords);
                    }));
                };
                TimeSheetController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                TimeSheetController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TSReportDataList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                TimeSheetController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TSReportDataList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                TimeSheetController.prototype.Clear = function () {
                    debugger;
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    document.getElementById("txtProjectName").value = "";
                    document.getElementById("txtUserName").value = "";
                    document.getElementById("txtClientName").value = "";
                    this.shownItems = null;
                    this.TSReportDataSerachA = null;
                    this.TSReportDataList = null;
                    this.Search();
                };
                TimeSheetController.$inject = ["TSReportGridService", "$cookieStore", "EmployeeNameService", "ProjectNameService",
                    "ClientNameService", "TSCreateProjectService", "TSTimesheetTaskService", "TSTaskTypeService", "UserNameService"];
                return TimeSheetController;
            }());
            var TimeSheetComponentController = /** @class */ (function () {
                function TimeSheetComponentController() {
                    this.controller = TimeSheetController;
                    this.templateUrl = "/Scripts/App/Reports/TSReport/Template/_TSReport.html";
                }
                TimeSheetComponentController.Name = "tsreportcomponent";
                return TimeSheetComponentController;
            }());
            app.AddComponent(TimeSheetComponentController.Name, new TimeSheetComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSReportComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var TimeSheetController = /** @class */ (function (_super) {
            __extends(TimeSheetController, _super);
            function TimeSheetController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TimeSheetController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.TimeSheetController = TimeSheetController;
        app.AddController("TimeSheetController", TimeSheetController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSReportController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var TSReportGridService = /** @class */ (function (_super) {
            __extends(TSReportGridService, _super);
            function TSReportGridService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.Cookie = null;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            TSReportGridService.prototype.Find = function (data) {
                // console.log(this.apiUrl + `/FillWorkOrderSearchGrid`);
                var DealerID;
                var ProjectName;
                var ProjectStatus;
                var ProjectType;
                var TaskName;
                var TaskType;
                var UserName;
                var ClientName;
                var FromDate;
                var ToDate;
                if (data.DealerID != undefined && data.DealerID != null) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = '';
                }
                if (data.ProjectName != undefined && data.ProjectName != null) {
                    ProjectName = data.ProjectName;
                }
                else {
                    ProjectName = '';
                }
                if (data.ProjectStatus != undefined && data.ProjectStatus != null) {
                    ProjectStatus = data.ProjectStatus;
                }
                else {
                    ProjectStatus = '';
                }
                if (data.ProjectType != undefined && data.ProjectType != null) {
                    ProjectType = data.ProjectType;
                }
                else {
                    ProjectType = '';
                }
                if (data.TaskName != undefined && data.TaskName != null) {
                    TaskName = data.TaskName;
                }
                else {
                    TaskName = '';
                }
                if (data.TaskType != undefined && data.TaskType != null) {
                    TaskType = data.TaskType;
                }
                else {
                    TaskType = '';
                }
                if (data.UserName != undefined && data.UserName != null) {
                    UserName = data.UserName;
                }
                else {
                    UserName = '';
                }
                if (data.ClientName != undefined && data.ClientName != null) {
                    ClientName = data.ClientName;
                }
                else {
                    ClientName = '';
                }
                if (data.FromDate != undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = '';
                }
                if (data.ToDate != undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                console.log(this.apiUrl + "/TSReport");
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        ProjectName: ProjectName,
                        ProjectStatus: ProjectStatus,
                        ProjectType: ProjectType,
                        TaskName: TaskName,
                        TaskType: TaskType,
                        UserName: UserName,
                        ClientName: ClientName,
                        FromDate: FromDate,
                        ToDate: ToDate
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    //+ `/${"FillWorkOrderSearchGrid"}`
                    Url: this.apiUrl + "/TSReport",
                    Config: config
                });
            };
            TSReportGridService.prototype.GetTSReportDataGrid = function (data) {
                console.log(data);
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        DealerID: item.DealerID,
                        UserName: item.UserName,
                        ProjectName: item.ProjectName,
                        ProjectStatus: item.ProjectStatus,
                        ProjectType: item.ProjectType,
                        ClientName: item.ClientName,
                        TaskName: item.TaskName,
                        TaskType: item.TaskType,
                        Date: item.Date,
                        StartTime: item.StartTime,
                        EndTime: item.EndTime,
                        TaskTime: item.TaskTime,
                        TSStatus: item.TSStatus
                    });
                }
                return list;
            };
            TSReportGridService.$inject = ["$http", "$q", "$cookieStore"];
            return TSReportGridService;
        }(GCPL.Service.BaseService));
        Service.TSReportGridService = TSReportGridService;
        //inject service
        app.AddService("TSReportGridService", TSReportGridService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//EmployeeName(UserName) AutoFill
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var EmployeeNameService = /** @class */ (function (_super) {
            __extends(EmployeeNameService, _super);
            function EmployeeNameService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/" + "GetEmployeeNameAutoFill";
                _this.Cookie = _cookieStore;
                return _this;
            }
            EmployeeNameService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            EmployeeNameService.prototype.FilterAutoComplete = function (data) {
                var url = this.apiUrl + "/GetEmployeeNameAutoFill";
                var config = {
                    params: {
                        EmployeeName: data.term,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            EmployeeNameService.prototype.GetEmployeeName = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        EmployeeID: item.EmployeeID,
                        EmployeeName: item.Name,
                    });
                }
                console.log(list);
                return list;
            };
            EmployeeNameService.$inject = ["$http", "$q", "$cookieStore"];
            return EmployeeNameService;
        }(GCPL.Service.BaseService));
        Service.EmployeeNameService = EmployeeNameService;
        //inject service
        app.AddService("EmployeeNameService", EmployeeNameService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//ProjectName AutoFill
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var ProjectNameService = /** @class */ (function (_super) {
            __extends(ProjectNameService, _super);
            function ProjectNameService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/" + "GetProjectNameAutoFill";
                _this.Cookie = _cookieStore;
                return _this;
            }
            ProjectNameService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            ProjectNameService.prototype.FilterAutoComplete = function (data) {
                var url = this.apiUrl + "/GetProjectNameAutoFill";
                var config = {
                    params: {
                        ProjectName: data.term,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            ProjectNameService.prototype.GetProjectName = function (data) {
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        ProjectHeaderID: item.ProjectHeaderID,
                        ProjectName: item.ProjectName,
                    });
                }
                console.log(list);
                return list;
            };
            ProjectNameService.$inject = ["$http", "$q", "$cookieStore"];
            return ProjectNameService;
        }(GCPL.Service.BaseService));
        Service.ProjectNameService = ProjectNameService;
        //inject service
        app.AddService("ProjectNameService", ProjectNameService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//ClientName AutoFill
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var ClientNameService = /** @class */ (function (_super) {
            __extends(ClientNameService, _super);
            function ClientNameService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/" + "GetClientNameAutoFill";
                _this.Cookie = _cookieStore;
                return _this;
            }
            ClientNameService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            ClientNameService.prototype.FilterAutoComplete = function (data) {
                var url = this.apiUrl + "/GetClientNameAutoFill";
                var config = {
                    params: {
                        ClientName: data.term,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            ClientNameService.prototype.GetClientName = function (data) {
                var list = Array();
                for (var _i = 0, data_4 = data; _i < data_4.length; _i++) {
                    var item = data_4[_i];
                    list.push({
                        ClientNo: item.ClientNo,
                        ClientName: item.ClientName,
                    });
                }
                console.log(list);
                return list;
            };
            ClientNameService.$inject = ["$http", "$q", "$cookieStore"];
            return ClientNameService;
        }(GCPL.Service.BaseService));
        Service.ClientNameService = ClientNameService;
        //inject service
        app.AddService("ClientNameService", ClientNameService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//ProjectStatus 
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var TSCreateProjectService = /** @class */ (function (_super) {
            __extends(TSCreateProjectService, _super);
            function TSCreateProjectService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            TSCreateProjectService.prototype.FindProjectStatus = function () {
                var config = {
                    params: {
                        ObjectName: 'Project',
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/TSStatusDDL",
                    Config: config
                });
            };
            TSCreateProjectService.prototype.GetProjectStatus = function (data) {
                var list = Array();
                for (var _i = 0, data_5 = data; _i < data_5.length; _i++) {
                    var item = data_5[_i];
                    list.push({
                        Status: item.Status,
                        TSObjectName: item.TSObjectName,
                        TSStatusID: item.TSStatusID
                    });
                }
                return list;
            };
            TSCreateProjectService.prototype.FindProjectType = function () {
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/ProjectTypeDDL",
                    Config: config
                });
            };
            TSCreateProjectService.prototype.GetProjectType = function (data) {
                var list = Array();
                for (var _i = 0, data_6 = data; _i < data_6.length; _i++) {
                    var item = data_6[_i];
                    list.push({
                        ProjectType: item.ProjectType,
                        ProjectTypeID: item.ProjectTypeID
                    });
                }
                return list;
            };
            TSCreateProjectService.prototype.FindUsername = function () {
                var config = {
                    params: {
                        UserID: this.Cookie.get('UserInfo')['UserID'],
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/CreatedByUser",
                    Config: config
                });
            };
            TSCreateProjectService.prototype.GetUsername = function (data) {
                var list = Array();
                for (var _i = 0, data_7 = data; _i < data_7.length; _i++) {
                    var item = data_7[_i];
                    list.push({
                        Name: item.Name,
                        UserID: item.UserID
                    });
                }
                return list;
            };
            TSCreateProjectService.$inject = ["$http", "$q", "$cookieStore"];
            return TSCreateProjectService;
        }(GCPL.Service.BaseService));
        Service.TSCreateProjectService = TSCreateProjectService;
        app.AddService("TSCreateProjectService", TSCreateProjectService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//TaskNameService
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var TSTimesheetTaskService = /** @class */ (function (_super) {
            __extends(TSTimesheetTaskService, _super);
            function TSTimesheetTaskService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            TSTimesheetTaskService.prototype.FindTimesheetTaskStatus = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/TimesheetTaskShow",
                    Config: config
                });
            };
            TSTimesheetTaskService.prototype.GetTimesheetTaskStatus = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_8 = data; _i < data_8.length; _i++) {
                    var item = data_8[_i];
                    list.push({
                        CreatedBy: item.CreatedBy,
                        ProjectCode: item.ProjectCode,
                        ProjectName: item.ProjectName,
                        TaskCode: item.TaskCode,
                        TaskName: item.TaskName,
                        TaskType: item.TaskType,
                        TimesheetTaskID: item.TimesheetTaskID
                    });
                }
                return list;
            };
            TSTimesheetTaskService.$inject = ["$http", "$q", "$cookieStore"];
            return TSTimesheetTaskService;
        }(GCPL.Service.BaseService));
        Service.TSTimesheetTaskService = TSTimesheetTaskService;
        app.AddService("TSTimesheetTaskService", TSTimesheetTaskService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//TaskTypeService
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var TSTaskTypeService = /** @class */ (function (_super) {
            __extends(TSTaskTypeService, _super);
            function TSTaskTypeService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            TSTaskTypeService.prototype.FindTaskStatus = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/TaskTypeShow",
                    Config: config
                });
            };
            TSTaskTypeService.prototype.GetTaskStatus = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_9 = data; _i < data_9.length; _i++) {
                    var item = data_9[_i];
                    list.push({
                        IsActive: item.IsActive,
                        Description: item.Description,
                        TaskType: item.TaskType,
                        TaskTypeID: item.TaskTypeID,
                        SrNo: item.SrNo,
                        Billable: item.Billable
                    });
                }
                return list;
            };
            TSTaskTypeService.$inject = ["$http", "$q", "$cookieStore"];
            return TSTaskTypeService;
        }(GCPL.Service.BaseService));
        Service.TSTaskTypeService = TSTaskTypeService;
        app.AddService("TSTaskTypeService", TSTaskTypeService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSReportService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var ITimeSheetSummaryGridmodel = /** @class */ (function () {
            function ITimeSheetSummaryGridmodel() {
            }
            return ITimeSheetSummaryGridmodel;
        }());
        Model.ITimeSheetSummaryGridmodel = ITimeSheetSummaryGridmodel;
        var TimeSheetSummaryProjectGridmodel = /** @class */ (function () {
            function TimeSheetSummaryProjectGridmodel() {
            }
            return TimeSheetSummaryProjectGridmodel;
        }());
        Model.TimeSheetSummaryProjectGridmodel = TimeSheetSummaryProjectGridmodel;
        var TimeSheetSummaryProjectTypeGridmodel = /** @class */ (function () {
            function TimeSheetSummaryProjectTypeGridmodel() {
            }
            return TimeSheetSummaryProjectTypeGridmodel;
        }());
        Model.TimeSheetSummaryProjectTypeGridmodel = TimeSheetSummaryProjectTypeGridmodel;
        var TimeSheetSummaryClientGridmodel = /** @class */ (function () {
            function TimeSheetSummaryClientGridmodel() {
            }
            return TimeSheetSummaryClientGridmodel;
        }());
        Model.TimeSheetSummaryClientGridmodel = TimeSheetSummaryClientGridmodel;
        var TimeSheetSummarySearchmodel = /** @class */ (function () {
            function TimeSheetSummarySearchmodel() {
            }
            return TimeSheetSummarySearchmodel;
        }());
        Model.TimeSheetSummarySearchmodel = TimeSheetSummarySearchmodel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSSummaryReportModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var TimeSummaryReportcallmodel = GCPL.Model.TimeSheetSummarySearchmodel;
            var TimeSheetSummaryController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function TimeSheetSummaryController(_service, _cookieStore, _UserNameService, _ProjectNameAutoService, _ClientNameService, __TSCreateProjectService) {
                    this._cookieStore = _cookieStore;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.shownItems2 = [];
                    this.shownItems3 = [];
                    this.shownItems4 = [];
                    this.UserName = null;
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.ShowNext2 = false;
                    this.ShowBack2 = false;
                    this.ShowNext3 = false;
                    this.ShowBack3 = false;
                    this.ShowNext4 = false;
                    this.ShowBack4 = false;
                    this.NoOfRds = "10";
                    this.DealerID = null;
                    this.Cookie = null;
                    this.GetProjectType = null;
                    this.TimeSheetSummaryList = null;
                    this.TimeSheetSummaryProjectList = null;
                    this.TimeSheetSummaryProjectTypeList = null;
                    this.TimeSheetSummaryClientList = null;
                    this.Service = _service;
                    this.Cookie = _cookieStore;
                    this.UserNameService = _UserNameService;
                    this.ProjectNameService = _ProjectNameAutoService;
                    this.ClientNameService = _ClientNameService;
                    this.TSCreateProjectService = __TSCreateProjectService;
                    this.TimeSheetSummaryDataSerach = new TimeSummaryReportcallmodel();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                TimeSheetSummaryController.prototype.$onInit = function () {
                    this.Init();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                TimeSheetSummaryController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                TimeSheetSummaryController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                TimeSheetSummaryController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtUserName").autocomplete({
                        source: function (request, res) {
                            that.UserNameService.FilterAutoComplete(request).then((function (response) {
                                var data = that.UserNameService.GetUserName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Name,
                                        value: item.Name,
                                        id: item.UserID,
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            console.log(ui.item.id);
                            var UserID = ui.item.id;
                            //that.ShowEmpCode(UserID);  /*use for textchange*/
                            //console.log(ui.item.UserID);
                            //let SelectedUserID = ui.item.UserID;
                            //that.ShowEmpCode(ui.item.UserID);
                            that.TimeSheetSummaryDataSerach.UserName = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    $("#txtProjectName").autocomplete({
                        source: function (request, res) {
                            that.ProjectNameService.FilterAutoComplete(request).then((function (response) {
                                var data = that.ProjectNameService.GetProjectName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.ProjectName,
                                        value: item.ProjectName,
                                        id: item.ProjectHeaderID,
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            console.log(ui.item.id);
                            var ProjectHeaderID = ui.item.id;
                            //that.ShowEmpCode(UserID);  /*use for textchange*/
                            //console.log(ui.item.UserID);
                            //let SelectedUserID = ui.item.UserID;
                            //that.ShowEmpCode(ui.item.UserID);
                            that.TimeSheetSummaryDataSerach.ProjectName = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    $("#txtClientName").autocomplete({
                        source: function (request, res) {
                            that.ClientNameService.FilterAutoComplete(request).then((function (response) {
                                var data = that.ClientNameService.GetClientName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.ClientName,
                                        value: item.ClientName,
                                        id: item.ClientNo,
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            console.log(ui.item.id);
                            var ClientNo = ui.item.id;
                            //that.ShowEmpCode(UserID);  /*use for textchange*/
                            //console.log(ui.item.UserID);
                            //let SelectedUserID = ui.item.UserID;
                            //that.ShowEmpCode(ui.item.UserID);
                            that.TimeSheetSummaryDataSerach.ClientName = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    this.TSCreateProjectService.FindProjectType().then((function (response) {
                        _this.GetProjectType = _this.TSCreateProjectService.GetProjectType(response.data.Result);
                    }));
                };
                TimeSheetSummaryController.prototype.Search = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid1(this.numRecords);
                    this.FillGrid2(this.numRecords);
                    this.FillGrid3(this.numRecords);
                    this.FillGrid4(this.numRecords);
                    //this.TimeSheetSummaryProjectList = this.Service.FindProject(this.TimeSheetSummaryDataSerach).then((response => {
                    //    this.TimeSheetSummaryProjectList = this.Service.GetTimeSheetSummaryProjectGrid(response.data.Result);
                    //    // this.ServiceTechAvgDataList.forEach(function (value, key) {
                    //}));
                    //this.TimeSheetSummaryProjectTypeList = this.Service.FindProjectType(this.TimeSheetSummaryDataSerach).then((response => {
                    //    this.TimeSheetSummaryProjectTypeList = this.Service.GetTimeSheetSummaryProjectTypeGrid(response.data.Result);
                    //    // this.ServiceTechAvgDataList.forEach(function (value, key) {
                    //}));
                    //this.TimeSheetSummaryClientList = this.Service.FindClient(this.TimeSheetSummaryDataSerach).then((response => {
                    //    this.TimeSheetSummaryClientList = this.Service.GetTimeSheetSummaryClientGrid(response.data.Result);
                    //    // this.ServiceTechAvgDataList.forEach(function (value, key) {
                    //}));
                };
                TimeSheetSummaryController.prototype.FillGrid1 = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.TimeSheetSummaryDataSerach.FromDate = document.getElementById("txtFromDate").value;
                    this.TimeSheetSummaryDataSerach.ToDate = document.getElementById("txtToDate").value;
                    //this.SCListSerachA.status = this.Status;
                    //this.SCListSerachA.status = this.SCStatus;
                    this.TimeSheetSummaryList = this.Service.Find(this.TimeSheetSummaryDataSerach).then((function (response) {
                        _this.TimeSheetSummaryList = _this.Service.GetTSummaryReportDataGrid(response.data.Result);
                        _this.TimeSheetSummaryList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.TimeSheetSummaryList.slice(0, that.numRecords);
                    }));
                };
                TimeSheetSummaryController.prototype.Refresh1 = function () {
                    this.FillGrid1(this.NoOfRds);
                    this.Search();
                };
                TimeSheetSummaryController.prototype.next1 = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TimeSheetSummaryList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                TimeSheetSummaryController.prototype.back1 = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TimeSheetSummaryList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                TimeSheetSummaryController.prototype.FillGrid2 = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.TimeSheetSummaryDataSerach.FromDate = document.getElementById("txtFromDate").value;
                    this.TimeSheetSummaryDataSerach.ToDate = document.getElementById("txtToDate").value;
                    //this.SCListSerachA.status = this.Status;
                    //this.SCListSerachA.status = this.SCStatus;
                    this.TimeSheetSummaryProjectList = this.Service.FindProject(this.TimeSheetSummaryDataSerach).then((function (response) {
                        _this.TimeSheetSummaryProjectList = _this.Service.GetTimeSheetSummaryProjectGrid(response.data.Result);
                        _this.TimeSheetSummaryProjectList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack2 = false;
                        _this.ShowNext2 = that.maxPages > 1 ? true : false;
                        _this.shownItems2 = _this.TimeSheetSummaryProjectList.slice(0, that.numRecords);
                    }));
                };
                TimeSheetSummaryController.prototype.Refresh2 = function () {
                    this.FillGrid2(this.NoOfRds);
                    this.Search();
                };
                TimeSheetSummaryController.prototype.next2 = function () {
                    this.ShowBack2 = true;
                    this.ShowNext2 = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems2 = this.TimeSheetSummaryProjectList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext2 = false;
                    }
                };
                ;
                TimeSheetSummaryController.prototype.back2 = function () {
                    this.ShowBack2 = true;
                    this.ShowNext2 = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems2 = this.TimeSheetSummaryProjectList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack2 = false;
                    }
                };
                ;
                TimeSheetSummaryController.prototype.FillGrid3 = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.TimeSheetSummaryDataSerach.FromDate = document.getElementById("txtFromDate").value;
                    this.TimeSheetSummaryDataSerach.ToDate = document.getElementById("txtToDate").value;
                    //this.SCListSerachA.status = this.Status;
                    //this.SCListSerachA.status = this.SCStatus;
                    this.TimeSheetSummaryProjectTypeList = this.Service.FindProjectType(this.TimeSheetSummaryDataSerach).then((function (response) {
                        _this.TimeSheetSummaryProjectTypeList = _this.Service.GetTimeSheetSummaryProjectTypeGrid(response.data.Result);
                        _this.TimeSheetSummaryProjectTypeList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems3 = _this.TimeSheetSummaryProjectTypeList.slice(0, that.numRecords);
                    }));
                };
                TimeSheetSummaryController.prototype.Refresh3 = function () {
                    this.FillGrid3(this.NoOfRds);
                    this.Search();
                };
                TimeSheetSummaryController.prototype.next3 = function () {
                    this.ShowBack3 = true;
                    this.ShowNext3 = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems3 = this.TimeSheetSummaryProjectTypeList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext3 = false;
                    }
                };
                ;
                TimeSheetSummaryController.prototype.back3 = function () {
                    this.ShowBack3 = true;
                    this.ShowNext3 = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems3 = this.TimeSheetSummaryProjectTypeList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack3 = false;
                    }
                };
                ;
                TimeSheetSummaryController.prototype.FillGrid4 = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.TimeSheetSummaryDataSerach.FromDate = document.getElementById("txtFromDate").value;
                    this.TimeSheetSummaryDataSerach.ToDate = document.getElementById("txtToDate").value;
                    //this.SCListSerachA.status = this.Status;
                    //this.SCListSerachA.status = this.SCStatus;
                    this.TimeSheetSummaryClientList = this.Service.FindClient(this.TimeSheetSummaryDataSerach).then((function (response) {
                        _this.TimeSheetSummaryClientList = _this.Service.GetTimeSheetSummaryClientGrid(response.data.Result);
                        _this.TimeSheetSummaryClientList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems4 = _this.TimeSheetSummaryClientList.slice(0, that.numRecords);
                    }));
                };
                TimeSheetSummaryController.prototype.Refresh4 = function () {
                    this.FillGrid4(this.NoOfRds);
                    this.Search();
                };
                TimeSheetSummaryController.prototype.next4 = function () {
                    this.ShowBack4 = true;
                    this.ShowNext4 = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems4 = this.TimeSheetSummaryClientList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext4 = false;
                    }
                };
                ;
                TimeSheetSummaryController.prototype.back4 = function () {
                    this.ShowBack4 = true;
                    this.ShowNext4 = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems4 = this.TimeSheetSummaryClientList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack4 = false;
                    }
                };
                ;
                TimeSheetSummaryController.prototype.Clear = function () {
                    debugger;
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    document.getElementById("txtProjectName").value = "";
                    document.getElementById("txtUserName").value = "";
                    document.getElementById("txtClientName").value = "";
                    $("#ProjectTypeSelect").val("");
                    this.TimeSheetSummaryDataSerach.ClientName = "";
                    this.TimeSheetSummaryDataSerach.ProjectName = "";
                    this.TimeSheetSummaryDataSerach.ProjectType = "";
                    this.TimeSheetSummaryDataSerach.FromDate = "";
                    this.TimeSheetSummaryDataSerach.ToDate = "";
                    this.TimeSheetSummaryDataSerach.UserName = "";
                    //this.shownItems = null;
                    //this.TimeSheetSummaryDataSerach = null;
                    //this.TimeSheetSummaryList = null;
                    //this.Search();
                    //this.Refresh();
                };
                TimeSheetSummaryController.$inject = ["TimeSheetSummaryReportGridService", "$cookieStore", "UserNameService", "ProjectNameService", "ClientNameService", "TSCreateProjectService"];
                return TimeSheetSummaryController;
            }());
            var TimeSheetSummaryComponentController = /** @class */ (function () {
                function TimeSheetSummaryComponentController() {
                    this.controller = TimeSheetSummaryController;
                    this.templateUrl = "/Scripts/App/Reports/TSSummaryReport/Template/_TSSummaryReport.html";
                }
                TimeSheetSummaryComponentController.Name = "tssummaryreportcomponent";
                return TimeSheetSummaryComponentController;
            }());
            app.AddComponent(TimeSheetSummaryComponentController.Name, new TimeSheetSummaryComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSSummaryReportComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var TimeSheetSummaryController = /** @class */ (function (_super) {
            __extends(TimeSheetSummaryController, _super);
            function TimeSheetSummaryController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TimeSheetSummaryController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.TimeSheetSummaryController = TimeSheetSummaryController;
        app.AddController("TimeSheetSummaryController", TimeSheetSummaryController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSSummaryReportController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var TimeSheetSummaryReportGridService = /** @class */ (function (_super) {
            __extends(TimeSheetSummaryReportGridService, _super);
            function TimeSheetSummaryReportGridService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.Cookie = null;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            TimeSheetSummaryReportGridService.prototype.Find = function (data) {
                // console.log(this.apiUrl + `/FillWorkOrderSearchGrid`);
                var DealerID;
                var UserName;
                var FromDate;
                var ToDate;
                var ProjectName;
                var ProjectType;
                var ClientName;
                if (data.DealerID != undefined && data.DealerID != null) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = '';
                }
                if (data.UserName != undefined && data.UserName != null) {
                    UserName = data.UserName;
                }
                else {
                    UserName = '';
                }
                if (data.FromDate != undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = '';
                }
                if (data.ToDate != undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                if (data.ProjectName != undefined && data.ProjectName != null) {
                    ProjectName = data.ProjectName;
                }
                else {
                    ProjectName = '';
                }
                if (data.ProjectType != undefined && data.ProjectType != null) {
                    ProjectType = data.ProjectType;
                }
                else {
                    ProjectType = '';
                }
                if (data.ClientName != undefined && data.ClientName != null) {
                    ClientName = data.ClientName;
                }
                else {
                    ClientName = '';
                }
                console.log(this.apiUrl + "/TSSummaryReport");
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        UserName: UserName,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        ProjectName: ProjectName,
                        ProjectType: ProjectType,
                        ClientName: ClientName
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    //+ `/${"FillWorkOrderSearchGrid"}`
                    Url: this.apiUrl + "/TSSummaryReport",
                    Config: config
                });
            };
            TimeSheetSummaryReportGridService.prototype.GetTSummaryReportDataGrid = function (data) {
                console.log(data);
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        DealerID: item.DealerID,
                        UserName: item.UserName,
                        ProjectName: item.ProjectName,
                        ProjectType: item.ProjectType,
                        ClientName: item.ClientName,
                        TotalTime: item.TotalTime,
                    });
                }
                return list;
            };
            TimeSheetSummaryReportGridService.prototype.FindProject = function (data) {
                // console.log(this.apiUrl + `/FillWorkOrderSearchGrid`);
                var DealerID;
                var UserName;
                var FromDate;
                var ToDate;
                var ProjectName;
                var ProjectType;
                var ClientName;
                if (data.DealerID != undefined && data.DealerID != null) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = '';
                }
                if (data.UserName != undefined && data.UserName != null) {
                    UserName = data.UserName;
                }
                else {
                    UserName = '';
                }
                if (data.FromDate != undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = '';
                }
                if (data.ToDate != undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                if (data.ProjectName != undefined && data.ProjectName != null) {
                    ProjectName = data.ProjectName;
                }
                else {
                    ProjectName = '';
                }
                if (data.ProjectType != undefined && data.ProjectType != null) {
                    ProjectType = data.ProjectType;
                }
                else {
                    ProjectType = '';
                }
                if (data.ClientName != undefined && data.ClientName != null) {
                    ClientName = data.ClientName;
                }
                else {
                    ClientName = '';
                }
                console.log(this.apiUrl + "/TSSummaryProject");
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        UserName: UserName,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        ProjectName: ProjectName,
                        ProjectType: ProjectType,
                        ClientName: ClientName
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    //+ `/${"FillWorkOrderSearchGrid"}`
                    Url: this.apiUrl + "/TSSummaryProject",
                    Config: config
                });
            };
            TimeSheetSummaryReportGridService.prototype.GetTimeSheetSummaryProjectGrid = function (data) {
                console.log(data);
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        DealerID: item.DealerID,
                        ProjectName: item.ProjectName,
                        ProjectType: item.ProjectType,
                        ClientName: item.ClientName,
                        TotalTime: item.TotalTime,
                    });
                }
                return list;
            };
            TimeSheetSummaryReportGridService.prototype.FindProjectType = function (data) {
                // console.log(this.apiUrl + `/FillWorkOrderSearchGrid`);
                var DealerID;
                var UserName;
                var FromDate;
                var ToDate;
                var ProjectName;
                var ProjectType;
                var ClientName;
                if (data.DealerID != undefined && data.DealerID != null) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = '';
                }
                if (data.UserName != undefined && data.UserName != null) {
                    UserName = data.UserName;
                }
                else {
                    UserName = '';
                }
                if (data.FromDate != undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = '';
                }
                if (data.ToDate != undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                if (data.ProjectName != undefined && data.ProjectName != null) {
                    ProjectName = data.ProjectName;
                }
                else {
                    ProjectName = '';
                }
                if (data.ProjectType != undefined && data.ProjectType != null) {
                    ProjectType = data.ProjectType;
                }
                else {
                    ProjectType = '';
                }
                if (data.ClientName != undefined && data.ClientName != null) {
                    ClientName = data.ClientName;
                }
                else {
                    ClientName = '';
                }
                console.log(this.apiUrl + "/TSSummaryProjectType");
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        UserName: UserName,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        ProjectName: ProjectName,
                        ProjectType: ProjectType,
                        ClientName: ClientName
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    //+ `/${"FillWorkOrderSearchGrid"}`
                    Url: this.apiUrl + "/TSSummaryProjectType",
                    Config: config
                });
            };
            TimeSheetSummaryReportGridService.prototype.GetTimeSheetSummaryProjectTypeGrid = function (data) {
                console.log(data);
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        DealerID: item.DealerID,
                        ProjectType: item.ProjectType,
                        TotalTime: item.TotalTime
                    });
                }
                return list;
            };
            TimeSheetSummaryReportGridService.prototype.FindClient = function (data) {
                // console.log(this.apiUrl + `/FillWorkOrderSearchGrid`);
                var DealerID;
                var UserName;
                var FromDate;
                var ToDate;
                var ProjectName;
                var ProjectType;
                var ClientName;
                if (data.DealerID != undefined && data.DealerID != null) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = '';
                }
                if (data.UserName != undefined && data.UserName != null) {
                    UserName = data.UserName;
                }
                else {
                    UserName = '';
                }
                if (data.FromDate != undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = '';
                }
                if (data.ToDate != undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                if (data.ProjectName != undefined && data.ProjectName != null) {
                    ProjectName = data.ProjectName;
                }
                else {
                    ProjectName = '';
                }
                if (data.ProjectType != undefined && data.ProjectType != null) {
                    ProjectType = data.ProjectType;
                }
                else {
                    ProjectType = '';
                }
                if (data.ClientName != undefined && data.ClientName != null) {
                    ClientName = data.ClientName;
                }
                else {
                    ClientName = '';
                }
                console.log(this.apiUrl + "/TSSummaryClient");
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        UserName: UserName,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        ProjectName: ProjectName,
                        ProjectType: ProjectType,
                        ClientName: ClientName
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    //+ `/${"FillWorkOrderSearchGrid"}`
                    Url: this.apiUrl + "/TSSummaryClient",
                    Config: config
                });
            };
            TimeSheetSummaryReportGridService.prototype.GetTimeSheetSummaryClientGrid = function (data) {
                console.log(data);
                var list = Array();
                for (var _i = 0, data_4 = data; _i < data_4.length; _i++) {
                    var item = data_4[_i];
                    list.push({
                        DealerID: item.DealerID,
                        ClientName: item.ClientName,
                        TotalTime: item.TotalTime
                    });
                }
                return list;
            };
            TimeSheetSummaryReportGridService.$inject = ["$http", "$q", "$cookieStore"];
            return TimeSheetSummaryReportGridService;
        }(GCPL.Service.BaseService));
        Service.TimeSheetSummaryReportGridService = TimeSheetSummaryReportGridService;
        //inject service
        app.AddService("TimeSheetSummaryReportGridService", TimeSheetSummaryReportGridService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TSSummaryReportService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var TimesheetSettingsModel = /** @class */ (function () {
            function TimesheetSettingsModel() {
            }
            return TimesheetSettingsModel;
        }());
        Model.TimesheetSettingsModel = TimesheetSettingsModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TimesheetSettingsModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var TimesheetSettingsModel = GCPL.Model.TimesheetSettingsModel;
            var TimesheetSettingsController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function TimesheetSettingsController(_TimesheetSettingsService, _InsertTimesheetSettingsService) {
                    this.InsertTimesheetSettings = null;
                    this.SettingsID = null;
                    this.alert = null;
                    this.TimesheetSettingsService = _TimesheetSettingsService;
                    this.InsertTimesheetSettingsService = _InsertTimesheetSettingsService;
                    this.InsertTimesheetSettings = new TimesheetSettingsModel();
                }
                TimesheetSettingsController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                TimesheetSettingsController.prototype.Init = function () {
                    var _this = this;
                    this.SettingsID = 1;
                    this.TimesheetSettingsService.Find(this.SettingsID).then((function (response) {
                        _this.InsertTimesheetSettings = _this.TimesheetSettingsService.GetEdit(response.data.Result);
                        console.log(" Check Below");
                        console.log(_this.InsertTimesheetSettings);
                    }));
                };
                TimesheetSettingsController.prototype.UpdateSettings = function () {
                    this.InsertTimesheetSettingsService.PostTimesheetSettingsMaster(this.InsertTimesheetSettings);
                    this.alert = "Settings have been updated";
                    $("#errorclose").hide();
                    $("#close").hide();
                    setTimeout(function () { location.reload(); }, 1000);
                };
                TimesheetSettingsController.prototype.Close = function () {
                    location.href = "#!/TimesheetSettings";
                };
                TimesheetSettingsController.prototype.ErrorClose = function () {
                };
                TimesheetSettingsController.prototype.Cancel = function () {
                    location.href = "#!/Home";
                };
                TimesheetSettingsController.$inject = ["TimesheetSettingsEditService", "InsertTimesheetSettingsService"];
                return TimesheetSettingsController;
            }());
            var TimesheetSettingsComponentController = /** @class */ (function () {
                function TimesheetSettingsComponentController() {
                    this.controller = TimesheetSettingsController;
                    this.templateUrl = "/Scripts/App/Timeseet Settings/Template/_TimesheetSettings.html";
                }
                TimesheetSettingsComponentController.Name = "timesheetsettingscomponent";
                return TimesheetSettingsComponentController;
            }());
            app.AddComponent(TimesheetSettingsComponentController.Name, new TimesheetSettingsComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=TimesheetSettingsComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var TimesheetSettingsController = /** @class */ (function (_super) {
            __extends(TimesheetSettingsController, _super);
            function TimesheetSettingsController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TimesheetSettingsController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.TimesheetSettingsController = TimesheetSettingsController;
        app.AddController("TimesheetSettingsController", TimesheetSettingsController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TimesheetSettingsController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var TimesheetSettingsEditService = /** @class */ (function (_super) {
            __extends(TimesheetSettingsEditService, _super);
            function TimesheetSettingsEditService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "TimesheetSettingsEdit";
                return _this;
            }
            TimesheetSettingsEditService.prototype.Find = function (data) {
                debugger;
                var config = {
                    params: {
                        SettingsID: data
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            TimesheetSettingsEditService.prototype.GetEdit = function (data) {
                var obj = new model.TimesheetSettingsModel();
                obj.DaysInHistory = data.DaysInHistory;
                obj.MeanTimePerDay = data.MeanTimePerDay;
                obj.MaxTimePerDay = data.MaxTimePerDay;
                obj.SettingsID = data.SettingsID;
                obj.TSEntryBy = data.TSEntryBy;
                return obj;
            };
            TimesheetSettingsEditService.$inject = ["$http", "$q"];
            return TimesheetSettingsEditService;
        }(GCPL.Service.BaseService));
        Service.TimesheetSettingsEditService = TimesheetSettingsEditService;
        app.AddService("TimesheetSettingsEditService", TimesheetSettingsEditService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Update
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var InsertTimesheetSettingsService = /** @class */ (function (_super) {
            __extends(InsertTimesheetSettingsService, _super);
            function InsertTimesheetSettingsService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "UpdateTimesheetSettings";
                return _this;
            }
            InsertTimesheetSettingsService.prototype.Find = function () {
                debugger;
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            InsertTimesheetSettingsService.prototype.PostTimesheetSettingsMaster = function (data) {
                var url = this.apiUrl;
                // console.log(url);
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data
                });
            };
            InsertTimesheetSettingsService.$inject = ["$http", "$q"];
            return InsertTimesheetSettingsService;
        }(GCPL.Service.BaseService));
        Service.InsertTimesheetSettingsService = InsertTimesheetSettingsService;
        app.AddService("InsertTimesheetSettingsService", InsertTimesheetSettingsService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TimesheetSettingsService.js.map
//# sourceMappingURL=RoutingListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var RoutingListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function RoutingListController() {
                    this.IsShow = false;
                }
                RoutingListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                RoutingListController.prototype.Init = function () {
                };
                RoutingListController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                RoutingListController.$inject = [];
                return RoutingListController;
            }());
            var RoutingListComponentController = /** @class */ (function () {
                function RoutingListComponentController() {
                    this.controller = RoutingListController;
                    this.templateUrl = "/Scripts/App/Production/Routing/RoutingList/Template/_RoutingList.html";
                }
                RoutingListComponentController.Name = "routinglistcomponent";
                return RoutingListComponentController;
            }());
            app.AddComponent(RoutingListComponentController.Name, new RoutingListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=RoutingListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var RoutingListController = /** @class */ (function (_super) {
            __extends(RoutingListController, _super);
            function RoutingListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return RoutingListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.RoutingListController = RoutingListController;
        app.AddController("RoutingListController", RoutingListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=RoutingListController.js.map
//# sourceMappingURL=RoutingListService.js.map
//# sourceMappingURL=RoutingCreateModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var RoutingCreateController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function RoutingCreateController() {
                    this.IsShow = false;
                }
                RoutingCreateController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                RoutingCreateController.prototype.Init = function () {
                };
                RoutingCreateController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                RoutingCreateController.$inject = [];
                return RoutingCreateController;
            }());
            var RoutingCreateComponentController = /** @class */ (function () {
                function RoutingCreateComponentController() {
                    this.controller = RoutingCreateController;
                    this.templateUrl = "/Scripts/App/Production/Routing/RoutingCreate/Template/RoutingCreate.html";
                }
                RoutingCreateComponentController.Name = "routingcreatecomponent";
                return RoutingCreateComponentController;
            }());
            app.AddComponent(RoutingCreateComponentController.Name, new RoutingCreateComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=RoutingCreateComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var RoutingCreateController = /** @class */ (function (_super) {
            __extends(RoutingCreateController, _super);
            function RoutingCreateController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return RoutingCreateController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.RoutingCreateController = RoutingCreateController;
        app.AddController("RoutingCreateController", RoutingCreateController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=RoutingCreateController.js.map
//# sourceMappingURL=RoutingCreateService.js.map
//# sourceMappingURL=RoutingEditModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var RoutingEditController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function RoutingEditController() {
                    this.IsShow = false;
                }
                RoutingEditController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                RoutingEditController.prototype.Init = function () {
                };
                RoutingEditController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                RoutingEditController.$inject = [];
                return RoutingEditController;
            }());
            var RoutingEditComponentController = /** @class */ (function () {
                function RoutingEditComponentController() {
                    this.controller = RoutingEditController;
                    this.templateUrl = "/Scripts/App/Production/Routing/RoutingEdit/Template/_RoutingEdit.html";
                }
                RoutingEditComponentController.Name = "routingeditcomponent";
                return RoutingEditComponentController;
            }());
            app.AddComponent(RoutingEditComponentController.Name, new RoutingEditComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=RoutingEditComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var RoutingEditController = /** @class */ (function (_super) {
            __extends(RoutingEditController, _super);
            function RoutingEditController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return RoutingEditController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.RoutingEditController = RoutingEditController;
        app.AddController("RoutingEditController", RoutingEditController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=RoutingEditController.js.map
//# sourceMappingURL=RoutingEditService.js.map
//# sourceMappingURL=RoutingViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var RoutingViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function RoutingViewController() {
                    this.IsShow = false;
                }
                RoutingViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                RoutingViewController.prototype.Init = function () {
                };
                RoutingViewController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                RoutingViewController.$inject = [];
                return RoutingViewController;
            }());
            var RoutingViewComponentController = /** @class */ (function () {
                function RoutingViewComponentController() {
                    this.controller = RoutingViewController;
                    this.templateUrl = "/Scripts/App/Production/Routing/RoutingView/Template/_RoutingView.html";
                }
                RoutingViewComponentController.Name = "routingviewcomponent";
                return RoutingViewComponentController;
            }());
            app.AddComponent(RoutingViewComponentController.Name, new RoutingViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=RoutingViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var RoutingViewController = /** @class */ (function (_super) {
            __extends(RoutingViewController, _super);
            function RoutingViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return RoutingViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.RoutingViewController = RoutingViewController;
        app.AddController("RoutingViewController", RoutingViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=RoutingViewController.js.map
//# sourceMappingURL=RoutingViewService.js.map
//# sourceMappingURL=BillofMaterialsListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var BillofMaterialsListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function BillofMaterialsListController() {
                    this.byproduct = null;
                    this.IsShow = false;
                }
                BillofMaterialsListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                BillofMaterialsListController.prototype.Init = function () {
                };
                BillofMaterialsListController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                BillofMaterialsListController.prototype.desc = function () {
                    if (this.byproduct == 0) {
                        $("#ProdDesc").show();
                    }
                    else {
                        $("#ProdDesc").hide();
                    }
                };
                BillofMaterialsListController.$inject = [];
                return BillofMaterialsListController;
            }());
            var BillofMaterialsListComponentController = /** @class */ (function () {
                function BillofMaterialsListComponentController() {
                    this.controller = BillofMaterialsListController;
                    this.templateUrl = "/Scripts/App/Production/BillOfMaterial/BillofMaterialsList/Template/_BillofMaterialsList.html";
                }
                BillofMaterialsListComponentController.Name = "billofmaterialslistcomponent";
                return BillofMaterialsListComponentController;
            }());
            app.AddComponent(BillofMaterialsListComponentController.Name, new BillofMaterialsListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=BillofMaterialsListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var BillofMaterialsListController = /** @class */ (function (_super) {
            __extends(BillofMaterialsListController, _super);
            function BillofMaterialsListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return BillofMaterialsListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.BillofMaterialsListController = BillofMaterialsListController;
        app.AddController("BillofMaterialsListController", BillofMaterialsListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BillofMaterialsListController.js.map
//# sourceMappingURL=BillofMaterialsListService.js.map
//# sourceMappingURL=BillOfMaterialCreateModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var BillOfMaterialCreateController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function BillOfMaterialCreateController() {
                    this.byproduct = null;
                    this.IsShow = false;
                }
                BillOfMaterialCreateController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                BillOfMaterialCreateController.prototype.Init = function () {
                };
                BillOfMaterialCreateController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                BillOfMaterialCreateController.prototype.desc = function () {
                    if (this.byproduct == 0) {
                        $("#ProdDesc").show();
                    }
                    else {
                        $("#ProdDesc").hide();
                    }
                };
                BillOfMaterialCreateController.$inject = [];
                return BillOfMaterialCreateController;
            }());
            var BillOfMaterialCreateComponentController = /** @class */ (function () {
                function BillOfMaterialCreateComponentController() {
                    this.controller = BillOfMaterialCreateController;
                    this.templateUrl = "/Scripts/App/Production/BillOfMaterial/BillOfMaterialCreate/Template/_BillOfMaterialCreate.html";
                }
                BillOfMaterialCreateComponentController.Name = "billofmaterialcreatecomponent";
                return BillOfMaterialCreateComponentController;
            }());
            app.AddComponent(BillOfMaterialCreateComponentController.Name, new BillOfMaterialCreateComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=BillOfMaterialCreateComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var BillOfMaterialCreateController = /** @class */ (function (_super) {
            __extends(BillOfMaterialCreateController, _super);
            function BillOfMaterialCreateController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return BillOfMaterialCreateController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.BillOfMaterialCreateController = BillOfMaterialCreateController;
        app.AddController("BillOfMaterialCreateController", BillOfMaterialCreateController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BillOfMaterialCreateController.js.map
//# sourceMappingURL=BillOfMaterialCreateService.js.map
//# sourceMappingURL=BillOfMaterialsEditModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var BillOfMaterialsEditController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function BillOfMaterialsEditController() {
                    this.byproduct = null;
                    this.IsShow = false;
                }
                BillOfMaterialsEditController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                BillOfMaterialsEditController.prototype.Init = function () {
                };
                BillOfMaterialsEditController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                BillOfMaterialsEditController.prototype.desc = function () {
                    if (this.byproduct == 0) {
                        $("#ProdDesc").show();
                    }
                    else {
                        $("#ProdDesc").hide();
                    }
                };
                BillOfMaterialsEditController.$inject = [];
                return BillOfMaterialsEditController;
            }());
            var BillOfMaterialsEditComponentController = /** @class */ (function () {
                function BillOfMaterialsEditComponentController() {
                    this.controller = BillOfMaterialsEditController;
                    this.templateUrl = "/Scripts/App/Production/BillOfMaterial/BillOfMaterialsEdit/Template/_BillOfMaterialsEdit.html";
                }
                BillOfMaterialsEditComponentController.Name = "billofmaterialseditcomponent";
                return BillOfMaterialsEditComponentController;
            }());
            app.AddComponent(BillOfMaterialsEditComponentController.Name, new BillOfMaterialsEditComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=BillOfMaterialsEditComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var BillOfMaterialsEditController = /** @class */ (function (_super) {
            __extends(BillOfMaterialsEditController, _super);
            function BillOfMaterialsEditController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return BillOfMaterialsEditController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.BillOfMaterialsEditController = BillOfMaterialsEditController;
        app.AddController("BillOfMaterialsEditController", BillOfMaterialsEditController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BillOfMaterialsEditController.js.map
//# sourceMappingURL=BillOfMaterialsEditService.js.map
//# sourceMappingURL=BillOfMaterialViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var BillOfMaterialViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function BillOfMaterialViewController() {
                    this.IsShow = false;
                }
                BillOfMaterialViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                BillOfMaterialViewController.prototype.Init = function () {
                };
                BillOfMaterialViewController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                BillOfMaterialViewController.$inject = [];
                return BillOfMaterialViewController;
            }());
            var BillOfMaterialViewComponentController = /** @class */ (function () {
                function BillOfMaterialViewComponentController() {
                    this.controller = BillOfMaterialViewController;
                    this.templateUrl = "/Scripts/App/Production/BillOfMaterial/BillOfMaterialView/Template/_BillOfMaterialView.html";
                }
                BillOfMaterialViewComponentController.Name = "billofmaterialviewcomponent";
                return BillOfMaterialViewComponentController;
            }());
            app.AddComponent(BillOfMaterialViewComponentController.Name, new BillOfMaterialViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=BillOfMaterialViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var BillOfMaterialViewController = /** @class */ (function (_super) {
            __extends(BillOfMaterialViewController, _super);
            function BillOfMaterialViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return BillOfMaterialViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.BillOfMaterialViewController = BillOfMaterialViewController;
        app.AddController("BillOfMaterialViewController", BillOfMaterialViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BillOfMaterialViewController.js.map
//# sourceMappingURL=BillOfMaterialViewService.js.map
//# sourceMappingURL=ProductionOrderListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ProductionOrderListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ProductionOrderListController() {
                    this.IsShow = false;
                }
                ProductionOrderListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ProductionOrderListController.prototype.Init = function () {
                };
                ProductionOrderListController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ProductionOrderListController.$inject = [];
                return ProductionOrderListController;
            }());
            var ProductionOrderListComponentController = /** @class */ (function () {
                function ProductionOrderListComponentController() {
                    this.controller = ProductionOrderListController;
                    this.templateUrl = "/Scripts/App/Production/ProductionOrder/ProductionOrderList/Template/_ProductionOrderList.html";
                }
                ProductionOrderListComponentController.Name = "productionorderlistcomponent";
                return ProductionOrderListComponentController;
            }());
            app.AddComponent(ProductionOrderListComponentController.Name, new ProductionOrderListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=ProductionOrderListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ProductionOrderListController = /** @class */ (function (_super) {
            __extends(ProductionOrderListController, _super);
            function ProductionOrderListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProductionOrderListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ProductionOrderListController = ProductionOrderListController;
        app.AddController("ProductionOrderListController", ProductionOrderListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ProductionOrderListController.js.map
//# sourceMappingURL=ProductionOrderListService.js.map
//# sourceMappingURL=ProductionOrderCreateModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ProductionOrderCreateController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ProductionOrderCreateController() {
                    this.IsShow = false;
                }
                ProductionOrderCreateController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ProductionOrderCreateController.prototype.Init = function () {
                };
                ProductionOrderCreateController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ProductionOrderCreateController.$inject = [];
                return ProductionOrderCreateController;
            }());
            var ProductionOrderCreateComponentController = /** @class */ (function () {
                function ProductionOrderCreateComponentController() {
                    this.controller = ProductionOrderCreateController;
                    this.templateUrl = "/Scripts/App/Production/ProductionOrder/ProductionOrderCreate/Template/_ProductionOrderCreate.html";
                }
                ProductionOrderCreateComponentController.Name = "productionordercreatecomponent";
                return ProductionOrderCreateComponentController;
            }());
            app.AddComponent(ProductionOrderCreateComponentController.Name, new ProductionOrderCreateComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=ProductionOrderCreateComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ProductionOrderCreateController = /** @class */ (function (_super) {
            __extends(ProductionOrderCreateController, _super);
            function ProductionOrderCreateController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProductionOrderCreateController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ProductionOrderCreateController = ProductionOrderCreateController;
        app.AddController("ProductionOrderCreateController", ProductionOrderCreateController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ProductionOrderCreateController.js.map
//# sourceMappingURL=ProductionOrderCreateService.js.map
//# sourceMappingURL=ProductionOrderEditModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ProductionOrderEditController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ProductionOrderEditController() {
                    this.IsShow = false;
                }
                ProductionOrderEditController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ProductionOrderEditController.prototype.Init = function () {
                };
                ProductionOrderEditController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ProductionOrderEditController.$inject = [];
                return ProductionOrderEditController;
            }());
            var ProductionOrderEditComponentController = /** @class */ (function () {
                function ProductionOrderEditComponentController() {
                    this.controller = ProductionOrderEditController;
                    this.templateUrl = "/Scripts/App/Production/ProductionOrder/ProductionOrderEdit/Template/_ProductionOrderEdit.html";
                }
                ProductionOrderEditComponentController.Name = "productionordereditcomponent";
                return ProductionOrderEditComponentController;
            }());
            app.AddComponent(ProductionOrderEditComponentController.Name, new ProductionOrderEditComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=ProductionOrderEditComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ProductionOrderEditController = /** @class */ (function (_super) {
            __extends(ProductionOrderEditController, _super);
            function ProductionOrderEditController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProductionOrderEditController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ProductionOrderEditController = ProductionOrderEditController;
        app.AddController("ProductionOrderEditController", ProductionOrderEditController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ProductionOrderEditController.js.map
//# sourceMappingURL=ProductionOrderEditService.js.map
//# sourceMappingURL=ProductionOrderViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ProductionOrderViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ProductionOrderViewController() {
                    this.IsShow = false;
                }
                ProductionOrderViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ProductionOrderViewController.prototype.Init = function () {
                };
                ProductionOrderViewController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ProductionOrderViewController.$inject = [];
                return ProductionOrderViewController;
            }());
            var ProductionOrderViewComponentController = /** @class */ (function () {
                function ProductionOrderViewComponentController() {
                    this.controller = ProductionOrderViewController;
                    this.templateUrl = "/Scripts/App/Production/ProductionOrder/ProductionOrderView/Template/_ProductionOrderView.html";
                }
                ProductionOrderViewComponentController.Name = "productionorderviewcomponent";
                return ProductionOrderViewComponentController;
            }());
            app.AddComponent(ProductionOrderViewComponentController.Name, new ProductionOrderViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ProductionOrderViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ProductionOrderViewController = /** @class */ (function (_super) {
            __extends(ProductionOrderViewController, _super);
            function ProductionOrderViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProductionOrderViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ProductionOrderViewController = ProductionOrderViewController;
        app.AddController("ProductionOrderViewController", ProductionOrderViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ProductionOrderViewController.js.map
//# sourceMappingURL=ProductionOrderViewService.js.map
//# sourceMappingURL=ProductionOrderConfirmationsModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ProductionOrderConfirmationsController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ProductionOrderConfirmationsController() {
                    this.IsShow = false;
                }
                ProductionOrderConfirmationsController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ProductionOrderConfirmationsController.prototype.Init = function () {
                };
                ProductionOrderConfirmationsController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ProductionOrderConfirmationsController.$inject = [];
                return ProductionOrderConfirmationsController;
            }());
            var ProductionOrderConfirmationsComponentController = /** @class */ (function () {
                function ProductionOrderConfirmationsComponentController() {
                    this.controller = ProductionOrderConfirmationsController;
                    this.templateUrl = "/Scripts/App/Production/ProductionOrder/ProductionOrderConfirmations/Template/_ProductionOrderConfirmations.html";
                }
                ProductionOrderConfirmationsComponentController.Name = "productionorderconfirmationscomponent";
                return ProductionOrderConfirmationsComponentController;
            }());
            app.AddComponent(ProductionOrderConfirmationsComponentController.Name, new ProductionOrderConfirmationsComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=ProductionOrderConfirmationsComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ProductionOrderConfirmationsController = /** @class */ (function (_super) {
            __extends(ProductionOrderConfirmationsController, _super);
            function ProductionOrderConfirmationsController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProductionOrderConfirmationsController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ProductionOrderConfirmationsController = ProductionOrderConfirmationsController;
        app.AddController("ProductionOrderConfirmationsController", ProductionOrderConfirmationsController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ProductionOrderConfirmationsController.js.map
//# sourceMappingURL=ProductionOrderConfirmationsService.js.map
//# sourceMappingURL=ProductionOrderConfirmationsModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ProductionOrderConfirmationsController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ProductionOrderConfirmationsController() {
                    this.IsShow = false;
                }
                ProductionOrderConfirmationsController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ProductionOrderConfirmationsController.prototype.Init = function () {
                };
                ProductionOrderConfirmationsController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ProductionOrderConfirmationsController.$inject = [];
                return ProductionOrderConfirmationsController;
            }());
            var ProductionOrderConfirmationsComponentController = /** @class */ (function () {
                function ProductionOrderConfirmationsComponentController() {
                    this.controller = ProductionOrderConfirmationsController;
                    this.templateUrl = "/Scripts/App/Production/ProductionOrder/ProductionOrderConfirmations/Template/_ProductionOrderConfirmations.html";
                }
                ProductionOrderConfirmationsComponentController.Name = "productionorderconfirmationscomponent";
                return ProductionOrderConfirmationsComponentController;
            }());
            app.AddComponent(ProductionOrderConfirmationsComponentController.Name, new ProductionOrderConfirmationsComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=ProductionOrderConfirmationsComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ProductionOrderConfirmationsController = /** @class */ (function (_super) {
            __extends(ProductionOrderConfirmationsController, _super);
            function ProductionOrderConfirmationsController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProductionOrderConfirmationsController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ProductionOrderConfirmationsController = ProductionOrderConfirmationsController;
        app.AddController("ProductionOrderConfirmationsController", ProductionOrderConfirmationsController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ProductionOrderConfirmationsController.js.map
//# sourceMappingURL=ProductionOrderConfirmationsService.js.map
//# sourceMappingURL=ProductionOrderConfirmationsModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ProductionOrderConfirmationsController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ProductionOrderConfirmationsController() {
                    this.IsShow = false;
                }
                ProductionOrderConfirmationsController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ProductionOrderConfirmationsController.prototype.Init = function () {
                };
                ProductionOrderConfirmationsController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ProductionOrderConfirmationsController.$inject = [];
                return ProductionOrderConfirmationsController;
            }());
            var ProductionOrderConfirmationsComponentController = /** @class */ (function () {
                function ProductionOrderConfirmationsComponentController() {
                    this.controller = ProductionOrderConfirmationsController;
                    this.templateUrl = "/Scripts/App/Production/ProductionOrder/ProductionOrderConfirmations/Template/_ProductionOrderConfirmations.html";
                }
                ProductionOrderConfirmationsComponentController.Name = "productionorderconfirmationscomponent";
                return ProductionOrderConfirmationsComponentController;
            }());
            app.AddComponent(ProductionOrderConfirmationsComponentController.Name, new ProductionOrderConfirmationsComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=ProductionOrderConfirmationsComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ProductionOrderConfirmationsController = /** @class */ (function (_super) {
            __extends(ProductionOrderConfirmationsController, _super);
            function ProductionOrderConfirmationsController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProductionOrderConfirmationsController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ProductionOrderConfirmationsController = ProductionOrderConfirmationsController;
        app.AddController("ProductionOrderConfirmationsController", ProductionOrderConfirmationsController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ProductionOrderConfirmationsController.js.map
//# sourceMappingURL=ProductionOrderConfirmationsService.js.map
//# sourceMappingURL=StoreIssueListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var StoreIssueListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function StoreIssueListController() {
                    this.IsShow = false;
                }
                StoreIssueListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                StoreIssueListController.prototype.Init = function () {
                };
                StoreIssueListController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                StoreIssueListController.$inject = [];
                return StoreIssueListController;
            }());
            var StoreIssueListComponentController = /** @class */ (function () {
                function StoreIssueListComponentController() {
                    this.controller = StoreIssueListController;
                    this.templateUrl = "/Scripts/App/Production/StoreIssue/StoreIssueList/Template/_StoreIssueList.html";
                }
                StoreIssueListComponentController.Name = "storeissuelistcomponent";
                return StoreIssueListComponentController;
            }());
            app.AddComponent(StoreIssueListComponentController.Name, new StoreIssueListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreIssueListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StoreIssueListController = /** @class */ (function (_super) {
            __extends(StoreIssueListController, _super);
            function StoreIssueListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StoreIssueListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StoreIssueListController = StoreIssueListController;
        app.AddController("StoreIssueListController", StoreIssueListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreIssueListController.js.map
//# sourceMappingURL=StoreIssueListService.js.map
//# sourceMappingURL=StoreIssueCreateModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var StoreIssueCreateController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function StoreIssueCreateController() {
                    this.IsShow = false;
                }
                StoreIssueCreateController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                StoreIssueCreateController.prototype.Init = function () {
                };
                StoreIssueCreateController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                StoreIssueCreateController.$inject = [];
                return StoreIssueCreateController;
            }());
            var StoreIssueCreateComponentController = /** @class */ (function () {
                function StoreIssueCreateComponentController() {
                    this.controller = StoreIssueCreateController;
                    this.templateUrl = "/Scripts/App/Production/StoreIssue/StoreIssueCreate/Template/_StoreIssueCreate.html";
                }
                StoreIssueCreateComponentController.Name = "storeissuecreatecomponent";
                return StoreIssueCreateComponentController;
            }());
            app.AddComponent(StoreIssueCreateComponentController.Name, new StoreIssueCreateComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreIssueCreateComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StoreIssueCreateController = /** @class */ (function (_super) {
            __extends(StoreIssueCreateController, _super);
            function StoreIssueCreateController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StoreIssueCreateController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StoreIssueCreateController = StoreIssueCreateController;
        app.AddController("StoreIssueCreateController", StoreIssueCreateController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreIssueCreateController.js.map
//# sourceMappingURL=StoreIssueCreateService.js.map
//# sourceMappingURL=StoreIssueEditModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var StoreIssueEditController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function StoreIssueEditController() {
                    this.IsShow = false;
                }
                StoreIssueEditController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                StoreIssueEditController.prototype.Init = function () {
                };
                StoreIssueEditController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                StoreIssueEditController.$inject = [];
                return StoreIssueEditController;
            }());
            var StoreIssueEditComponentController = /** @class */ (function () {
                function StoreIssueEditComponentController() {
                    this.controller = StoreIssueEditController;
                    this.templateUrl = "/Scripts/App/Production/StoreIssue/StoreIssueEdit/Template/_StoreIssueEdit.html";
                }
                StoreIssueEditComponentController.Name = "storeissueeditcomponent";
                return StoreIssueEditComponentController;
            }());
            app.AddComponent(StoreIssueEditComponentController.Name, new StoreIssueEditComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreIssueEditComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StoreIssueEditController = /** @class */ (function (_super) {
            __extends(StoreIssueEditController, _super);
            function StoreIssueEditController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StoreIssueEditController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StoreIssueEditController = StoreIssueEditController;
        app.AddController("StoreIssueEditController", StoreIssueEditController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreIssueEditController.js.map
//# sourceMappingURL=StoreIssueEditService.js.map
//# sourceMappingURL=StoreIssueViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var StoreIssueViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function StoreIssueViewController() {
                    this.IsShow = false;
                }
                StoreIssueViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                StoreIssueViewController.prototype.Init = function () {
                };
                StoreIssueViewController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                StoreIssueViewController.$inject = [];
                return StoreIssueViewController;
            }());
            var StoreIssueViewComponentController = /** @class */ (function () {
                function StoreIssueViewComponentController() {
                    this.controller = StoreIssueViewController;
                    this.templateUrl = "/Scripts/App/Production/StoreIssue/StoreIssueView/Template/_StoreIssueView.html";
                }
                StoreIssueViewComponentController.Name = "storeissueviewcomponent";
                return StoreIssueViewComponentController;
            }());
            app.AddComponent(StoreIssueViewComponentController.Name, new StoreIssueViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreIssueViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StoreIssueViewController = /** @class */ (function (_super) {
            __extends(StoreIssueViewController, _super);
            function StoreIssueViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StoreIssueViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StoreIssueViewController = StoreIssueViewController;
        app.AddController("StoreIssueViewController", StoreIssueViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreIssueViewController.js.map
//# sourceMappingURL=StoreIssueViewService.js.map
//# sourceMappingURL=ReturnToStoreListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ReturnToStoreListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ReturnToStoreListController() {
                    this.IsShow = false;
                }
                ReturnToStoreListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ReturnToStoreListController.prototype.Init = function () {
                };
                ReturnToStoreListController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ReturnToStoreListController.$inject = [];
                return ReturnToStoreListController;
            }());
            var ReturnToStoreListComponentController = /** @class */ (function () {
                function ReturnToStoreListComponentController() {
                    this.controller = ReturnToStoreListController;
                    this.templateUrl = "/Scripts/App/Production/ReturnToStore/ReturnToStoreList/Template/_ReturnToStoreList.html";
                }
                ReturnToStoreListComponentController.Name = "returntostorelistcomponent";
                return ReturnToStoreListComponentController;
            }());
            app.AddComponent(ReturnToStoreListComponentController.Name, new ReturnToStoreListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ReturnToStoreListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ReturnToStoreListController = /** @class */ (function (_super) {
            __extends(ReturnToStoreListController, _super);
            function ReturnToStoreListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ReturnToStoreListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ReturnToStoreListController = ReturnToStoreListController;
        app.AddController("ReturnToStoreListController", ReturnToStoreListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ReturnToStoreListController.js.map
//# sourceMappingURL=ReturnToStoreListService.js.map
//# sourceMappingURL=ReturnToStoreCreateModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ReturnToStoreCreateController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ReturnToStoreCreateController() {
                    this.IsShow = false;
                }
                ReturnToStoreCreateController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ReturnToStoreCreateController.prototype.Init = function () {
                };
                ReturnToStoreCreateController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ReturnToStoreCreateController.$inject = [];
                return ReturnToStoreCreateController;
            }());
            var ReturnToStoreCreateComponentController = /** @class */ (function () {
                function ReturnToStoreCreateComponentController() {
                    this.controller = ReturnToStoreCreateController;
                    this.templateUrl = "/Scripts/App/Production/ReturnToStore/ReturnToStoreCreate/Template/_ReturnToStoreCreate.html";
                }
                ReturnToStoreCreateComponentController.Name = "returntostorecreatecomponent";
                return ReturnToStoreCreateComponentController;
            }());
            app.AddComponent(ReturnToStoreCreateComponentController.Name, new ReturnToStoreCreateComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ReturnToStoreCreateComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ReturnToStoreCreateController = /** @class */ (function (_super) {
            __extends(ReturnToStoreCreateController, _super);
            function ReturnToStoreCreateController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ReturnToStoreCreateController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ReturnToStoreCreateController = ReturnToStoreCreateController;
        app.AddController("ReturnToStoreCreateController", ReturnToStoreCreateController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ReturnToStoreCreateController.js.map
//# sourceMappingURL=ReturnToStoreCreateService.js.map
//# sourceMappingURL=ReturnToStoreEditModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ReturnToStoreEditController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ReturnToStoreEditController() {
                    this.IsShow = false;
                }
                ReturnToStoreEditController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ReturnToStoreEditController.prototype.Init = function () {
                };
                ReturnToStoreEditController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ReturnToStoreEditController.$inject = [];
                return ReturnToStoreEditController;
            }());
            var ReturnToStoreEditComponentController = /** @class */ (function () {
                function ReturnToStoreEditComponentController() {
                    this.controller = ReturnToStoreEditController;
                    this.templateUrl = "/Scripts/App/Production/ReturnToStore/ReturnToStoreEdit/Template/_ReturnToStoreEdit.html";
                }
                ReturnToStoreEditComponentController.Name = "returntostoreeditcomponent";
                return ReturnToStoreEditComponentController;
            }());
            app.AddComponent(ReturnToStoreEditComponentController.Name, new ReturnToStoreEditComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ReturnToStoreEditComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ReturnToStoreEditController = /** @class */ (function (_super) {
            __extends(ReturnToStoreEditController, _super);
            function ReturnToStoreEditController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ReturnToStoreEditController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ReturnToStoreEditController = ReturnToStoreEditController;
        app.AddController("ReturnToStoreEditController", ReturnToStoreEditController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ReturnToStoreEditController.js.map
//# sourceMappingURL=ReturnToStoreEditService.js.map
//# sourceMappingURL=ReturnToStoreViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ReturnToStoreViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ReturnToStoreViewController() {
                    this.IsShow = false;
                }
                ReturnToStoreViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ReturnToStoreViewController.prototype.Init = function () {
                };
                ReturnToStoreViewController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ReturnToStoreViewController.$inject = [];
                return ReturnToStoreViewController;
            }());
            var ReturnToStoreViewComponentController = /** @class */ (function () {
                function ReturnToStoreViewComponentController() {
                    this.controller = ReturnToStoreViewController;
                    this.templateUrl = "/Scripts/App/Production/ReturnToStore/ReturnToStoreView/Template/_ReturnToStoreView.html";
                }
                ReturnToStoreViewComponentController.Name = "returntostoreviewcomponent";
                return ReturnToStoreViewComponentController;
            }());
            app.AddComponent(ReturnToStoreViewComponentController.Name, new ReturnToStoreViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ReturnToStoreViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ReturnToStoreViewController = /** @class */ (function (_super) {
            __extends(ReturnToStoreViewController, _super);
            function ReturnToStoreViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ReturnToStoreViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ReturnToStoreViewController = ReturnToStoreViewController;
        app.AddController("ReturnToStoreViewController", ReturnToStoreViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ReturnToStoreViewController.js.map
//# sourceMappingURL=ReturnToStoreViewService.js.map
//# sourceMappingURL=ConfirmationListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ConfirmationListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ConfirmationListController() {
                    this.IsShow = false;
                }
                ConfirmationListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ConfirmationListController.prototype.Init = function () {
                };
                ConfirmationListController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ConfirmationListController.$inject = [];
                return ConfirmationListController;
            }());
            var ConfirmationListComponentController = /** @class */ (function () {
                function ConfirmationListComponentController() {
                    this.controller = ConfirmationListController;
                    this.templateUrl = "/Scripts/App/Production/Confirmation/ConfirmationList/Template/_ConfirmationList.html";
                }
                ConfirmationListComponentController.Name = "confirmationlistcomponent";
                return ConfirmationListComponentController;
            }());
            app.AddComponent(ConfirmationListComponentController.Name, new ConfirmationListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=ConfirmationListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ConfirmationListController = /** @class */ (function (_super) {
            __extends(ConfirmationListController, _super);
            function ConfirmationListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ConfirmationListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ConfirmationListController = ConfirmationListController;
        app.AddController("ConfirmationListController", ConfirmationListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ConfirmationListController.js.map
//# sourceMappingURL=ConfirmationListService.js.map
//# sourceMappingURL=BulkConfirmationModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var BulkConfirmationController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function BulkConfirmationController() {
                    this.IsShow = false;
                }
                BulkConfirmationController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                BulkConfirmationController.prototype.Init = function () {
                };
                BulkConfirmationController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                BulkConfirmationController.$inject = [];
                return BulkConfirmationController;
            }());
            var BulkConfirmationComponentController = /** @class */ (function () {
                function BulkConfirmationComponentController() {
                    this.controller = BulkConfirmationController;
                    this.templateUrl = "/Scripts/App/Production/Confirmation/BulkConfirmation/Template/_BulkConfirmation.html";
                }
                BulkConfirmationComponentController.Name = "bulkconfirmationcomponent";
                return BulkConfirmationComponentController;
            }());
            app.AddComponent(BulkConfirmationComponentController.Name, new BulkConfirmationComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=BulkConfirmationComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var BulkConfirmationController = /** @class */ (function (_super) {
            __extends(BulkConfirmationController, _super);
            function BulkConfirmationController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return BulkConfirmationController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.BulkConfirmationController = BulkConfirmationController;
        app.AddController("BulkConfirmationController", BulkConfirmationController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BulkConfirmationController.js.map
//# sourceMappingURL=BulkConfirmationService.js.map
//# sourceMappingURL=ConfirmationEditModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ConfirmationEditController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ConfirmationEditController() {
                    this.IsShow = false;
                }
                ConfirmationEditController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ConfirmationEditController.prototype.Init = function () {
                };
                ConfirmationEditController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ConfirmationEditController.$inject = [];
                return ConfirmationEditController;
            }());
            var ConfirmationEditComponentController = /** @class */ (function () {
                function ConfirmationEditComponentController() {
                    this.controller = ConfirmationEditController;
                    this.templateUrl = "/Scripts/App/Production/Confirmation/ConfirmationEdit/Template/_ConfirmationEdit.html";
                }
                ConfirmationEditComponentController.Name = "confirmationeditcomponent";
                return ConfirmationEditComponentController;
            }());
            app.AddComponent(ConfirmationEditComponentController.Name, new ConfirmationEditComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=ConfirmationEditComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ConfirmationEditController = /** @class */ (function (_super) {
            __extends(ConfirmationEditController, _super);
            function ConfirmationEditController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ConfirmationEditController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ConfirmationEditController = ConfirmationEditController;
        app.AddController("ConfirmationEditController", ConfirmationEditController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ConfirmationEditController.js.map
//# sourceMappingURL=ConfirmationEditService.js.map
//# sourceMappingURL=ConfirmationViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ConfirmationViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ConfirmationViewController() {
                    this.IsShow = false;
                }
                ConfirmationViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ConfirmationViewController.prototype.Init = function () {
                };
                ConfirmationViewController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ConfirmationViewController.$inject = [];
                return ConfirmationViewController;
            }());
            var ConfirmationViewComponentController = /** @class */ (function () {
                function ConfirmationViewComponentController() {
                    this.controller = ConfirmationViewController;
                    this.templateUrl = "/Scripts/App/Production/Confirmation/ConfirmationView/Template/_ConfirmationView.html";
                }
                ConfirmationViewComponentController.Name = "confirmationviewcomponent";
                return ConfirmationViewComponentController;
            }());
            app.AddComponent(ConfirmationViewComponentController.Name, new ConfirmationViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ConfirmationViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ConfirmationViewController = /** @class */ (function (_super) {
            __extends(ConfirmationViewController, _super);
            function ConfirmationViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ConfirmationViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ConfirmationViewController = ConfirmationViewController;
        app.AddController("ConfirmationViewController", ConfirmationViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ConfirmationViewController.js.map
//# sourceMappingURL=ConfirmationViewService.js.map
//# sourceMappingURL=StoreRequestListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var StoreRequestListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function StoreRequestListController() {
                    this.IsShow = false;
                }
                StoreRequestListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                StoreRequestListController.prototype.Init = function () {
                };
                StoreRequestListController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                StoreRequestListController.$inject = [];
                return StoreRequestListController;
            }());
            var StoreRequestListComponentController = /** @class */ (function () {
                function StoreRequestListComponentController() {
                    this.controller = StoreRequestListController;
                    this.templateUrl = "/Scripts/App/Production/StoreRequest/StoreRequestList/Template/_StoreRequestList.html";
                }
                StoreRequestListComponentController.Name = "storerequestlistcomponent";
                return StoreRequestListComponentController;
            }());
            app.AddComponent(StoreRequestListComponentController.Name, new StoreRequestListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreRequestListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StoreRequestListController = /** @class */ (function (_super) {
            __extends(StoreRequestListController, _super);
            function StoreRequestListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StoreRequestListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StoreRequestListController = StoreRequestListController;
        app.AddController("StoreRequestListController", StoreRequestListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreRequestListController.js.map
//# sourceMappingURL=StoreRequestListService.js.map
//# sourceMappingURL=StoreRequestCreateModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var StoreRequestCreateController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function StoreRequestCreateController() {
                    this.IsShow = false;
                }
                StoreRequestCreateController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                StoreRequestCreateController.prototype.Init = function () {
                };
                StoreRequestCreateController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                StoreRequestCreateController.$inject = [];
                return StoreRequestCreateController;
            }());
            var StoreRequestCreateComponentController = /** @class */ (function () {
                function StoreRequestCreateComponentController() {
                    this.controller = StoreRequestCreateController;
                    this.templateUrl = "/Scripts/App/Production/StoreRequest/StoreRequestCreate/Template/StoreRequestCreate.html";
                }
                StoreRequestCreateComponentController.Name = "storerequestcreatecomponent";
                return StoreRequestCreateComponentController;
            }());
            app.AddComponent(StoreRequestCreateComponentController.Name, new StoreRequestCreateComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreRequestCreateComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StoreRequestCreateController = /** @class */ (function (_super) {
            __extends(StoreRequestCreateController, _super);
            function StoreRequestCreateController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StoreRequestCreateController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StoreRequestCreateController = StoreRequestCreateController;
        app.AddController("StoreRequestCreateController", StoreRequestCreateController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreRequestCreateController.js.map
//# sourceMappingURL=StoreRequestCreateService.js.map
//# sourceMappingURL=StoreRequestEditModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var StoreRequestEditController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function StoreRequestEditController() {
                    this.IsShow = false;
                }
                StoreRequestEditController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                StoreRequestEditController.prototype.Init = function () {
                };
                StoreRequestEditController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                StoreRequestEditController.$inject = [];
                return StoreRequestEditController;
            }());
            var StoreRequestEditComponentController = /** @class */ (function () {
                function StoreRequestEditComponentController() {
                    this.controller = StoreRequestEditController;
                    this.templateUrl = "/Scripts/App/Production/StoreRequest/StoreRequestEdit/Template/_StoreRequestEdit.html";
                }
                StoreRequestEditComponentController.Name = "storerequesteditcomponent";
                return StoreRequestEditComponentController;
            }());
            app.AddComponent(StoreRequestEditComponentController.Name, new StoreRequestEditComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreRequestEditComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StoreRequestEditController = /** @class */ (function (_super) {
            __extends(StoreRequestEditController, _super);
            function StoreRequestEditController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StoreRequestEditController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StoreRequestEditController = StoreRequestEditController;
        app.AddController("StoreRequestEditController", StoreRequestEditController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreRequestEditController.js.map
//# sourceMappingURL=StoreRequestEditService.js.map
//# sourceMappingURL=StoreRequestViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var StoreRequestViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function StoreRequestViewController() {
                    this.IsShow = false;
                }
                StoreRequestViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                StoreRequestViewController.prototype.Init = function () {
                };
                StoreRequestViewController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                StoreRequestViewController.$inject = [];
                return StoreRequestViewController;
            }());
            var StoreRequestViewComponentController = /** @class */ (function () {
                function StoreRequestViewComponentController() {
                    this.controller = StoreRequestViewController;
                    this.templateUrl = "/Scripts/App/Production/StoreRequest/StoreRequestView/Template/_StoreRequestView.html";
                }
                StoreRequestViewComponentController.Name = "storerequestviewcomponent";
                return StoreRequestViewComponentController;
            }());
            app.AddComponent(StoreRequestViewComponentController.Name, new StoreRequestViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreRequestViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StoreRequestViewController = /** @class */ (function (_super) {
            __extends(StoreRequestViewController, _super);
            function StoreRequestViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StoreRequestViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StoreRequestViewController = StoreRequestViewController;
        app.AddController("StoreRequestViewController", StoreRequestViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreRequestViewController.js.map
//# sourceMappingURL=StoreRequestViewService.js.map
//# sourceMappingURL=PurchaseRequisitionListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var PurchaseRequisitionListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function PurchaseRequisitionListController() {
                    this.IsShow = false;
                }
                PurchaseRequisitionListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                PurchaseRequisitionListController.prototype.Init = function () {
                };
                PurchaseRequisitionListController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                PurchaseRequisitionListController.$inject = [];
                return PurchaseRequisitionListController;
            }());
            var PurchaseRequisitionListComponentController = /** @class */ (function () {
                function PurchaseRequisitionListComponentController() {
                    this.controller = PurchaseRequisitionListController;
                    this.templateUrl = "/Scripts/App/Production/PurchaseRequisition/PurchaseRequisitionList/Template/_PurchaseRequisitionList.html";
                }
                PurchaseRequisitionListComponentController.Name = "purchaserequisitionlistcomponent";
                return PurchaseRequisitionListComponentController;
            }());
            app.AddComponent(PurchaseRequisitionListComponentController.Name, new PurchaseRequisitionListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseRequisitionListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var PurchaseRequisitionListController = /** @class */ (function (_super) {
            __extends(PurchaseRequisitionListController, _super);
            function PurchaseRequisitionListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PurchaseRequisitionListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.PurchaseRequisitionListController = PurchaseRequisitionListController;
        app.AddController("PurchaseRequisitionListController", PurchaseRequisitionListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseRequisitionListController.js.map
//# sourceMappingURL=PurchaseRequisitionListService.js.map
//# sourceMappingURL=PurchaseRequisitionCreateModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var PurchaseRequisitionCreateController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function PurchaseRequisitionCreateController() {
                    this.IsShow = false;
                }
                PurchaseRequisitionCreateController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                PurchaseRequisitionCreateController.prototype.Init = function () {
                };
                PurchaseRequisitionCreateController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                PurchaseRequisitionCreateController.$inject = [];
                return PurchaseRequisitionCreateController;
            }());
            var PurchaseRequisitionCreateComponentController = /** @class */ (function () {
                function PurchaseRequisitionCreateComponentController() {
                    this.controller = PurchaseRequisitionCreateController;
                    this.templateUrl = "/Scripts/App/Production/PurchaseRequisition/PurchaseRequisitionCreate/Template/_PurchaseRequisitionCreate.html";
                }
                PurchaseRequisitionCreateComponentController.Name = "purchaserequisitioncreatecomponent";
                return PurchaseRequisitionCreateComponentController;
            }());
            app.AddComponent(PurchaseRequisitionCreateComponentController.Name, new PurchaseRequisitionCreateComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseRequisitionCreateComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var PurchaseRequisitionCreateController = /** @class */ (function (_super) {
            __extends(PurchaseRequisitionCreateController, _super);
            function PurchaseRequisitionCreateController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PurchaseRequisitionCreateController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.PurchaseRequisitionCreateController = PurchaseRequisitionCreateController;
        app.AddController("PurchaseRequisitionCreateController", PurchaseRequisitionCreateController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseRequisitionCreateController.js.map
//# sourceMappingURL=PurchaseRequisitionCreateService.js.map
//# sourceMappingURL=PurchaseRequisitionEditModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var PurchaseRequisitionEditController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function PurchaseRequisitionEditController() {
                    this.IsShow = false;
                }
                PurchaseRequisitionEditController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                PurchaseRequisitionEditController.prototype.Init = function () {
                };
                PurchaseRequisitionEditController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                PurchaseRequisitionEditController.$inject = [];
                return PurchaseRequisitionEditController;
            }());
            var PurchaseRequisitionEditComponentController = /** @class */ (function () {
                function PurchaseRequisitionEditComponentController() {
                    this.controller = PurchaseRequisitionEditController;
                    this.templateUrl = "/Scripts/App/Production/PurchaseRequisition/PurchaseRequisitionEdit/Template/_PurchaseRequisitionEdit.html";
                }
                PurchaseRequisitionEditComponentController.Name = "purchaserequisitioneditcomponent";
                return PurchaseRequisitionEditComponentController;
            }());
            app.AddComponent(PurchaseRequisitionEditComponentController.Name, new PurchaseRequisitionEditComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseRequisitionEditComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var PurchaseRequisitionEditController = /** @class */ (function (_super) {
            __extends(PurchaseRequisitionEditController, _super);
            function PurchaseRequisitionEditController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PurchaseRequisitionEditController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.PurchaseRequisitionEditController = PurchaseRequisitionEditController;
        app.AddController("PurchaseRequisitionEditController", PurchaseRequisitionEditController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseRequisitionEditController.js.map
//# sourceMappingURL=PurchaseRequisitionEditService.js.map
//# sourceMappingURL=PurchaseRequisitionViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var PurchaseRequisitionViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function PurchaseRequisitionViewController() {
                    this.IsShow = false;
                }
                PurchaseRequisitionViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                PurchaseRequisitionViewController.prototype.Init = function () {
                };
                PurchaseRequisitionViewController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                PurchaseRequisitionViewController.$inject = [];
                return PurchaseRequisitionViewController;
            }());
            var PurchaseRequisitionViewComponentController = /** @class */ (function () {
                function PurchaseRequisitionViewComponentController() {
                    this.controller = PurchaseRequisitionViewController;
                    this.templateUrl = "/Scripts/App/Production/PurchaseRequisition/PurchaseRequisitionView/Template/_PurchaseRequisitionView.html";
                }
                PurchaseRequisitionViewComponentController.Name = "purchaserequisitionviewcomponent";
                return PurchaseRequisitionViewComponentController;
            }());
            app.AddComponent(PurchaseRequisitionViewComponentController.Name, new PurchaseRequisitionViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseRequisitionViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var PurchaseRequisitionViewController = /** @class */ (function (_super) {
            __extends(PurchaseRequisitionViewController, _super);
            function PurchaseRequisitionViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PurchaseRequisitionViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.PurchaseRequisitionViewController = PurchaseRequisitionViewController;
        app.AddController("PurchaseRequisitionViewController", PurchaseRequisitionViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseRequisitionViewController.js.map
//# sourceMappingURL=PurchaseRequisitionViewService.js.map
//# sourceMappingURL=DemandPlanListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var DemandPlanListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function DemandPlanListController() {
                    this.IsShow = false;
                }
                DemandPlanListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                DemandPlanListController.prototype.Init = function () {
                };
                DemandPlanListController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                DemandPlanListController.$inject = [];
                return DemandPlanListController;
            }());
            var DemandPlanListComponentController = /** @class */ (function () {
                function DemandPlanListComponentController() {
                    this.controller = DemandPlanListController;
                    this.templateUrl = "/Scripts/App/Production/DemandPlan/DemandPlanList/Template/_DemandPlanList.html";
                }
                DemandPlanListComponentController.Name = "demandplanlistcomponent";
                return DemandPlanListComponentController;
            }());
            app.AddComponent(DemandPlanListComponentController.Name, new DemandPlanListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=DemandPlanListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var DemandPlanListController = /** @class */ (function (_super) {
            __extends(DemandPlanListController, _super);
            function DemandPlanListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return DemandPlanListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.DemandPlanListController = DemandPlanListController;
        app.AddController("DemandPlanListController", DemandPlanListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DemandPlanListController.js.map
//# sourceMappingURL=DemandPlanListService.js.map
//# sourceMappingURL=DemandPlanCreateModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var DemandPlanCreateController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function DemandPlanCreateController() {
                    this.IsShow = false;
                }
                DemandPlanCreateController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                DemandPlanCreateController.prototype.Init = function () {
                };
                DemandPlanCreateController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                DemandPlanCreateController.$inject = [];
                return DemandPlanCreateController;
            }());
            var DemandPlanCreateComponentController = /** @class */ (function () {
                function DemandPlanCreateComponentController() {
                    this.controller = DemandPlanCreateController;
                    this.templateUrl = "/Scripts/App/Production/DemandPlan/DemandPlanCreate/Template/_DemandPlanCreate.html";
                }
                DemandPlanCreateComponentController.Name = "demandplancreatecomponent";
                return DemandPlanCreateComponentController;
            }());
            app.AddComponent(DemandPlanCreateComponentController.Name, new DemandPlanCreateComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DemandPlanCreateComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var DemandPlanCreateController = /** @class */ (function (_super) {
            __extends(DemandPlanCreateController, _super);
            function DemandPlanCreateController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return DemandPlanCreateController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.DemandPlanCreateController = DemandPlanCreateController;
        app.AddController("DemandPlanCreateController", DemandPlanCreateController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DemandPlanCreateController.js.map
//# sourceMappingURL=DemandPlanCreateService.js.map
//# sourceMappingURL=DemandPlanEditModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var DemandPlanEditController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function DemandPlanEditController() {
                    this.IsShow = false;
                }
                DemandPlanEditController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                DemandPlanEditController.prototype.Init = function () {
                };
                DemandPlanEditController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                DemandPlanEditController.$inject = [];
                return DemandPlanEditController;
            }());
            var DemandPlanEditComponentController = /** @class */ (function () {
                function DemandPlanEditComponentController() {
                    this.controller = DemandPlanEditController;
                    this.templateUrl = "/Scripts/App/Production/DemandPlan/DemandPlanEdit/Template/_DemandPlanEdit.html";
                }
                DemandPlanEditComponentController.Name = "demandplaneditcomponent";
                return DemandPlanEditComponentController;
            }());
            app.AddComponent(DemandPlanEditComponentController.Name, new DemandPlanEditComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DemandPlanEditComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var DemandPlanEditController = /** @class */ (function (_super) {
            __extends(DemandPlanEditController, _super);
            function DemandPlanEditController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return DemandPlanEditController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.DemandPlanEditController = DemandPlanEditController;
        app.AddController("DemandPlanEditController", DemandPlanEditController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DemandPlanEditController.js.map
//# sourceMappingURL=DemandPlanEditService.js.map
//# sourceMappingURL=DemandPlanViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var DemandPlanViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function DemandPlanViewController() {
                    this.IsShow = false;
                }
                DemandPlanViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                DemandPlanViewController.prototype.Init = function () {
                };
                DemandPlanViewController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                DemandPlanViewController.$inject = [];
                return DemandPlanViewController;
            }());
            var DemandPlanViewComponentController = /** @class */ (function () {
                function DemandPlanViewComponentController() {
                    this.controller = DemandPlanViewController;
                    this.templateUrl = "/Scripts/App/Production/DemandPlan/DemandPlanView/Template/_DemandPlanView.html";
                }
                DemandPlanViewComponentController.Name = "demandplanviewcomponent";
                return DemandPlanViewComponentController;
            }());
            app.AddComponent(DemandPlanViewComponentController.Name, new DemandPlanViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DemandPlanViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var DemandPlanViewController = /** @class */ (function (_super) {
            __extends(DemandPlanViewController, _super);
            function DemandPlanViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return DemandPlanViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.DemandPlanViewController = DemandPlanViewController;
        app.AddController("DemandPlanViewController", DemandPlanViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DemandPlanViewController.js.map
//# sourceMappingURL=DemandPlanViewService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var PurchaseandInventoryReportModel = /** @class */ (function () {
            function PurchaseandInventoryReportModel() {
            }
            return PurchaseandInventoryReportModel;
        }());
        Model.PurchaseandInventoryReportModel = PurchaseandInventoryReportModel;
        var PurchaseandInventoryReportHeader = /** @class */ (function () {
            function PurchaseandInventoryReportHeader() {
            }
            return PurchaseandInventoryReportHeader;
        }());
        Model.PurchaseandInventoryReportHeader = PurchaseandInventoryReportHeader;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseAndInventoryReportModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var PurchaseAndInventoryController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function PurchaseAndInventoryController(_ModelMasterListService, _ModelMasterloadListComponentService, _Dealerservice, _cookieStore, _PurchaseandInventoryReportService, _ItemAutoservice, _IQuickSaleServices) {
                    this._cookieStore = _cookieStore;
                    this.UserData = null;
                    this.WHName = null;
                    this.ModelMasterList = null;
                    this.ModelMasterSearch = null;
                    this.DealerID = null;
                    this.Cookie = null;
                    this.numRecords = 10;
                    this.NoOfRds = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.FillPurInvtGrid = null;
                    this.PurchaseandInventoryReportModel = null;
                    this.Cookie = _cookieStore;
                    this.ModelMasterListService = _ModelMasterListService;
                    this.ModelMasterloadListComponentService = _ModelMasterloadListComponentService;
                    this.DealerService = _Dealerservice;
                    this.IQuickSaleServices = _IQuickSaleServices;
                    this.PurchaseandInventoryReportService = _PurchaseandInventoryReportService;
                    this.ItemDescriptionAutofill = _ItemAutoservice;
                    this.PurchaseandInventoryReportModel = new GCPL.Model.PurchaseandInventoryReportModel();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                PurchaseAndInventoryController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                PurchaseAndInventoryController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    this.ModelMasterList = this.ModelMasterloadListComponentService.Find(this.ModelMasterSearch).then((function (response) {
                        _this.ModelMasterList = _this.ModelMasterloadListComponentService.GetModelMasterloadList(response.data.Result);
                    }));
                    this.DealerService.Find(this.DealerID).then((function (response) {
                        _this.UserData = _this.DealerService.GetUser(response.data.Result);
                        console.log(_this.UserData);
                    }));
                    this.WHName = this.IQuickSaleServices.FindWH().then((function (response) {
                        _this.WHName = _this.IQuickSaleServices.GetWarehouseName(response.data.Result);
                    }));
                    $("#txtModel").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.ModelMasterListService.Find(request).then((function (response) {
                                var data = that.ModelMasterListService.GetModelMasterList(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.ModelNo,
                                        value: item.ModelNo,
                                        id: item.ModelID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.PurchaseandInventoryReportModel.Model = ui.item.id;
                            //console.log(that.getLeadSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    $("#txtDescription").autocomplete({
                        source: function (request, res) {
                            debugger;
                            that.ItemDescriptionAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.ItemDescriptionAutofill.GetItemDescription(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Description,
                                        value: item.Description,
                                        id: item.ItemID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.PurchaseandInventoryReportModel.ItemDescription = ui.item.id;
                            //let SelectedItemID = ui.item.id;
                            //that.QtyChange.ItemID = ui.item.id;
                            //that.Description = ui.item.value;
                        },
                        change: function () {
                        }
                    });
                };
                PurchaseAndInventoryController.prototype.Search = function () {
                    this.numRecords = this.NoOfRds;
                    this.FillGrid(this.numRecords);
                    //console.log(this.PartReportModel);
                    //this.PartRequestReportService.FindGrid(this.PartReportModel).then((response => {
                    //    this.FillPartReportGrid = this.PartRequestReportService.GetPartGrid(response.data.Result);
                    //}));
                };
                PurchaseAndInventoryController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    // this.SearchPara.DealerID = this.DealerID;
                    this.FillPurInvtGrid = this.PurchaseandInventoryReportService.FindGrid(this.PurchaseandInventoryReportModel).then((function (response) {
                        //console.log(this.FillPartGrid);
                        _this.FillPurInvtGrid = _this.PurchaseandInventoryReportService.GetPartGrid(response.data.Result);
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.FillPurInvtGrid.slice(0, that.numRecords);
                    }));
                };
                PurchaseAndInventoryController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                PurchaseAndInventoryController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillPurInvtGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                PurchaseAndInventoryController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.FillPurInvtGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                PurchaseAndInventoryController.prototype.Clear = function () {
                    //this.PartReportModel = null;
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    document.getElementById("txtModel").value = "";
                    document.getElementById("txtCustomerName").value = "";
                    document.getElementById("txtDescription").value = "";
                    this.shownItems = null;
                    this.FillPurInvtGrid = null;
                    this.PurchaseandInventoryReportModel = null;
                    this.Search();
                };
                PurchaseAndInventoryController.$inject = ["ModelMasterListComponentService", "ModelMasterloadListComponentService", "ServiceCallAllocationUserService", "$cookieStore", "PurchaseandInventoryReportService", "itemDescriptionService", "QuickSaleServices"];
                return PurchaseAndInventoryController;
            }());
            var PurchaseAndInventoryComponentController = /** @class */ (function () {
                function PurchaseAndInventoryComponentController() {
                    this.controller = PurchaseAndInventoryController;
                    this.templateUrl = "/Scripts/App/Reports/PurchaseAndInventoryReport/Tempate/_PurchaseAndInventoryReport.html";
                }
                PurchaseAndInventoryComponentController.Name = "purchaseandinventorycomponent";
                return PurchaseAndInventoryComponentController;
            }());
            app.AddComponent(PurchaseAndInventoryComponentController.Name, new PurchaseAndInventoryComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseAndInventoryReportComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var PurchaseAndInventoryController = /** @class */ (function (_super) {
            __extends(PurchaseAndInventoryController, _super);
            function PurchaseAndInventoryController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PurchaseAndInventoryController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.PurchaseAndInventoryController = PurchaseAndInventoryController;
        app.AddController("PurchaseAndInventoryController", PurchaseAndInventoryController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseAndInventoryReportController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var PurchaseandInventoryReportService = /** @class */ (function (_super) {
            __extends(PurchaseandInventoryReportService, _super);
            function PurchaseandInventoryReportService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/";
                _this.Cookie = _cookieStore;
                return _this;
            }
            PurchaseandInventoryReportService.prototype.FindGrid = function (data) {
                // FromDate: any, ToDate: any, SoNumber: any, ObjectTpe: any, CustName: any, Status: any
                var url = this.apiUrl + "PurchaseandInventoryReport";
                var DealerID;
                var Model;
                var ItemDescription;
                var Warehouse;
                var Period;
                if (data.DealerID == undefined) {
                    DealerID = "";
                }
                else {
                    DealerID = data.DealerID;
                }
                if (data.Model == undefined) {
                    Model = "";
                }
                else {
                    Model = data.Model;
                }
                if (data.ItemDescription == undefined) {
                    ItemDescription = "";
                }
                else {
                    ItemDescription = data.ItemDescription;
                }
                if (data.Warehouse == undefined) {
                    Warehouse = "";
                }
                else {
                    Warehouse = data.Warehouse;
                }
                if (data.Period == undefined) {
                    Period = "";
                }
                else {
                    Period = data.Period;
                }
                var config = {
                    params: {
                        Model: Model,
                        ItemDescription: ItemDescription,
                        Warehouse: Warehouse,
                        Period: Period,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            PurchaseandInventoryReportService.prototype.GetPartGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        Warehouse: item.Warehouse,
                        Model: item.Model,
                        ItemDescription: item.ItemDescription,
                        Month: item.Month,
                        EndOfMonth: item.EndOfMonth,
                        PurchaseVolume: item.PurchaseVolume,
                    });
                }
                return list;
            };
            PurchaseandInventoryReportService.$inject = ["$http", "$q", "$cookieStore"];
            return PurchaseandInventoryReportService;
        }(GCPL.Service.BaseService));
        Service.PurchaseandInventoryReportService = PurchaseandInventoryReportService;
        app.AddService("PurchaseandInventoryReportService", PurchaseandInventoryReportService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseAndInventoryReportService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var IWOFailureReportGridService = /** @class */ (function () {
            function IWOFailureReportGridService() {
            }
            return IWOFailureReportGridService;
        }());
        Model.IWOFailureReportGridService = IWOFailureReportGridService;
        var WOFailureSearchReportmodel = /** @class */ (function () {
            function WOFailureSearchReportmodel() {
            }
            return WOFailureSearchReportmodel;
        }());
        Model.WOFailureSearchReportmodel = WOFailureSearchReportmodel;
        var WOFailureAvgReportmodel = /** @class */ (function () {
            function WOFailureAvgReportmodel() {
            }
            return WOFailureAvgReportmodel;
        }());
        Model.WOFailureAvgReportmodel = WOFailureAvgReportmodel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WOFailureAnalysisModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var servicecallmodel = GCPL.Model.WOFailureSearchReportmodel;
            var WOFailureAnalysisController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function WOFailureAnalysisController(_service, _cookieStore, _WorkOrderService, _WorkOrderReportListService, _Sservice, _Dservice, _Autofillservice, _WOTimeSpentGridService) {
                    this._cookieStore = _cookieStore;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.UserName = null;
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.DealerID = null;
                    this.WOFailureList = null;
                    this.WOFailureAvgList = null;
                    this.SCStatus = null;
                    this.StateDropDown = null;
                    this.Status = null;
                    this.FailureReason = null;
                    this.DistrictDropDown = null;
                    this.WOFailureSerachA = null;
                    this.Cookie = null;
                    this.Service = _service;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.WorkOrderService = _WorkOrderService;
                    this.WorkOrderReportListService = _WorkOrderReportListService;
                    this.WOFailureSerachA = new servicecallmodel();
                    this.Sservice = _Sservice;
                    this.Districtservice = _Dservice;
                    this.CustomerAutofill = _Autofillservice;
                    this.WOTimeSpentGridService = _WOTimeSpentGridService;
                }
                WOFailureAnalysisController.prototype.$onInit = function () {
                    this.Init();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                WOFailureAnalysisController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                WOFailureAnalysisController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                WOFailureAnalysisController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtCustomer").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.CustomerAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedCustomerID = ui.item.id;
                            that.WOFailureSerachA.CustomerID = ui.item.id;
                            console.log(that.WOFailureSerachA.CustomerID);
                        },
                        change: function () {
                        }
                    });
                    this.SCStatus = this.Service.FindSCDataStatus("1").then((function (response) {
                        console.log(response);
                        _this.SCStatus = _this.Service.GetSCDataStatus(response.data.Result);
                        //this.Status=1;
                    }));
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                    this.Status = this.WorkOrderReportListService.FindStatus("1").then((function (response) {
                        console.log(response);
                        _this.Status = _this.WorkOrderReportListService.GetStatus(response.data.Result);
                    }));
                    this.FailureReason = this.WOTimeSpentGridService.FindFailureReason().then((function (response) {
                        console.log(response);
                        _this.FailureReason = _this.WOTimeSpentGridService.GetFailureReason(response.data.Result);
                    }));
                };
                WOFailureAnalysisController.prototype.Search = function () {
                    var _this = this;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                    debugger;
                    this.WOFailureAvgList = this.Service.FindAvg(this.WOFailureSerachA).then((function (response) {
                        _this.WOFailureAvgList = _this.Service.GetWOFailureAvgGrid(response.data.Result);
                    }));
                };
                WOFailureAnalysisController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.WOFailureSerachA.FromDate = document.getElementById("txtFromDate").value;
                    this.WOFailureSerachA.ToDate = document.getElementById("txtToDate").value;
                    //this.SCListSerachA.status = this.Status;
                    //this.SCListSerachA.status = this.SCStatus;
                    this.WOFailureList = this.Service.Find(this.WOFailureSerachA).then((function (response) {
                        _this.WOFailureList = _this.Service.GetWOFailureGrid(response.data.Result);
                        _this.WOFailureList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.WOFailureList.slice(0, that.numRecords);
                    }));
                };
                WOFailureAnalysisController.prototype.getStates = function () {
                    var _this = this;
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                };
                WOFailureAnalysisController.prototype.District = function () {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.WOFailureSerachA.State).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                WOFailureAnalysisController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                    this.Search();
                };
                WOFailureAnalysisController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.WOFailureList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                WOFailureAnalysisController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.WOFailureList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                WOFailureAnalysisController.prototype.Clear = function () {
                    debugger;
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    document.getElementById("txtCustomer").value = "";
                    document.getElementById("txtWONo").value = "";
                    this.WOFailureSerachA.WONo = "";
                    this.WOFailureSerachA.CustomerID = "";
                    this.WOFailureSerachA.State = "";
                    this.WOFailureSerachA.District = "";
                    this.DistrictDropDown = "";
                    this.WOFailureSerachA.SCStatus = "";
                    this.WOFailureSerachA.status = "";
                    this.WOFailureSerachA.ProblemTypeID = "";
                    $("#ddlSTate").val("");
                    $("#ddlDistrict").val("");
                    $("#ddlStatus").val("");
                    $("#ddlWostatus").val("");
                    $("#ddlFailure").val("");
                    //this.Status = "";
                    //this.shownItems = null;
                    //this.WOFailureAvgList = null;
                    //this.WOFailureSerachA = null;
                    //this.WOFailureList = null;
                    //this.Search();
                };
                WOFailureAnalysisController.prototype.downloadCSV = function (csv, filename) {
                    var csvFile;
                    var downloadLink;
                    // CSV file
                    csvFile = new Blob([csv], { type: "text/csv" });
                    // Download link
                    downloadLink = document.createElement("a");
                    // File name
                    downloadLink.download = filename;
                    // Create a link to the file
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    // Hide download link
                    downloadLink.style.display = "none";
                    // Add the link to DOM
                    document.body.appendChild(downloadLink);
                    // Click download link
                    downloadLink.click();
                };
                WOFailureAnalysisController.prototype.exportTableToCSV = function (filename) {
                    var csv = [];
                    var rows = document.querySelectorAll(".excel tr");
                    for (var i = 0; i < rows.length; i++) {
                        var row = [], cols = rows[i].querySelectorAll("td, th");
                        for (var j = 0; j < cols.length; j++)
                            row.push(cols[j].innerHTML);
                        csv.push(row.join(","));
                    }
                    // Download CSV file
                    this.downloadCSV(csv.join("\n"), filename);
                };
                WOFailureAnalysisController.$inject = ["WOFailureAnalysisGridService", "$cookieStore", "WorkOrderService", "WorkOrderReportListService", "StateService", "DistrictService",
                    "CustomeraAtofillService", "WOTimeSpentGridService"];
                return WOFailureAnalysisController;
            }());
            var WOFailureAnalysisComponentController = /** @class */ (function () {
                function WOFailureAnalysisComponentController() {
                    this.controller = WOFailureAnalysisController;
                    this.templateUrl = "/Scripts/App/Reports/WOFailureAnalysis/Template/_WOFailureAnalysis.html";
                }
                WOFailureAnalysisComponentController.Name = "wofailureanalysiscomponent";
                return WOFailureAnalysisComponentController;
            }());
            app.AddComponent(WOFailureAnalysisComponentController.Name, new WOFailureAnalysisComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WOFailureAnalysisComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var WOFailureAnalysisController = /** @class */ (function (_super) {
            __extends(WOFailureAnalysisController, _super);
            function WOFailureAnalysisController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return WOFailureAnalysisController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.WOFailureAnalysisController = WOFailureAnalysisController;
        app.AddController("WOFailureAnalysisController", WOFailureAnalysisController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WOfailureAnalysisController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var WOFailureAnalysisGridService = /** @class */ (function (_super) {
            __extends(WOFailureAnalysisGridService, _super);
            function WOFailureAnalysisGridService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.Cookie = null;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            WOFailureAnalysisGridService.prototype.Find = function (data) {
                debugger;
                // console.log(this.apiUrl + `/FillWorkOrderSearchGrid`);
                var DealerID;
                var CustomerID;
                var WONo;
                var State;
                var District;
                var SCStatus;
                var status;
                var FailureReason;
                var FromDate;
                var ToDate;
                var UserID;
                if (data.DealerID != undefined && data.DealerID != null) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = '';
                }
                if (data.CustomerID != undefined && data.CustomerID != null) {
                    CustomerID = data.CustomerID;
                }
                else {
                    CustomerID = '';
                }
                if (data.WONo != undefined && data.WONo != null) {
                    WONo = data.WONo;
                }
                else {
                    WONo = '';
                }
                if (data.State != undefined && data.State != null) {
                    State = data.State;
                }
                else {
                    State = '';
                }
                if (data.District != undefined && data.District != null) {
                    District = data.District;
                }
                else {
                    District = '';
                }
                if (data.SCStatus != undefined && data.SCStatus != null) {
                    SCStatus = data.SCStatus;
                }
                else {
                    SCStatus = '';
                }
                if (data.status != undefined && data.status != null) {
                    status = data.status;
                }
                else {
                    status = '';
                }
                if (data.ProblemTypeID != undefined && data.ProblemTypeID != null) {
                    FailureReason = data.ProblemTypeID;
                }
                else {
                    FailureReason = '';
                }
                if (data.FromDate != undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = '';
                }
                if (data.ToDate != undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                if (data.UserID != undefined && data.UserID != null) {
                    UserID = data.UserID;
                }
                else {
                    UserID = '';
                }
                debugger;
                //console.log(this.apiUrl+"/WOFailureAnalysis");
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        CustomerID: CustomerID,
                        WONo: WONo,
                        State: State,
                        District: District,
                        SCStatus: SCStatus,
                        status: status,
                        FailureReason: FailureReason,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        UserID: UserID
                    }
                };
                // console.log(config);
                return this.ajaXUtility.Get({
                    //+ `/${"FillWorkOrderSearchGrid"}`
                    Url: this.apiUrl + "/WOFailureAnalysis",
                    Config: config
                });
            };
            WOFailureAnalysisGridService.prototype.GetWOFailureGrid = function (data) {
                console.log(data);
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        DealerID: item.DealerID,
                        CustomerID: item.CustomerID,
                        ModelNo: item.ModelNo,
                        SCNo: item.SCNo,
                        SCCreatedOn: item.SCCreatedOn,
                        SCStatus: item.SCStatus,
                        WONo: item.WONo,
                        WOStatus: item.WOStatus,
                        AssignToUser: item.AssignToUser,
                        FailureReason: item.FailureReason,
                        CorrectiveAction: item.CorrectiveAction,
                        UserID: item.UserID
                    });
                }
                return list;
            };
            WOFailureAnalysisGridService.prototype.FindAvg = function (data) {
                debugger;
                //console.log(this.apiUrl + `/`);
                var DealerID;
                var CustomerID;
                var WONo;
                var State;
                var District;
                var SCStatus;
                var status;
                var FailureReason;
                var FromDate;
                var ToDate;
                var UserID;
                if (data.DealerID != undefined && data.DealerID != null) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = '';
                }
                if (data.CustomerID != undefined && data.CustomerID != null) {
                    CustomerID = data.CustomerID;
                }
                else {
                    CustomerID = '';
                }
                if (data.WONo != undefined && data.WONo != null) {
                    WONo = data.WONo;
                }
                else {
                    WONo = '';
                }
                if (data.State != undefined && data.State != null) {
                    State = data.State;
                }
                else {
                    State = '';
                }
                if (data.District != undefined && data.District != null) {
                    District = data.District;
                }
                else {
                    District = '';
                }
                if (data.SCStatus != undefined && data.SCStatus != null) {
                    SCStatus = data.SCStatus;
                }
                else {
                    SCStatus = '';
                }
                if (data.status != undefined && data.status != null) {
                    status = data.status;
                }
                else {
                    status = '';
                }
                if (data.ProblemTypeID != undefined && data.ProblemTypeID != null) {
                    FailureReason = data.ProblemTypeID;
                }
                else {
                    FailureReason = '';
                }
                if (data.FromDate != undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = '';
                }
                if (data.ToDate != undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                if (data.UserID != undefined && data.UserID != null) {
                    UserID = data.UserID;
                }
                else {
                    UserID = '';
                }
                console.log(this.apiUrl + "/WOFailureAvgList");
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        CustomerID: CustomerID,
                        WONo: WONo,
                        State: State,
                        District: District,
                        SCStatus: SCStatus,
                        status: status,
                        FailureReason: FailureReason,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        UserID: UserID
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    //+ `/${"FillWorkOrderSearchGrid"}`
                    Url: this.apiUrl + "/WOFailureAvg",
                    Config: config
                });
            };
            WOFailureAnalysisGridService.prototype.GetWOFailureAvgGrid = function (data) {
                console.log(data);
                var list = new Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        DealerID: item.DealerID,
                        CustomerID: item.CustomerID,
                        WONo: item.WONo,
                        State: item.State,
                        District: item.District,
                        SCStatus: item.SCStatus,
                        status: item.status,
                        FailureReason: item.FailureReason,
                        NoofCalls: item.NoofCalls,
                        UserID: item.UserID
                    });
                }
                return list;
            };
            WOFailureAnalysisGridService.prototype.FindSCDataStatus = function (data) {
                var config = {
                    params: {
                        CalledFrom: 'data'
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "ServiceStatus",
                    Config: config
                });
                //ServiceStatus
            };
            WOFailureAnalysisGridService.prototype.GetSCDataStatus = function (data) {
                console.log(data);
                var obj = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    obj.push({
                        //SCStatus: item.SCStatus,
                        Status: item.Status,
                        ID: item.ID
                    });
                }
                return obj;
            };
            WOFailureAnalysisGridService.$inject = ["$http", "$q", "$cookieStore"];
            return WOFailureAnalysisGridService;
        }(GCPL.Service.BaseService));
        Service.WOFailureAnalysisGridService = WOFailureAnalysisGridService;
        //inject service
        app.AddService("WOFailureAnalysisGridService", WOFailureAnalysisGridService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WOFailureAnalysisService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var IWOTimeSpentReportGridService = /** @class */ (function () {
            function IWOTimeSpentReportGridService() {
            }
            return IWOTimeSpentReportGridService;
        }());
        Model.IWOTimeSpentReportGridService = IWOTimeSpentReportGridService;
        var WOTimeSpentSearchReportmodel = /** @class */ (function () {
            function WOTimeSpentSearchReportmodel() {
            }
            return WOTimeSpentSearchReportmodel;
        }());
        Model.WOTimeSpentSearchReportmodel = WOTimeSpentSearchReportmodel;
        var WOTimeSpentAvgReportmodel = /** @class */ (function () {
            function WOTimeSpentAvgReportmodel() {
            }
            return WOTimeSpentAvgReportmodel;
        }());
        Model.WOTimeSpentAvgReportmodel = WOTimeSpentAvgReportmodel;
        var ProblemTypes = /** @class */ (function () {
            function ProblemTypes() {
            }
            return ProblemTypes;
        }());
        Model.ProblemTypes = ProblemTypes;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WOTimeSpentModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var servicecallmodel = GCPL.Model.WOTimeSpentSearchReportmodel;
            var WOTimeSpentController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function WOTimeSpentController(_service, _cookieStore, _WorkOrderService, _WorkOrderReportListService, _Sservice, _Dservice, _Autofillservice) {
                    this._cookieStore = _cookieStore;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.UserName = null;
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.DealerID = null;
                    this.WOTimeSpentList = null;
                    this.WOTimeSpentAvgList = null;
                    this.SCStatus = null;
                    this.StateDropDown = null;
                    this.Status = null;
                    this.FailureReason = null;
                    this.DistrictDropDown = null;
                    this.WOTimeSpentSerachA = null;
                    this.Cookie = null;
                    this.Service = _service;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.WorkOrderService = _WorkOrderService;
                    this.WorkOrderReportListService = _WorkOrderReportListService;
                    this.WOTimeSpentSerachA = new servicecallmodel();
                    this.Sservice = _Sservice;
                    this.Districtservice = _Dservice;
                    this.CustomerAutofill = _Autofillservice;
                }
                WOTimeSpentController.prototype.$onInit = function () {
                    this.Init();
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                WOTimeSpentController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                WOTimeSpentController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                WOTimeSpentController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $("#txtCustomer").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.CustomerAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var SelectedCustomerID = ui.item.id;
                            that.WOTimeSpentSerachA.CustomerID = ui.item.id;
                            console.log(that.WOTimeSpentSerachA.CustomerID);
                        },
                        change: function () {
                        }
                    });
                    this.SCStatus = this.Service.FindSCDataStatus("1").then((function (response) {
                        console.log(response);
                        _this.SCStatus = _this.Service.GetSCDataStatus(response.data.Result);
                        //this.Status=1;
                    }));
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                    this.Status = this.WorkOrderReportListService.FindStatus("1").then((function (response) {
                        console.log(response);
                        _this.Status = _this.WorkOrderReportListService.GetStatus(response.data.Result);
                    }));
                    debugger;
                    this.FailureReason = this.Service.FindFailureReason().then((function (response) {
                        console.log(response);
                        _this.FailureReason = _this.Service.GetFailureReason(response.data.Result);
                    }));
                };
                WOTimeSpentController.prototype.Search = function () {
                    var _this = this;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                    debugger;
                    this.WOTimeSpentAvgList = this.Service.FindAvg(this.WOTimeSpentSerachA).then((function (response) {
                        _this.WOTimeSpentAvgList = _this.Service.GetWOTimeSpentAvgGrid(response.data.Result);
                    }));
                };
                WOTimeSpentController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.WOTimeSpentSerachA.FromDate = document.getElementById("txtFromDate").value;
                    this.WOTimeSpentSerachA.ToDate = document.getElementById("txtToDate").value;
                    //this.SCListSerachA.status = this.Status;
                    //this.SCListSerachA.status = this.SCStatus;
                    this.WOTimeSpentList = this.Service.Find(this.WOTimeSpentSerachA).then((function (response) {
                        _this.WOTimeSpentList = _this.Service.GetWOTimeSpentGrid(response.data.Result);
                        _this.WOTimeSpentList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.WOTimeSpentList.slice(0, that.numRecords);
                    }));
                };
                WOTimeSpentController.prototype.getStates = function () {
                    var _this = this;
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                };
                WOTimeSpentController.prototype.District = function () {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.WOTimeSpentSerachA.State).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                WOTimeSpentController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                    this.Search();
                };
                WOTimeSpentController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.WOTimeSpentList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                WOTimeSpentController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.WOTimeSpentList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                WOTimeSpentController.prototype.Clear = function () {
                    debugger;
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    document.getElementById("txtCustomer").value = "";
                    document.getElementById("txtWONo").value = "";
                    this.WOTimeSpentSerachA.WONo = "";
                    this.WOTimeSpentSerachA.CustomerID = "";
                    this.WOTimeSpentSerachA.State = "";
                    this.WOTimeSpentSerachA.District = "";
                    this.WOTimeSpentSerachA.SCStatus = "";
                    this.FailureReason.ProblemTypeID = "";
                    //this.Status = "";
                    // this.shownItems = null;
                    $("#ddlState").val("");
                    $("#ddlDist").val("");
                    $("#ddlSC").val("");
                    $("#ddlWO").val("");
                    $("#ddlFail").val("");
                    this.WOTimeSpentAvgList = null;
                    this.WOTimeSpentSerachA = null;
                    // this.WOTimeSpentList = null;
                    //this.Search();
                };
                WOTimeSpentController.prototype.downloadCSV = function (csv, filename) {
                    var csvFile;
                    var downloadLink;
                    // CSV file
                    csvFile = new Blob([csv], { type: "text/csv" });
                    // Download link
                    downloadLink = document.createElement("a");
                    // File name
                    downloadLink.download = filename;
                    // Create a link to the file
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    // Hide download link
                    downloadLink.style.display = "none";
                    // Add the link to DOM
                    document.body.appendChild(downloadLink);
                    // Click download link
                    downloadLink.click();
                };
                WOTimeSpentController.prototype.exportTableToCSV = function (filename) {
                    var csv = [];
                    var rows = document.querySelectorAll(".excel tr");
                    for (var i = 0; i < rows.length; i++) {
                        var row = [], cols = rows[i].querySelectorAll("td, th");
                        for (var j = 0; j < cols.length; j++)
                            row.push(cols[j].innerHTML);
                        csv.push(row.join(","));
                    }
                    // Download CSV file
                    this.downloadCSV(csv.join("\n"), filename);
                };
                WOTimeSpentController.$inject = ["WOTimeSpentGridService", "$cookieStore", "WorkOrderService", "WorkOrderReportListService", "StateService", "DistrictService",
                    "CustomeraAtofillService"];
                return WOTimeSpentController;
            }());
            var WOTimeSpentComponentController = /** @class */ (function () {
                function WOTimeSpentComponentController() {
                    this.controller = WOTimeSpentController;
                    this.templateUrl = "/Scripts/App/Reports/WOTimeSpent/Template/_WOTimeSpent.html";
                }
                WOTimeSpentComponentController.Name = "wotimespentcomponent";
                return WOTimeSpentComponentController;
            }());
            app.AddComponent(WOTimeSpentComponentController.Name, new WOTimeSpentComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WOTimeSpentComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var WOTimeSpentController = /** @class */ (function (_super) {
            __extends(WOTimeSpentController, _super);
            function WOTimeSpentController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return WOTimeSpentController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.WOTimeSpentController = WOTimeSpentController;
        app.AddController("WOTimeSpentController", WOTimeSpentController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WOTimeSpentController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var WOTimeSpentGridService = /** @class */ (function (_super) {
            __extends(WOTimeSpentGridService, _super);
            function WOTimeSpentGridService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.Cookie = null;
                _this.apiUrl = "";
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            WOTimeSpentGridService.prototype.Find = function (data) {
                // console.log(this.apiUrl + `/FillWorkOrderSearchGrid`);
                var DealerID;
                var CustomerID;
                var WONo;
                var State;
                var District;
                var SCStatus;
                var status;
                var FailureReason;
                var FromDate;
                var ToDate;
                var UserID;
                if (data.DealerID != undefined && data.DealerID != null) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = '';
                }
                if (data.CustomerID != undefined && data.CustomerID != null) {
                    CustomerID = data.CustomerID;
                }
                else {
                    CustomerID = '';
                }
                if (data.WONo != undefined && data.WONo != null) {
                    WONo = data.WONo;
                }
                else {
                    WONo = '';
                }
                if (data.State != undefined && data.State != null) {
                    State = data.State;
                }
                else {
                    State = '';
                }
                if (data.District != undefined && data.District != null) {
                    District = data.District;
                }
                else {
                    District = '';
                }
                if (data.SCStatus != undefined && data.SCStatus != null) {
                    SCStatus = data.SCStatus;
                }
                else {
                    SCStatus = '';
                }
                if (data.status != undefined && data.status != null) {
                    status = data.status;
                }
                else {
                    status = '';
                }
                if (data.FailureReason != undefined && data.FailureReason != null) {
                    FailureReason = data.FailureReason;
                }
                else {
                    FailureReason = '';
                }
                if (data.FromDate != undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = '';
                }
                if (data.ToDate != undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                if (data.UserID != undefined && data.UserID != null) {
                    UserID = data.UserID;
                }
                else {
                    UserID = '';
                }
                debugger;
                //console.log(this.apiUrl+"/WOFailureAnalysis");
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        CustomerID: CustomerID,
                        WONo: WONo,
                        State: State,
                        District: District,
                        SCStatus: SCStatus,
                        status: status,
                        FailureReason: FailureReason,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        UserID: UserID
                    }
                };
                // console.log(config);
                return this.ajaXUtility.Get({
                    //+ `/${"FillWorkOrderSearchGrid"}`
                    Url: this.apiUrl + "/WOTimeSpent",
                    Config: config
                });
            };
            WOTimeSpentGridService.prototype.GetWOTimeSpentGrid = function (data) {
                console.log(data);
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        DealerID: item.DealerID,
                        CustomerID: item.CustomerID,
                        ModelNo: item.ModelNo,
                        SCNo: item.SCNo,
                        SCCreatedOn: item.SCCreatedOn,
                        SCStatus: item.SCStatus,
                        WONo: item.WONo,
                        WOStatus: item.WOStatus,
                        AssignToUser: item.AssignToUser,
                        ActualStartTime: item.ActualStartTime,
                        ActualEndTime: item.ActualEndTime,
                        WorkStartTime: item.WorkStartTime,
                        WorkEndTime: item.WorkEndTime,
                        UserID: item.UserID
                    });
                }
                return list;
            };
            WOTimeSpentGridService.prototype.FindAvg = function (data) {
                debugger;
                //console.log(this.apiUrl + `/`);
                var CustomerID;
                var WONo;
                var State;
                var District;
                var SCStatus;
                var status;
                var FailureReason;
                var FromDate;
                var ToDate;
                var UserID;
                if (data.CustomerID != undefined && data.CustomerID != null) {
                    CustomerID = data.CustomerID;
                }
                else {
                    CustomerID = '';
                }
                if (data.WONo != undefined && data.WONo != null) {
                    WONo = data.WONo;
                }
                else {
                    WONo = '';
                }
                if (data.State != undefined && data.State != null) {
                    State = data.State;
                }
                else {
                    State = '';
                }
                if (data.District != undefined && data.District != null) {
                    District = data.District;
                }
                else {
                    District = '';
                }
                if (data.SCStatus != undefined && data.SCStatus != null) {
                    SCStatus = data.SCStatus;
                }
                else {
                    SCStatus = '';
                }
                if (data.status != undefined && data.status != null) {
                    status = data.status;
                }
                else {
                    status = '';
                }
                if (data.FailureReason != undefined && data.FailureReason != null) {
                    FailureReason = data.FailureReason;
                }
                else {
                    FailureReason = '';
                }
                if (data.FromDate != undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = '';
                }
                if (data.ToDate != undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = '';
                }
                if (data.UserID != undefined && data.UserID != null) {
                    UserID = data.UserID;
                }
                else {
                    UserID = '';
                }
                console.log(this.apiUrl + "/WOTimeSpentAvg");
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID'],
                        CustomerID: CustomerID,
                        WONo: WONo,
                        State: State,
                        District: District,
                        SCStatus: SCStatus,
                        status: status,
                        FailureReason: FailureReason,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        UserID: UserID
                    }
                };
                console.log(config);
                return this.ajaXUtility.Get({
                    //+ `/${"FillWorkOrderSearchGrid"}`
                    Url: this.apiUrl + "/WOTimeSpentAvg",
                    Config: config
                });
            };
            WOTimeSpentGridService.prototype.GetWOTimeSpentAvgGrid = function (data) {
                console.log(data);
                var list = new model.WOTimeSpentAvgReportmodel();
                if (data == null || data == undefined) {
                    list.TravelTime = "";
                    list.WorkTime = "";
                    list.WaitingTime = "";
                }
                else {
                    list.TravelTime = data.TravelTime,
                        list.WorkTime = data.WorkTime,
                        list.WaitingTime = data.WaitingTime;
                    //console.log(list);
                }
                return list;
            };
            WOTimeSpentGridService.prototype.FindSCDataStatus = function (data) {
                var config = {
                    params: {
                        CalledFrom: 'data'
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "ServiceStatus",
                    Config: config
                });
                //ServiceStatus
            };
            WOTimeSpentGridService.prototype.GetSCDataStatus = function (data) {
                console.log(data);
                var obj = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    obj.push({
                        //SCStatus: item.SCStatus,
                        Status: item.Status,
                        ID: item.ID
                    });
                }
                return obj;
            };
            WOTimeSpentGridService.prototype.FindFailureReason = function () {
                debugger;
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    // Url: `${this.url}/${"ProblemTypes"}`,
                    Url: this.url + "/" + "GetFillProblemTypeGridctrl",
                    Config: config
                });
            };
            WOTimeSpentGridService.prototype.GetFailureReason = function (data) {
                console.log(data);
                var obj = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    obj.push({
                        ProblemTypeID: item.ProblemTypeID,
                        FailureReason: item.ProblemType
                    });
                }
                return obj;
            };
            WOTimeSpentGridService.$inject = ["$http", "$q", "$cookieStore"];
            return WOTimeSpentGridService;
        }(GCPL.Service.BaseService));
        Service.WOTimeSpentGridService = WOTimeSpentGridService;
        //inject service
        app.AddService("WOTimeSpentGridService", WOTimeSpentGridService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=WOTimeSpentService.js.map
//# sourceMappingURL=ProjectAllocationEditModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ProjectAllocationEditController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ProjectAllocationEditController(_TSApproverListTypeService, _cookieStore, $location, _EmpManagerService, _InsertEmpManagerService, _DeleteEmpManagerService) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.ProjectAllocationGridView = null;
                    this.DealerID = null;
                    this.EmployeeID = null;
                    this.GetEmpName = null;
                    this.postArray = [];
                    this.alert = null;
                    this.deleteID = null;
                    this.alert2 = null;
                    this.deleteArray = [];
                    this.Cookie = null;
                    this.TSApproverListTypeService = _TSApproverListTypeService;
                    this.Cookie = _cookieStore;
                    this.EmployeeID = $location.search().EmployeeID;
                    this.EmpManagerService = _EmpManagerService;
                    this.InsertEmpManagerService = _InsertEmpManagerService;
                    this.DeleteEmpManagerService = _DeleteEmpManagerService;
                    this.ProjectAllocationGridView = Array();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                ProjectAllocationEditController.prototype.$onInit = function () {
                    this.Init();
                };
                ProjectAllocationEditController.prototype.selectFromDate = function (e) {
                    $(".txtFromDate").val(e);
                };
                ProjectAllocationEditController.prototype.selectToDate = function (e) {
                    $(".txtToDate").val(e);
                };
                //Page Load Define Values//
                ProjectAllocationEditController.prototype.Init = function () {
                    var _this = this;
                    $(".showUpdate").click(function () {
                    });
                    this.ProjectAllocationGridView = this.TSApproverListTypeService.FindTSApproverListStatus(this.DealerID).then((function (response) {
                        _this.ProjectAllocationGridView = _this.TSApproverListTypeService.GetTSApproverListStatus(response.data.Result);
                        console.log("***Project Allocation Grid View***");
                        console.log(_this.ProjectAllocationGridView);
                    }));
                    this.EmpManagerService.FindUserName().then((function (response) {
                        _this.GetEmpName = _this.EmpManagerService.GetUserName(response.data.Result);
                        console.log(_this.GetEmpName);
                    }));
                };
                ProjectAllocationEditController.prototype.EditData = function (item) {
                    this.postArray = [];
                    $("#updateCard").fadeIn(500);
                    var that = this;
                    $(".txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $(".txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                    console.log(" ************* ITEM ***************");
                    console.log(item);
                    //Checking Todays Date
                    var today = new Date();
                    var dd = today.getDate();
                    var mm = today.getMonth() + 1; //January is 0!
                    var yyyy = today.getFullYear();
                    if (dd < 10) {
                        dd = '0' + dd;
                    }
                    if (mm < 10) {
                        mm = '0' + mm;
                    }
                    today = mm + '/' + dd + '/' + yyyy;
                    console.log(today);
                    var d2 = new Date(item.EmpStartDate);
                    var d1 = new Date(today);
                    if (d2 < d1) {
                        $("#StartDate").prop('disabled', true);
                    }
                    if (d2 >= d1) {
                        $("#StartDate").prop('disabled', false);
                    }
                    $("#StartDate").val(item.EmpStartDate);
                    $("#EndDate").val(item.EmpEndDate);
                    $("#AllocationPercentage").val(item.AllocationPercentage);
                    this.postArray.push(item);
                };
                ProjectAllocationEditController.prototype.Update = function () {
                    if (this.postArray[0].Status === "Active") {
                        this.postArray[0].Status = 1;
                    }
                    else {
                        this.postArray[0].Status = 0;
                    }
                    this.postArray[0].EmpStartDate = $("#StartDate").val();
                    this.postArray[0].EmpEndDate = $("#EndDate").val();
                    console.log(this.postArray);
                    this.InsertEmpManagerService.PostEmpManagerMaster(this.postArray);
                    this.alert = "Data Updated Successfully";
                    $("#errorclose").hide();
                    $("#close").show();
                };
                ProjectAllocationEditController.prototype.initDelete = function (item) {
                    this.deleteID = item.TSApproverID;
                    this.alert2 = "This Record will be Permanently Deleted";
                    this.deleteArray.push({
                        TSApproverID: this.deleteID
                    });
                };
                ProjectAllocationEditController.prototype.Close = function () {
                };
                ProjectAllocationEditController.prototype.ErrorClose = function () {
                };
                ProjectAllocationEditController.prototype.Close2 = function () {
                    //location.href = "#!/ProjectAllocationEdit";
                };
                ProjectAllocationEditController.prototype.ErrorClose2 = function () {
                    console.log(this.deleteArray);
                    this.DeleteEmpManagerService.PostEmpDeleteMaster(this.deleteArray);
                    location.reload();
                };
                ProjectAllocationEditController.prototype.Back = function () {
                    location.href = "#!/TSApproverList";
                };
                ProjectAllocationEditController.$inject = ["TSApproverListTypeService", "$cookieStore", "$location", "EmpManagerService", "InsertEmpManagerService", "DeleteEmpManagerService"];
                return ProjectAllocationEditController;
            }());
            var ProjectAllocationEditComponentController = /** @class */ (function () {
                function ProjectAllocationEditComponentController() {
                    this.controller = ProjectAllocationEditController;
                    this.templateUrl = "/Scripts/App/ProjectAllocationEdit/ProjectAllocationEdit/Template/_ProjectAllocationEdit.html";
                }
                ProjectAllocationEditComponentController.Name = "projectallocationeditcomponent";
                return ProjectAllocationEditComponentController;
            }());
            app.AddComponent(ProjectAllocationEditComponentController.Name, new ProjectAllocationEditComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=ProjectAllocationEditComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ProjectAllocationEditController = /** @class */ (function (_super) {
            __extends(ProjectAllocationEditController, _super);
            function ProjectAllocationEditController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProjectAllocationEditController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ProjectAllocationEditController = ProjectAllocationEditController;
        app.AddController("ProjectAllocationEditController", ProjectAllocationEditController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ProjectAllocationEditController.js.map
//# sourceMappingURL=ProjectAllocationEditService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var TaskAllocationView = /** @class */ (function () {
            function TaskAllocationView() {
            }
            return TaskAllocationView;
        }());
        Model.TaskAllocationView = TaskAllocationView;
        var TaskAllocationSearchModel = /** @class */ (function () {
            function TaskAllocationSearchModel() {
            }
            return TaskAllocationSearchModel;
        }());
        Model.TaskAllocationSearchModel = TaskAllocationSearchModel;
        var TaskAllocateInsert = /** @class */ (function () {
            function TaskAllocateInsert() {
            }
            return TaskAllocateInsert;
        }());
        Model.TaskAllocateInsert = TaskAllocateInsert;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=UserTaskAllocationModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var TaskAllocation = GCPL.Model.TaskAllocationSearchModel;
            var TaskAllocationInsert = GCPL.Model.TaskAllocateInsert;
            var UserTaskAllocationController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function UserTaskAllocationController(_cookieStore, _CreateProjectTask, _UserNameService, _DeleteTaskAllocationService, _InsertTaskAllocationService) {
                    this._cookieStore = _cookieStore;
                    this.AllocatedTaskShow = null;
                    this.TaskAllocationInsertModel = null;
                    this.TaskAllocationSearch = null;
                    this.GetProject = null;
                    this.GetProjectByUser = null;
                    this.DealerID = null;
                    this.selectedUserID = null;
                    this.GetTaskName = null;
                    this.testData = null;
                    this.deleteID = null;
                    this.pushArray = [];
                    this.alert = null;
                    /* Services Used */
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.CreateProjectTaskService = _CreateProjectTask;
                    this.UserNameService = _UserNameService;
                    this.DeleteTaskAllocationService = _DeleteTaskAllocationService;
                    this.InsertTaskAllocationService = _InsertTaskAllocationService;
                    this.TaskAllocationSearch = new TaskAllocation();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.TaskAllocationInsertModel = new TaskAllocationInsert();
                }
                UserTaskAllocationController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                UserTaskAllocationController.prototype.Init = function () {
                    var _this = this;
                    //Project Name Dropdown
                    this.CreateProjectTaskService.FindProjectName().then((function (response) {
                        _this.GetProject = _this.CreateProjectTaskService.GetProjectName(response.data.Result);
                    }));
                };
                UserTaskAllocationController.prototype.GetProjectUsers = function () {
                    var _this = this;
                    var that = this;
                    $("#empName").autocomplete({
                        source: function (request, res) {
                            that.CreateProjectTaskService.FindProjectByUser(that.TaskAllocationSearch.ProjectNameID).then((function (response) {
                                var data = that.CreateProjectTaskService.GetProjectByUser(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Name,
                                        value: item.Name,
                                        id: item.EmployeeID,
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            var UserID = ui.item.id;
                            //that.UserListSearch.Name = ui.item.value;
                            that.selectedUserID = ui.item.id;
                            //that.displayManagerName = ui.item.value;
                            //that.tempManagerID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    this.CreateProjectTaskService.FindProjectByUser(this.TaskAllocationSearch.ProjectNameID).then((function (response) {
                        _this.GetProjectByUser = _this.CreateProjectTaskService.GetProjectByUser(response.data.Result);
                        console.log(_this.GetProjectByUser);
                    }));
                    this.Search();
                };
                UserTaskAllocationController.prototype.Search = function () {
                    var _this = this;
                    this.TaskAllocationSearch.UserID = this.selectedUserID;
                    this.CreateProjectTaskService.FindAllocationTaskGrid(this.TaskAllocationSearch).then((function (response) {
                        _this.AllocatedTaskShow = _this.CreateProjectTaskService.GetAllocationTaskGrid(response.data.Result);
                        console.log(_this.AllocatedTaskShow);
                    }));
                    $("#superGrid").show();
                };
                UserTaskAllocationController.prototype.TaskName = function () {
                    var _this = this;
                    this.GetTaskName = this.CreateProjectTaskService.FindTaskbyProject(this.TaskAllocationSearch.ProjectNameID).then((function (response) {
                        _this.GetTaskName = _this.CreateProjectTaskService.GetTaskbyProject(response.data.Result);
                    }));
                };
                UserTaskAllocationController.prototype.DeleteTask = function (TaskAllocationID, TaskName, Name) {
                    this.pushArray = [];
                    console.log("Id to be delete: === > " + TaskAllocationID);
                    this.pushArray.push({
                        TaskAllocationID: TaskAllocationID
                    });
                    console.log(this.pushArray);
                    this.DeleteTaskAllocationService.PostTimesheetTaskMaster(this.pushArray);
                    this.alert = Name + " has been deallocated from the task " + TaskName;
                    $("#errorclose").hide();
                    $("#close").show();
                };
                UserTaskAllocationController.prototype.Close = function () {
                    var _this = this;
                    this.CreateProjectTaskService.FindAllocationTaskGrid(this.TaskAllocationSearch).then((function (response) {
                        _this.AllocatedTaskShow = _this.CreateProjectTaskService.GetAllocationTaskGrid(response.data.Result);
                        console.log(_this.AllocatedTaskShow);
                    }));
                };
                UserTaskAllocationController.prototype.AllocateTask = function (EmpID, ManagerID, TaskID) {
                    this.pushArray = [];
                    this.TaskAllocationInsertModel.EmployeeID = EmpID;
                    this.TaskAllocationInsertModel.ManagerID = ManagerID;
                    this.TaskAllocationInsertModel.DealerID = this.DealerID;
                    this.TaskAllocationInsertModel.ProjectNameID = this.TaskAllocationSearch.ProjectNameID;
                    this.TaskAllocationInsertModel.TimesheetTaskID = TaskID;
                    console.log("Task Allocation Insert Model ++ ");
                    console.log(this.TaskAllocationInsertModel);
                    this.pushArray.push({
                        EmployeeID: EmpID,
                        ManagerID: ManagerID,
                        DealerID: this.DealerID,
                        ProjectNameID: this.TaskAllocationSearch.ProjectNameID,
                        TimesheetTaskID: TaskID
                    });
                    this.InsertTaskAllocationService.PostTimesheetTaskMaster(this.pushArray);
                    this.alert = "Task Allocation Successful!";
                    $("#errorclose").hide();
                    $("#close").show();
                };
                UserTaskAllocationController.$inject = ["$cookieStore", "CreateProjectTask", "UserNameService", "DeleteTaskAllocationService", "InsertTaskAllocationService"];
                return UserTaskAllocationController;
            }());
            var UserTaskAllocationComponentController = /** @class */ (function () {
                function UserTaskAllocationComponentController() {
                    this.controller = UserTaskAllocationController;
                    this.templateUrl = "/Scripts/App/UserTaskAllocation/Template/_UserTaskAllocation.html";
                }
                UserTaskAllocationComponentController.Name = "usertaskallocationcomponent";
                return UserTaskAllocationComponentController;
            }());
            app.AddComponent(UserTaskAllocationComponentController.Name, new UserTaskAllocationComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=UserTaskAllocationComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var UserTaskAllocationController = /** @class */ (function (_super) {
            __extends(UserTaskAllocationController, _super);
            function UserTaskAllocationController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return UserTaskAllocationController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.UserTaskAllocationController = UserTaskAllocationController;
        app.AddController("UserTaskAllocationController", UserTaskAllocationController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=UserTaskAllocationController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
//Delete Task Allocation
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        debugger;
        var DeleteTaskAllocationService = /** @class */ (function (_super) {
            __extends(DeleteTaskAllocationService, _super);
            function DeleteTaskAllocationService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "DeleteTaskAllocation";
                return _this;
            }
            DeleteTaskAllocationService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            DeleteTaskAllocationService.prototype.PostTimesheetTaskMaster = function (data) {
                var url = this.apiUrl;
                // console.log(url);
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            DeleteTaskAllocationService.$inject = ["$http", "$q"];
            return DeleteTaskAllocationService;
        }(GCPL.Service.BaseService));
        Service.DeleteTaskAllocationService = DeleteTaskAllocationService;
        app.AddService("DeleteTaskAllocationService", DeleteTaskAllocationService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Insert Task Allocation
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        debugger;
        var InsertTaskAllocationService = /** @class */ (function (_super) {
            __extends(InsertTaskAllocationService, _super);
            function InsertTaskAllocationService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "InsertTaskAllocation";
                return _this;
            }
            InsertTaskAllocationService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            InsertTaskAllocationService.prototype.PostTimesheetTaskMaster = function (data) {
                var url = this.apiUrl;
                // console.log(url);
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            InsertTaskAllocationService.$inject = ["$http", "$q"];
            return InsertTaskAllocationService;
        }(GCPL.Service.BaseService));
        Service.InsertTaskAllocationService = InsertTaskAllocationService;
        app.AddService("InsertTaskAllocationService", InsertTaskAllocationService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=UserTaskAllocationService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var InsertSkillsAdmin = /** @class */ (function () {
            function InsertSkillsAdmin() {
            }
            return InsertSkillsAdmin;
        }());
        Model.InsertSkillsAdmin = InsertSkillsAdmin;
        var SkillsTypeGrid = /** @class */ (function () {
            function SkillsTypeGrid() {
            }
            return SkillsTypeGrid;
        }());
        Model.SkillsTypeGrid = SkillsTypeGrid;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SkillsAdminModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var InsertSkillsAdminModel = GCPL.Model.InsertSkillsAdmin;
            var SkillsAdminController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function SkillsAdminController(_InsertSkillsAdminService, _cookieStore, _SkillsTypeService, _DeleteSkillsAdminService) {
                    this._cookieStore = _cookieStore;
                    this.InsertSkillsAdmin = null;
                    this.SkillsTypeGrid = null;
                    this.alert = null;
                    this.alerts = null;
                    this.DealerID = null;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.deleteID = null;
                    this.deleteName = null;
                    this.deleteSubName = null;
                    this.Cookie = null;
                    this.InsertSkillsAdminService = _InsertSkillsAdminService;
                    this.Cookie = _cookieStore;
                    this.SkillsTypeService = _SkillsTypeService;
                    this.DeleteSkillsAdminService = _DeleteSkillsAdminService;
                    this.InsertSkillsAdmin = new InsertSkillsAdminModel();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                SkillsAdminController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                SkillsAdminController.prototype.Init = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                // Insert Data
                SkillsAdminController.prototype.InsertData = function () {
                    var _this = this;
                    if (this.InsertSkillsAdmin.SkillName == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter the Skill Name";
                        return false;
                    }
                    else if (this.InsertSkillsAdmin.SubSkillName == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter the SubSkill Name";
                        return false;
                    }
                    else if (this.InsertSkillsAdmin.Description == undefined) {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Enter the Skill Description";
                        return false;
                    }
                    else if ($("#Status").val() == "10") {
                        $("#errorclose").show();
                        $("#close").hide();
                        this.alert = "Please Select Status";
                        return false;
                    }
                    else {
                        this.InsertSkillsAdmin.DealerID = this.DealerID;
                        console.log("Insert Data: ");
                        console.log(this.InsertSkillsAdmin);
                        this.InsertSkillsAdminService.PostSkillsAdminData(this.InsertSkillsAdmin).then((function (response) {
                            var result = response.data.Result;
                            console.log("Is Exits: ");
                            console.log(result[0].IsExists);
                            if (result[0].IsExists === "0") {
                                _this.alert = "Data Successfully inserted";
                                $("#errorclose").hide();
                                $("#close").show();
                            }
                            else {
                                if (result[0].IsExists === "1") {
                                    _this.alert = result[0].SubSkillName + " already exists under the Skill type " + result[0].SkillName;
                                    $("#errorclose").hide();
                                    $("#close").show();
                                }
                                else {
                                    _this.alert = 'Oops Some Error Occured';
                                    $("#errorclose").hide();
                                    $("#close").show();
                                }
                            }
                        }));
                    }
                };
                // Modal Close Button
                SkillsAdminController.prototype.Close = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                SkillsAdminController.prototype.Closes = function () {
                };
                //Clear Button
                SkillsAdminController.prototype.Clear = function () {
                    this.InsertSkillsAdmin.SkillName = null;
                    this.InsertSkillsAdmin.SubSkillName = null;
                    this.InsertSkillsAdmin.Description = null;
                    $('#Status').prop('selectedIndex', 0);
                };
                //Get ID to delete item
                SkillsAdminController.prototype.initDelete = function (item) {
                    this.deleteID = item.SkillsAdminID;
                    this.deleteName = item.SkillName;
                    this.deleteSubName = item.SubSkillName;
                    this.alerts = " Skilltype " + this.deleteName + "(" + this.deleteSubName + ") will be deleted permanently!";
                    $("#errorcloses").show();
                    $("#closes").show();
                };
                //Model Confirm Button (To confirm delete item)
                SkillsAdminController.prototype.ErrorCloses = function () {
                    console.log("Delete ID is " + this.deleteID);
                    this.InsertSkillsAdmin.SkillsAdminID = this.deleteID;
                    var pushArray = [];
                    pushArray.push({
                        SkillsAdminID: this.deleteID
                    });
                    this.DeleteSkillsAdminService.PostSkillsAdminData(pushArray);
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                    location.reload();
                };
                SkillsAdminController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.SkillsTypeGrid = this.SkillsTypeService.FindSkillsTypeStatus(this.DealerID).then((function (response) {
                        _this.SkillsTypeGrid = _this.SkillsTypeService.GetSkillsTypeStatus(response.data.Result);
                        _this.SkillsTypeGrid.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.SkillsTypeGrid.slice(0, that.numRecords);
                    }));
                };
                SkillsAdminController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.SkillsTypeGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                SkillsAdminController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.SkillsTypeGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                SkillsAdminController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                SkillsAdminController.$inject = ["InsertSkillsAdminService", "$cookieStore", "SkillsTypeService", "DeleteSkillsAdminService"];
                return SkillsAdminController;
            }());
            var SkillsAdminComponentController = /** @class */ (function () {
                function SkillsAdminComponentController() {
                    this.controller = SkillsAdminController;
                    this.templateUrl = "/Scripts/App/SkillsModule/SkillsAdmin/Template/_SkillsAdmin.html";
                }
                SkillsAdminComponentController.Name = "skillsadmincomponent";
                return SkillsAdminComponentController;
            }());
            app.AddComponent(SkillsAdminComponentController.Name, new SkillsAdminComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=SkillsAdminComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var SkillsAdminController = /** @class */ (function (_super) {
            __extends(SkillsAdminController, _super);
            function SkillsAdminController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SkillsAdminController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.SkillsAdminController = SkillsAdminController;
        app.AddController("SkillsAdminController", SkillsAdminController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SkillsAdminController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// Insert SkillsAdmin
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var InsertSkillsAdminService = /** @class */ (function (_super) {
            __extends(InsertSkillsAdminService, _super);
            function InsertSkillsAdminService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "InsertSkillsType";
                return _this;
            }
            InsertSkillsAdminService.prototype.Find = function () {
                debugger;
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            InsertSkillsAdminService.prototype.PostSkillsAdminData = function (data) {
                var url = this.apiUrl;
                // console.log(url);
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data
                });
            };
            InsertSkillsAdminService.$inject = ["$http", "$q"];
            return InsertSkillsAdminService;
        }(GCPL.Service.BaseService));
        Service.InsertSkillsAdminService = InsertSkillsAdminService;
        app.AddService("InsertSkillsAdminService", InsertSkillsAdminService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Display
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var SkillsTypeService = /** @class */ (function (_super) {
            __extends(SkillsTypeService, _super);
            function SkillsTypeService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            SkillsTypeService.prototype.FindSkillsTypeStatus = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SKillsTypeShow",
                    Config: config
                });
            };
            SkillsTypeService.prototype.GetSkillsTypeStatus = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        Description: item.Description,
                        IsActive: item.IsActive,
                        SkillName: item.SkillName,
                        SkillsAdminID: item.SkillsAdminID,
                        SubSkillName: item.SubSkillName
                    });
                }
                return list;
            };
            SkillsTypeService.$inject = ["$http", "$q", "$cookieStore"];
            return SkillsTypeService;
        }(GCPL.Service.BaseService));
        Service.SkillsTypeService = SkillsTypeService;
        app.AddService("SkillsTypeService", SkillsTypeService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
// Delete SkillsAdmin
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var DeleteSkillsAdminService = /** @class */ (function (_super) {
            __extends(DeleteSkillsAdminService, _super);
            function DeleteSkillsAdminService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "DeleteSkillsType";
                return _this;
            }
            DeleteSkillsAdminService.prototype.Find = function () {
                debugger;
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            DeleteSkillsAdminService.prototype.PostSkillsAdminData = function (data) {
                var url = this.apiUrl;
                // console.log(url);
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data
                });
            };
            DeleteSkillsAdminService.$inject = ["$http", "$q"];
            return DeleteSkillsAdminService;
        }(GCPL.Service.BaseService));
        Service.DeleteSkillsAdminService = DeleteSkillsAdminService;
        app.AddService("DeleteSkillsAdminService", DeleteSkillsAdminService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SkillsAdminService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var SkillNameDD = /** @class */ (function () {
            function SkillNameDD() {
            }
            return SkillNameDD;
        }());
        Model.SkillNameDD = SkillNameDD;
        var SubSkillNameDD = /** @class */ (function () {
            function SubSkillNameDD() {
            }
            return SubSkillNameDD;
        }());
        Model.SubSkillNameDD = SubSkillNameDD;
        var InsertEmployeeSkills = /** @class */ (function () {
            function InsertEmployeeSkills() {
            }
            return InsertEmployeeSkills;
        }());
        Model.InsertEmployeeSkills = InsertEmployeeSkills;
        var ProjectNameAC = /** @class */ (function () {
            function ProjectNameAC() {
            }
            return ProjectNameAC;
        }());
        Model.ProjectNameAC = ProjectNameAC;
        var EmployeeTSAC = /** @class */ (function () {
            function EmployeeTSAC() {
            }
            return EmployeeTSAC;
        }());
        Model.EmployeeTSAC = EmployeeTSAC;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AddSkillsModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var InsertEmployeeSkillsModel = GCPL.Model.InsertEmployeeSkills;
            var AddSkillsController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function AddSkillsController(_cookieStore, _CreateProjectTaskService, _AddSkillsService, _InsertEmployeeSkillsService, $location, _EditMySkillsetService) {
                    this._cookieStore = _cookieStore;
                    this.$location = $location;
                    this.GetUser = null;
                    this.GetSkillName = null;
                    this.DealerID = null;
                    this.GetSubSkillName = null;
                    this.tempID = null;
                    this.InsertEmployeeSkills = [];
                    this.InsertSingleEmployee = null;
                    this.pushArray = [];
                    this.UserID = [];
                    this.alert = null;
                    this.EmployeeSkillSetID = null;
                    this.updateMode = false;
                    //Inject Services
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.CreateProjectTaskService = _CreateProjectTaskService;
                    this.AddSkillsService = _AddSkillsService;
                    this.InsertEmployeeSkillsService = _InsertEmployeeSkillsService;
                    this.EmployeeSkillSetID = $location.search().EmployeeSkillSetID;
                    this.EditMySkillsetService = _EditMySkillsetService;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.InsertEmployeeSkills = new Array();
                    this.InsertSingleEmployee = new InsertEmployeeSkillsModel();
                }
                AddSkillsController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                AddSkillsController.prototype.Init = function () {
                    var _this = this;
                    // Employee Name
                    this.CreateProjectTaskService.FindUsername().then((function (response) {
                        _this.GetUser = _this.CreateProjectTaskService.GetUsername(response.data.Result);
                        console.log(_this.GetUser);
                        var username = _this.GetUser[0].Name;
                        $("#EmpName").val(username);
                        $("#EmpCode").val(_this.GetUser[0].UserID);
                        _this.tempID = _this.GetUser[0].UserID;
                    }));
                    //Skill Name DD
                    this.AddSkillsService.FindSkillName(this.DealerID).then((function (response) {
                        _this.GetSkillName = _this.AddSkillsService.GetSkillName(response.data.Result);
                    }));
                    if (this.EmployeeSkillSetID != null) {
                        this.updateMode = true;
                        this.EditMySkillsetService.Find(this.EmployeeSkillSetID).then((function (response) {
                            _this.InsertSingleEmployee = _this.EditMySkillsetService.GetEdit(response.data.Result);
                            console.log("Data on Edit: ");
                            console.log(_this.InsertSingleEmployee);
                            _this.AddSkillsService.FindSubSkillName(_this.DealerID, _this.InsertSingleEmployee.SkillName).then((function (response) {
                                _this.GetSubSkillName = _this.AddSkillsService.GetSubSkillName(response.data.Result);
                            }));
                        }));
                    }
                };
                AddSkillsController.prototype.SubSkillsNameDD = function () {
                    var _this = this;
                    this.AddSkillsService.FindSubSkillName(this.DealerID, this.InsertSingleEmployee.SkillName).then((function (response) {
                        _this.GetSubSkillName = _this.AddSkillsService.GetSubSkillName(response.data.Result);
                    }));
                };
                AddSkillsController.prototype.addCart = function () {
                    if (this.InsertSingleEmployee.SkillName === "Select") {
                        this.alert = "Please Select a skillset";
                        $("#errorclose").hide();
                        $("#close").show();
                        return false;
                    }
                    else if (this.InsertSingleEmployee.SubSkillName === "Select") {
                        this.alert = "Pease Select a subskill";
                        $("#errorclose").hide();
                        $("#close").show();
                        return false;
                    }
                    else if (this.InsertSingleEmployee.NumberOfYears == undefined) {
                        this.alert = "Pease Enter number of years of experience";
                        $("#errorclose").hide();
                        $("#close").show();
                        return false;
                    }
                    else if (this.InsertSingleEmployee.Project == undefined) {
                        this.alert = "Pease Enter Project Name";
                        $("#errorclose").hide();
                        $("#close").show();
                        return false;
                    }
                    else if (this.InsertSingleEmployee.ClientName == undefined) {
                        this.alert = "Pease Enter Client Name";
                        $("#errorclose").hide();
                        $("#close").show();
                        return false;
                    }
                    else if (this.InsertSingleEmployee.Description == undefined) {
                        this.alert = "Pease Enter Description";
                        $("#errorclose").hide();
                        $("#close").show();
                        return false;
                    }
                    else {
                        this.InsertSingleEmployee.EmployeeID = this.tempID;
                        this.InsertSingleEmployee.DealerID = this.DealerID;
                        this.InsertEmployeeSkills.push(this.InsertSingleEmployee);
                        this.InsertSingleEmployee = null;
                        console.log(this.InsertEmployeeSkills);
                        this.alert = "Details added! Click submit to save data. ";
                        $("#errorclose").hide();
                        $("#close").show();
                    }
                };
                AddSkillsController.prototype.postData = function () {
                    var _this = this;
                    if (this.InsertEmployeeSkills.length > 0) {
                        console.log("Insert Data: ================= ");
                        console.log(this.InsertEmployeeSkills);
                        this.InsertEmployeeSkillsService.PostEmpSkillsData(this.InsertEmployeeSkills).then((function (response) {
                            if ((response.data.Result) != null) {
                                _this.alert = "Data has been Inserted Successfully";
                                $("#errorclose").show();
                                $("#close").hide();
                            }
                            else {
                                _this.alert = "Oops! something wrong happened.";
                                $("#errorclose").show();
                                $("#close").hide();
                            }
                        }));
                    }
                    else {
                        this.alert = "Please add something first";
                        $("#errorclose").hide();
                        $("#close").show();
                    }
                };
                //While Updating
                AddSkillsController.prototype.DirectUpdate = function (item) {
                    var _this = this;
                    this.InsertEmployeeSkills.push(this.InsertSingleEmployee);
                    console.log("Update Data: ================= ");
                    console.log(this.InsertEmployeeSkills);
                    this.InsertEmployeeSkillsService.PostEmpSkillsData(this.InsertEmployeeSkills).then((function (response) {
                        if ((response.data.Result) != null) {
                            _this.alert = "Data has been Updated Successfully";
                            $("#errorclose").show();
                            $("#close").hide();
                        }
                        else {
                            _this.alert = "Oops! something wrong happened.";
                            $("#errorclose").show();
                            $("#close").hide();
                        }
                    }));
                };
                AddSkillsController.prototype.ErrorClose = function () {
                    location.href = "#!/MySkillset";
                };
                AddSkillsController.prototype.deleteItem = function (item) {
                    var index = this.InsertEmployeeSkills.indexOf(item);
                    this.InsertEmployeeSkills.splice(index, 1);
                };
                AddSkillsController.prototype.ClearCart = function () {
                    this.InsertEmployeeSkills = [];
                };
                AddSkillsController.prototype.Back = function () {
                    location.href = "#!/MySkillset";
                };
                AddSkillsController.$inject = ["$cookieStore", "CreateProjectTask", "AddSkillsService", "InsertEmployeeSkillsService", "$location", "EditMySkillsetService"];
                return AddSkillsController;
            }());
            var AddSkillsComponentController = /** @class */ (function () {
                function AddSkillsComponentController() {
                    this.controller = AddSkillsController;
                    this.templateUrl = "/Scripts/App/SkillsModule/AddSkills/Template/_AddSkills.html";
                }
                AddSkillsComponentController.Name = "addskillscomponent";
                return AddSkillsComponentController;
            }());
            app.AddComponent(AddSkillsComponentController.Name, new AddSkillsComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=AddSkillsComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var AddSkillsController = /** @class */ (function (_super) {
            __extends(AddSkillsController, _super);
            function AddSkillsController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AddSkillsController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.AddSkillsController = AddSkillsController;
        app.AddController("AddSkillsController", AddSkillsController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AddSkillsController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var AddSkillsService = /** @class */ (function (_super) {
            __extends(AddSkillsService, _super);
            function AddSkillsService($http, $q, __cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.__cookieStore = __cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = __cookieStore;
                return _this;
            }
            AddSkillsService.prototype.FindSkillName = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SkillNameDDL",
                    Config: config
                });
            };
            AddSkillsService.prototype.GetSkillName = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        SkillName: item.SkillName
                    });
                }
                return list;
            };
            AddSkillsService.prototype.FindSkillNameAC = function (data1, data2) {
                var config = {
                    params: {
                        DealerID: data1,
                        PreText: data2
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SkillNameDropdown",
                    Config: config
                });
            };
            AddSkillsService.prototype.GetSkillNameAC = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        SkillName: item.SkillName
                    });
                }
                return list;
            };
            AddSkillsService.prototype.FindSubSkillName = function (data1, data2) {
                var config = {
                    params: {
                        DealerID: data1,
                        SkillName: data2
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SubSkillNameDDL",
                    Config: config
                });
            };
            AddSkillsService.prototype.GetSubSkillName = function (data) {
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        SubSkillName: item.SubSkillName
                    });
                }
                return list;
            };
            AddSkillsService.prototype.FindSubSkillNameAC = function (data1, data2, data3) {
                var config = {
                    params: {
                        DealerID: data1,
                        PreText: data2,
                        SkillName: data3
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SubSkillNameAuto",
                    Config: config
                });
            };
            AddSkillsService.prototype.GetSubSkillNameAC = function (data) {
                var list = Array();
                for (var _i = 0, data_4 = data; _i < data_4.length; _i++) {
                    var item = data_4[_i];
                    list.push({
                        SubSkillName: item.SubSkillName
                    });
                }
                return list;
            };
            AddSkillsService.$inject = ["$http", "$q", "$cookieStore"];
            return AddSkillsService;
        }(GCPL.Service.BaseService));
        Service.AddSkillsService = AddSkillsService;
        app.AddService("AddSkillsService", AddSkillsService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Insert Employee Skills
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var InsertEmployeeSkillsService = /** @class */ (function (_super) {
            __extends(InsertEmployeeSkillsService, _super);
            function InsertEmployeeSkillsService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "InsertEmployeeSkills";
                return _this;
            }
            InsertEmployeeSkillsService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            InsertEmployeeSkillsService.prototype.PostEmpSkillsData = function (data) {
                var url = this.apiUrl;
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data
                });
            };
            InsertEmployeeSkillsService.$inject = ["$http", "$q"];
            return InsertEmployeeSkillsService;
        }(GCPL.Service.BaseService));
        Service.InsertEmployeeSkillsService = InsertEmployeeSkillsService;
        app.AddService("InsertEmployeeSkillsService", InsertEmployeeSkillsService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Edit Employee Skills
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var EditMySkillsetService = /** @class */ (function (_super) {
            __extends(EditMySkillsetService, _super);
            function EditMySkillsetService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "EditMySkillset";
                return _this;
            }
            EditMySkillsetService.prototype.Find = function (data) {
                var config = {
                    params: {
                        EmployeeSkillSetID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            EditMySkillsetService.prototype.GetEdit = function (data) {
                var obj = new model.InsertEmployeeSkills();
                obj.ClientName = data.ClientName;
                obj.Description = data.Description;
                obj.EmployeeID = data.EmployeeID;
                obj.EmployeeSkillSetID = data.EmployeeSkillSetID;
                obj.NumberOfYears = data.NumberOfYears;
                obj.Project = data.Project;
                obj.SkillName = data.SkillName;
                obj.SubSkillName = data.SubSkillName;
                obj.WhenCreated = data.WhenCreated;
                return obj;
            };
            EditMySkillsetService.$inject = ["$http", "$q"];
            return EditMySkillsetService;
        }(GCPL.Service.BaseService));
        Service.EditMySkillsetService = EditMySkillsetService;
        app.AddService("EditMySkillsetService", EditMySkillsetService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AddSkillsService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var MySkillsetGridView = /** @class */ (function () {
            function MySkillsetGridView() {
            }
            return MySkillsetGridView;
        }());
        Model.MySkillsetGridView = MySkillsetGridView;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=MySkillsetModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var MySkillsetGridModel = GCPL.Model.MySkillsetGridView;
            var MySkillsetController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function MySkillsetController(_cookieStore, _CreateProjectTaskService, _MySkillsetService, _DeleteMySkillsetService, _SkillsAvailabilityService) {
                    this._cookieStore = _cookieStore;
                    this.GetUser = null;
                    this.tempID = null;
                    this.MySkillsetGrid = null;
                    this.DealerID = null;
                    this.UserID = null;
                    this.alert = null;
                    this.deleteID = null;
                    this.singleEntry = null;
                    this.EmpSkills = null;
                    this.dataAvailable = null;
                    //Services
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.CreateProjectTaskService = _CreateProjectTaskService;
                    this.MySkillsetService = _MySkillsetService;
                    this.DeleteMySkillsetService = _DeleteMySkillsetService;
                    this.SkillsAvailabilityService = _SkillsAvailabilityService;
                    this.MySkillsetGrid = new Array();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.singleEntry = new MySkillsetGridModel();
                    this.EmpSkills = new Array();
                }
                MySkillsetController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                MySkillsetController.prototype.Init = function () {
                    var _this = this;
                    // Employee Name
                    this.CreateProjectTaskService.FindUsername().then((function (response) {
                        _this.GetUser = _this.CreateProjectTaskService.GetUsername(response.data.Result);
                        console.log(_this.GetUser);
                        var username = _this.GetUser[0].Name;
                        $("#EmpName").val(username);
                        $("#EmpCode").val(_this.GetUser[0].UserID);
                        _this.tempID = _this.GetUser[0].UserID;
                    }));
                    this.MySkillsetService.FindMySkillSet(this.DealerID, this.UserID).then((function (response) {
                        _this.MySkillsetGrid = _this.MySkillsetService.GetMySkillSet(response.data.Result);
                        console.log("HERE ==>");
                        console.log(_this.MySkillsetGrid.length);
                        if (_this.MySkillsetGrid.length > 0) {
                            $("#nullDataDiv").hide();
                            $("#dataSummary").show();
                            $("#dataTable").show();
                        }
                        else {
                            $("#nullDataDiv").show();
                            $("#dataSummary").hide();
                            $("#dataTable").hide();
                        }
                    }));
                    this.SkillsAvailabilityService.FindEmployeeDistinctSkills(this.DealerID).then((function (response) {
                        _this.EmpSkills = _this.SkillsAvailabilityService.GetEmployeeDistinctSkills(response.data.Result);
                    }));
                };
                //Delete Item Method 
                MySkillsetController.prototype.DeleteItem = function (item) {
                    this.deleteID = item.EmployeeSkillSetID;
                    this.singleEntry = item;
                    var SkillName = item.SkillName;
                    var SubSkillName = item.SubSkillName;
                    this.alert = "Skillset " + SkillName + "( " + SubSkillName + " ) will be deleted permanently!";
                    $("#close").show();
                    $("#errorclose").show();
                };
                //Modal Confirm Button
                MySkillsetController.prototype.Close = function () {
                    var _this = this;
                    console.log(this.deleteID + " Deleted! :D");
                    this.DeleteMySkillsetService.DeleteMySkillset(this.singleEntry).then((function (response) {
                        console.log(response.data.Result);
                        //Refresh Div after Deletion
                        _this.MySkillsetService.FindMySkillSet(_this.DealerID, _this.UserID).then((function (response) {
                            _this.MySkillsetGrid = _this.MySkillsetService.GetMySkillSet(response.data.Result);
                            if (_this.MySkillsetGrid.length > 0) {
                                $("#nullDataDiv").hide();
                                $("#dataSummary").show();
                                $("#dataTable").show();
                            }
                            else {
                                $("#nullDataDiv").show();
                                $("#dataSummary").hide();
                                $("#dataTable").hide();
                            }
                        }));
                        _this.SkillsAvailabilityService.FindEmployeeDistinctSkills(_this.DealerID).then((function (response) {
                            _this.EmpSkills = _this.SkillsAvailabilityService.GetEmployeeDistinctSkills(response.data.Result);
                        }));
                    }));
                    $("#close").hide();
                    $("#errorclose").show();
                };
                //Modal Cancel Button
                MySkillsetController.prototype.ErrorClose = function () {
                };
                MySkillsetController.prototype.AddNew = function () {
                    location.href = "#!/AddSkills";
                };
                MySkillsetController.$inject = ["$cookieStore", "CreateProjectTask", "MySkillsetService", "DeleteMySkillsetService", "SkillsAvailabilityService"];
                return MySkillsetController;
            }());
            var MySkillsetComponentController = /** @class */ (function () {
                function MySkillsetComponentController() {
                    this.controller = MySkillsetController;
                    this.templateUrl = "/Scripts/App/SkillsModule/MySkillset/Template/_MySkillset.html";
                }
                MySkillsetComponentController.Name = "myskillsetcomponent";
                return MySkillsetComponentController;
            }());
            app.AddComponent(MySkillsetComponentController.Name, new MySkillsetComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=MySkillsetComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var MySkillsetController = /** @class */ (function (_super) {
            __extends(MySkillsetController, _super);
            function MySkillsetController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return MySkillsetController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.MySkillsetController = MySkillsetController;
        app.AddController("MySkillsetController", MySkillsetController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=MySkillsetController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var MySkillsetService = /** @class */ (function (_super) {
            __extends(MySkillsetService, _super);
            function MySkillsetService($http, $q, __cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.__cookieStore = __cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = __cookieStore;
                return _this;
            }
            MySkillsetService.prototype.FindMySkillSet = function (data1, data2) {
                var config = {
                    params: {
                        DealerID: data1,
                        EmployeeID: data2
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/MySkillsetShow",
                    Config: config
                });
            };
            MySkillsetService.prototype.GetMySkillSet = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        ClientName: item.ClientName,
                        Description: item.Description,
                        EmployeeID: item.EmployeeID,
                        EmployeeSkillSetID: item.EmployeeSkillSetID,
                        NumberOfYears: item.NumberOfYears,
                        Project: item.Project,
                        SkillName: item.SkillName,
                        SubSkillName: item.SubSkillName,
                        WhenCreated: item.WhenCreated
                    });
                }
                return list;
            };
            MySkillsetService.$inject = ["$http", "$q", "$cookieStore"];
            return MySkillsetService;
        }(GCPL.Service.BaseService));
        Service.MySkillsetService = MySkillsetService;
        app.AddService("MySkillsetService", MySkillsetService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Delete MySkillset Service
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var DeleteMySkillsetService = /** @class */ (function (_super) {
            __extends(DeleteMySkillsetService, _super);
            function DeleteMySkillsetService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "DeleteMySkillset";
                return _this;
            }
            DeleteMySkillsetService.prototype.Find = function () {
                return this.ajaXUtility.Get({
                    Url: this.apiUrl
                });
            };
            DeleteMySkillsetService.prototype.DeleteMySkillset = function (data) {
                var url = this.apiUrl;
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data
                });
            };
            DeleteMySkillsetService.$inject = ["$http", "$q"];
            return DeleteMySkillsetService;
        }(GCPL.Service.BaseService));
        Service.DeleteMySkillsetService = DeleteMySkillsetService;
        app.AddService("DeleteMySkillsetService", DeleteMySkillsetService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=MySkillsetService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var SkillsAvailabilityGrid = /** @class */ (function () {
            function SkillsAvailabilityGrid() {
            }
            return SkillsAvailabilityGrid;
        }());
        Model.SkillsAvailabilityGrid = SkillsAvailabilityGrid;
        var EmployeeSkills = /** @class */ (function () {
            function EmployeeSkills() {
            }
            return EmployeeSkills;
        }());
        Model.EmployeeSkills = EmployeeSkills;
        var EmployeeDistinctSkills = /** @class */ (function () {
            function EmployeeDistinctSkills() {
            }
            return EmployeeDistinctSkills;
        }());
        Model.EmployeeDistinctSkills = EmployeeDistinctSkills;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SkillsAvailabilityModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var SkillsAvailabilityModel = GCPL.Model.SkillsAvailabilityGrid;
            var SkillsAvailabilityController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function SkillsAvailabilityController(_SkillsAvailabilityService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.SkillsAvailabilityView = null;
                    this.DealerID = null;
                    this.UserID = null;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.Cookie = null;
                    this.SkillsAvailabilityService = _SkillsAvailabilityService;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.SkillsAvailabilityView = new SkillsAvailabilityModel();
                }
                SkillsAvailabilityController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                SkillsAvailabilityController.prototype.Init = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                SkillsAvailabilityController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.SkillsAvailabilityView = this.SkillsAvailabilityService.FindSkillsAvailability(this.DealerID).then((function (response) {
                        _this.SkillsAvailabilityView = _this.SkillsAvailabilityService.GetSkillsAvailability(response.data.Result);
                        _this.SkillsAvailabilityView.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.SkillsAvailabilityView.slice(0, that.numRecords);
                    }));
                };
                SkillsAvailabilityController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.SkillsAvailabilityView.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                SkillsAvailabilityController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.SkillsAvailabilityView.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                SkillsAvailabilityController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                SkillsAvailabilityController.prototype.downloadCSV = function (csv, filename) {
                    var csvFile;
                    var downloadLink;
                    // CSV file
                    csvFile = new Blob([csv], { type: "text/csv" });
                    // Download link
                    downloadLink = document.createElement("a");
                    // File name
                    downloadLink.download = filename;
                    // Create a link to the file
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    // Hide download link
                    downloadLink.style.display = "none";
                    // Add the link to DOM
                    document.body.appendChild(downloadLink);
                    // Click download link
                    downloadLink.click();
                };
                SkillsAvailabilityController.prototype.exportTableToCSV = function (filename) {
                    var csv = [];
                    var rows = document.querySelectorAll("table tr");
                    for (var i = 0; i < rows.length; i++) {
                        var row = [], cols = rows[i].querySelectorAll("td, th");
                        for (var j = 0; j < cols.length; j++)
                            row.push(cols[j].innerHTML);
                        csv.push(row.join(","));
                    }
                    // Download CSV file
                    this.downloadCSV(csv.join("\n"), filename);
                };
                SkillsAvailabilityController.$inject = ["SkillsAvailabilityService", "$cookieStore"];
                return SkillsAvailabilityController;
            }());
            var SkillsAvailabilityComponentController = /** @class */ (function () {
                function SkillsAvailabilityComponentController() {
                    this.controller = SkillsAvailabilityController;
                    this.templateUrl = "/Scripts/App/SkillsModule/SkillsAvailability/Template/_SkillsAvailability.html";
                }
                SkillsAvailabilityComponentController.Name = "skillsavailabilitycomponent";
                return SkillsAvailabilityComponentController;
            }());
            app.AddComponent(SkillsAvailabilityComponentController.Name, new SkillsAvailabilityComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=SkillsAvailabilityComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var SkillsAvailabilityController = /** @class */ (function (_super) {
            __extends(SkillsAvailabilityController, _super);
            function SkillsAvailabilityController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SkillsAvailabilityController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.SkillsAvailabilityController = SkillsAvailabilityController;
        app.AddController("SkillsAvailabilityController", SkillsAvailabilityController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SkillsAvailabilityController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var SkillsAvailabilityService = /** @class */ (function (_super) {
            __extends(SkillsAvailabilityService, _super);
            function SkillsAvailabilityService($http, $q, __cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.__cookieStore = __cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = __cookieStore;
                return _this;
            }
            SkillsAvailabilityService.prototype.FindSkillsAvailability = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/SkillsAvailabilityShow",
                    Config: config
                });
            };
            SkillsAvailabilityService.prototype.GetSkillsAvailability = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        AllocationEndDate: item.AllocationEndDate,
                        AllocationPercentage: item.AllocationPercentage,
                        CurrentProject: item.CurrentProject,
                        EmployeeName: item.EmployeeName,
                        ProjectEndDate: item.ProjectEndDate,
                        Skillset: item.SKillset,
                        SubSkill: item.SubSkill,
                        TotalExp: item.TotalExp,
                        EmployeeID: item.EmployeeID
                    });
                }
                return list;
            };
            SkillsAvailabilityService.prototype.FindEmployeeSkills = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/EmpSkills",
                    Config: config
                });
            };
            SkillsAvailabilityService.prototype.GetEmployeeSkills = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        EmployeeID: item.EmployeeID,
                        SkillName: item.SkillName,
                        ClientName: item.ClientName,
                        Project: item.Project,
                        SubSkillName: item.SubSkillName,
                        TotalExp: item.TotalExp
                    });
                }
                return list;
            };
            SkillsAvailabilityService.prototype.FindEmployeeDistinctSkills = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/EmpSkillsDistinct",
                    Config: config
                });
            };
            SkillsAvailabilityService.prototype.GetEmployeeDistinctSkills = function (data) {
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        EmployeeID: item.EmployeeID,
                        SkillName: item.SkillName
                    });
                }
                return list;
            };
            SkillsAvailabilityService.$inject = ["$http", "$q", "$cookieStore"];
            return SkillsAvailabilityService;
        }(GCPL.Service.BaseService));
        Service.SkillsAvailabilityService = SkillsAvailabilityService;
        app.AddService("SkillsAvailabilityService", SkillsAvailabilityService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=SkillsAvailabilityService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var ResourceRequestModel = /** @class */ (function () {
            function ResourceRequestModel() {
            }
            return ResourceRequestModel;
        }());
        Model.ResourceRequestModel = ResourceRequestModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateRequestModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var InsertResourceRequestModel = GCPL.Model.ResourceRequestModel;
            var CreateRRController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function CreateRRController($location, _cookieStore, _CreateProjectTask, _EmpManagerService, _AddSkillsService, _InsertRRAllocationService, _EditResourceRequestService) {
                    this.$location = $location;
                    this._cookieStore = _cookieStore;
                    this.InsertResourceRequest = null;
                    this.GetProject = null;
                    this.GetManagerName = null;
                    this.tempID = null;
                    this.GetSkillName = null;
                    this.DealerID = null;
                    this.SkillName = null;
                    this.SubSkillName = null;
                    this.GetSubSkillName = null;
                    this.ManagerID = null;
                    this.EManagerID = null;
                    this.alert = null;
                    this.UserID = null;
                    this.RRAllocationID = null;
                    this.Cookie = null;
                    this.RRAllocationID = $location.search().RRAllocationID;
                    this.Cookie = _cookieStore;
                    this.CreateProjectTaskService = _CreateProjectTask;
                    this.EmpManagerService = _EmpManagerService;
                    this.AddSkillsService = _AddSkillsService;
                    this.InsertRRAllocationService = _InsertRRAllocationService;
                    this.EditResourceRequestService = _EditResourceRequestService;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.InsertResourceRequest = new InsertResourceRequestModel();
                }
                CreateRRController.prototype.$onInit = function () {
                    this.Init();
                    var that = this;
                    $("#startDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#endDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                CreateRRController.prototype.selectFromDate = function (e) {
                    $("#startDate").val(e);
                };
                CreateRRController.prototype.selectToDate = function (e) {
                    $("#endDate").val(e);
                };
                //Page Load Define Values//
                CreateRRController.prototype.Init = function () {
                    var _this = this;
                    //SkillName AutoComplete
                    //Skill Name DD
                    this.AddSkillsService.FindSkillName(this.DealerID).then((function (response) {
                        _this.GetSkillName = _this.AddSkillsService.GetSkillName(response.data.Result);
                    }));
                    //Project Name Dropdown
                    this.CreateProjectTaskService.FindProjectName().then((function (response) {
                        _this.GetProject = _this.CreateProjectTaskService.GetProjectName(response.data.Result);
                    }));
                    if (this.RRAllocationID != null) {
                        console.log("Allocation ID: " + this.RRAllocationID);
                        this.InsertResourceRequest.RRAllocationID = this.RRAllocationID;
                        this.EditResourceRequestService.Find(this.RRAllocationID).then((function (response) {
                            _this.InsertResourceRequest = _this.EditResourceRequestService.GetEdit(response.data.Result);
                            console.log("Edited: ");
                            console.log(_this.InsertResourceRequest);
                            _this.EManagerID = _this.InsertResourceRequest.ProjectManagerID;
                            _this.AddSkillsService.FindSubSkillName(_this.DealerID, _this.InsertResourceRequest.SkillName).then((function (response) {
                                _this.GetSubSkillName = _this.AddSkillsService.GetSubSkillName(response.data.Result);
                            }));
                        }));
                    }
                };
                // Get Project Manager by ProjectID
                CreateRRController.prototype.ManagerName = function () {
                    var _this = this;
                    this.GetManagerName = this.EmpManagerService.FindManagerName(this.InsertResourceRequest.ProjectNameID).then((function (response) {
                        _this.GetManagerName = _this.EmpManagerService.GetManagerName(response.data.Result);
                        console.log(response.data.Result);
                        var ManagerName = _this.GetManagerName[0].Name;
                        _this.ManagerID = _this.GetManagerName[0].UserID;
                        $("#ProjectManager").val(ManagerName);
                    }));
                };
                //Subskill by Skill
                CreateRRController.prototype.SubSkillChange = function () {
                    var _this = this;
                    this.AddSkillsService.FindSubSkillName(this.DealerID, this.InsertResourceRequest.SkillName).then((function (response) {
                        _this.GetSubSkillName = _this.AddSkillsService.GetSubSkillName(response.data.Result);
                    }));
                };
                //Insert Resource Request (On Submit)
                CreateRRController.prototype.InsertRR = function () {
                    var _this = this;
                    if ($("#startDate").val() == "" || $("#startDate").val() == undefined) {
                        this.alert = "Please Enter the Start Date";
                        $("#close").hide();
                        $("#errorclose").show();
                        return false;
                    }
                    else if ($("#endDate").val() == "" || $("#endDate").val() == undefined) {
                        this.alert = "Please Enter the End Date";
                        $("#close").hide();
                        $("#errorclose").show();
                        return false;
                    }
                    else {
                        console.log("Allocation ID: " + this.RRAllocationID);
                        this.InsertResourceRequest.RRAllocationID = this.RRAllocationID;
                        this.InsertResourceRequest.StartDate = $("#startDate").val();
                        this.InsertResourceRequest.EndDate = $("#endDate").val();
                        this.InsertResourceRequest.ProjectManagerID = this.ManagerID;
                        if (this.EManagerID != null) {
                            this.InsertResourceRequest.ProjectManagerID = this.EManagerID;
                        }
                        this.InsertResourceRequest.SkillName = $("#Skillset").val();
                        this.InsertResourceRequest.SubSkillName = $("#SubSkillset").val();
                        this.InsertResourceRequest.DealerId = this.DealerID;
                        this.InsertResourceRequest.RRStatus = "Created";
                        this.InsertResourceRequest.UserID = this.UserID;
                        console.log(this.InsertResourceRequest);
                        this.InsertRRAllocationService.PostRRAllocationMaster(this.InsertResourceRequest).then((function (response) {
                            if ((response.data.Result) != null) {
                                _this.alert = "Resource Request has been created Successfully";
                                $("#cose").show();
                                $("#errorclose").hide();
                            }
                            else {
                                _this.alert = "Opps, Some error occured, Request has not been created.";
                                $("#cose").show();
                                $("#errorclose").hide();
                            }
                        }));
                    }
                };
                CreateRRController.prototype.Close = function () {
                    location.href = "#!/MyResourceRequest";
                };
                CreateRRController.prototype.ErrorClose = function () {
                };
                CreateRRController.$inject = ["$location", "$cookieStore", "CreateProjectTask", "EmpManagerService", "AddSkillsService", "InsertRRAllocationService", "EditResourceRequestService"];
                return CreateRRController;
            }());
            var CreateRRComponentController = /** @class */ (function () {
                function CreateRRComponentController() {
                    this.controller = CreateRRController;
                    this.templateUrl = "/Scripts/App/ResourceRequestModule/CreateResourceRequest/Template/_CreateRR.html";
                }
                CreateRRComponentController.Name = "createrrcomponent";
                return CreateRRComponentController;
            }());
            app.AddComponent(CreateRRComponentController.Name, new CreateRRComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateRRComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var CreateRRController = /** @class */ (function (_super) {
            __extends(CreateRRController, _super);
            function CreateRRController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CreateRRController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.CreateRRController = CreateRRController;
        app.AddController("CreateRRController", CreateRRController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateRRController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
//Insert
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var InsertRRAllocationService = /** @class */ (function (_super) {
            __extends(InsertRRAllocationService, _super);
            function InsertRRAllocationService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "InsertResourceRequestAllocation";
                return _this;
            }
            InsertRRAllocationService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            InsertRRAllocationService.prototype.PostRRAllocationMaster = function (data) {
                var url = this.apiUrl;
                // console.log(url);
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            InsertRRAllocationService.$inject = ["$http", "$q"];
            return InsertRRAllocationService;
        }(GCPL.Service.BaseService));
        Service.InsertRRAllocationService = InsertRRAllocationService;
        app.AddService("InsertRRAllocationService", InsertRRAllocationService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//Edit
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var EditResourceRequestService = /** @class */ (function (_super) {
            __extends(EditResourceRequestService, _super);
            function EditResourceRequestService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                _this.apiUrl = _this.url + "/" + "EditResoureceRequest";
                return _this;
            }
            EditResourceRequestService.prototype.Find = function (data) {
                var config = {
                    params: {
                        RRAllocationID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl,
                    Config: config
                });
            };
            EditResourceRequestService.prototype.GetEdit = function (data) {
                var obj = new model.ResourceRequestModel();
                obj.AllocationPercentage = data.AllocationPercentage;
                obj.Billable = data.Billable;
                obj.EndDate = data.EndDate;
                obj.Location = data.Location;
                obj.LocationDetails = data.LocationDetails;
                obj.NumberOfResources = data.NumberOfResources;
                obj.ProjectManagerID = data.ProjectManagerID;
                obj.ProjectNameID = data.ProjectNameID;
                obj.RequestNotes = data.RequestNotes;
                obj.RRAllocationID = data.RRAllocationID;
                obj.SkillName = data.SkillName;
                obj.StartDate = data.StartDate;
                obj.SubSkillName = data.SubSkillName;
                obj.ProjectManager = data.ProjectManager;
                obj.ProjectName = data.ProjectName;
                return obj;
            };
            EditResourceRequestService.prototype.FindRRSearchUser = function (data) {
                debugger;
                var DealerID;
                var SkillName;
                var SubSkillName;
                var RequiredPercentage;
                if (data.DealerID !== undefined) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = "";
                }
                if (data.SkillName !== undefined) {
                    SkillName = data.SkillName;
                }
                else {
                    SkillName = "";
                }
                if (data.SubSkillName !== undefined) {
                    SubSkillName = data.SubSkillName;
                }
                else {
                    SubSkillName = "";
                }
                if (data.AllocationPercentage !== undefined) {
                    RequiredPercentage = data.AllocationPercentage;
                }
                else {
                    RequiredPercentage = "";
                }
                var config = {
                    params: {
                        DealerID: DealerID,
                        SkillName: SkillName,
                        SubSkillName: SubSkillName,
                        RequiredPercentage: RequiredPercentage
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "RRAllocationUserSearch",
                    Config: config
                });
            };
            EditResourceRequestService.prototype.GetRRSearchUser = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        AllocatedPercentage: item.AllocatedPercentage,
                        AvailablePercentage: item.AvailablePercentage,
                        EmployeeID: item.EmployeeID,
                        Name: item.Name
                    });
                }
                return list;
            };
            EditResourceRequestService.$inject = ["$http", "$q"];
            return EditResourceRequestService;
        }(GCPL.Service.BaseService));
        Service.EditResourceRequestService = EditResourceRequestService;
        app.AddService("EditResourceRequestService", EditResourceRequestService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateRRService.js.map
//# sourceMappingURL=MyResourceRequestModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var MyResourceRequestController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function MyResourceRequestController(_ResourceRequestService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.MyResourceRequestGrid = null;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.DealerID = null;
                    this.UserID = null;
                    this.Cookie = null;
                    this.ResourceRequestService = _ResourceRequestService;
                    this.Cookie = _cookieStore;
                    this.MyResourceRequestGrid = new Array();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                }
                MyResourceRequestController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                MyResourceRequestController.prototype.Init = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                MyResourceRequestController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.MyResourceRequestGrid = this.ResourceRequestService.FindResourceRequestStatus(this.DealerID, this.UserID).then((function (response) {
                        _this.MyResourceRequestGrid = _this.ResourceRequestService.GetResourceRequestStatus(response.data.Result);
                        _this.MyResourceRequestGrid.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.MyResourceRequestGrid.slice(0, that.numRecords);
                    }));
                };
                MyResourceRequestController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.MyResourceRequestGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                MyResourceRequestController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.MyResourceRequestGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                MyResourceRequestController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                MyResourceRequestController.prototype.CreateNew = function () {
                    location.href = "#!/CreateRR";
                };
                MyResourceRequestController.$inject = ["ResourceRequestService", "$cookieStore"];
                return MyResourceRequestController;
            }());
            var MyResourceRequestComponentController = /** @class */ (function () {
                function MyResourceRequestComponentController() {
                    this.controller = MyResourceRequestController;
                    this.templateUrl = "/Scripts/App/ResourceRequestModule/MyResourceRequest/Template/_MyResourceRequest.html";
                }
                MyResourceRequestComponentController.Name = "myresourcerequestcomponent";
                return MyResourceRequestComponentController;
            }());
            app.AddComponent(MyResourceRequestComponentController.Name, new MyResourceRequestComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=MyResourceRequestComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var MyResourceRequestController = /** @class */ (function (_super) {
            __extends(MyResourceRequestController, _super);
            function MyResourceRequestController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return MyResourceRequestController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.MyResourceRequestController = MyResourceRequestController;
        app.AddController("MyResourceRequestController", MyResourceRequestController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=MyResourceRequestController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
//Display
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var ResourceRequestService = /** @class */ (function (_super) {
            __extends(ResourceRequestService, _super);
            function ResourceRequestService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            ResourceRequestService.prototype.FindResourceRequestStatus = function (data1, data2) {
                var config = {
                    params: {
                        DealerID: data1,
                        UserID: data2
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/MyResourceRequest",
                    Config: config
                });
            };
            ResourceRequestService.prototype.GetResourceRequestStatus = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        AllocationPercentage: item.AllocationPercentage,
                        Billable: item.Billable,
                        DealerID: item.DealerID,
                        EndDate: item.EndDate,
                        Location: item.Location,
                        LocationDetails: item.LocationDetails,
                        NumberOfResources: item.NumberOfResources,
                        ProjectManagerID: item.ProjectManagerID,
                        ProjectNameID: item.ProjectNameID,
                        RequestNotes: item.RequestNotes,
                        RRAllocationID: item.RRAllocationID,
                        RRStatus: item.RRStatus,
                        SkillName: item.SkillName,
                        StartDate: item.StartDate,
                        SubSkillName: item.SubSkillName,
                        UserID: item.UserID,
                        WhenCreated: item.WhenCreated,
                        WhenModified: item.WhenModified,
                        ProjectManager: item.ProjectManager,
                        ProjectName: item.ProjectName,
                        AllocatedPercentage: item.AllocatedPercentage,
                        AllocatedResources: item.AllocatedResources
                    });
                }
                return list;
            };
            ResourceRequestService.$inject = ["$http", "$q", "$cookieStore"];
            return ResourceRequestService;
        }(GCPL.Service.BaseService));
        Service.ResourceRequestService = ResourceRequestService;
        app.AddService("ResourceRequestService", ResourceRequestService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=MyResourceRequestService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var AllResourceRequestModel = /** @class */ (function () {
            function AllResourceRequestModel() {
            }
            return AllResourceRequestModel;
        }());
        Model.AllResourceRequestModel = AllResourceRequestModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AllResourceRequestModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var AllResourceRequestModel = GCPL.Model.AllResourceRequestModel;
            var AllResourceRequestController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function AllResourceRequestController(_AllResourceRequestService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.AllResourceRequestGrid = null;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.DealerID = null;
                    this.myArray = [];
                    this.Cookie = null;
                    this.AllResourceRequestService = _AllResourceRequestService;
                    this.Cookie = _cookieStore;
                    this.AllResourceRequestGrid = new AllResourceRequestModel();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                AllResourceRequestController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                AllResourceRequestController.prototype.Init = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                AllResourceRequestController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.AllResourceRequestGrid = this.AllResourceRequestService.FindAllResourceRequestStatus(this.DealerID).then((function (response) {
                        _this.AllResourceRequestGrid = _this.AllResourceRequestService.GetAllResourceRequestStatus(response.data.Result);
                        _this.AllResourceRequestGrid.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.AllResourceRequestGrid.slice(0, that.numRecords);
                    }));
                };
                AllResourceRequestController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.AllResourceRequestGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                AllResourceRequestController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.AllResourceRequestGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                AllResourceRequestController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                AllResourceRequestController.$inject = ["AllResourceRequestService", "$cookieStore"];
                return AllResourceRequestController;
            }());
            var AllResourceRequestComponentController = /** @class */ (function () {
                function AllResourceRequestComponentController() {
                    this.controller = AllResourceRequestController;
                    this.templateUrl = "/Scripts/App/ResourceRequestModule/AllResourceRequest/Template/_AllResourceRequest.html";
                }
                AllResourceRequestComponentController.Name = "allresourcerequestcomponent";
                return AllResourceRequestComponentController;
            }());
            app.AddComponent(AllResourceRequestComponentController.Name, new AllResourceRequestComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=AllResourceRequestComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var AllResourceRequestController = /** @class */ (function (_super) {
            __extends(AllResourceRequestController, _super);
            function AllResourceRequestController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AllResourceRequestController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.AllResourceRequestController = AllResourceRequestController;
        app.AddController("AllResourceRequestController", AllResourceRequestController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AllResourceRequestController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var AllResourceRequestService = /** @class */ (function (_super) {
            __extends(AllResourceRequestService, _super);
            function AllResourceRequestService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            AllResourceRequestService.prototype.FindAllResourceRequestStatus = function (data1) {
                var config = {
                    params: {
                        DealerID: data1
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/AllResourceRquest",
                    Config: config
                });
            };
            AllResourceRequestService.prototype.GetAllResourceRequestStatus = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        AllocationPercentage: item.AllocationPercentage,
                        EndDate: item.EndDate,
                        NumberOfResources: item.NumberOfResources,
                        ProjectManagerID: item.ProjectManagerID,
                        ProjectName: item.ProjectName,
                        RequestDate: item.RequestDate,
                        RequestNumber: item.RequestNumber,
                        RRStatus: item.RRStatus,
                        Skill: item.Skill,
                        StartDate: item.StartDate,
                        SubSkill: item.SubSkill,
                        AllocatedPercentage: item.AllocatedPercentage,
                        AllocatedResources: item.AllocatedResources,
                        RequestAge: item.RequestAge
                    });
                }
                return list;
            };
            AllResourceRequestService.$inject = ["$http", "$q", "$cookieStore"];
            return AllResourceRequestService;
        }(GCPL.Service.BaseService));
        Service.AllResourceRequestService = AllResourceRequestService;
        app.AddService("AllResourceRequestService", AllResourceRequestService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AllResourceRequestService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var RRAllocationUserSearchModel = /** @class */ (function () {
            function RRAllocationUserSearchModel() {
            }
            return RRAllocationUserSearchModel;
        }());
        Model.RRAllocationUserSearchModel = RRAllocationUserSearchModel;
        var UserProjectSummaryModel = /** @class */ (function () {
            function UserProjectSummaryModel() {
            }
            return UserProjectSummaryModel;
        }());
        Model.UserProjectSummaryModel = UserProjectSummaryModel;
        var UserSkillSummaryModel = /** @class */ (function () {
            function UserSkillSummaryModel() {
            }
            return UserSkillSummaryModel;
        }());
        Model.UserSkillSummaryModel = UserSkillSummaryModel;
        var RRAllocationStatusModel = /** @class */ (function () {
            function RRAllocationStatusModel() {
            }
            return RRAllocationStatusModel;
        }());
        Model.RRAllocationStatusModel = RRAllocationStatusModel;
        var UpdateRRAllocationStatusModel = /** @class */ (function () {
            function UpdateRRAllocationStatusModel() {
            }
            return UpdateRRAllocationStatusModel;
        }());
        Model.UpdateRRAllocationStatusModel = UpdateRRAllocationStatusModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=RRAllocationModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var RRAllocationRequestGridModel = GCPL.Model.ResourceRequestModel;
            var UserProjectSearchModel = GCPL.Model.UserProjectSummaryModel;
            var EmpManagerModel = GCPL.Model.InsertEmpManager;
            var UpdateRRAllocationStatusModel = GCPL.Model.UpdateRRAllocationStatusModel;
            var RRAllocationController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function RRAllocationController($location, _cookieStore, _EditResourceRequestService, _RRAllocationRequestService, _InsertEmpManagerService) {
                    this.$location = $location;
                    this._cookieStore = _cookieStore;
                    this.RRAllocationRequestGrid = null;
                    this.RRAllocationID = null;
                    this.RRAllocationUserSearch = null;
                    this.UserProjectSummary = null;
                    this.UserSkillSummary = null;
                    this.RRAllocationStatus = null;
                    this.UpdateRRAllocationStatus = null;
                    this.InsertEmpManager = null;
                    this.DealerID = null;
                    this.TotalAllocationPercentage = null;
                    this.moreName = null;
                    this.postArray = [];
                    this.BillStatus = null;
                    this.postAllocationMessage = null;
                    this.AllocateUserID = null;
                    this.AllocateUserName = null;
                    this.ToAllocatePercentage = null;
                    this.AvailablePercentage = null;
                    this.m2error = null;
                    this.AllocatedResourcesStatus = null;
                    this.AllocationPercentageStatus = null;
                    this.RRStatus = null;
                    this.AllocationComments = null;
                    //Services
                    this.Cookie = null;
                    this.RRAllocationID = $location.search().RRAllocationID;
                    this.Cookie = _cookieStore;
                    this.EditResourceRequestService = _EditResourceRequestService;
                    this.RRAllocationRequestService = _RRAllocationRequestService;
                    this.InsertEmpManagerService = _InsertEmpManagerService;
                    this.RRAllocationRequestGrid = new RRAllocationRequestGridModel();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.RRAllocationUserSearch = new Array();
                    this.UserProjectSummary = new UserProjectSearchModel();
                    this.InsertEmpManager = new EmpManagerModel();
                    this.RRAllocationStatus = new Array();
                    this.UpdateRRAllocationStatus = new UpdateRRAllocationStatusModel();
                }
                RRAllocationController.prototype.$onInit = function () {
                    this.Init();
                    $(document).ready(function () {
                        $('[data-toggle="tooltip"]').tooltip();
                    });
                };
                //Page Load Define Values//
                RRAllocationController.prototype.Init = function () {
                    var _this = this;
                    this.EditResourceRequestService.Find(this.RRAllocationID).then((function (response) {
                        _this.RRAllocationRequestGrid = _this.EditResourceRequestService.GetEdit(response.data.Result);
                        _this.RRAllocationRequestGrid.DealerID = _this.DealerID;
                        if (_this.RRAllocationRequestGrid.Billable === "1") {
                            _this.BillStatus = "Billable";
                        }
                        else if (_this.RRAllocationRequestGrid.Billable === "2") {
                            _this.BillStatus = "Not Billable";
                        }
                        _this.EditResourceRequestService.FindRRSearchUser(_this.RRAllocationRequestGrid).then((function (response) {
                            _this.RRAllocationUserSearch = _this.EditResourceRequestService.GetRRSearchUser(response.data.Result);
                        }));
                    }));
                    this.RRAllocationRequestService.FindRRAllocationStatus(this.RRAllocationID, this.DealerID).then((function (response) {
                        _this.RRAllocationStatus = _this.RRAllocationRequestService.GetRRAllocationStatus(response.data.Result);
                        _this.AllocatedResourcesStatus = _this.RRAllocationStatus[0].AllocatedResources;
                        _this.AllocationPercentageStatus = _this.RRAllocationStatus[0].AllocationPercentage;
                    }));
                };
                RRAllocationController.prototype.UserDetails = function (userID, name) {
                    var _this = this;
                    this.RRAllocationRequestService.FindUserProjectSummary(userID, this.DealerID).then((function (response) {
                        _this.UserProjectSummary = _this.RRAllocationRequestService.GetUserProjectSummary(response.data.Result);
                        _this.TotalAllocationPercentage = _this.UserProjectSummary[0].TotalAllocationPercentage;
                        _this.moreName = name;
                    }));
                    this.RRAllocationRequestService.FindUserSkillSummary(userID, this.DealerID).then((function (response) {
                        _this.UserSkillSummary = _this.RRAllocationRequestService.GetUserSkillSummary(response.data.Result);
                    }));
                };
                RRAllocationController.prototype.AllocateUser = function (userID, name, AvailablePercentage) {
                    this.AllocateUserID = userID;
                    this.AllocateUserName = name;
                    this.AvailablePercentage = AvailablePercentage;
                };
                RRAllocationController.prototype.ConfirmAllocate = function () {
                    var _this = this;
                    this.postArray = [];
                    this.postArray.push({
                        TSApproverID: this.InsertEmpManager.TSApproverID,
                        ProjectNameID: this.RRAllocationRequestGrid.ProjectNameID,
                        ManagerID: this.RRAllocationRequestGrid.ProjectManagerID,
                        ManagerName: this.RRAllocationRequestGrid.ProjectManager,
                        EmployeeID: this.AllocateUserID,
                        EmployeeName: this.AllocateUserName,
                        EmpStartDate: this.RRAllocationRequestGrid.StartDate,
                        EmpEndDate: this.RRAllocationRequestGrid.EndDate,
                        AllocationPercentage: this.ToAllocatePercentage,
                        DealerID: this.DealerID,
                        Status: "1",
                        RRNumber: this.RRAllocationRequestGrid.RRAllocationID,
                        AllocationComment: this.AllocationComments
                    });
                    var toAllocatePercentage = parseInt(this.ToAllocatePercentage);
                    var availablePercentage = parseInt(this.AvailablePercentage);
                    if (toAllocatePercentage > availablePercentage) {
                        this.m2error = "Allocate percentage cannot be greater than available percentage";
                        $('#ConfirmButton').removeAttr("data-dismiss");
                        return false;
                    }
                    else {
                        this.InsertEmpManagerService.PostEmpManagerMaster(this.postArray).then((function (response) {
                            if ((response.data.Result) != null) {
                                _this.postAllocationMessage = _this.AllocateUserName + " has been successfully allocated to the project " + _this.RRAllocationRequestGrid.ProjectName;
                                $("#myModal3").modal('show');
                                setTimeout(function () {
                                    $("#myModal3").modal('hide');
                                }, 3000);
                                _this.ToAllocatePercentage = null;
                                _this.AllocationComments = null;
                                _this.EditResourceRequestService.Find(_this.RRAllocationID).then((function (response) {
                                    _this.RRAllocationRequestGrid = _this.EditResourceRequestService.GetEdit(response.data.Result);
                                    _this.RRAllocationRequestGrid.DealerID = _this.DealerID;
                                    if (_this.RRAllocationRequestGrid.Billable === "1") {
                                        _this.BillStatus = "Billable";
                                    }
                                    else if (_this.RRAllocationRequestGrid.Billable === "2") {
                                        _this.BillStatus = "Not Billable";
                                    }
                                    _this.EditResourceRequestService.FindRRSearchUser(_this.RRAllocationRequestGrid).then((function (response) {
                                        _this.RRAllocationUserSearch = _this.EditResourceRequestService.GetRRSearchUser(response.data.Result);
                                    }));
                                }));
                                _this.RRAllocationRequestService.FindRRAllocationStatus(_this.RRAllocationID, _this.DealerID).then((function (response) {
                                    debugger;
                                    _this.RRAllocationStatus = _this.RRAllocationRequestService.GetRRAllocationStatus(response.data.Result);
                                    _this.AllocatedResourcesStatus = _this.RRAllocationStatus[0].AllocatedResources;
                                    _this.AllocationPercentageStatus = _this.RRAllocationStatus[0].AllocationPercentage;
                                    var allocationPercentageStatus = parseFloat(_this.AllocationPercentageStatus);
                                    if (allocationPercentageStatus > 0 && allocationPercentageStatus < 100) {
                                        _this.RRStatus = "Partially Completed";
                                        _this.UpdateRRAllocationStatus.RRAllocationID = _this.RRAllocationID;
                                        _this.UpdateRRAllocationStatus.RRAllocationStatus = _this.RRStatus;
                                        _this.UpdateRRAllocationStatus.AllocatedPercentage = _this.AllocationPercentageStatus;
                                        _this.UpdateRRAllocationStatus.AllocatedResources = _this.AllocatedResourcesStatus;
                                        _this.RRAllocationRequestService.PostRRAllocationStatus(_this.UpdateRRAllocationStatus).then((function (response) {
                                            console.log(response.data.Result);
                                        }));
                                    }
                                    if (allocationPercentageStatus >= 100) {
                                        _this.RRStatus = "Completed";
                                        _this.UpdateRRAllocationStatus.RRAllocationID = _this.RRAllocationID;
                                        _this.UpdateRRAllocationStatus.RRAllocationStatus = _this.RRStatus;
                                        _this.UpdateRRAllocationStatus.AllocatedPercentage = _this.AllocationPercentageStatus;
                                        _this.UpdateRRAllocationStatus.AllocatedResources = _this.AllocatedResourcesStatus;
                                        _this.RRAllocationRequestService.PostRRAllocationStatus(_this.UpdateRRAllocationStatus).then((function (response) {
                                            console.log(response.data.Result);
                                        }));
                                    }
                                }));
                            }
                            else {
                                _this.postAllocationMessage = "Oops some Error Occured";
                                $("#myModal3").modal('show');
                                setTimeout(function () {
                                    $("#myModal3").modal('hide');
                                }, 3000);
                            }
                        }));
                        this.m2error = "";
                        this.postArray = [];
                        $('#ConfirmButton').attr("data-dismiss", "modal");
                    }
                };
                RRAllocationController.$inject = ["$location", "$cookieStore", "EditResourceRequestService", "RRAllocationRequestService", "InsertEmpManagerService"];
                return RRAllocationController;
            }());
            var RRAllocationComponentController = /** @class */ (function () {
                function RRAllocationComponentController() {
                    this.controller = RRAllocationController;
                    this.templateUrl = "/Scripts/App/ResourceRequestModule/RRAllocation/Template/_RRAllocation.html";
                }
                RRAllocationComponentController.Name = "rrallocationcomponent";
                return RRAllocationComponentController;
            }());
            app.AddComponent(RRAllocationComponentController.Name, new RRAllocationComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=RRAllocationComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var RRAllocationController = /** @class */ (function (_super) {
            __extends(RRAllocationController, _super);
            function RRAllocationController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return RRAllocationController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.RRAllocationController = RRAllocationController;
        app.AddController("RRAllocationController", RRAllocationController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=RRAllocationController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var RRAllocationRequestService = /** @class */ (function (_super) {
            __extends(RRAllocationRequestService, _super);
            function RRAllocationRequestService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                return _this;
            }
            RRAllocationRequestService.prototype.FindUserProjectSummary = function (EmployeeID, DealerID) {
                var config = {
                    params: {
                        EmployeeID: EmployeeID,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "UserProjectSummary",
                    Config: config
                });
            };
            RRAllocationRequestService.prototype.GetUserProjectSummary = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        AllocatedProject: item.AllocatedProject,
                        AllocationPercentage: item.AllocationPercentage,
                        EmployeeID: item.EmployeeID,
                        EndDate: item.EndDate,
                        StartDate: item.StartDate,
                        TotalAllocationPercentage: item.TotalAllocationPercentage
                    });
                }
                return list;
            };
            RRAllocationRequestService.prototype.FindUserSkillSummary = function (EmployeeID, DealerID) {
                var config = {
                    params: {
                        EmployeeID: EmployeeID,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "UserSkillSummary",
                    Config: config
                });
            };
            RRAllocationRequestService.prototype.GetUserSkillSummary = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        ClientName: item.ClientName,
                        Exp: item.Exp,
                        ProjectName: item.ProjectName,
                        SkillName: item.SkillName,
                        SubSkillName: item.SubSkillName
                    });
                }
                return list;
            };
            RRAllocationRequestService.prototype.FindRRAllocationStatus = function (RRAllocationID, DealerID) {
                debugger;
                var config = {
                    params: {
                        RRAllocationID: RRAllocationID,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "RRAllocationStatus",
                    Config: config
                });
            };
            RRAllocationRequestService.prototype.GetRRAllocationStatus = function (data) {
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        AllocatedResources: item.AllocatedResources,
                        AllocationPercentage: item.AllocationPercentage
                    });
                }
                return list;
            };
            RRAllocationRequestService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.url + "/" + "UpdateRRStatus" });
            };
            RRAllocationRequestService.prototype.PostRRAllocationStatus = function (data) {
                var url = this.url + "/" + "UpdateRRStatus";
                // console.log(url);
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            RRAllocationRequestService.$inject = ["$http", "$q"];
            return RRAllocationRequestService;
        }(GCPL.Service.BaseService));
        Service.RRAllocationRequestService = RRAllocationRequestService;
        app.AddService("RRAllocationRequestService", RRAllocationRequestService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=RRAllocationService.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var AllResourceRequestModel = GCPL.Model.AllResourceRequestModel;
            var RRListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function RRListController(_AllResourceRequestService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.AllResourceRequestGrid = null;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.DealerID = null;
                    this.myArray = [];
                    this.Cookie = null;
                    this.AllResourceRequestService = _AllResourceRequestService;
                    this.Cookie = _cookieStore;
                    this.AllResourceRequestGrid = new AllResourceRequestModel();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                }
                RRListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                RRListController.prototype.Init = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                RRListController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.AllResourceRequestGrid = this.AllResourceRequestService.FindAllResourceRequestStatus(this.DealerID).then((function (response) {
                        _this.AllResourceRequestGrid = _this.AllResourceRequestService.GetAllResourceRequestStatus(response.data.Result);
                        _this.AllResourceRequestGrid.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.AllResourceRequestGrid.slice(0, that.numRecords);
                    }));
                };
                RRListController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.AllResourceRequestGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                RRListController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.AllResourceRequestGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                RRListController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                RRListController.$inject = ["AllResourceRequestService", "$cookieStore"];
                return RRListController;
            }());
            var RRListComponentController = /** @class */ (function () {
                function RRListComponentController() {
                    this.controller = RRListController;
                    this.templateUrl = "/Scripts/App/ResourceRequestModule/RRList/Template/_RRList.html";
                }
                RRListComponentController.Name = "rrlistcomponent";
                return RRListComponentController;
            }());
            app.AddComponent(RRListComponentController.Name, new RRListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=RRListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var RRListController = /** @class */ (function (_super) {
            __extends(RRListController, _super);
            function RRListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return RRListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.RRListController = RRListController;
        app.AddController("RRListController", RRListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=RRListController.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var AllocatedResourcesGridModel = /** @class */ (function () {
            function AllocatedResourcesGridModel() {
            }
            return AllocatedResourcesGridModel;
        }());
        Model.AllocatedResourcesGridModel = AllocatedResourcesGridModel;
        var AllocatedResourcesSearchModel = /** @class */ (function () {
            function AllocatedResourcesSearchModel() {
            }
            return AllocatedResourcesSearchModel;
        }());
        Model.AllocatedResourcesSearchModel = AllocatedResourcesSearchModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AllocatedResourcesModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var AllocatedSearchModel = GCPL.Model.AllocatedResourcesSearchModel;
            var AllocatedResourcesController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function AllocatedResourcesController(_AllocatedResourcesService, _cookieStore, _RRAllocationRequestService) {
                    this._AllocatedResourcesService = _AllocatedResourcesService;
                    this._cookieStore = _cookieStore;
                    this.AllocatedResourcesGrid = null;
                    this.UserSkillSummary = null;
                    this.AllocatedSearch = null;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.StartDate = null;
                    this.EndDate = null;
                    this.DealerID = null;
                    this.AllocationComment = null;
                    this.EmpName = null;
                    this.Cookie = null;
                    this.AllocatedResourcesService = _AllocatedResourcesService;
                    this.Cookie = _cookieStore;
                    this.RRAllocationRequestService = _RRAllocationRequestService;
                    this.AllocatedResourcesGrid = new Array();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.AllocatedSearch = new AllocatedSearchModel;
                }
                AllocatedResourcesController.prototype.$onInit = function () {
                    this.Init();
                    var that = this;
                    $("#StartDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: function (date) {
                            that.StartDate = date;
                            console.log(that.StartDate);
                            angular.element($('#StartDate')).triggerHandler('input');
                            that.AllocatedSearch.StartDate = date;
                        }
                    });
                    $("#EndDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: function (date) {
                            that.EndDate = date;
                            console.log(that.EndDate);
                            that.AllocatedSearch.EndDate = date;
                        }
                    });
                };
                //Page Load Define Values//
                AllocatedResourcesController.prototype.Init = function () {
                    var that = this;
                    $("#ProjectName").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.AllocatedResourcesService.FindProjectNameAC(that.DealerID, request.term).then((function (response) {
                                var data = that.AllocatedResourcesService.GetProjectNameAC(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.ProjectName,
                                        value: item.ProjectName,
                                        id: item.ProjectNameID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //let SelectedCustomerID = ui.item.id;
                            // that.Search(ui.item.id);
                            that.AllocatedSearch.ProjectNameID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                    //EmployeeName AutoComplete
                    $("#EmployeeName").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.AllocatedResourcesService.FindEmployeeTSAC(that.DealerID, request.term).then((function (response) {
                                var data = that.AllocatedResourcesService.GetEmployeeTSAC(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.EmployeeName,
                                        value: item.EmployeeName,
                                        id: item.EmployeeID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //let SelectedCustomerID = ui.item.id;
                            // that.Search(ui.item.id);
                            that.AllocatedSearch.EmployeeName = ui.item.value;
                        },
                        change: function () {
                        }
                    });
                    this.AllocatedSearch.DealerID = this.DealerID;
                };
                AllocatedResourcesController.prototype.Search = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                AllocatedResourcesController.prototype.Clear = function () {
                    this.shownItems = null;
                    this.AllocatedResourcesGrid.length = 0;
                    $("#StartDate").val('');
                    this.AllocatedSearch.StartDate = "";
                    this.AllocatedSearch.EndDate = "";
                    this.AllocatedSearch.ProjectNameID = "";
                    this.AllocatedSearch.AllocationPercentage = "";
                    this.AllocatedSearch.EmployeeName = "";
                    $("#EndDate").val('');
                    $("#ProjectName").val('');
                    $("#AllocationPercentage").val('');
                    $("#SkillType").val('');
                    $("#EmployeeName").val('');
                };
                AllocatedResourcesController.prototype.intoModal = function (cm, name, id) {
                    var _this = this;
                    this.AllocationComment = cm;
                    this.EmpName = name;
                    $("#AllocationCommentss").val(cm);
                    this.RRAllocationRequestService.FindUserSkillSummary(id, this.DealerID).then((function (response) {
                        _this.UserSkillSummary = _this.RRAllocationRequestService.GetUserSkillSummary(response.data.Result);
                    }));
                };
                AllocatedResourcesController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.AllocatedResourcesGrid = this.AllocatedResourcesService.FindAllocatedResourcesStatus(this.AllocatedSearch).then((function (response) {
                        _this.AllocatedResourcesGrid = _this.AllocatedResourcesService.GetAllocatedResourcesStatus(response.data.Result);
                        _this.AllocatedResourcesGrid.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.AllocatedResourcesGrid.slice(0, that.numRecords);
                    }));
                };
                AllocatedResourcesController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.AllocatedResourcesGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                AllocatedResourcesController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.AllocatedResourcesGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                AllocatedResourcesController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                AllocatedResourcesController.$inject = ["AllocatedResourcesService", "$cookieStore", "RRAllocationRequestService"];
                return AllocatedResourcesController;
            }());
            var AllocatedResourcesComponentController = /** @class */ (function () {
                function AllocatedResourcesComponentController() {
                    this.controller = AllocatedResourcesController;
                    this.templateUrl = "/Scripts/App/SkillsModule/AllocatedResources/Template/_AllocatedResources.html";
                }
                AllocatedResourcesComponentController.Name = "allocatedresourcescomponent";
                return AllocatedResourcesComponentController;
            }());
            app.AddComponent(AllocatedResourcesComponentController.Name, new AllocatedResourcesComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=AlloctedResourcesComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var AllocatedResourcesController = /** @class */ (function (_super) {
            __extends(AllocatedResourcesController, _super);
            function AllocatedResourcesController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AllocatedResourcesController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.AllocatedResourcesController = AllocatedResourcesController;
        app.AddController("AllocatedResourcesController", AllocatedResourcesController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AllocatedResourcesController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var AllocatedResourcesService = /** @class */ (function (_super) {
            __extends(AllocatedResourcesService, _super);
            function AllocatedResourcesService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            AllocatedResourcesService.prototype.FindAllocatedResourcesStatus = function (data1) {
                var ProjectNameID, StartDate, EndDate, AllocationPercentage, EmployeeName, DealerID;
                if (data1.ProjectNameID !== undefined) {
                    ProjectNameID = data1.ProjectNameID;
                }
                else {
                    ProjectNameID = "";
                }
                if (data1.StartDate !== undefined) {
                    StartDate = data1.StartDate;
                }
                else {
                    StartDate = "";
                }
                if (data1.EndDate !== undefined) {
                    EndDate = data1.EndDate;
                }
                else {
                    EndDate = "";
                }
                if (data1.AllocationPercentage !== undefined) {
                    AllocationPercentage = data1.AllocationPercentage;
                }
                else {
                    AllocationPercentage = "";
                }
                if (data1.EmployeeName !== undefined) {
                    EmployeeName = data1.EmployeeName;
                }
                else {
                    EmployeeName = "";
                }
                if (data1.DealerID !== undefined) {
                    DealerID = data1.DealerID;
                }
                else {
                    DealerID = "";
                }
                var config = {
                    params: {
                        ProjectNameID: ProjectNameID,
                        StartDate: StartDate,
                        EndDate: EndDate,
                        AllocationPercentage: AllocationPercentage,
                        EmployeeName: EmployeeName,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/AllocatedResources",
                    Config: config
                });
            };
            AllocatedResourcesService.prototype.GetAllocatedResourcesStatus = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        AllocationComment: item.AllocationComment,
                        AllocationPercentage: item.AllocationPercentage,
                        EmployeeID: item.EmployeeID,
                        EmployeeName: item.EmployeeName,
                        EndDate: item.EndDate,
                        ProjectEndDate: item.ProjectEndDate,
                        ProjectName: item.ProjectName,
                        StartDate: item.StartDate
                    });
                }
                return list;
            };
            AllocatedResourcesService.prototype.FindProjectNameAC = function (data1, data2) {
                var config = {
                    params: {
                        DealerID: data1,
                        PreText: data2
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/ProjectNameAutoComplete",
                    Config: config
                });
            };
            AllocatedResourcesService.prototype.GetProjectNameAC = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        ProjectName: item.ProjectName,
                        ProjectNameID: item.ProjectNameID
                    });
                }
                return list;
            };
            AllocatedResourcesService.prototype.FindEmployeeTSAC = function (data1, data2) {
                var config = {
                    params: {
                        DealerID: data1,
                        PreText: data2
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/EmployeeTSNameAutoComplete",
                    Config: config
                });
            };
            AllocatedResourcesService.prototype.GetEmployeeTSAC = function (data) {
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        EmployeeID: item.EmployeeID,
                        EmployeeName: item.EmployeeName
                    });
                }
                return list;
            };
            AllocatedResourcesService.$inject = ["$http", "$q", "$cookieStore"];
            return AllocatedResourcesService;
        }(GCPL.Service.BaseService));
        Service.AllocatedResourcesService = AllocatedResourcesService;
        app.AddService("AllocatedResourcesService", AllocatedResourcesService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AllocatedResourcesService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var MasterTaskListModel = /** @class */ (function () {
            function MasterTaskListModel() {
            }
            return MasterTaskListModel;
        }());
        Model.MasterTaskListModel = MasterTaskListModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=MasterTaskListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var MasterTaskListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function MasterTaskListController(_cookieStore, _InsertMasterTaskService) {
                    this._cookieStore = _cookieStore;
                    this._InsertMasterTaskService = _InsertMasterTaskService;
                    this.InsertMasterTask = null;
                    this.MasterTaskListGrid = null;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.StartDate = null;
                    this.EndDate = null;
                    this.DealerID = null;
                    this.alert = null;
                    this.UserID = null;
                    this.UserName = null;
                    this.CreatedByName = null;
                    this.errorBtn = null;
                    //Services
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.InsertMasterTaskService = _InsertMasterTaskService;
                    console.log(this.Cookie.get('UserInfo'));
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.UserName = this.Cookie.get('UserInfo')['UserName'];
                    $("#CreatedBy").val(this.UserName);
                }
                MasterTaskListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                MasterTaskListController.prototype.Init = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                //Insert method on submit button
                MasterTaskListController.prototype.InsertTask = function () {
                    var _this = this;
                    this.InsertMasterTask.DealerID = this.DealerID;
                    this.InsertMasterTask.CreatedBy = this.UserID;
                    console.log("Data =>> ");
                    this.InsertMasterTaskService.PostMasterTaskData(this.InsertMasterTask).then((function (response) {
                        if ((response.data.Result) !== null) {
                            if (_this.InsertMasterTask.MasterTaskID != null) {
                                _this.alert = "Task ( " + _this.InsertMasterTask.TaskName + " ) has been Updated SuccessFully";
                                _this.errorBtn = "close";
                                $("#errorclose").hide();
                                $("#close").show();
                            }
                            else {
                                if ((response.data.Result) === 5) {
                                    _this.alert = "Oops, Task ( " + _this.InsertMasterTask.TaskName + " ) Already Exists";
                                    _this.errorBtn = "close";
                                    $("#close").hide();
                                    $("#errorclose").show();
                                }
                                else {
                                    _this.alert = "Task ( " + _this.InsertMasterTask.TaskName + " ) has been successfully saved";
                                    _this.errorBtn = "close";
                                    $("#errorclose").hide();
                                    $("#close").show();
                                }
                            }
                        }
                        else {
                            _this.alert = "Oops, some error occured";
                            $("#errorclose").show();
                            $("#close").hide();
                        }
                    }));
                };
                //Edit Data
                MasterTaskListController.prototype.EditTask = function (item) {
                    $("#showDiv").slideDown(1000);
                    $("#TaskName").focus();
                    this.InsertMasterTask = item;
                    this.InsertMasterTask.ModifiedBy = this.UserID;
                };
                //Delete Data
                MasterTaskListController.prototype.DeleteTask = function (item) {
                    this.InsertMasterTask = item;
                    this.InsertMasterTask.DealerID = this.DealerID;
                    this.InsertMasterTask.Mode = "Delete";
                    this.alert = "Are you sure? ";
                    this.errorBtn = "Confirm";
                    $("#errorclose").hide();
                    $("#close").show();
                };
                //FillGrid Methods
                MasterTaskListController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.MasterTaskListGrid = this.InsertMasterTaskService.FindMasterTaskList(this.DealerID).then((function (response) {
                        _this.MasterTaskListGrid = _this.InsertMasterTaskService.GetMasterTaskList(response.data.Result);
                        _this.MasterTaskListGrid.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.MasterTaskListGrid.slice(0, that.numRecords);
                    }));
                };
                MasterTaskListController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.MasterTaskListGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                MasterTaskListController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.MasterTaskListGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                MasterTaskListController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                //Modal Buttons
                MasterTaskListController.prototype.Close = function () {
                    var _this = this;
                    if (this.InsertMasterTask.Mode === "Delete") {
                        this.InsertMasterTaskService.PostMasterTaskData(this.InsertMasterTask).then((function (response) {
                            if ((response.data.Result) != null) {
                                console.log("Deleted");
                                _this.numRecords = parseInt(_this.NoOfRds);
                                _this.FillGrid(_this.numRecords);
                                _this.formClear();
                            }
                        }));
                    }
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                MasterTaskListController.prototype.ErrorClose = function () { };
                //Add Task Button
                MasterTaskListController.prototype.showAdd = function () {
                    $("#showDiv").slideToggle(1000);
                };
                //Clear Form
                MasterTaskListController.prototype.formClear = function () {
                    $("#TaskName").val('');
                    this.InsertMasterTask.TaskName = $('#TaskName').val();
                    this.InsertMasterTask.Status = $('#Status').val();
                    $('#Status').prop('selectedIndex', 0);
                    this.InsertMasterTask.Status = $('#Status').val();
                    $('#DefaultStatus').prop('selectedIndex', 0);
                    this.InsertMasterTask.DefaultStatus = $('#DefaultStatus').val();
                    this.InsertMasterTask.Mode = "";
                    this.InsertMasterTask.MasterTaskID = null;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                MasterTaskListController.$inject = ["$cookieStore", "InsertMasterTaskListService"];
                return MasterTaskListController;
            }());
            var MasterTaskListComponentController = /** @class */ (function () {
                function MasterTaskListComponentController() {
                    this.controller = MasterTaskListController;
                    this.templateUrl = "/Scripts/App/SkillsModule/MasterTaskList/Template/_MasterTaskList.html";
                }
                MasterTaskListComponentController.Name = "mastertasklistcomponent";
                return MasterTaskListComponentController;
            }());
            app.AddComponent(MasterTaskListComponentController.Name, new MasterTaskListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=MasterTaskListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var MasterTaskListController = /** @class */ (function (_super) {
            __extends(MasterTaskListController, _super);
            function MasterTaskListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return MasterTaskListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.MasterTaskListController = MasterTaskListController;
        app.AddController("MasterTaskListController", MasterTaskListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=MasterTaskListController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
//Insert MasterTask Table
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var InsertMasterTaskListService = /** @class */ (function (_super) {
            __extends(InsertMasterTaskListService, _super);
            function InsertMasterTaskListService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                return _this;
            }
            //####################################################################################################################################################################################################################
            //Insert
            //####################################################################################################################################################################################################################
            InsertMasterTaskListService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.url + "/" + "InsertMasterTaskList" });
            };
            InsertMasterTaskListService.prototype.PostMasterTaskData = function (data) {
                var url = this.url + "/" + "InsertMasterTaskList";
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            //####################################################################################################################################################################################################################
            //Display List
            //####################################################################################################################################################################################################################
            InsertMasterTaskListService.prototype.FindMasterTaskList = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "DisplayMasterTask",
                    Config: config
                });
            };
            InsertMasterTaskListService.prototype.GetMasterTaskList = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        CreatedBy: item.CreatedBy,
                        DealerID: item.DealerID,
                        DefaultStatus: item.DefaultStatus,
                        MasterTaskID: item.MasterTaskID,
                        ModifiedBy: item.ModifiedBy,
                        Status: item.Status,
                        TaskName: item.TaskName,
                        WhenCreated: item.WhenCreated,
                        WhenModified: item.WhenModified,
                        DefaultStatusName: item.DefaultStatusName,
                        StatusName: item.StatusName,
                        Mode: item.Mode
                    });
                }
                return list;
            };
            InsertMasterTaskListService.$inject = ["$http", "$q"];
            return InsertMasterTaskListService;
        }(GCPL.Service.BaseService));
        Service.InsertMasterTaskListService = InsertMasterTaskListService;
        app.AddService("InsertMasterTaskListService", InsertMasterTaskListService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=MasterTaskListService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var MasterTaskListNDStatus = /** @class */ (function () {
            function MasterTaskListNDStatus() {
            }
            return MasterTaskListNDStatus;
        }());
        Model.MasterTaskListNDStatus = MasterTaskListNDStatus;
        var AssignMasterTaskInsert = /** @class */ (function () {
            function AssignMasterTaskInsert() {
            }
            return AssignMasterTaskInsert;
        }());
        Model.AssignMasterTaskInsert = AssignMasterTaskInsert;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AssignMasterTaskModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var AssignMasterTaskController = /** @class */ (function (_super) {
            __extends(AssignMasterTaskController, _super);
            function AssignMasterTaskController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AssignMasterTaskController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.AssignMasterTaskController = AssignMasterTaskController;
        app.AddController("AssignMasterTaskController", AssignMasterTaskController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AssignMasterTaskController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var AssignMasterTaskInsertModel = GCPL.Model.AssignMasterTaskInsert;
            var AssignMasterTaskController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function AssignMasterTaskController(_AssignMasterTaskService, _cookieStore) {
                    this._AssignMasterTaskService = _AssignMasterTaskService;
                    this._cookieStore = _cookieStore;
                    this.DealerID = null;
                    this.UserID = null;
                    this.NDMasterTaskList = null;
                    this.AssignMasterTask = null;
                    this.AssignMasterTaskInsert = null;
                    this.SelectedTasks = [];
                    this.SelectedProjectName = null;
                    this.alert = null;
                    this.Cookie = null;
                    this.AssignMasterTaskService = _AssignMasterTaskService;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.AssignMasterTask = new AssignMasterTaskInsertModel();
                    this.AssignMasterTaskInsert = new Array();
                }
                AssignMasterTaskController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                AssignMasterTaskController.prototype.Init = function () {
                    var _this = this;
                    //ProjectName AutoComplete 
                    var that = this;
                    $("#ProjectName").autocomplete({
                        source: function (request, res) {
                            that.AssignMasterTaskService.FindProjectByManagerAC(that.DealerID, that.UserID, request.term).then((function (response) {
                                var data = that.AssignMasterTaskService.GetProjectByManagerAC(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.ProjectName,
                                        value: item.ProjectName,
                                        id: item.ProjectNameID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //that.AllocatedSearch.ProjectNameID = ui.item.id;
                            that.AssignMasterTask.ProjectNameID = ui.item.id;
                            that.SelectedProjectName = ui.item.value;
                        },
                        change: function () {
                        }
                    });
                    //Get all Tasks from MasterTaskList where DefaultStatus is false
                    this.AssignMasterTaskService.FindMasterTaskListND(this.DealerID).then((function (response) {
                        _this.NDMasterTaskList = _this.AssignMasterTaskService.GetMasterTaskListND(response.data.Result);
                    }));
                };
                AssignMasterTaskController.prototype.CBox = function (item) {
                    this.AssignMasterTask.DealerID = this.DealerID;
                    this.AssignMasterTask.CreatedBy = this.UserID;
                    var that = this;
                    var SelectedTasks = [];
                    $.each(this.NDMasterTaskList, function (key, item) {
                        if (item.IsSelected == true) {
                            SelectedTasks.push(item.TaskName);
                        }
                    });
                    this.SelectedTasks = [];
                    that.SelectedTasks = SelectedTasks;
                };
                AssignMasterTaskController.prototype.Assign = function () {
                    var _this = this;
                    console.log(this.SelectedTasks);
                    for (var i = 0; i < this.SelectedTasks.length; i++) {
                        this.AssignMasterTaskInsert.push({
                            ProjectNameID: this.AssignMasterTask.ProjectNameID,
                            TaskName: this.SelectedTasks[i],
                            CreatedBy: this.UserID,
                            DealerID: this.DealerID
                        });
                    }
                    console.log(this.AssignMasterTaskInsert);
                    this.AssignMasterTaskService.AssignMasterTasks(this.AssignMasterTaskInsert).then((function (response) {
                        if ((response.data.Result) === "Succcess") {
                            _this.alert = "Success. All the selected tasks have been assigned to the project " + _this.SelectedProjectName;
                            $("#close").show();
                        }
                        else {
                            _this.alert = "Oops some error occured.";
                            $("#close").show();
                        }
                    }));
                };
                //Modal Close Button
                AssignMasterTaskController.prototype.Close = function () {
                    location.href = "#!/ListProjectTasks";
                };
                AssignMasterTaskController.$inject = ["AssignMasterTaskService", "$cookieStore"];
                return AssignMasterTaskController;
            }());
            var AssignMasterTaskComponentController = /** @class */ (function () {
                function AssignMasterTaskComponentController() {
                    this.controller = AssignMasterTaskController;
                    this.templateUrl = "/Scripts/App/SkillsModule/AssignMasterTask/Template/_AssignMasterTask.html";
                }
                AssignMasterTaskComponentController.Name = "assignmastertaskcomponent";
                return AssignMasterTaskComponentController;
            }());
            app.AddComponent(AssignMasterTaskComponentController.Name, new AssignMasterTaskComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AssignMasterTaskComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var AssignMasterTaskService = /** @class */ (function (_super) {
            __extends(AssignMasterTaskService, _super);
            function AssignMasterTaskService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                return _this;
            }
            AssignMasterTaskService.prototype.FindProjectByManagerAC = function (DealerID, UserID, PreText) {
                var config = {
                    params: {
                        DealerID: DealerID,
                        UserID: UserID,
                        PreText: PreText
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "ProjectByManagerAutoComplete",
                    Config: config
                });
            };
            AssignMasterTaskService.prototype.GetProjectByManagerAC = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        ProjectName: item.ProjectName,
                        ProjectNameID: item.ProjectNameID
                    });
                }
                return list;
            };
            AssignMasterTaskService.prototype.FindMasterTaskListND = function (DealerID) {
                var config = {
                    params: {
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "MasterTaskAllocationList",
                    Config: config
                });
            };
            AssignMasterTaskService.prototype.GetMasterTaskListND = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        MasterTaskID: item.MasterTaskID,
                        TaskName: item.TaskName
                    });
                }
                return list;
            };
            //Insert
            AssignMasterTaskService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.url + "/" + "InsertFromMasterList" });
            };
            AssignMasterTaskService.prototype.AssignMasterTasks = function (data) {
                var url = this.url + "/" + "InsertFromMasterList";
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            AssignMasterTaskService.$inject = ["$http", "$q"];
            return AssignMasterTaskService;
        }(GCPL.Service.BaseService));
        Service.AssignMasterTaskService = AssignMasterTaskService;
        app.AddService("AssignMasterTaskService", AssignMasterTaskService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AssignMasterTaskService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var TSDefaulterSearchModel = /** @class */ (function () {
            function TSDefaulterSearchModel() {
            }
            return TSDefaulterSearchModel;
        }());
        Model.TSDefaulterSearchModel = TSDefaulterSearchModel;
        var TSDefaulterGridView = /** @class */ (function () {
            function TSDefaulterGridView() {
            }
            return TSDefaulterGridView;
        }());
        Model.TSDefaulterGridView = TSDefaulterGridView;
        var TSDefaulterDateGrid = /** @class */ (function () {
            function TSDefaulterDateGrid() {
            }
            return TSDefaulterDateGrid;
        }());
        Model.TSDefaulterDateGrid = TSDefaulterDateGrid;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TimesheetDefaultersModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var TimesheetDefaultersController = /** @class */ (function (_super) {
            __extends(TimesheetDefaultersController, _super);
            function TimesheetDefaultersController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TimesheetDefaultersController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.TimesheetDefaultersController = TimesheetDefaultersController;
        app.AddController("TimesheetDefaultersController", TimesheetDefaultersController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TimesheetDefaultersController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var TSDefaulterSearchModel = GCPL.Model.TSDefaulterSearchModel;
            var TimesheetDefaultersController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function TimesheetDefaultersController(_UserNameService, _cookieStore, _AllocatedResourcesService, _TimesheetDefaulterService) {
                    this._cookieStore = _cookieStore;
                    this._AllocatedResourcesService = _AllocatedResourcesService;
                    this._TimesheetDefaulterService = _TimesheetDefaulterService;
                    this.TSDefaulterSearch = null;
                    this.TSDefaulterGridView = null;
                    this.TSDefaulterDates = null;
                    this.DealerID = null;
                    this.UserID = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = "10";
                    this.displayName = null;
                    this.StartDate = null;
                    this.EndDate = null;
                    this.alert = null;
                    this.EmpName = null;
                    this.Cookie = null;
                    this.UserNameService = _UserNameService;
                    this.Cookie = _cookieStore;
                    this.AllocatedResourcesService = _AllocatedResourcesService;
                    this.TimesheetDefaulterService = _TimesheetDefaulterService;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.TSDefaulterSearch = new TSDefaulterSearchModel();
                    this.TSDefaulterGridView = new Array();
                }
                TimesheetDefaultersController.prototype.$onInit = function () {
                    this.Init();
                    var that = this;
                    $("#FromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: function (date) {
                            that.StartDate = date;
                            console.log(that.StartDate);
                            angular.element($('#FromDate')).triggerHandler('input');
                            that.TSDefaulterSearch.FromDate = date;
                        }
                    });
                    $("#ToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: function (date) {
                            that.EndDate = date;
                            angular.element($('#ToDate')).triggerHandler('input');
                            that.TSDefaulterSearch.ToDate = date;
                        }
                    });
                };
                //Page Load Define Values//
                TimesheetDefaultersController.prototype.Init = function () {
                    //User Autocomplete
                    var that = this;
                    $("#EmployeeName").autocomplete({
                        source: function (request, res) {
                            that.UserNameService.FilterAutoComplete(request).then((function (response) {
                                var data = that.UserNameService.GetUserName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Name,
                                        value: item.Name,
                                        id: item.UserID,
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            //that.InsertProjectHeader.ProjectCoOwner = ui.item.id;
                            //that.displayName = ui.item.value;
                            that.TSDefaulterSearch.EmployeeID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                };
                TimesheetDefaultersController.prototype.Search = function () {
                    console.log(this.TSDefaulterSearch);
                    this.TSDefaulterSearch.DealerID = this.DealerID;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                TimesheetDefaultersController.prototype.showDates = function (item) {
                    var _this = this;
                    debugger;
                    this.EmpName = item.EmployeeName;
                    this.TSDefaulterSearch.EmployeeID = item.UserID;
                    this.TimesheetDefaulterService.FindDefaulterDates(this.TSDefaulterSearch).then((function (response) {
                        _this.TSDefaulterDates = _this.TimesheetDefaulterService.GetDefaulterDates(response.data.Result);
                    }));
                };
                TimesheetDefaultersController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.TSDefaulterGridView = this.TimesheetDefaulterService.FindTimesheetDefaulters(this.TSDefaulterSearch).then((function (response) {
                        _this.TSDefaulterGridView = _this.TimesheetDefaulterService.GetTimesheetDefaulters(response.data.Result);
                        _this.TSDefaulterGridView.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.TSDefaulterGridView.slice(0, that.numRecords);
                    }));
                };
                TimesheetDefaultersController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TSDefaulterGridView.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                TimesheetDefaultersController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TSDefaulterGridView.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                TimesheetDefaultersController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                TimesheetDefaultersController.prototype.Clear = function () {
                    $("#EmployeeName").val('');
                    this.TSDefaulterSearch.EmployeeID = $('#EmployeeName').val();
                    $("#FromDate").val(null);
                    this.TSDefaulterSearch.FromDate = null;
                    $("#ToDate").val(null);
                    this.TSDefaulterSearch.ToDate = null;
                    this.shownItems = null;
                    this.TSDefaulterGridView.length = "0";
                };
                TimesheetDefaultersController.$inject = ["UserNameService", "$cookieStore", "AllocatedResourcesService", "TimesheetDefaulterService"];
                return TimesheetDefaultersController;
            }());
            var TimesheetDefaultersComponentController = /** @class */ (function () {
                function TimesheetDefaultersComponentController() {
                    this.controller = TimesheetDefaultersController;
                    this.templateUrl = "/Scripts/App/SkillsModule/TimesheetDefaulters/Template/_TimesheetDefaulters.html";
                }
                TimesheetDefaultersComponentController.Name = "timesheetdefaulterscomponent";
                return TimesheetDefaultersComponentController;
            }());
            app.AddComponent(TimesheetDefaultersComponentController.Name, new TimesheetDefaultersComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TimesheetDefaultersComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var TimesheetDefaulterService = /** @class */ (function (_super) {
            __extends(TimesheetDefaulterService, _super);
            function TimesheetDefaulterService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.cookie = _cookieStore;
                return _this;
            }
            TimesheetDefaulterService.prototype.FindTimesheetDefaulters = function (data) {
                var EmployeeID, FromDate, ToDate, DealerID;
                if (data.EmployeeID !== undefined) {
                    EmployeeID = data.EmployeeID;
                }
                else {
                    EmployeeID = "";
                }
                if (data.FromDate !== undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = "";
                }
                if (data.ToDate !== undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = "";
                }
                if (data.DealerID !== undefined) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = "";
                }
                var config = {
                    params: {
                        EmployeeID: EmployeeID,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/TimesheetDefaulters",
                    Config: config
                });
            };
            TimesheetDefaulterService.prototype.GetTimesheetDefaulters = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        DefaultDays: item.DefaultDays,
                        EmployeeName: item.EmployeeName,
                        UserID: item.UserID
                    });
                }
                return list;
            };
            TimesheetDefaulterService.prototype.FindDefaulterDates = function (data) {
                var EmployeeID, FromDate, ToDate, DealerID;
                if (data.EmployeeID !== undefined) {
                    EmployeeID = data.EmployeeID;
                }
                else {
                    EmployeeID = "";
                }
                if (data.FromDate !== undefined) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = "";
                }
                if (data.ToDate !== undefined) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = "";
                }
                if (data.DealerID !== undefined) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = "";
                }
                var config = {
                    params: {
                        EmployeeID: EmployeeID,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/TSDefaulterDateList",
                    Config: config
                });
            };
            TimesheetDefaulterService.prototype.GetDefaulterDates = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        DefaultDateList: item.DefaultDateList
                    });
                }
                return list;
            };
            TimesheetDefaulterService.$inject = ["$http", "$q", "$cookieStore"];
            return TimesheetDefaulterService;
        }(GCPL.Service.BaseService));
        Service.TimesheetDefaulterService = TimesheetDefaulterService;
        app.AddService("TimesheetDefaulterService", TimesheetDefaulterService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TimesheetDefaultersService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var VendorList = /** @class */ (function () {
            function VendorList() {
            }
            return VendorList;
        }());
        Model.VendorList = VendorList;
        var ItemListGrid = /** @class */ (function () {
            function ItemListGrid() {
            }
            return ItemListGrid;
        }());
        Model.ItemListGrid = ItemListGrid;
        var InsertVendorItemDetails = /** @class */ (function () {
            function InsertVendorItemDetails() {
            }
            return InsertVendorItemDetails;
        }());
        Model.InsertVendorItemDetails = InsertVendorItemDetails;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VendorItemAllocationModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var VendorItemAllocationController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function VendorItemAllocationController(_VendorItemService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.AutoFillvendor = null;
                    this.ItemGrid = null;
                    this.InsVendordtls = null;
                    this.DealerID = null;
                    this.UserID = null;
                    this.SelectedItem = [];
                    this.alert = null;
                    this.Cookie = null;
                    this.VendorItemService = _VendorItemService;
                    this.Cookie = _cookieStore;
                    this.AutoFillvendor = new Array();
                    this.ItemGrid = new Array();
                    this.InsVendordtls = new Array();
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                }
                VendorItemAllocationController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                VendorItemAllocationController.prototype.Init = function () {
                    var _this = this;
                    $("#errorclose").hide();
                    $("#close").hide();
                    var that = this;
                    var filters;
                    $("#txtVendor").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            debugger;
                            that.VendorItemService.FindVendor(request).then((function (response) {
                                var data = that.VendorItemService.GetVendorList(response.data.Result);
                                console.log(data);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.VendorName,
                                        value: item.VendorName,
                                        id: item.VendorID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.InsVendordtls.VendorID = ui.item.id;
                            that.changegrid();
                            //this.changegrid();
                            //console.log(that.getLeadSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    ////fillgrid
                    debugger;
                    this.VendorItemService.FindItem(this.DealerID, this.InsVendordtls.VendorID).then((function (response) {
                        _this.ItemGrid = _this.VendorItemService.GetVendorItemGridList(response.data.Result);
                    }));
                };
                VendorItemAllocationController.prototype.changegrid = function () {
                    var _this = this;
                    this.VendorItemService.FindItem(this.DealerID, this.InsVendordtls.VendorID).then((function (response) {
                        _this.ItemGrid = _this.VendorItemService.GetVendorItemGridList(response.data.Result);
                    }));
                };
                VendorItemAllocationController.prototype.CBox = function (item) {
                    //this.InsVendordtls = [];
                    console.log(item);
                    this.InsVendordtls.DealerID = this.DealerID;
                    this.InsVendordtls.CreatedBy = this.UserID;
                    var that = this;
                    var SelectedItem = [];
                    $.each(this.ItemGrid, function (key, item) {
                        if (item.IsSelected == true) {
                            SelectedItem.push(item.ItemID);
                        }
                    });
                    console.log("Selected items => ");
                    console.log(SelectedItem);
                    this.SelectedItem = [];
                    that.SelectedItem = SelectedItem;
                };
                VendorItemAllocationController.prototype.Assign = function () {
                    var _this = this;
                    debugger;
                    console.log(this.SelectedItem);
                    //if (this.SelectedItem = []) {
                    //    $("#errorclose").show();
                    //    $("#close").hide();
                    //    this.alert = "Please Select Items.";
                    //}
                    for (var i = 0; i < this.SelectedItem.length; i++) {
                        this.InsVendordtls.push({
                            ItemID: this.SelectedItem[i],
                            VendorID: this.InsVendordtls.VendorID,
                            CreatedBy: this.UserID,
                            DealerID: this.DealerID,
                            Status: '1'
                        });
                    }
                    console.log(this.InsVendordtls);
                    this.VendorItemService.AssignVendoritem(this.InsVendordtls).then((function (response) {
                        if ((response.data.Result) == true) {
                            _this.alert = " Vendor Item Allocation is Successfully Inserted";
                            $("#errorclose").hide();
                            $("#close").show();
                            $('#myModalAddNew').click();
                            _this.VendorItemService.FindItem(_this.DealerID, _this.InsVendordtls.VendorID).then((function (response) {
                                _this.ItemGrid = _this.VendorItemService.GetVendorItemGridList(response.data.Result);
                            }));
                            //this.InsVendordtls.VendorID = "";
                            //(<HTMLInputElement>document.getElementById("txtVendor")).value = "";
                            _this.InsVendordtls = [];
                        }
                        else {
                            _this.InsVendordtls = [];
                            _this.alert = 'Oops Some Error Occured';
                            $("#errorclose").hide();
                            $("#close").show();
                        }
                    }));
                };
                VendorItemAllocationController.prototype.DeAllocate = function () {
                    var _this = this;
                    debugger;
                    console.log(this.SelectedItem);
                    //if (this.SelectedItem = []) {
                    //    $("#errorclose").show();
                    //    $("#close").hide();
                    //    this.alert = "Please Select Items.";
                    //}
                    for (var i = 0; i < this.SelectedItem.length; i++) {
                        this.InsVendordtls.push({
                            ItemID: this.SelectedItem[i],
                            VendorID: this.InsVendordtls.VendorID,
                            DealerID: this.DealerID,
                            Status: '0'
                        });
                    }
                    console.log(this.InsVendordtls);
                    this.VendorItemService.DeallocateVendoritem(this.InsVendordtls).then((function (response) {
                        if ((response.data.Result) == true) {
                            _this.alert = " Vendor Item Allocation is Successfully Updated";
                            $("#errorclose").hide();
                            $("#close").show();
                            $('#myModalAddNew').click();
                            _this.VendorItemService.FindItem(_this.DealerID, _this.InsVendordtls.VendorID).then((function (response) {
                                _this.ItemGrid = _this.VendorItemService.GetVendorItemGridList(response.data.Result);
                            }));
                            _this.InsVendordtls.VendorID = "";
                            document.getElementById("txtVendor").value = "";
                            _this.InsVendordtls = [];
                        }
                        else {
                            _this.InsVendordtls = [];
                            _this.alert = 'Oops Some Error Occured';
                            $("#errorclose").hide();
                            $("#close").show();
                        }
                    }));
                };
                VendorItemAllocationController.$inject = ["VendorItemAllocation", "$cookieStore"];
                return VendorItemAllocationController;
            }());
            var VendorItemAllocationComponentController = /** @class */ (function () {
                function VendorItemAllocationComponentController() {
                    this.controller = VendorItemAllocationController;
                    this.templateUrl = "/Scripts/App/VRPModule/VenderItemAllocation/Template/VendorItemAllocation.html";
                }
                VendorItemAllocationComponentController.Name = "vendoritemallocationcomponent";
                return VendorItemAllocationComponentController;
            }());
            app.AddComponent(VendorItemAllocationComponentController.Name, new VendorItemAllocationComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=VenderItemAllocationComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var VendorItemAllocationController = /** @class */ (function (_super) {
            __extends(VendorItemAllocationController, _super);
            function VendorItemAllocationController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return VendorItemAllocationController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.VendorItemAllocationController = VendorItemAllocationController;
        app.AddController("VendorItemAllocationController ", VendorItemAllocationController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VendorItemAllocationController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var VendorItemAllocation = /** @class */ (function (_super) {
            __extends(VendorItemAllocation, _super);
            function VendorItemAllocation($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            VendorItemAllocation.prototype.FindVendor = function (data) {
                debugger;
                var url = this.apiUrl + "/VendorItemAllocation";
                var Description;
                if (data.Description !== undefined) {
                    Description = data.Description;
                }
                else {
                    Description = '';
                }
                var config = {
                    params: {
                        Description: data.term,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            VendorItemAllocation.prototype.GetVendorList = function (data) {
                debugger;
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        VendorID: item.VendorID,
                        VendorName: item.VendorName
                    });
                }
                return list;
            };
            VendorItemAllocation.prototype.FindItem = function (data, data2) {
                var url = this.apiUrl + "/ItemList";
                var VendorID;
                if (data2 == undefined) {
                    VendorID = '';
                }
                else {
                    VendorID = data2;
                }
                var config = {
                    params: {
                        DealerID: data,
                        VendorID: VendorID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            VendorItemAllocation.prototype.GetVendorItemGridList = function (data) {
                debugger;
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        ItemID: item.ItemID,
                        ItemNo: item.ItemNo,
                        Description: item.Description,
                        UOM: item.UOMName,
                        AllocationStatus: item.Status,
                        VendorName: item.VendorName
                    });
                }
                return list;
            };
            VendorItemAllocation.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.url + "/" + "InsertVendorItemList" });
            };
            VendorItemAllocation.prototype.AssignVendoritem = function (data) {
                var url = this.url + "/" + "InsertVendorItemList";
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            VendorItemAllocation.prototype.FindDeallocate = function () {
                return this.ajaXUtility.Get({ Url: this.url + "/" + "UpdateVendorItemList" });
            };
            VendorItemAllocation.prototype.DeallocateVendoritem = function (data) {
                var url = this.url + "/" + "UpdateVendorItemList";
                return this.ajaXUtility.Post({ Url: url, data: data });
            };
            VendorItemAllocation.$inject = ["$http", "$q", "$cookieStore"];
            return VendorItemAllocation;
        }(GCPL.Service.BaseService));
        Service.VendorItemAllocation = VendorItemAllocation;
        app.AddService("VendorItemAllocation", VendorItemAllocation);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VendorItemAllocationService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var TemplateModel = /** @class */ (function () {
            function TemplateModel() {
            }
            return TemplateModel;
        }());
        Model.TemplateModel = TemplateModel;
        var StatusDDModel = /** @class */ (function () {
            function StatusDDModel() {
            }
            return StatusDDModel;
        }());
        Model.StatusDDModel = StatusDDModel;
        var ItemModel = /** @class */ (function () {
            function ItemModel() {
            }
            return ItemModel;
        }());
        Model.ItemModel = ItemModel;
        var FillItemGridAllocation = /** @class */ (function () {
            function FillItemGridAllocation() {
            }
            return FillItemGridAllocation;
        }());
        Model.FillItemGridAllocation = FillItemGridAllocation;
        var InsertVAllocation = /** @class */ (function () {
            function InsertVAllocation() {
            }
            return InsertVAllocation;
        }());
        Model.InsertVAllocation = InsertVAllocation;
        var VRPSendMailDTO = /** @class */ (function () {
            function VRPSendMailDTO() {
            }
            return VRPSendMailDTO;
        }());
        Model.VRPSendMailDTO = VRPSendMailDTO;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AllocateVendorItemQTYModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var AllocateVenderItemQTYController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function AllocateVenderItemQTYController(_VItemAllocationQTY, _VItemService, _AssignMaterialsService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.AutoFillvendor = null;
                    this.DealerID = null;
                    this.UserID = null;
                    this.TempateDDL = null;
                    this.StatusDDl = null;
                    this.fillgrid = null;
                    this.insGrid = null;
                    this.itemModel = null;
                    this.TemplateID = null;
                    this.DisplayMonth = null;
                    this.DisplayYear = null;
                    this.MonthYear = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = "10";
                    this.postArray = [];
                    this.alert = null;
                    this.PlanStatusID = null;
                    this.VRPSendMailDTO = null;
                    this.Cookie = null;
                    this.AssignMaterialsService = _AssignMaterialsService;
                    this.VItemService = _VItemService;
                    this.VItemAllocationQTY = _VItemAllocationQTY;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.TempateDDL = new Array();
                    this.StatusDDl = new Array();
                    this.AutoFillvendor = new Array();
                    this.fillgrid = new Array();
                    this.insGrid = new Array();
                    this.itemModel = new Array();
                }
                AllocateVenderItemQTYController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                AllocateVenderItemQTYController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    var filters;
                    //Template DropDown
                    this.VItemAllocationQTY.FindTemplate(this.DealerID).then((function (response) {
                        _this.TempateDDL = _this.VItemAllocationQTY.GetTemplateDDL(response.data.Result);
                    }));
                    //Status Dropdown
                    this.VItemAllocationQTY.FindStatus().then((function (response) {
                        _this.StatusDDl = _this.VItemAllocationQTY.GetStatusDDl(response.data.Result);
                    }));
                };
                AllocateVenderItemQTYController.prototype.GetMYByTemplate = function () {
                    var _this = this;
                    debugger;
                    this.AssignMaterialsService.FindMonthYearByTemplate(this.TemplateID).then((function (response) {
                        _this.MonthYear = _this.AssignMaterialsService.GetMonthYearByTemplate(response.data.Result);
                        _this.DisplayYear = _this.MonthYear[0].Year;
                        _this.DisplayMonth = _this.MonthYear[0].Month;
                    }));
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                AllocateVenderItemQTYController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.VItemAllocationQTY.FindVendorItem(this.DealerID, this.TemplateID).then((function (response) {
                        _this.fillgrid = _this.VItemAllocationQTY.GetVendorAlocateGridList(response.data.Result);
                        _this.fillgrid.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.fillgrid.slice(0, that.numRecords);
                    }));
                };
                AllocateVenderItemQTYController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.fillgrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                AllocateVenderItemQTYController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.fillgrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                AllocateVenderItemQTYController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                AllocateVenderItemQTYController.prototype.removeItem = function (item) {
                    var index = this.shownItems.indexOf(item);
                    this.shownItems.splice(index, 1);
                };
                AllocateVenderItemQTYController.prototype.ChangeQty = function (item) {
                    for (var i = 0; i < item.length; i++) {
                        if (item[i].W1Qty_Vendor_Confirmed == undefined) {
                            item[i].W1Qty_Vendor_Confirmed = 0;
                        }
                        ;
                        if (item[i].W2Qty_Vendor_Confirmed == undefined) {
                            item[i].W2Qty_Vendor_Confirmed = 0;
                        }
                        ;
                        if (item[i].W3Qty_Vendor_Confirmed == undefined) {
                            item[i].W3Qty_Vendor_Confirmed = 0;
                        }
                        ;
                        if (item[i].W4Qty_Vendor_Confirmed == undefined) {
                            item[i].W4Qty_Vendor_Confirmed = 0;
                        }
                        ;
                        if (item[i].W5Qty_Vendor_Confirmed == undefined) {
                            item[i].W5Qty_Vendor_Confirmed = 0;
                        }
                        ;
                        item[i].VCTotalQty = parseInt(item[i].W1Qty_Vendor_Confirmed) + parseInt(item[i].W2Qty_Vendor_Confirmed) + parseInt(item[i].W3Qty_Vendor_Confirmed)
                            + parseInt(item[i].W4Qty_Vendor_Confirmed) + parseInt(item[i].W5Qty_Vendor_Confirmed);
                    }
                };
                //Insert
                AllocateVenderItemQTYController.prototype.Submit = function (item) {
                    var _this = this;
                    this.postArray = [];
                    for (var i = 0; i < item.length; i++) {
                        if (item[i].W1Qty_Vendor_Confirmed == 0 && item[i].W2Qty_Vendor_Confirmed == 0 && item[i].W3Qty_Vendor_Confirmed == 0 &&
                            item[i].W4Qty_Vendor_Confirmed == 0 && item[i].W5Qty_Vendor_Confirmed == 0) {
                        }
                        else {
                            item[i].DealerID = this.DealerID;
                            item[i].CreatedBy = this.UserID;
                            item[i].TemplateID = this.TemplateID;
                            item[i].PlanStatusID = this.PlanStatusID;
                            this.postArray.push(item[i]);
                        }
                    }
                    console.log(this.postArray);
                    debugger;
                    this.VItemAllocationQTY.PostVendorAllocationDetails(this.postArray).then((function (response) {
                        if ((response.data.Result) == true) {
                            _this.alert = "Quantity has been saved Successfully";
                            $("#close").show();
                            $("#errorclose").hide();
                        }
                        else {
                            _this.alert = "Opps some error occured";
                            $("#close").show();
                            $("#errorclose").hide();
                        }
                    }));
                };
                AllocateVenderItemQTYController.prototype.Close = function () {
                    location.reload();
                };
                AllocateVenderItemQTYController.prototype.SendMail = function (vendorID) {
                    var _this = this;
                    this.VRPSendMailDTO = new GCPL.Model.VRPSendMailDTO();
                    this.VRPSendMailDTO.VendorID = vendorID;
                    this.VRPSendMailDTO.TemplateID = this.TemplateID;
                    this.VItemAllocationQTY.SendMail(this.VRPSendMailDTO).then((function (response) {
                        if ((response.data.Result) == true) {
                            _this.alert = "Mail Send Successfully";
                            $("#close").show();
                            $("#errorclose").hide();
                        }
                        else {
                            _this.alert = "Opps some error occured";
                            $("#close").show();
                            $("#errorclose").hide();
                        }
                    }));
                };
                AllocateVenderItemQTYController.$inject = ["VItemAllocationQTY", "VendorItemAllocation", "AssignMaterialsService", "$cookieStore"];
                return AllocateVenderItemQTYController;
            }());
            var AllocateVenderItemQTYComponentController = /** @class */ (function () {
                function AllocateVenderItemQTYComponentController() {
                    this.controller = AllocateVenderItemQTYController;
                    this.templateUrl = "/Scripts/App/VRPModule/VendorAllocationItemQTY/Template/_AllocateVendorItemQTY.html";
                }
                AllocateVenderItemQTYComponentController.Name = "allocatevenderitemqtycomponent";
                return AllocateVenderItemQTYComponentController;
            }());
            app.AddComponent(AllocateVenderItemQTYComponentController.Name, new AllocateVenderItemQTYComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AllocateVendorItemQTYComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var AllocateVenderItemQTYController = /** @class */ (function (_super) {
            __extends(AllocateVenderItemQTYController, _super);
            function AllocateVenderItemQTYController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AllocateVenderItemQTYController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.AllocateVenderItemQTYController = AllocateVenderItemQTYController;
        app.AddController("AllocateVenderItemQTYController ", AllocateVenderItemQTYController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AllocateVendorItemQTYController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var VItemAllocationQTY = /** @class */ (function (_super) {
            __extends(VItemAllocationQTY, _super);
            function VItemAllocationQTY($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            //Insert
            VItemAllocationQTY.prototype.PostVendorAllocationDetails = function (data) {
                var url = this.url + "/" + "InsertVendorItemQTY";
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data
                });
            };
            VItemAllocationQTY.prototype.FindTemplate = function (data) {
                var config = {
                    params: {
                        DealerID: data,
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/TempalteSelectDD",
                    Config: config
                });
            };
            VItemAllocationQTY.prototype.GetTemplateDDL = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        TemplateID: item.TemplateID,
                        TemplateName: item.TemplateName
                    });
                }
                return list;
            };
            VItemAllocationQTY.prototype.FindStatus = function () {
                var config = {
                    params: {}
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/PlanStatusSelectDD",
                    Config: config
                });
            };
            VItemAllocationQTY.prototype.GetStatusDDl = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        Description: item.Description,
                        PlanStatusID: item.PlanStatusID
                    });
                }
                return list;
            };
            VItemAllocationQTY.prototype.FindItem = function (data) {
                debugger;
                var url = this.apiUrl + "/MaterialAutoComplete";
                var Description;
                if (data.Description !== undefined) {
                    Description = data.Description;
                }
                else {
                    Description = '';
                }
                var config = {
                    params: {
                        Description: data.term,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            VItemAllocationQTY.prototype.GetItem = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        ItemID: item.ItemID,
                        Description: item.Description
                    });
                }
                return list;
            };
            VItemAllocationQTY.prototype.FindVendorItem = function (DealerID, TemplateID) {
                debugger;
                var url = this.apiUrl + "/VendorAllocationItemList";
                var config = {
                    params: {
                        DealerID: DealerID,
                        TemplateID: TemplateID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            VItemAllocationQTY.prototype.GetVendorAlocateGridList = function (data) {
                var list = Array();
                console.log(data);
                debugger;
                for (var _i = 0, data_4 = data; _i < data_4.length; _i++) {
                    var item = data_4[_i];
                    list.push({
                        PlannedDataID: item.PlannedDataID,
                        ItemID: item.ItemID,
                        ItemNo: item.ItemNo,
                        W1Qty: item.W1Qty,
                        W2Qty: item.W2Qty,
                        W3Qty: item.W3Qty,
                        W4Qty: item.W4Qty,
                        W5Qty: item.W5Qty,
                        Description: item.Description,
                        UOMName: item.UOMName,
                        TotalQty: item.TotalQty,
                        VendorID: item.VendorID,
                        VendorName: item.VendorName
                    });
                }
                return list;
            };
            VItemAllocationQTY.prototype.SendMail = function (data1) {
                var url = this.apiUrl + "/SendMailVRPVendorAllocation";
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data1,
                });
            };
            VItemAllocationQTY.$inject = ["$http", "$q", "$cookieStore"];
            return VItemAllocationQTY;
        }(GCPL.Service.BaseService));
        Service.VItemAllocationQTY = VItemAllocationQTY;
        app.AddService("VItemAllocationQTY", VItemAllocationQTY);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AllocateVendorItemQTYService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var CreateTemplateModel = /** @class */ (function () {
            function CreateTemplateModel() {
            }
            return CreateTemplateModel;
        }());
        Model.CreateTemplateModel = CreateTemplateModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateTemplateModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var CreateTemplateModel = GCPL.Model.CreateTemplateModel;
            var CreateTemplateController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function CreateTemplateController(_cookieStore, _InsertCreateTemplateService, $location) {
                    this._cookieStore = _cookieStore;
                    this._InsertCreateTemplateService = _InsertCreateTemplateService;
                    this.$location = $location;
                    this.Week1Details = null;
                    this.Week2Details = null;
                    this.Week3Details = null;
                    this.Week4Details = null;
                    this.Week5Details = null;
                    this.TemplateData = null;
                    this.CreateTemplate = null;
                    this.DealerID = null;
                    this.UserID = null;
                    this.alert = null;
                    this.TemplateID = null;
                    this.EditArray = [];
                    this.CreateTemplateTitle = true;
                    this.UpdateTemplateTitle = false;
                    //Services
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.InsertCreateTemplateService = _InsertCreateTemplateService;
                    this.TemplateID = $location.search().TemplateID;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.Week1Details = new CreateTemplateModel();
                    this.Week2Details = new CreateTemplateModel();
                    this.Week3Details = new CreateTemplateModel();
                    this.Week4Details = new CreateTemplateModel();
                    this.Week5Details = new CreateTemplateModel();
                    this.TemplateData = new CreateTemplateModel();
                    this.CreateTemplate = new Array();
                }
                CreateTemplateController.prototype.$onInit = function () {
                    this.Init();
                    var that = this;
                    //Datepicker
                    var dateToday = new Date();
                    $("#Week1FromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        minDate: dateToday,
                        onSelect: function (date) {
                            $(".ui-datepicker a").removeAttr("href");
                            angular.element($('#Week1FromDate')).triggerHandler('input');
                            that.Week1Details.FromDate = date;
                        }
                    });
                    $("#Week1ToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        minDate: dateToday,
                        onSelect: function (date) {
                            $(".ui-datepicker a").removeAttr("href");
                            angular.element($('#Week1ToDate')).triggerHandler('input');
                            that.Week1Details.ToDate = date;
                        }
                    });
                    $("#Week2FromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        minDate: dateToday,
                        onSelect: function (date) {
                            $(".ui-datepicker a").removeAttr("href");
                            angular.element($('#Week2FromDate')).triggerHandler('input');
                            that.Week2Details.FromDate = date;
                        }
                    });
                    $("#Week2ToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        minDate: dateToday,
                        onSelect: function (date) {
                            $(".ui-datepicker a").removeAttr("href");
                            angular.element($('#Week2ToDate')).triggerHandler('input');
                            that.Week2Details.ToDate = date;
                        }
                    });
                    $("#Week3FromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        minDate: dateToday,
                        onSelect: function (date) {
                            $(".ui-datepicker a").removeAttr("href");
                            angular.element($('#Week3FromDate')).triggerHandler('input');
                            that.Week3Details.FromDate = date;
                        }
                    });
                    $("#Week3ToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        minDate: dateToday,
                        onSelect: function (date) {
                            $(".ui-datepicker a").removeAttr("href");
                            angular.element($('#Week3ToDate')).triggerHandler('input');
                            that.Week3Details.ToDate = date;
                        }
                    });
                    $("#Week4FromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        minDate: dateToday,
                        onSelect: function (date) {
                            $(".ui-datepicker a").removeAttr("href");
                            angular.element($('#Week4FromDate')).triggerHandler('input');
                            that.Week4Details.FromDate = date;
                        }
                    });
                    $("#Week4ToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        minDate: dateToday,
                        onSelect: function (date) {
                            $(".ui-datepicker a").removeAttr("href");
                            angular.element($('#Week4ToDate')).triggerHandler('input');
                            that.Week4Details.ToDate = date;
                        }
                    });
                    $("#Week5FromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        minDate: dateToday,
                        onSelect: function (date) {
                            $(".ui-datepicker a").removeAttr("href");
                            angular.element($('#Week5FromDate')).triggerHandler('input');
                            that.Week5Details.FromDate = date;
                        }
                    });
                    $("#Week5ToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        minDate: dateToday,
                        onSelect: function (date) {
                            $(".ui-datepicker a").removeAttr("href");
                            angular.element($('#Week5ToDate')).triggerHandler('input');
                            that.Week5Details.ToDate = date;
                        }
                    });
                };
                //Page Load Define Values//
                CreateTemplateController.prototype.Init = function () {
                    var _this = this;
                    //Edit Template
                    if (this.TemplateID != null) {
                        this.CreateTemplateTitle = false;
                        this.UpdateTemplateTitle = true;
                        this.InsertCreateTemplateService.FindTemplateEdit(this.TemplateID, this.DealerID).then((function (response) {
                            _this.TemplateData = response.data.Result[0];
                            _this.Week1Details = response.data.Result[0];
                            _this.Week2Details = response.data.Result[1];
                            _this.Week3Details = response.data.Result[2];
                            _this.Week4Details = response.data.Result[3];
                            _this.Week5Details = response.data.Result[4];
                        }));
                    }
                };
                CreateTemplateController.prototype.PostTemplateInfo = function () {
                    var _this = this;
                    this.Week1Details.Week = "Week1";
                    this.Week2Details.Week = "Week2";
                    this.Week3Details.Week = "Week3";
                    this.Week4Details.Week = "Week4";
                    this.Week5Details.Week = "Week5";
                    this.TemplateData.PlanStatusID = 1;
                    this.TemplateData.DealerID = this.DealerID;
                    this.TemplateData.CreatedBy = this.UserID;
                    this.CreateTemplate.push(this.TemplateData, this.Week1Details, this.Week2Details, this.Week3Details, this.Week4Details, this.Week5Details);
                    console.log(this.CreateTemplate);
                    debugger;
                    this.InsertCreateTemplateService.PostCreateTemplate(this.CreateTemplate).then((function (response) {
                        _this.CreateTemplate = [];
                        if ((response.data.Result) === "Success") {
                            if (_this.TemplateID !== null) {
                                _this.alert = "Tempalte has been Updated Successfully";
                                $("#close").show();
                                $("#errorclose").hide();
                            }
                            else {
                                _this.alert = "Tempalte has been Created Successfully";
                                $("#close").show();
                                $("#errorclose").hide();
                            }
                        }
                        else if ((response.data.Result) === "1") {
                            _this.alert = "Tempalte Creation failed! Template for " + _this.TemplateData.Year + " ( " + _this.TemplateData.Month + " ) already exists!";
                            $("#close").hide();
                            $("#errorclose").show();
                        }
                        else {
                            _this.alert = "Oops some error occured";
                            $("#close").show();
                            $("#errorclose").hide();
                        }
                    }));
                };
                //Modal Buttons
                CreateTemplateController.prototype.Close = function () {
                    location.href = "#!/TemplateList";
                };
                CreateTemplateController.prototype.ErrorClose = function () {
                };
                CreateTemplateController.$inject = ["$cookieStore", "InsertCreateTemplateService", "$location"];
                return CreateTemplateController;
            }());
            var CreateTemplateComponentController = /** @class */ (function () {
                function CreateTemplateComponentController() {
                    this.controller = CreateTemplateController;
                    this.templateUrl = "/Scripts/App/VRPModule/CreateTemplate/Template/_CreateTemplate.html";
                }
                CreateTemplateComponentController.Name = "createtemplatecomponent";
                return CreateTemplateComponentController;
            }());
            app.AddComponent(CreateTemplateComponentController.Name, new CreateTemplateComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateTemplateComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var CreateTemplateController = /** @class */ (function (_super) {
            __extends(CreateTemplateController, _super);
            function CreateTemplateController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CreateTemplateController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.CreateTemplateController = CreateTemplateController;
        app.AddController("CreateTemplateController", CreateTemplateController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateTemplateController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
//Insert Create Template
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var InsertCreateTemplateService = /** @class */ (function (_super) {
            __extends(InsertCreateTemplateService, _super);
            function InsertCreateTemplateService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                return _this;
            }
            InsertCreateTemplateService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.url + "/" + "CreateTemplate" });
            };
            InsertCreateTemplateService.prototype.PostCreateTemplate = function (data) {
                var url = this.url + "/" + "CreateTemplate";
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data
                });
            };
            //Edit
            InsertCreateTemplateService.prototype.FindTemplateEdit = function (TemplateID, DealerID) {
                var config = {
                    params: {
                        TemplateID: TemplateID,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "TemplateEdit",
                    Config: config
                });
            };
            InsertCreateTemplateService.prototype.GetTemplateEdit = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        CreatedBy: item.CreatedBy,
                        DealerID: item.DealerID,
                        FromDate: item.FromDate,
                        Month: item.Month,
                        Name: item.Name,
                        PlanStatusID: item.PlanStatusID,
                        TemplateDetailsID: item.TemplateDetailsID,
                        TemplateID: item.TemplateID,
                        ToDate: item.ToDate,
                        Week: item.Week,
                        Year: item.Year
                    });
                }
                return list;
            };
            InsertCreateTemplateService.$inject = ["$http", "$q"];
            return InsertCreateTemplateService;
        }(GCPL.Service.BaseService));
        Service.InsertCreateTemplateService = InsertCreateTemplateService;
        app.AddService("InsertCreateTemplateService", InsertCreateTemplateService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CreateTemplateService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var TemplateListGridModel = /** @class */ (function () {
            function TemplateListGridModel() {
            }
            return TemplateListGridModel;
        }());
        Model.TemplateListGridModel = TemplateListGridModel;
        var TemplateListDetailsGrid = /** @class */ (function () {
            function TemplateListDetailsGrid() {
            }
            return TemplateListDetailsGrid;
        }());
        Model.TemplateListDetailsGrid = TemplateListDetailsGrid;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TemplateListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var CreateTempalteModel = GCPL.Model.CreateTemplateModel;
            var TemplateListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function TemplateListController(_cookieStore, _TemplateListService) {
                    this._cookieStore = _cookieStore;
                    this._TemplateListService = _TemplateListService;
                    this.TemplateListGrid = null;
                    this.TemplateListDetailsGrid = null;
                    this.CreateTemplateOb = null;
                    this.DealerID = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = "10";
                    this.TemplateName = null;
                    this.DeleteID = null;
                    this.deleteAlert = null;
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.TemplateListService = _TemplateListService;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.TemplateListGrid = new Array();
                    this.TemplateListDetailsGrid = new Array();
                    this.CreateTemplateOb = new CreateTempalteModel();
                }
                TemplateListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                TemplateListController.prototype.Init = function () {
                    debugger;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                TemplateListController.prototype.TemplateListDetails = function (item) {
                    var _this = this;
                    this.TemplateName = item.TemplateName;
                    this.TemplateListService.FindTemplateListDetails(item.TemplateID, this.DealerID).then((function (response) {
                        _this.TemplateListDetailsGrid = _this.TemplateListService.GetTemplateListDetails(response.data.Result);
                    }));
                };
                TemplateListController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.TemplateListGrid = this.TemplateListService.FindTemplateList(this.DealerID).then((function (response) {
                        _this.TemplateListGrid = _this.TemplateListService.GetTemplateList(response.data.Result);
                        _this.TemplateListGrid.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.TemplateListGrid.slice(0, that.numRecords);
                    }));
                };
                TemplateListController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TemplateListGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                TemplateListController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.TemplateListGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                TemplateListController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                TemplateListController.prototype.CreateTemplate = function () {
                    location.href = "#!/CreateTemplate";
                };
                TemplateListController.prototype.initDelete = function (item) {
                    this.DeleteID = item.TemplateID;
                    this.deleteAlert = item.TemplateName + " will be deleted. Are you sure? ";
                };
                TemplateListController.prototype.Close = function () {
                    var _this = this;
                    this.CreateTemplateOb.TemplateID = this.DeleteID;
                    this.TemplateListService.DeleteTemplate(this.CreateTemplateOb).then((function (response) {
                        console.log(response.data.Result);
                        _this.numRecords = parseInt(_this.NoOfRds);
                        _this.FillGrid(_this.numRecords);
                    }));
                };
                TemplateListController.prototype.ErrorClose = function () {
                };
                TemplateListController.$inject = ["$cookieStore", "TemplateListService"];
                return TemplateListController;
            }());
            var TemplateListComponentController = /** @class */ (function () {
                function TemplateListComponentController() {
                    this.controller = TemplateListController;
                    this.templateUrl = "/Scripts/App/VRPModule/TemplateList/Template/TemplateList.html";
                }
                TemplateListComponentController.Name = "templatelistcomponent";
                return TemplateListComponentController;
            }());
            app.AddComponent(TemplateListComponentController.Name, new TemplateListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=TemplateListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var TemplateListController = /** @class */ (function (_super) {
            __extends(TemplateListController, _super);
            function TemplateListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TemplateListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.TemplateListController = TemplateListController;
        app.AddController("TemplateListController", TemplateListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TemplateListController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var TemplateListService = /** @class */ (function (_super) {
            __extends(TemplateListService, _super);
            function TemplateListService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            //Template List
            TemplateListService.prototype.FindTemplateList = function (data) {
                var config = {
                    params: {
                        DealerID: data,
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/TemplateList",
                    Config: config
                });
            };
            TemplateListService.prototype.GetTemplateList = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        CreatedBy: item.CreatedBy,
                        CreatedOn: item.CreatedOn,
                        Month: item.Month,
                        Status: item.Status,
                        TemplateID: item.TemplateID,
                        TemplateName: item.TemplateName,
                        Year: item.Year
                    });
                }
                return list;
            };
            //Tempalte List Details
            TemplateListService.prototype.FindTemplateListDetails = function (TemplateID, DealerID) {
                var config = {
                    params: {
                        TemplateID: TemplateID,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/TemplateListDetails",
                    Config: config
                });
            };
            TemplateListService.prototype.GetTemplateListDetails = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        FromDate: item.FromDate,
                        ToDate: item.ToDate,
                        Week: item.Week
                    });
                }
                return list;
            };
            //Delete Tempalte ID
            TemplateListService.prototype.DeleteTemplate = function (data) {
                var url = this.url + "/" + "TemplateDelete";
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data
                });
            };
            TemplateListService.$inject = ["$http", "$q", "$cookieStore"];
            return TemplateListService;
        }(GCPL.Service.BaseService));
        Service.TemplateListService = TemplateListService;
        app.AddService("TemplateListService", TemplateListService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=TemplateListService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var TemplateDDModel = /** @class */ (function () {
            function TemplateDDModel() {
            }
            return TemplateDDModel;
        }());
        Model.TemplateDDModel = TemplateDDModel;
        var PlanStatusDDModel = /** @class */ (function () {
            function PlanStatusDDModel() {
            }
            return PlanStatusDDModel;
        }());
        Model.PlanStatusDDModel = PlanStatusDDModel;
        var AssignMaterialsListModel = /** @class */ (function () {
            function AssignMaterialsListModel() {
            }
            return AssignMaterialsListModel;
        }());
        Model.AssignMaterialsListModel = AssignMaterialsListModel;
        var MonthYearByTempalte = /** @class */ (function () {
            function MonthYearByTempalte() {
            }
            return MonthYearByTempalte;
        }());
        Model.MonthYearByTempalte = MonthYearByTempalte;
        var AssignMaterialsModel = /** @class */ (function () {
            function AssignMaterialsModel() {
            }
            return AssignMaterialsModel;
        }());
        Model.AssignMaterialsModel = AssignMaterialsModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AssignMaterialsModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var AssignMaterialsModel = GCPL.Model.AssignMaterialsModel;
            var AssignMaterialsController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function AssignMaterialsController(_AssignMaterialsService, _cookieStore) {
                    this._AssignMaterialsService = _AssignMaterialsService;
                    this._cookieStore = _cookieStore;
                    this.TemplateDD = null;
                    this.DealerID = null;
                    this.PlanStatusDD = null;
                    this.AssignMaterial = null;
                    this.ItemList = null;
                    this.MonthYear = null;
                    this.DisplayMonth = null;
                    this.DisplayYear = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = "10";
                    this.postArray = [];
                    this.UserID = null;
                    this.alert = null;
                    this.Cookie = null;
                    this.AssignMaterialsService = _AssignMaterialsService;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.AssignMaterial = new AssignMaterialsModel();
                }
                AssignMaterialsController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                AssignMaterialsController.prototype.Init = function () {
                    var _this = this;
                    //Template DropDown
                    this.AssignMaterialsService.FindTemplateDD(this.DealerID).then((function (response) {
                        _this.TemplateDD = _this.AssignMaterialsService.GetTemplateDD(response.data.Result);
                    }));
                    //Status Dropdown
                    this.AssignMaterialsService.FindPlanStatusDD().then((function (response) {
                        _this.PlanStatusDD = _this.AssignMaterialsService.GetPlanStatusDD(response.data.Result);
                    }));
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                //Month and Year By Template
                AssignMaterialsController.prototype.GetMYByTemplate = function () {
                    var _this = this;
                    this.AssignMaterialsService.FindMonthYearByTemplate(this.AssignMaterial.TemplateID).then((function (response) {
                        _this.MonthYear = _this.AssignMaterialsService.GetMonthYearByTemplate(response.data.Result);
                        _this.DisplayYear = _this.MonthYear[0].Year;
                        _this.DisplayMonth = _this.MonthYear[0].Month;
                    }));
                };
                AssignMaterialsController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.ItemList = this.AssignMaterialsService.FindAssignItemList(this.DealerID).then((function (response) {
                        _this.ItemList = _this.AssignMaterialsService.GetAssignItemList(response.data.Result);
                        _this.ItemList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.ItemList.slice(0, that.numRecords);
                    }));
                };
                AssignMaterialsController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ItemList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                AssignMaterialsController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ItemList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                AssignMaterialsController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                AssignMaterialsController.prototype.removeItem = function (item) {
                    var index = this.shownItems.indexOf(item);
                    this.shownItems.splice(index, 1);
                };
                AssignMaterialsController.prototype.ChangeQty = function (item) {
                    for (var i = 0; i < item.length; i++) {
                        if (item[i].W1Qty == undefined) {
                            item[i].W1Qty = 0;
                        }
                        ;
                        if (item[i].W2Qty == undefined) {
                            item[i].W2Qty = 0;
                        }
                        ;
                        if (item[i].W3Qty == undefined) {
                            item[i].W3Qty = 0;
                        }
                        ;
                        if (item[i].W4Qty == undefined) {
                            item[i].W4Qty = 0;
                        }
                        ;
                        if (item[i].W5Qty == undefined) {
                            item[i].W5Qty = 0;
                        }
                        ;
                        item[i].TotalQty = parseInt(item[i].W1Qty) + parseInt(item[i].W2Qty) + parseInt(item[i].W3Qty)
                            + parseInt(item[i].W4Qty) + parseInt(item[i].W5Qty);
                    }
                };
                AssignMaterialsController.prototype.Submit = function (item) {
                    var _this = this;
                    this.postArray = [];
                    for (var i = 0; i < item.length; i++) {
                        if (item[i].W1Qty == 0 && item[i].W2Qty == 0 && item[i].W3Qty == 0 &&
                            item[i].W4Qty == 0 && item[i].W5Qty == 0) {
                        }
                        else {
                            item[i].DealerID = this.DealerID;
                            item[i].CreatedBy = this.UserID;
                            item[i].TemplateID = this.AssignMaterial.TemplateID;
                            item[i].PlanStatusID = this.AssignMaterial.PlanStatusID;
                            item[i].PlannedDataID = "";
                            this.postArray.push(item[i]);
                        }
                    }
                    this.AssignMaterialsService.PostAssignMaterialData(this.postArray).then((function (response) {
                        if ((response.data.Result) === "Success") {
                            _this.alert = "Materials have been assigned Successfully";
                            $("#close").show();
                            $("#errorclose").hide();
                        }
                        else {
                            _this.alert = "Opps some error occured";
                            $("#close").show();
                            $("#errorclose").hide();
                        }
                    }));
                };
                AssignMaterialsController.prototype.Close = function () {
                    location.reload();
                };
                AssignMaterialsController.$inject = ["AssignMaterialsService", "$cookieStore"];
                return AssignMaterialsController;
            }());
            var AssignMaterialsComponentController = /** @class */ (function () {
                function AssignMaterialsComponentController() {
                    this.controller = AssignMaterialsController;
                    this.templateUrl = "/Scripts/App/VRPModule/AssignMaterials/Template/_AssignMaterial.html";
                }
                AssignMaterialsComponentController.Name = "assignmaterialscomponent";
                return AssignMaterialsComponentController;
            }());
            app.AddComponent(AssignMaterialsComponentController.Name, new AssignMaterialsComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=AssignMaterialsComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var AssignMaterialsController = /** @class */ (function (_super) {
            __extends(AssignMaterialsController, _super);
            function AssignMaterialsController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AssignMaterialsController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.AssignMaterialsController = AssignMaterialsController;
        app.AddController("AssignMaterialsController", AssignMaterialsController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AssignMaterialsController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var AssignMaterialsService = /** @class */ (function (_super) {
            __extends(AssignMaterialsService, _super);
            function AssignMaterialsService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            //Template DD
            AssignMaterialsService.prototype.FindTemplateDD = function (data) {
                var config = {
                    params: {
                        DealerID: data,
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/TempalteSelectDD",
                    Config: config
                });
            };
            AssignMaterialsService.prototype.GetTemplateDD = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        TemplateID: item.TemplateID,
                        TemplateName: item.TemplateName
                    });
                }
                return list;
            };
            //Plan Status DD
            AssignMaterialsService.prototype.FindPlanStatusDD = function () {
                var config = {
                    params: {}
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/PlanStatusSelectDD",
                    Config: config
                });
            };
            AssignMaterialsService.prototype.GetPlanStatusDD = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        Description: item.Description,
                        PlanStatusID: item.PlanStatusID
                    });
                }
                return list;
            };
            //Item List
            AssignMaterialsService.prototype.FindAssignItemList = function (data) {
                var config = {
                    params: {
                        DealerID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/AssignItemsList",
                    Config: config
                });
            };
            AssignMaterialsService.prototype.GetAssignItemList = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        Description: item.Description,
                        ItemID: item.ItemID,
                        UOMName: item.UOMName
                    });
                }
                return list;
            };
            //Get Month and Year
            AssignMaterialsService.prototype.FindMonthYearByTemplate = function (data) {
                var config = {
                    params: {
                        TemplateID: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/MYByTemplate",
                    Config: config
                });
            };
            AssignMaterialsService.prototype.GetMonthYearByTemplate = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_4 = data; _i < data_4.length; _i++) {
                    var item = data_4[_i];
                    list.push({
                        Month: item.Month,
                        TemplateID: item.TemplateID,
                        Year: item.Year
                    });
                }
                return list;
            };
            //Insert
            AssignMaterialsService.prototype.PostAssignMaterialData = function (data) {
                var url = this.url + "/" + "AssignMaterials";
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data
                });
            };
            AssignMaterialsService.$inject = ["$http", "$q", "$cookieStore"];
            return AssignMaterialsService;
        }(GCPL.Service.BaseService));
        Service.AssignMaterialsService = AssignMaterialsService;
        app.AddService("AssignMaterialsService", AssignMaterialsService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AssignMaterialsService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var VendorConfirmationGridModel = /** @class */ (function () {
            function VendorConfirmationGridModel() {
            }
            return VendorConfirmationGridModel;
        }());
        Model.VendorConfirmationGridModel = VendorConfirmationGridModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VendorConfirmationModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var VendorConfirmationController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function VendorConfirmationController(_AssignMaterialsService, _cookieStore, _VendorConfirmationService) {
                    this._AssignMaterialsService = _AssignMaterialsService;
                    this._cookieStore = _cookieStore;
                    this._VendorConfirmationService = _VendorConfirmationService;
                    this.TemplateDD = null;
                    this.PlanStatusDD = null;
                    this.VendorConfirmationList = null;
                    this.MonthYear = null;
                    this.DealerID = null;
                    this.DisplayMonth = null;
                    this.DisplayYear = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = "10";
                    this.postArray = [];
                    this.UserID = null;
                    this.alert = null;
                    this.TemplateID = null;
                    this.PlanStatusID = null;
                    this.Cookie = null;
                    this.AssignMaterialsService = _AssignMaterialsService;
                    this.Cookie = _cookieStore;
                    this.VendorConfirmationService = _VendorConfirmationService;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.VendorConfirmationList = new Array();
                }
                VendorConfirmationController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                VendorConfirmationController.prototype.Init = function () {
                    var _this = this;
                    //Template DropDown
                    this.AssignMaterialsService.FindTemplateDD(this.DealerID).then((function (response) {
                        _this.TemplateDD = _this.AssignMaterialsService.GetTemplateDD(response.data.Result);
                    }));
                    //Status Dropdown
                    this.AssignMaterialsService.FindPlanStatusDD().then((function (response) {
                        _this.PlanStatusDD = _this.AssignMaterialsService.GetPlanStatusDD(response.data.Result);
                    }));
                };
                //Month and Year By Template
                VendorConfirmationController.prototype.GetMYByTemplate = function () {
                    var _this = this;
                    this.AssignMaterialsService.FindMonthYearByTemplate(this.TemplateID).then((function (response) {
                        _this.MonthYear = _this.AssignMaterialsService.GetMonthYearByTemplate(response.data.Result);
                        _this.DisplayYear = _this.MonthYear[0].Year;
                        _this.DisplayMonth = _this.MonthYear[0].Month;
                    }));
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                //FillGrid
                VendorConfirmationController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.VendorConfirmationList = this.VendorConfirmationService.FindVendorConfirmationGrid(this.UserID, this.DealerID, this.TemplateID).then((function (response) {
                        _this.VendorConfirmationList = _this.VendorConfirmationService.GetVendorConfirmationGrid(response.data.Result);
                        _this.VendorConfirmationList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.VendorConfirmationList.slice(0, that.numRecords);
                    }));
                };
                VendorConfirmationController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.VendorConfirmationList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                VendorConfirmationController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.VendorConfirmationList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                VendorConfirmationController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                VendorConfirmationController.prototype.removeItem = function (item) {
                    var index = this.shownItems.indexOf(item);
                    this.shownItems.splice(index, 1);
                };
                //Insert
                VendorConfirmationController.prototype.Submit = function (item) {
                    var _this = this;
                    this.postArray = [];
                    for (var i = 0; i < item.length; i++) {
                        if (item[i].W1Qty_Vendor_Confirmed == 0 && item[i].W2Qty_Vendor_Confirmed == 0 && item[i].W3Qty_Vendor_Confirmed == 0 &&
                            item[i].W4Qty_Vendor_Confirmed == 0 && item[i].W5Qty_Vendor_Confirmed == 0) {
                        }
                        else {
                            item[i].DealerID = this.DealerID;
                            item[i].CreatedBy = this.UserID;
                            item[i].TemplateID = this.TemplateID;
                            item[i].PlanStatusID = this.PlanStatusID;
                            this.postArray.push(item[i]);
                        }
                    }
                    console.log(this.postArray);
                    this.VendorConfirmationService.PostVendorConfirmationDetails(this.postArray).then((function (response) {
                        if ((response.data.Result) === "Success") {
                            _this.alert = "Quantity has been saved Successfully";
                            $("#close").show();
                            $("#errorclose").hide();
                        }
                        else {
                            _this.alert = "Opps some error occured";
                            $("#close").show();
                            $("#errorclose").hide();
                        }
                    }));
                };
                VendorConfirmationController.prototype.ChangeQty = function (item) {
                    for (var i = 0; i < item.length; i++) {
                        if (item[i].W1Qty_Vendor_Confirmed == undefined) {
                            item[i].W1Qty_Vendor_Confirmed = 0;
                        }
                        ;
                        if (item[i].W2Qty_Vendor_Confirmed == undefined) {
                            item[i].W2Qty_Vendor_Confirmed = 0;
                        }
                        ;
                        if (item[i].W3Qty_Vendor_Confirmed == undefined) {
                            item[i].W3Qty_Vendor_Confirmed = 0;
                        }
                        ;
                        if (item[i].W4Qty_Vendor_Confirmed == undefined) {
                            item[i].W4Qty_Vendor_Confirmed = 0;
                        }
                        ;
                        if (item[i].W5Qty_Vendor_Confirmed == undefined) {
                            item[i].W5Qty_Vendor_Confirmed = 0;
                        }
                        ;
                        item[i].VCTotalQty = parseInt(item[i].W1Qty_Vendor_Confirmed) + parseInt(item[i].W2Qty_Vendor_Confirmed) + parseInt(item[i].W3Qty_Vendor_Confirmed)
                            + parseInt(item[i].W4Qty_Vendor_Confirmed) + parseInt(item[i].W5Qty_Vendor_Confirmed);
                    }
                };
                VendorConfirmationController.prototype.Close = function () {
                    location.reload();
                };
                VendorConfirmationController.$inject = ["AssignMaterialsService", "$cookieStore", "VendorConfirmationService"];
                return VendorConfirmationController;
            }());
            var VendorConfirmationComponentController = /** @class */ (function () {
                function VendorConfirmationComponentController() {
                    this.controller = VendorConfirmationController;
                    this.templateUrl = "/Scripts/App/VRPModule/VendorConfirmation/Template/_VendorConfirmation.html";
                }
                VendorConfirmationComponentController.Name = "vendorconfirmationcomponent";
                return VendorConfirmationComponentController;
            }());
            app.AddComponent(VendorConfirmationComponentController.Name, new VendorConfirmationComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=VendorConfirmationComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var VendorConfirmationController = /** @class */ (function (_super) {
            __extends(VendorConfirmationController, _super);
            function VendorConfirmationController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return VendorConfirmationController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.VendorConfirmationController = VendorConfirmationController;
        app.AddController("VendorConfirmationController", VendorConfirmationController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VendorConfirmationController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var VendorConfirmationService = /** @class */ (function (_super) {
            __extends(VendorConfirmationService, _super);
            function VendorConfirmationService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            //Get Month and Year
            VendorConfirmationService.prototype.FindVendorConfirmationGrid = function (UserID, DealerID, TemplateID) {
                var config = {
                    params: {
                        UserID: UserID,
                        DealerID: DealerID,
                        TemplateID: TemplateID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/VendorConfirmationGrid",
                    Config: config
                });
            };
            VendorConfirmationService.prototype.GetVendorConfirmationGrid = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        ItemID: item.ItemID,
                        ItemName: item.ItemName,
                        PAVTotalQty: item.PAVTotalQty,
                        PlanAllocationVendorID: item.PlanAllocationVendorID,
                        PlannedDataID: item.PlannedDataID,
                        TemplateID: item.TemplateID,
                        TotalQty: item.TotalQty,
                        VendorID: item.VendorID,
                        VendorName: item.VendorName,
                        W1Qty: item.W1Qty,
                        W1Qty_Vendor: item.W1Qty_Vendor,
                        W2Qty: item.W2Qty,
                        W2Qty_Vendor: item.W2Qty_Vendor,
                        W3Qty: item.W3Qty,
                        W3Qty_Vendor: item.W3Qty_Vendor,
                        W4Qty: item.W4Qty,
                        W4Qty_Vendor: item.W4Qty_Vendor,
                        W5Qty: item.W5Qty,
                        W5Qty_Vendor: item.W5Qty_Vendor,
                        UOMName: item.UOMName
                    });
                }
                return list;
            };
            //Insert
            VendorConfirmationService.prototype.PostVendorConfirmationDetails = function (data) {
                var url = this.url + "/" + "VendorConfirmQtyInsert";
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data
                });
            };
            VendorConfirmationService.$inject = ["$http", "$q", "$cookieStore"];
            return VendorConfirmationService;
        }(GCPL.Service.BaseService));
        Service.VendorConfirmationService = VendorConfirmationService;
        app.AddService("VendorConfirmationService", VendorConfirmationService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VendorConfirmationService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var FinalGridAllocation = /** @class */ (function () {
            function FinalGridAllocation() {
            }
            return FinalGridAllocation;
        }());
        Model.FinalGridAllocation = FinalGridAllocation;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=FinalizeplanModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var FinalizplanController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function FinalizplanController(_VItemAllocationQTY, _VItemService, _AssignMaterialsService, _Finalizplan, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.DealerID = null;
                    this.UserID = null;
                    this.TempateDDL = null;
                    this.StatusDDl = null;
                    this.TemplateID = null;
                    this.DisplayMonth = null;
                    this.DisplayYear = null;
                    this.MonthYear = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = "10";
                    this.postArray = [];
                    this.alert = null;
                    this.PlanStatusID = null;
                    this.Finalfillgrid = null;
                    this.Cookie = null;
                    this.AssignMaterialsService = _AssignMaterialsService;
                    this.VItemService = _VItemService;
                    this.VItemAllocationQTY = _VItemAllocationQTY;
                    this.Finalizplan = _Finalizplan;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.TempateDDL = new Array();
                    this.StatusDDl = new Array();
                    this.Finalfillgrid = new Array();
                }
                FinalizplanController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                FinalizplanController.prototype.Init = function () {
                    var _this = this;
                    //Template DropDown
                    this.VItemAllocationQTY.FindTemplate(this.DealerID).then((function (response) {
                        _this.TempateDDL = _this.VItemAllocationQTY.GetTemplateDDL(response.data.Result);
                    }));
                    //Status Dropdown
                    this.VItemAllocationQTY.FindStatus().then((function (response) {
                        _this.StatusDDl = _this.VItemAllocationQTY.GetStatusDDl(response.data.Result);
                    }));
                };
                FinalizplanController.prototype.GetMYByTemplate = function () {
                    var _this = this;
                    debugger;
                    this.AssignMaterialsService.FindMonthYearByTemplate(this.TemplateID).then((function (response) {
                        _this.MonthYear = _this.AssignMaterialsService.GetMonthYearByTemplate(response.data.Result);
                        _this.DisplayYear = _this.MonthYear[0].Year;
                        _this.DisplayMonth = _this.MonthYear[0].Month;
                    }));
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                FinalizplanController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.Finalizplan.FindVendorFinalItem(this.DealerID, this.TemplateID).then((function (response) {
                        _this.Finalfillgrid = _this.Finalizplan.GetVendorAlocateFinalGridList(response.data.Result);
                        _this.Finalfillgrid.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.Finalfillgrid.slice(0, that.numRecords);
                    }));
                };
                FinalizplanController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.Finalfillgrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                FinalizplanController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.Finalfillgrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                FinalizplanController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                FinalizplanController.prototype.removeItem = function (item) {
                    var index = this.shownItems.indexOf(item);
                    this.shownItems.splice(index, 1);
                };
                FinalizplanController.prototype.ChangeQty = function (item) {
                    for (var i = 0; i < item.length; i++) {
                        if (item[i].W1Qty_Final == undefined) {
                            item[i].W1Qty_Final = 0;
                        }
                        ;
                        if (item[i].W2Qty_Final == undefined) {
                            item[i].W2Qty_Final = 0;
                        }
                        ;
                        if (item[i].W3Qty_Final == undefined) {
                            item[i].W3Qty_Final = 0;
                        }
                        ;
                        if (item[i].W4Qty_Final == undefined) {
                            item[i].W4Qty_Final = 0;
                        }
                        ;
                        if (item[i].W5Qty_Final == undefined) {
                            item[i].W5Qty_Final = 0;
                        }
                        ;
                        item[i].VCTotalQty = parseInt(item[i].W1Qty_Final) + parseInt(item[i].W2Qty_Final) + parseInt(item[i].W3Qty_Final)
                            + parseInt(item[i].W4Qty_Final) + parseInt(item[i].W5Qty_Final);
                    }
                };
                FinalizplanController.prototype.Submit = function (item) {
                    var _this = this;
                    this.postArray = [];
                    for (var i = 0; i < item.length; i++) {
                        if (item[i].W1Qty_Final == 0 && item[i].W2Qty_Final == 0 && item[i].W3Qty_Final == 0 &&
                            item[i].W4Qty_Final == 0 && item[i].W5Qty_Final == 0) {
                        }
                        else {
                            item[i].DealerID = this.DealerID;
                            item[i].CreatedBy = this.UserID;
                            item[i].TemplateID = this.TemplateID;
                            item[i].PlanStatusID = this.PlanStatusID;
                            this.postArray.push(item[i]);
                        }
                    }
                    console.log(this.postArray);
                    debugger;
                    this.Finalizplan.PostFinalAllocationDetails(this.postArray).then((function (response) {
                        if ((response.data.Result) === "Success") {
                            _this.alert = "Quantity has been saved Successfully";
                            $("#close").show();
                            $("#errorclose").hide();
                        }
                        else {
                            _this.alert = "Opps some error occured";
                            $("#close").show();
                            $("#errorclose").hide();
                        }
                    }));
                };
                FinalizplanController.prototype.Close = function () {
                    location.reload();
                };
                FinalizplanController.$inject = ["VItemAllocationQTY", "VendorItemAllocation", "AssignMaterialsService", "Finalizplan", "$cookieStore"];
                return FinalizplanController;
            }());
            var FinalizplanComponentController = /** @class */ (function () {
                function FinalizplanComponentController() {
                    this.controller = FinalizplanController;
                    this.templateUrl = "/Scripts/App/VRPModule/FinalizePlan/Template/_Finalizeplan.html";
                }
                FinalizplanComponentController.Name = "finalizeplancomponent";
                return FinalizplanComponentController;
            }());
            app.AddComponent(FinalizplanComponentController.Name, new FinalizplanComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=FinalizeplanComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var FinalizplanController = /** @class */ (function (_super) {
            __extends(FinalizplanController, _super);
            function FinalizplanController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return FinalizplanController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.FinalizplanController = FinalizplanController;
        app.AddController("FinalizplanController", FinalizplanController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=FinalizeplanController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var Finalizplan = /** @class */ (function (_super) {
            __extends(Finalizplan, _super);
            function Finalizplan($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            //Insert
            Finalizplan.prototype.PostFinalAllocationDetails = function (data) {
                var url = this.url + "/" + "FinalPlanInsert";
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data
                });
            };
            Finalizplan.prototype.FindVendorFinalItem = function (DealerID, TemplateID) {
                debugger;
                var url = this.apiUrl + "/FinalPlanPageGrid";
                var config = {
                    params: {
                        DealerID: DealerID,
                        TemplateID: TemplateID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            Finalizplan.prototype.GetVendorAlocateFinalGridList = function (data) {
                var list = Array();
                console.log(data);
                debugger;
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        TemplateID: item.TemplateID,
                        ItemID: item.ItemID,
                        ItemNo: item.ItemNo,
                        ItemName: item.ItemName,
                        VendorID: item.VendorID,
                        VendorName: item.VendorName,
                        W1Qty: item.W1Qty,
                        W2Qty: item.W2Qty,
                        W3Qty: item.W3Qty,
                        W4Qty: item.W4Qty,
                        W5Qty: item.W5Qty,
                        TotalQty: item.TotalQty,
                        PlanAllocationVendorID: item.PlanAllocationVendorID,
                        W1Qty_Vendor: item.W1Qty_Vendor,
                        W2Qty_Vendor: item.W2Qty_Vendor,
                        W3Qty_Vendor: item.W3Qty_Vendor,
                        W4Qty_Vendor: item.W4Qty_Vendor,
                        W5Qty_Vendor: item.W5Qty_Vendor,
                        PavTotalQty: item.PavTotalQty,
                        VendorConfirmationID: item.VendorConfirmationID,
                        W1Qty_Vendor_Confirmed: item.W1Qty_Vendor_Confirmed,
                        W2Qty_Vendor_Confirmed: item.W2Qty_Vendor_Confirmed,
                        W3Qty_Vendor_Confirmed: item.W3Qty_Vendor_Confirmed,
                        W4Qty_Vendor_Confirmed: item.W4Qty_Vendor_Confirmed,
                        W5Qty_Vendor_Confirmed: item.W5Qty_Vendor_Confirmed,
                        VCQTotalQty: item.VCQTotalQty
                    });
                }
                return list;
            };
            Finalizplan.$inject = ["$http", "$q", "$cookieStore"];
            return Finalizplan;
        }(GCPL.Service.BaseService));
        Service.Finalizplan = Finalizplan;
        app.AddService("Finalizplan", Finalizplan);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=FinalizeplanService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var UploadVRPExcelModel = /** @class */ (function () {
            function UploadVRPExcelModel() {
            }
            return UploadVRPExcelModel;
        }());
        Model.UploadVRPExcelModel = UploadVRPExcelModel;
        var ExcelListModel = /** @class */ (function () {
            function ExcelListModel() {
            }
            return ExcelListModel;
        }());
        Model.ExcelListModel = ExcelListModel;
        var ExcelModifyModel = /** @class */ (function () {
            function ExcelModifyModel() {
            }
            return ExcelModifyModel;
        }());
        Model.ExcelModifyModel = ExcelModifyModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=UploadVRPExcelModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var UploadVRPExcelController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function UploadVRPExcelController(_serviceUploadImage, _AssignMaterialsService, _cookieStore) {
                    this._AssignMaterialsService = _AssignMaterialsService;
                    this._cookieStore = _cookieStore;
                    this.file = null;
                    this.TemplateDD = null;
                    this.Cookie = null;
                    this.UserID = null;
                    this.DealerID = null;
                    this.ExcelDataList = null;
                    this.PlanStatusDD = null;
                    this.showLoader = false;
                    this.showListLoader = false;
                    this.showListDiv = false;
                    this.numRecords = 10;
                    //numRecords: string = "10";
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    //NoOfRds: number = 10;
                    this.NoOfRds = "10";
                    this.ExcelModifyData = null;
                    this.ExcelModifyArray = null;
                    this.alert = null;
                    this.service = _serviceUploadImage;
                    this.UploadVRPExcelModel = new GCPL.Model.UploadVRPExcelModel();
                    this.AssignMaterialsService = _AssignMaterialsService;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.ExcelDataList = new Array();
                    this.ExcelModifyData = new GCPL.Model.ExcelModifyModel();
                    this.ExcelModifyArray = new Array();
                }
                UploadVRPExcelController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                UploadVRPExcelController.prototype.Init = function () {
                    var _this = this;
                    this.AssignMaterialsService.FindTemplateDD(this.DealerID).then((function (response) {
                        _this.TemplateDD = _this.AssignMaterialsService.GetTemplateDD(response.data.Result);
                    }));
                    this.AssignMaterialsService.FindPlanStatusDD().then((function (response) {
                        _this.PlanStatusDD = _this.AssignMaterialsService.GetPlanStatusDD(response.data.Result);
                    }));
                };
                UploadVRPExcelController.prototype.Submit = function () {
                    var _this = this;
                    this.showLoader = true;
                    this.UploadVRPExcelModel.CreatedBy = this.UserID;
                    this.UploadVRPExcelModel.DealerID = this.DealerID;
                    var formData = new FormData(), xhr = new XMLHttpRequest();
                    this.file = document.getElementById("inputGroupFile03").files[0];
                    console.log(this.file);
                    console.log($("#inputGroupFile03").val());
                    if (this.file != null) {
                        //var size = (<HTMLInputElement>document.getElementById("inputGroupFile03")).files[0].size;
                        formData.append("fileData", this.file);
                        this.service.UploadImage(formData).then(function (response) {
                            _this.UploadVRPExcelModel.FileName = response.data.Result;
                            console.log(_this.UploadVRPExcelModel);
                            _this.service.postVRPExcelData(_this.UploadVRPExcelModel).then(function (response) {
                                console.log(response.data.result);
                                if (response.data.Result == "1") {
                                    _this.showTemplateList();
                                    _this.UploadVRPExcelModel = null;
                                    _this.alert = "";
                                    _this.alert = "Data Saved Successfully";
                                    document.getElementById("inputGroupFile03").value = null;
                                    $("#close").show();
                                    $("#errorclose").hide();
                                    _this.showLoader = false;
                                }
                                else {
                                    _this.alert = "";
                                    _this.alert = "Opps some error occured";
                                    $("#close").hide();
                                    $("#errorclose").show();
                                    _this.showLoader = false;
                                }
                            }, function (error) {
                                _this.alert = "";
                                _this.alert = "Opps some error occured";
                                $("#close").hide();
                                $("#errorclose").show();
                                _this.showLoader = false;
                            });
                        });
                    }
                };
                UploadVRPExcelController.prototype.Close = function () {
                    this.showLoader = false;
                };
                UploadVRPExcelController.prototype.ErrorClose = function () {
                    this.showLoader = false;
                };
                //List
                UploadVRPExcelController.prototype.showTemplateList = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                //FillGrid Methods
                UploadVRPExcelController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    this.showListLoader = true;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.ExcelDataList = this.service.FindExcelList(this.UploadVRPExcelModel.TemplateName, this.DealerID).then((function (response) {
                        _this.showListLoader = false;
                        _this.ExcelDataList = _this.service.GetExcelList(response.data.Result);
                        if (_this.ExcelDataList.length > 0) {
                            _this.showListDiv = true;
                            $("#nullDataDiv").hide();
                        }
                        else {
                            $("#nullDataDiv").show();
                            _this.showListDiv = false;
                        }
                        _this.ExcelDataList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.ExcelDataList.slice(0, that.numRecords);
                    }), (function (error) {
                        $("#nullDataDiv").show();
                        _this.showListLoader = false;
                        _this.showListDiv = false;
                        console.log(error);
                    }));
                };
                UploadVRPExcelController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ExcelDataList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                UploadVRPExcelController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ExcelDataList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                UploadVRPExcelController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                UploadVRPExcelController.prototype.modifyData = function (item) {
                    var _this = this;
                    console.log("Helloooooo");
                    this.ExcelModifyArray = item;
                    this.showListLoader = true;
                    this.service.PostModifyExcelData(this.ExcelModifyArray).then(function (Response) {
                        if (parseInt(Response.data.Result) > 0) {
                            _this.alert = "";
                            _this.alert = "Data Modified Successfully";
                            _this.showTemplateList();
                            $("#close").show();
                            $("#errorclose").hide();
                            _this.showListLoader = false;
                        }
                        else {
                            _this.alert = "";
                            _this.alert = "Oops some Error occured";
                            $("#close").hide();
                            $("#errorclose").show();
                            _this.showListLoader = false;
                        }
                    }, function (error) {
                        console.log(error);
                    });
                };
                UploadVRPExcelController.$inject = ["UploadVRPExcelService", "AssignMaterialsService", "$cookieStore"];
                return UploadVRPExcelController;
            }());
            var UploadVRPExcelComponentController = /** @class */ (function () {
                function UploadVRPExcelComponentController() {
                    this.controller = UploadVRPExcelController;
                    this.templateUrl = "/Scripts/App/VRPModule/UploadExcel/Template/_UploadVRPExcel.html";
                }
                UploadVRPExcelComponentController.Name = "uploadvrpexcel";
                return UploadVRPExcelComponentController;
            }());
            app.AddComponent(UploadVRPExcelComponentController.Name, new UploadVRPExcelComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=UploadVRPExcelComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var UploadVRPExcelController = /** @class */ (function (_super) {
            __extends(UploadVRPExcelController, _super);
            function UploadVRPExcelController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return UploadVRPExcelController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.UploadVRPExcelController = UploadVRPExcelController;
        app.AddController("UploadVRPExcelController", UploadVRPExcelController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=UploadVRPExcelController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var UploadVRPExcelService = /** @class */ (function (_super) {
            __extends(UploadVRPExcelService, _super);
            function UploadVRPExcelService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                return _this;
                //this.apiUrl = `${this.url}/${"APIPutProductReview"}`;
            }
            UploadVRPExcelService.prototype.UploadImage = function (data) {
                var config = {
                    transformRequest: angular.identity,
                    headers: { 'Content-Type': undefined }
                };
                var url = this.url + "/" + "ProductUpload";
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data,
                    Config: config
                });
            };
            UploadVRPExcelService.prototype.postVRPExcelData = function (data) {
                var url = this.url + "/" + "UploadVRPExcel";
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data
                });
            };
            //Get Uploaded Excel List
            UploadVRPExcelService.prototype.FindExcelList = function (TemplateID, DealerID) {
                var config = {
                    params: {
                        TemplateID: TemplateID,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.url + "/" + "VRPUploadList",
                    Config: config
                });
            };
            UploadVRPExcelService.prototype.GetExcelList = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        ID: item.ID,
                        ItemName: item.ItemName,
                        PlannedDataID: item.PlannedDataID,
                        TotalQty: item.TotalQty,
                        VendorName: item.VendorName,
                        W1Qty: item.W1Qty,
                        W2Qty: item.W1Qty,
                        W3Qty: item.W3Qty,
                        W4Qty: item.W4Qty,
                        W5Qty: item.W5Qty,
                    });
                }
                return list;
            };
            //Modify Excel Data Post
            UploadVRPExcelService.prototype.PostModifyExcelData = function (data) {
                var url = this.url + "/" + "ModifyVRPExcel";
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data
                });
            };
            UploadVRPExcelService.$inject = ["$http", "$q"];
            return UploadVRPExcelService;
        }(GCPL.Service.BaseService));
        Service.UploadVRPExcelService = UploadVRPExcelService;
        //inject service
        app.AddService("UploadVRPExcelService", UploadVRPExcelService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=UploadVRPExcel.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var UploadVRPPOExcelModel = /** @class */ (function () {
            function UploadVRPPOExcelModel() {
            }
            return UploadVRPPOExcelModel;
        }());
        Model.UploadVRPPOExcelModel = UploadVRPPOExcelModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=UploadVRPPOExcelModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var UploadVRPPOExcelController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function UploadVRPPOExcelController(_serviceUploadImage, _AssignMaterialsService, _cookieStore) {
                    this._AssignMaterialsService = _AssignMaterialsService;
                    this._cookieStore = _cookieStore;
                    this.file = null;
                    this.TemplateDD = null;
                    this.Cookie = null;
                    this.UserID = null;
                    this.DealerID = null;
                    this.PlanStatusDD = null;
                    this.alert = null;
                    this.service = _serviceUploadImage;
                    this.UploadVRPExcelModel = new GCPL.Model.UploadVRPPOExcelModel();
                    this.AssignMaterialsService = _AssignMaterialsService;
                    this.Cookie = _cookieStore;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                }
                UploadVRPPOExcelController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                UploadVRPPOExcelController.prototype.Init = function () {
                    var _this = this;
                    this.AssignMaterialsService.FindTemplateDD(this.DealerID).then((function (response) {
                        _this.TemplateDD = _this.AssignMaterialsService.GetTemplateDD(response.data.Result);
                    }));
                    this.AssignMaterialsService.FindPlanStatusDD().then((function (response) {
                        _this.PlanStatusDD = _this.AssignMaterialsService.GetPlanStatusDD(response.data.Result);
                    }));
                };
                UploadVRPPOExcelController.prototype.Submit = function () {
                    var _this = this;
                    debugger;
                    this.UploadVRPExcelModel.CreatedBy = this.UserID;
                    this.UploadVRPExcelModel.DealerID = this.DealerID;
                    var formData = new FormData(), xhr = new XMLHttpRequest();
                    this.file = document.getElementById("inputGroupFile03").files[0];
                    if (this.file != null) {
                        //var size = (<HTMLInputElement>document.getElementById("inputGroupFile03")).files[0].size;
                        formData.append("fileData", this.file);
                        this.service.UploadImage(formData).then(function (response) {
                            _this.UploadVRPExcelModel.FileName = response.data.Result;
                            console.log(_this.UploadVRPExcelModel);
                            _this.service.postVRPPOExcelData(_this.UploadVRPExcelModel).then(function (response) {
                                if (response.data.Result == "1") {
                                    _this.UploadVRPExcelModel = null;
                                    _this.alert = "Data Saved Successfully";
                                    document.getElementById("inputGroupFile03").value = null;
                                    $("#close").show();
                                    $("#errorclose").hide();
                                }
                                else {
                                    _this.alert = "Opps some error occured";
                                    $("#close").show();
                                    $("#errorclose").hide();
                                }
                            });
                        });
                    }
                };
                UploadVRPPOExcelController.$inject = ["UploadVRPPOExcelService", "AssignMaterialsService", "$cookieStore"];
                return UploadVRPPOExcelController;
            }());
            var UploadVRPPOExcelComponentController = /** @class */ (function () {
                function UploadVRPPOExcelComponentController() {
                    this.controller = UploadVRPPOExcelController;
                    this.templateUrl = "/Scripts/App/VRPModule/VRPUploadPO/Template/_UploadVRPPOExcel.html";
                }
                UploadVRPPOExcelComponentController.Name = "uploadvrppoexcel";
                return UploadVRPPOExcelComponentController;
            }());
            app.AddComponent(UploadVRPPOExcelComponentController.Name, new UploadVRPPOExcelComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=UploadVRPPOExcelComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var UploadVRPPOExcelController = /** @class */ (function (_super) {
            __extends(UploadVRPPOExcelController, _super);
            function UploadVRPPOExcelController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return UploadVRPPOExcelController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.UploadVRPPOExcelController = UploadVRPPOExcelController;
        app.AddController("UploadVRPPOExcelController", UploadVRPPOExcelController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=UploadVRPPOExcelController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var UploadVRPPOExcelService = /** @class */ (function (_super) {
            __extends(UploadVRPPOExcelService, _super);
            function UploadVRPPOExcelService($http, $q) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this.apiUrl = "";
                return _this;
                //this.apiUrl = `${this.url}/${"APIPutProductReview"}`;
            }
            UploadVRPPOExcelService.prototype.UploadImage = function (data) {
                var config = {
                    transformRequest: angular.identity,
                    headers: { 'Content-Type': undefined }
                };
                var url = this.url + "/" + "ProductUpload";
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data,
                    Config: config
                });
            };
            UploadVRPPOExcelService.prototype.postVRPPOExcelData = function (data) {
                var url = this.url + "/" + "UploadVRPPOExcel";
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data
                });
            };
            UploadVRPPOExcelService.$inject = ["$http", "$q"];
            return UploadVRPPOExcelService;
        }(GCPL.Service.BaseService));
        Service.UploadVRPPOExcelService = UploadVRPPOExcelService;
        //inject service
        app.AddService("UploadVRPPOExcelService", UploadVRPPOExcelService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=UploadVRPPOExcel.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var QAPlannerGridModel = /** @class */ (function () {
            function QAPlannerGridModel() {
            }
            return QAPlannerGridModel;
        }());
        Model.QAPlannerGridModel = QAPlannerGridModel;
        var QAPlannerInsertModel = /** @class */ (function () {
            function QAPlannerInsertModel() {
            }
            return QAPlannerInsertModel;
        }());
        Model.QAPlannerInsertModel = QAPlannerInsertModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VendorQAModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var VendorQAController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function VendorQAController(_AssignMaterialsService, _cookieStore, _QAPlannerService, _serviceUploadImage) {
                    this._AssignMaterialsService = _AssignMaterialsService;
                    this._cookieStore = _cookieStore;
                    this._QAPlannerService = _QAPlannerService;
                    this.QAPlannerGrid = null;
                    this.QAPlannerInsert = null;
                    this.TemplateDD = null;
                    this.TemplateID = null;
                    this.PlanStatusID = null;
                    this.MonthYear = null;
                    this.DealerID = null;
                    this.PlanStatusDD = null;
                    this.DisplayMonth = null;
                    this.DisplayYear = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = "10";
                    this.UserID = null;
                    this.alert = null;
                    this.file = null;
                    this.Cookie = null;
                    this.AssignMaterialsService = _AssignMaterialsService;
                    this.Cookie = _cookieStore;
                    this.QAPlannerService = _QAPlannerService;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.QAPlannerGrid = new Array();
                    this.QAPlannerInsert = new Array();
                    this.service = _serviceUploadImage;
                }
                VendorQAController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                VendorQAController.prototype.Init = function () {
                    var _this = this;
                    //Template DropDown
                    this.AssignMaterialsService.FindTemplateDD(this.DealerID).then((function (response) {
                        _this.TemplateDD = _this.AssignMaterialsService.GetTemplateDD(response.data.Result);
                    }));
                    //Status Dropdown
                    this.AssignMaterialsService.FindPlanStatusDD().then((function (response) {
                        _this.PlanStatusDD = _this.AssignMaterialsService.GetPlanStatusDD(response.data.Result);
                    }));
                };
                //Month and Year By Template
                VendorQAController.prototype.GetMYByTemplate = function () {
                    var _this = this;
                    this.AssignMaterialsService.FindMonthYearByTemplate(this.TemplateID).then((function (response) {
                        _this.MonthYear = _this.AssignMaterialsService.GetMonthYearByTemplate(response.data.Result);
                        _this.DisplayYear = _this.MonthYear[0].Year;
                        _this.DisplayMonth = _this.MonthYear[0].Month;
                    }));
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                //FillGrid
                VendorQAController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.QAPlannerGrid = this.QAPlannerService.FindQAPlannerGrid(this.TemplateID, this.DealerID).then((function (response) {
                        _this.QAPlannerGrid = _this.QAPlannerService.GetQAPlannerGrid(response.data.Result);
                        console.log(_this.QAPlannerGrid);
                        _this.QAPlannerGrid.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.QAPlannerGrid.slice(0, that.numRecords);
                    }));
                };
                VendorQAController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.QAPlannerGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                VendorQAController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.QAPlannerGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                VendorQAController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                VendorQAController.prototype.Submit = function (shownItems) {
                    var _this = this;
                    console.log(this.QAPlannerGrid);
                    this.QAPlannerInsert = shownItems;
                    for (var i = 0; i < this.QAPlannerInsert.length; i++) {
                        this.QAPlannerInsert[i].PlanStatusID = this.PlanStatusID;
                        this.QAPlannerInsert[i].CreatedBy = this.UserID;
                        this.QAPlannerInsert[i].DealerID = this.DealerID;
                        this.QAPlannerInsert[i].StatementType = "Insert";
                    }
                    this.QAPlannerService.PostAssignMaterialData(this.QAPlannerInsert).then((function (response) {
                        if ((response.data.Result) === "Success") {
                            _this.alert = "Changes saved successfully!";
                            $("#close").show();
                            $("#errorclose").hide();
                        }
                        else {
                            _this.alert = "Oops some error occured";
                            $("#close").hide();
                            $("#errorclose").show();
                        }
                    }));
                };
                VendorQAController.prototype.Close = function () {
                    location.reload();
                };
                VendorQAController.prototype.UploadFile = function (item, weekNo) {
                    var _this = this;
                    console.log(weekNo);
                    console.log(item);
                    var controlName = "";
                    var filevar = "";
                    if (weekNo === 'week1') {
                        controlName = item.POLineItemNo + 'F1';
                    }
                    else if (weekNo === 'week2') {
                        controlName = item.POLineItemNo + 'F2';
                    }
                    else if (weekNo === 'week3') {
                        controlName = item.POLineItemNo + 'F3';
                    }
                    else if (weekNo === 'week4') {
                        controlName = item.POLineItemNo + 'F4';
                    }
                    else if (weekNo === 'week5') {
                        controlName = item.POLineItemNo + 'F5';
                    }
                    var formData = new FormData(), xhr = new XMLHttpRequest();
                    this.file = document.getElementById(controlName).files[0];
                    if (this.file != null) {
                        //var size = (<HTMLInputElement>document.getElementById("inputGroupFile03")).files[0].size;
                        formData.append("VendorQA", this.file);
                        this.service.UploadImage(formData).then(function (response) {
                            if (weekNo === 'week1') {
                                item.QACertificate1_FileName = response.data.Result;
                                if ((response.data.Result) != null) {
                                    _this.alert = "File Uploaded!";
                                    $("#close").hide();
                                    $("#errorclose").show();
                                }
                            }
                            else if (weekNo === 'week2') {
                                item.QACertificate2_FileName = response.data.Result;
                                if ((response.data.Result) != null) {
                                    _this.alert = "File Uploaded!";
                                    $("#close").hide();
                                    $("#errorclose").show();
                                }
                            }
                            else if (weekNo === 'week3') {
                                item.QACertificate3_FileName = response.data.Result;
                                if ((response.data.Result) != null) {
                                    _this.alert = "File Uploaded!";
                                    $("#close").hide();
                                    $("#errorclose").show();
                                }
                            }
                            else if (weekNo === 'week4') {
                                item.QACertificate4_FileName = response.data.Result;
                                if ((response.data.Result) != null) {
                                    _this.alert = "File Uploaded!";
                                    $("#close").hide();
                                    $("#errorclose").show();
                                }
                            }
                            else if (weekNo === 'week5') {
                                item.QACertificate5_FileName = response.data.Result;
                                if ((response.data.Result) != null) {
                                    _this.alert = "File Uploaded!";
                                    $("#close").hide();
                                    $("#errorclose").show();
                                }
                            }
                        });
                    }
                };
                VendorQAController.$inject = ["AssignMaterialsService", "$cookieStore", "QAPlannerService", "UploadVRPExcelService"];
                return VendorQAController;
            }());
            var VendorQAComponentController = /** @class */ (function () {
                function VendorQAComponentController() {
                    this.controller = VendorQAController;
                    this.templateUrl = "/Scripts/App/VRPModule/VendorQA/Template/VendorQA.html";
                }
                VendorQAComponentController.Name = "vendorqa";
                return VendorQAComponentController;
            }());
            app.AddComponent(VendorQAComponentController.Name, new VendorQAComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=VendorQAComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var VendorQAController = /** @class */ (function (_super) {
            __extends(VendorQAController, _super);
            function VendorQAController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return VendorQAController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.VendorQAController = VendorQAController;
        app.AddController("VendorQAController", VendorQAController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VendorQAController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var QAPlannerService = /** @class */ (function (_super) {
            __extends(QAPlannerService, _super);
            function QAPlannerService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            //QAPlanner Grid
            QAPlannerService.prototype.FindQAPlannerGrid = function (TemplateID, DealerID) {
                var config = {
                    params: {
                        TemplateID: TemplateID,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: this.apiUrl + "/VendorQAGrid",
                    Config: config
                });
            };
            QAPlannerService.prototype.GetQAPlannerGrid = function (data) {
                var list = Array();
                console.log(data);
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        PONumber: item.PONumber,
                        POLineItemNo: item.POLineItemNo,
                        POtotalQTY: item.POtotalQTY,
                        VendorID: item.VendorID,
                        TemplateID: item.TemplateID,
                        Year: item.Year,
                        Month: item.Month,
                        ItemID: item.ItemID,
                        ItemName: item.ItemName,
                        W1: item.W1,
                        W2: item.W2,
                        W3: item.W3,
                        w4: item.W4,
                        W5: item.W5,
                        TotalQty: item.TotalQty,
                        VendorConfirmQtyID: item.VendorConfirmQtyID,
                        UOMName: item.UOMName,
                        QAPlannerID: item.QAPlannerID,
                        File1Name: item.File1Name,
                        Approval1Date: item.Approval1Date,
                        Ship1Date: item.Ship1Date,
                        Ship1No: item.Ship1No,
                        Vendor1Comments: item.Vendor1Comments,
                        File2Name: item.File2Name,
                        Approval2Date: item.Approval2Date,
                        Ship2Date: item.Ship2Date,
                        Ship2No: item.Ship2No,
                        Vendor2Comments: item.Vendor2Comments,
                        File3Name: item.File3Name,
                        Approval3Date: item.Approval3Date,
                        Ship3Date: item.Ship3Date,
                        Ship3No: item.Ship3No,
                        Vendor3Comments: item.Vendor3Comments,
                        File4Name: item.File4Name,
                        Approval4Date: item.Approval4Date,
                        Ship4Date: item.Ship4Date,
                        Ship4No: item.Ship4No,
                        Vendor4Comments: item.Vendor4Comments,
                        File5Name: item.File5Name,
                        Approval5Date: item.Approval5Date,
                        Ship5Date: item.Ship5Date,
                        Ship5No: item.Ship5No,
                        Vendor5Comments: item.Vendor5Comments,
                        FinalPlanID: item.FinalPlanID,
                        PlanAllocationVendorID: item.PlanAllocationVendorID,
                        FileName1URL: item.FileName1URL,
                        FileName2URL: item.FileName2URL,
                        FileName3URL: item.FileName3URL,
                        FileName4URL: item.FileName4URL,
                        FileName5URL: item.FileName5URL,
                        QAApproval1Status: item.QAApproval1Status,
                        QAApproval2Status: item.QAApproval2Status,
                        QAApproval3Status: item.QAApproval3Status,
                        QAApproval4Status: item.QAApproval4Status,
                        QAApproval5Status: item.QAApproval5Status
                    });
                }
                return list;
            };
            //QAPlanner Insert
            QAPlannerService.prototype.PostAssignMaterialData = function (data) {
                var url = this.url + "/" + "QAPlannerInsert";
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data
                });
            };
            QAPlannerService.$inject = ["$http", "$q", "$cookieStore"];
            return QAPlannerService;
        }(GCPL.Service.BaseService));
        Service.QAPlannerService = QAPlannerService;
        app.AddService("QAPlannerService", QAPlannerService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=VendorQAService.js.map
//# sourceMappingURL=QAApprovalModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var QAApprovalController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function QAApprovalController(_VItemAllocationQTY, _QAPlannerService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.W1QADate = null;
                    this.W2QADate = null;
                    this.W3QADate = null;
                    this.W4QADate = null;
                    this.W5QADate = null;
                    this.DealerID = null;
                    this.UserID = null;
                    this.TempateDDL = null;
                    this.StatusDDl = null;
                    this.displayDate = null;
                    this.TemplateID = null;
                    this.PlanStatusID = null;
                    this.QAPlannerGridModel = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = "10";
                    this.postArray = [];
                    this.alert = null;
                    this.QAInsert = null;
                    this.Cookie = null;
                    this.pdfURL = null;
                    this.VItemAllocationQTY = _VItemAllocationQTY;
                    this.Cookie = _cookieStore;
                    this.QAPlannerService = _QAPlannerService;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.TempateDDL = new Array();
                    this.StatusDDl = new Array();
                    this.QAPlannerGridModel = new Array();
                    this.QAInsert = new Array();
                }
                QAApprovalController.prototype.$onInit = function () {
                    this.Init();
                    var that = this;
                };
                //Page Load Define Values//
                QAApprovalController.prototype.Init = function () {
                    var _this = this;
                    //Template DropDown
                    this.VItemAllocationQTY.FindTemplate(this.DealerID).then((function (response) {
                        _this.TempateDDL = _this.VItemAllocationQTY.GetTemplateDDL(response.data.Result);
                    }));
                    //Status Dropdown
                    this.VItemAllocationQTY.FindStatus().then((function (response) {
                        _this.StatusDDl = _this.VItemAllocationQTY.GetStatusDDl(response.data.Result);
                    }));
                    var now = new Date();
                    var day = ("0" + now.getDate()).slice(-2);
                    var month = ("0" + (now.getMonth() + 1)).slice(-2);
                    var today = now.getFullYear() + "-" + (month) + "-" + (day);
                    this.displayDate = today;
                };
                QAApprovalController.prototype.GetMYByTemplate = function () {
                    debugger;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                QAApprovalController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.QAPlannerService.FindQAPlannerGrid(this.TemplateID, this.DealerID).then((function (response) {
                        _this.QAPlannerGridModel = _this.QAPlannerService.GetQAPlannerGrid(response.data.Result);
                        console.log(_this.QAPlannerGridModel);
                        _this.QAPlannerGridModel.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.QAPlannerGridModel.slice(0, that.numRecords);
                    }));
                };
                QAApprovalController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.QAPlannerGridModel.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                QAApprovalController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.QAPlannerGridModel.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                QAApprovalController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                //Post
                QAApprovalController.prototype.Submit = function (item) {
                    var _this = this;
                    this.QAInsert = item;
                    for (var i = 0; i < this.QAInsert.length; i++) {
                        this.QAInsert[i].StatementType = "UpdateQA";
                    }
                    this.QAPlannerService.PostAssignMaterialData(this.QAInsert).then((function (response) {
                        if ((response.data.Result) === "Success") {
                            _this.alert = "Success. QA status Updated!";
                            $("#close").show();
                            $("#errorclose").hide();
                        }
                        else {
                            _this.alert = "Opps Error";
                            $("#close").hide();
                            $("#errorclose").show();
                        }
                    }));
                };
                //removeItem(item) {
                //    var index = this.shownItems.indexOf(item);
                //    this.shownItems.splice(index, 1);
                //}
                QAApprovalController.prototype.Close = function () {
                    location.reload();
                };
                QAApprovalController.$inject = ["VItemAllocationQTY", "QAPlannerService", "$cookieStore"];
                return QAApprovalController;
            }());
            var QAApprovalComponentController = /** @class */ (function () {
                function QAApprovalComponentController() {
                    this.controller = QAApprovalController;
                    this.templateUrl = "/Scripts/App/VRPModule/QAApproval/Template/QAApproval.html";
                }
                QAApprovalComponentController.Name = "qaapproval";
                return QAApprovalComponentController;
            }());
            app.AddComponent(QAApprovalComponentController.Name, new QAApprovalComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=QAApprovalComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var QAApprovalController = /** @class */ (function (_super) {
            __extends(QAApprovalController, _super);
            function QAApprovalController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return QAApprovalController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.QAApprovalController = QAApprovalController;
        app.AddController("QAApprovalController", QAApprovalController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=QAApprovalController.js.map
//# sourceMappingURL=QAApprovalService.js.map
//# sourceMappingURL=ShipmentModel.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ShipmentController = /** @class */ (function (_super) {
            __extends(ShipmentController, _super);
            function ShipmentController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ShipmentController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ShipmentController = ShipmentController;
        app.AddController("ShipmentController", ShipmentController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ShipmentController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ShipmentController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ShipmentController(_VItemAllocationQTY, _QAPlannerService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.DealerID = null;
                    this.UserID = null;
                    this.TempateDDL = null;
                    this.StatusDDl = null;
                    this.displayDate = null;
                    this.TemplateID = null;
                    this.PlanStatusID = null;
                    this.QAPlannerGridModel = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = "10";
                    this.postArray = [];
                    this.ShippmentInsert = null;
                    this.alert = null;
                    this.Cookie = null;
                    this.VItemAllocationQTY = _VItemAllocationQTY;
                    this.Cookie = _cookieStore;
                    this.QAPlannerService = _QAPlannerService;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.TempateDDL = new Array();
                    this.StatusDDl = new Array();
                    this.QAPlannerGridModel = new Array();
                    this.ShippmentInsert = new Array();
                }
                ShipmentController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ShipmentController.prototype.Init = function () {
                    var _this = this;
                    //Template DropDown
                    this.VItemAllocationQTY.FindTemplate(this.DealerID).then((function (response) {
                        _this.TempateDDL = _this.VItemAllocationQTY.GetTemplateDDL(response.data.Result);
                    }));
                    //Status Dropdown
                    this.VItemAllocationQTY.FindStatus().then((function (response) {
                        _this.StatusDDl = _this.VItemAllocationQTY.GetStatusDDl(response.data.Result);
                    }));
                    var now = new Date();
                    var day = ("0" + now.getDate()).slice(-2);
                    var month = ("0" + (now.getMonth() + 1)).slice(-2);
                    var today = now.getFullYear() + "-" + (month) + "-" + (day);
                    this.displayDate = today;
                };
                ShipmentController.prototype.GetMYByTemplate = function () {
                    debugger;
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                ShipmentController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.QAPlannerService.FindQAPlannerGrid(this.TemplateID, this.DealerID).then((function (response) {
                        _this.QAPlannerGridModel = _this.QAPlannerService.GetQAPlannerGrid(response.data.Result);
                        console.log(_this.QAPlannerGridModel);
                        _this.QAPlannerGridModel.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.QAPlannerGridModel.slice(0, that.numRecords);
                    }));
                };
                ShipmentController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.QAPlannerGridModel.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                ShipmentController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.QAPlannerGridModel.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                ShipmentController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                ShipmentController.prototype.Submit = function (item) {
                    var _this = this;
                    debugger;
                    this.ShippmentInsert = item;
                    for (var i = 0; i < this.ShippmentInsert.length; i++) {
                        this.ShippmentInsert[i].Vendor_Ship1No = this.ShippmentInsert[i].Ship1No;
                        this.ShippmentInsert[i].Vendor_Ship2No = this.ShippmentInsert[i].Ship2No;
                        this.ShippmentInsert[i].Vendor_Ship3No = this.ShippmentInsert[i].Ship3No;
                        this.ShippmentInsert[i].Vendor_Ship4No = this.ShippmentInsert[i].Ship4No;
                        this.ShippmentInsert[i].Vendor_Ship5No = this.ShippmentInsert[i].Ship5No;
                        this.ShippmentInsert[i].Vendor1_Comments = this.ShippmentInsert[i].Vendor1Comments;
                        this.ShippmentInsert[i].Vendor2_Comments = this.ShippmentInsert[i].Vendor2Comments;
                        this.ShippmentInsert[i].Vendor3_Comments = this.ShippmentInsert[i].Vendor3Comments;
                        this.ShippmentInsert[i].Vendor4_Comments = this.ShippmentInsert[i].Vendor4Comments;
                        this.ShippmentInsert[i].Vendor5_Comments = this.ShippmentInsert[i].Vendor5Comments;
                        this.ShippmentInsert[i].StatementType = "UpdateShipping";
                    }
                    console.log(this.ShippmentInsert);
                    this.QAPlannerService.PostAssignMaterialData(this.ShippmentInsert).then((function (response) {
                        if ((response.data.Result) === "Success") {
                            _this.alert = "Success. Shipping status Updated!";
                            $("#close").show();
                            $("#errorclose").hide();
                        }
                        else {
                            _this.alert = "Opps Error";
                            $("#close").hide();
                            $("#errorclose").show();
                        }
                    }));
                };
                ShipmentController.prototype.Close = function () {
                    location.reload();
                };
                ShipmentController.$inject = ["VItemAllocationQTY", "QAPlannerService", "$cookieStore"];
                return ShipmentController;
            }());
            var ShipmentComponentController = /** @class */ (function () {
                function ShipmentComponentController() {
                    this.controller = ShipmentController;
                    this.templateUrl = "/Scripts/App/VRPModule/ShipmentConfirmation/Template/ShipmentChild.html";
                }
                ShipmentComponentController.Name = "shipmentcomponent";
                return ShipmentComponentController;
            }());
            app.AddComponent(ShipmentComponentController.Name, new ShipmentComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=ShipmentComponent.js.map
//# sourceMappingURL=ShipmentService.js.map
//# sourceMappingURL=RoutingListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var RoutingListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function RoutingListController() {
                    this.IsShow = false;
                }
                RoutingListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                RoutingListController.prototype.Init = function () {
                };
                RoutingListController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                RoutingListController.$inject = [];
                return RoutingListController;
            }());
            var RoutingListComponentController = /** @class */ (function () {
                function RoutingListComponentController() {
                    this.controller = RoutingListController;
                    this.templateUrl = "/Scripts/App/Production/Routing/RoutingList/Template/_RoutingList.html";
                }
                RoutingListComponentController.Name = "routinglistcomponent";
                return RoutingListComponentController;
            }());
            app.AddComponent(RoutingListComponentController.Name, new RoutingListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=RoutingListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var RoutingListController = /** @class */ (function (_super) {
            __extends(RoutingListController, _super);
            function RoutingListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return RoutingListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.RoutingListController = RoutingListController;
        app.AddController("RoutingListController", RoutingListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=RoutingListController.js.map
//# sourceMappingURL=RoutingListService.js.map
//# sourceMappingURL=RoutingCreateModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var RoutingCreateController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function RoutingCreateController() {
                    this.IsShow = false;
                }
                RoutingCreateController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                RoutingCreateController.prototype.Init = function () {
                };
                RoutingCreateController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                RoutingCreateController.$inject = [];
                return RoutingCreateController;
            }());
            var RoutingCreateComponentController = /** @class */ (function () {
                function RoutingCreateComponentController() {
                    this.controller = RoutingCreateController;
                    this.templateUrl = "/Scripts/App/Production/Routing/RoutingCreate/Template/RoutingCreate.html";
                }
                RoutingCreateComponentController.Name = "routingcreatecomponent";
                return RoutingCreateComponentController;
            }());
            app.AddComponent(RoutingCreateComponentController.Name, new RoutingCreateComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=RoutingCreateComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var RoutingCreateController = /** @class */ (function (_super) {
            __extends(RoutingCreateController, _super);
            function RoutingCreateController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return RoutingCreateController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.RoutingCreateController = RoutingCreateController;
        app.AddController("RoutingCreateController", RoutingCreateController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=RoutingCreateController.js.map
//# sourceMappingURL=RoutingCreateService.js.map
//# sourceMappingURL=RoutingEditModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var RoutingEditController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function RoutingEditController() {
                    this.IsShow = false;
                }
                RoutingEditController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                RoutingEditController.prototype.Init = function () {
                };
                RoutingEditController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                RoutingEditController.$inject = [];
                return RoutingEditController;
            }());
            var RoutingEditComponentController = /** @class */ (function () {
                function RoutingEditComponentController() {
                    this.controller = RoutingEditController;
                    this.templateUrl = "/Scripts/App/Production/Routing/RoutingEdit/Template/_RoutingEdit.html";
                }
                RoutingEditComponentController.Name = "routingeditcomponent";
                return RoutingEditComponentController;
            }());
            app.AddComponent(RoutingEditComponentController.Name, new RoutingEditComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=RoutingEditComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var RoutingEditController = /** @class */ (function (_super) {
            __extends(RoutingEditController, _super);
            function RoutingEditController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return RoutingEditController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.RoutingEditController = RoutingEditController;
        app.AddController("RoutingEditController", RoutingEditController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=RoutingEditController.js.map
//# sourceMappingURL=RoutingEditService.js.map
//# sourceMappingURL=RoutingViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var RoutingViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function RoutingViewController() {
                    this.IsShow = false;
                }
                RoutingViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                RoutingViewController.prototype.Init = function () {
                };
                RoutingViewController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                RoutingViewController.$inject = [];
                return RoutingViewController;
            }());
            var RoutingViewComponentController = /** @class */ (function () {
                function RoutingViewComponentController() {
                    this.controller = RoutingViewController;
                    this.templateUrl = "/Scripts/App/Production/Routing/RoutingView/Template/_RoutingView.html";
                }
                RoutingViewComponentController.Name = "routingviewcomponent";
                return RoutingViewComponentController;
            }());
            app.AddComponent(RoutingViewComponentController.Name, new RoutingViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=RoutingViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var RoutingViewController = /** @class */ (function (_super) {
            __extends(RoutingViewController, _super);
            function RoutingViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return RoutingViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.RoutingViewController = RoutingViewController;
        app.AddController("RoutingViewController", RoutingViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=RoutingViewController.js.map
//# sourceMappingURL=RoutingViewService.js.map
//# sourceMappingURL=BillofMaterialsListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var BillofMaterialsListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function BillofMaterialsListController() {
                    this.byproduct = null;
                    this.IsShow = false;
                }
                BillofMaterialsListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                BillofMaterialsListController.prototype.Init = function () {
                };
                BillofMaterialsListController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                BillofMaterialsListController.prototype.desc = function () {
                    if (this.byproduct == 0) {
                        $("#ProdDesc").show();
                    }
                    else {
                        $("#ProdDesc").hide();
                    }
                };
                BillofMaterialsListController.$inject = [];
                return BillofMaterialsListController;
            }());
            var BillofMaterialsListComponentController = /** @class */ (function () {
                function BillofMaterialsListComponentController() {
                    this.controller = BillofMaterialsListController;
                    this.templateUrl = "/Scripts/App/Production/BillOfMaterial/BillofMaterialsList/Template/_BillofMaterialsList.html";
                }
                BillofMaterialsListComponentController.Name = "billofmaterialslistcomponent";
                return BillofMaterialsListComponentController;
            }());
            app.AddComponent(BillofMaterialsListComponentController.Name, new BillofMaterialsListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=BillofMaterialsListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var BillofMaterialsListController = /** @class */ (function (_super) {
            __extends(BillofMaterialsListController, _super);
            function BillofMaterialsListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return BillofMaterialsListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.BillofMaterialsListController = BillofMaterialsListController;
        app.AddController("BillofMaterialsListController", BillofMaterialsListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BillofMaterialsListController.js.map
//# sourceMappingURL=BillofMaterialsListService.js.map
//# sourceMappingURL=BillOfMaterialCreateModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var BillOfMaterialCreateController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function BillOfMaterialCreateController() {
                    this.byproduct = null;
                    this.IsShow = false;
                }
                BillOfMaterialCreateController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                BillOfMaterialCreateController.prototype.Init = function () {
                };
                BillOfMaterialCreateController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                BillOfMaterialCreateController.prototype.desc = function () {
                    if (this.byproduct == 0) {
                        $("#ProdDesc").show();
                    }
                    else {
                        $("#ProdDesc").hide();
                    }
                };
                BillOfMaterialCreateController.$inject = [];
                return BillOfMaterialCreateController;
            }());
            var BillOfMaterialCreateComponentController = /** @class */ (function () {
                function BillOfMaterialCreateComponentController() {
                    this.controller = BillOfMaterialCreateController;
                    this.templateUrl = "/Scripts/App/Production/BillOfMaterial/BillOfMaterialCreate/Template/_BillOfMaterialCreate.html";
                }
                BillOfMaterialCreateComponentController.Name = "billofmaterialcreatecomponent";
                return BillOfMaterialCreateComponentController;
            }());
            app.AddComponent(BillOfMaterialCreateComponentController.Name, new BillOfMaterialCreateComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=BillOfMaterialCreateComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var BillOfMaterialCreateController = /** @class */ (function (_super) {
            __extends(BillOfMaterialCreateController, _super);
            function BillOfMaterialCreateController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return BillOfMaterialCreateController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.BillOfMaterialCreateController = BillOfMaterialCreateController;
        app.AddController("BillOfMaterialCreateController", BillOfMaterialCreateController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BillOfMaterialCreateController.js.map
//# sourceMappingURL=BillOfMaterialCreateService.js.map
//# sourceMappingURL=BillOfMaterialsEditModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var BillOfMaterialsEditController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function BillOfMaterialsEditController() {
                    this.byproduct = null;
                    this.IsShow = false;
                }
                BillOfMaterialsEditController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                BillOfMaterialsEditController.prototype.Init = function () {
                };
                BillOfMaterialsEditController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                BillOfMaterialsEditController.prototype.desc = function () {
                    if (this.byproduct == 0) {
                        $("#ProdDesc").show();
                    }
                    else {
                        $("#ProdDesc").hide();
                    }
                };
                BillOfMaterialsEditController.$inject = [];
                return BillOfMaterialsEditController;
            }());
            var BillOfMaterialsEditComponentController = /** @class */ (function () {
                function BillOfMaterialsEditComponentController() {
                    this.controller = BillOfMaterialsEditController;
                    this.templateUrl = "/Scripts/App/Production/BillOfMaterial/BillOfMaterialsEdit/Template/_BillOfMaterialsEdit.html";
                }
                BillOfMaterialsEditComponentController.Name = "billofmaterialseditcomponent";
                return BillOfMaterialsEditComponentController;
            }());
            app.AddComponent(BillOfMaterialsEditComponentController.Name, new BillOfMaterialsEditComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=BillOfMaterialsEditComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var BillOfMaterialsEditController = /** @class */ (function (_super) {
            __extends(BillOfMaterialsEditController, _super);
            function BillOfMaterialsEditController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return BillOfMaterialsEditController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.BillOfMaterialsEditController = BillOfMaterialsEditController;
        app.AddController("BillOfMaterialsEditController", BillOfMaterialsEditController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BillOfMaterialsEditController.js.map
//# sourceMappingURL=BillOfMaterialsEditService.js.map
//# sourceMappingURL=BillOfMaterialViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var BillOfMaterialViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function BillOfMaterialViewController() {
                    this.IsShow = false;
                }
                BillOfMaterialViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                BillOfMaterialViewController.prototype.Init = function () {
                };
                BillOfMaterialViewController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                BillOfMaterialViewController.$inject = [];
                return BillOfMaterialViewController;
            }());
            var BillOfMaterialViewComponentController = /** @class */ (function () {
                function BillOfMaterialViewComponentController() {
                    this.controller = BillOfMaterialViewController;
                    this.templateUrl = "/Scripts/App/Production/BillOfMaterial/BillOfMaterialView/Template/_BillOfMaterialView.html";
                }
                BillOfMaterialViewComponentController.Name = "billofmaterialviewcomponent";
                return BillOfMaterialViewComponentController;
            }());
            app.AddComponent(BillOfMaterialViewComponentController.Name, new BillOfMaterialViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=BillOfMaterialViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var BillOfMaterialViewController = /** @class */ (function (_super) {
            __extends(BillOfMaterialViewController, _super);
            function BillOfMaterialViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return BillOfMaterialViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.BillOfMaterialViewController = BillOfMaterialViewController;
        app.AddController("BillOfMaterialViewController", BillOfMaterialViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BillOfMaterialViewController.js.map
//# sourceMappingURL=BillOfMaterialViewService.js.map
//# sourceMappingURL=ProductionOrderListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ProductionOrderListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ProductionOrderListController() {
                    this.IsShow = false;
                }
                ProductionOrderListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ProductionOrderListController.prototype.Init = function () {
                };
                ProductionOrderListController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ProductionOrderListController.$inject = [];
                return ProductionOrderListController;
            }());
            var ProductionOrderListComponentController = /** @class */ (function () {
                function ProductionOrderListComponentController() {
                    this.controller = ProductionOrderListController;
                    this.templateUrl = "/Scripts/App/Production/ProductionOrder/ProductionOrderList/Template/_ProductionOrderList.html";
                }
                ProductionOrderListComponentController.Name = "productionorderlistcomponent";
                return ProductionOrderListComponentController;
            }());
            app.AddComponent(ProductionOrderListComponentController.Name, new ProductionOrderListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=ProductionOrderListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ProductionOrderListController = /** @class */ (function (_super) {
            __extends(ProductionOrderListController, _super);
            function ProductionOrderListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProductionOrderListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ProductionOrderListController = ProductionOrderListController;
        app.AddController("ProductionOrderListController", ProductionOrderListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ProductionOrderListController.js.map
//# sourceMappingURL=ProductionOrderListService.js.map
//# sourceMappingURL=ProductionOrderCreateModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ProductionOrderCreateController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ProductionOrderCreateController() {
                    this.IsShow = false;
                }
                ProductionOrderCreateController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ProductionOrderCreateController.prototype.Init = function () {
                };
                ProductionOrderCreateController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ProductionOrderCreateController.$inject = [];
                return ProductionOrderCreateController;
            }());
            var ProductionOrderCreateComponentController = /** @class */ (function () {
                function ProductionOrderCreateComponentController() {
                    this.controller = ProductionOrderCreateController;
                    this.templateUrl = "/Scripts/App/Production/ProductionOrder/ProductionOrderCreate/Template/_ProductionOrderCreate.html";
                }
                ProductionOrderCreateComponentController.Name = "productionordercreatecomponent";
                return ProductionOrderCreateComponentController;
            }());
            app.AddComponent(ProductionOrderCreateComponentController.Name, new ProductionOrderCreateComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=ProductionOrderCreateComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ProductionOrderCreateController = /** @class */ (function (_super) {
            __extends(ProductionOrderCreateController, _super);
            function ProductionOrderCreateController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProductionOrderCreateController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ProductionOrderCreateController = ProductionOrderCreateController;
        app.AddController("ProductionOrderCreateController", ProductionOrderCreateController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ProductionOrderCreateController.js.map
//# sourceMappingURL=ProductionOrderCreateService.js.map
//# sourceMappingURL=ProductionOrderEditModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ProductionOrderEditController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ProductionOrderEditController() {
                    this.IsShow = false;
                }
                ProductionOrderEditController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ProductionOrderEditController.prototype.Init = function () {
                };
                ProductionOrderEditController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ProductionOrderEditController.$inject = [];
                return ProductionOrderEditController;
            }());
            var ProductionOrderEditComponentController = /** @class */ (function () {
                function ProductionOrderEditComponentController() {
                    this.controller = ProductionOrderEditController;
                    this.templateUrl = "/Scripts/App/Production/ProductionOrder/ProductionOrderEdit/Template/_ProductionOrderEdit.html";
                }
                ProductionOrderEditComponentController.Name = "productionordereditcomponent";
                return ProductionOrderEditComponentController;
            }());
            app.AddComponent(ProductionOrderEditComponentController.Name, new ProductionOrderEditComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=ProductionOrderEditComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ProductionOrderEditController = /** @class */ (function (_super) {
            __extends(ProductionOrderEditController, _super);
            function ProductionOrderEditController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProductionOrderEditController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ProductionOrderEditController = ProductionOrderEditController;
        app.AddController("ProductionOrderEditController", ProductionOrderEditController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ProductionOrderEditController.js.map
//# sourceMappingURL=ProductionOrderEditService.js.map
//# sourceMappingURL=ProductionOrderViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ProductionOrderViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ProductionOrderViewController() {
                    this.IsShow = false;
                }
                ProductionOrderViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ProductionOrderViewController.prototype.Init = function () {
                };
                ProductionOrderViewController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ProductionOrderViewController.$inject = [];
                return ProductionOrderViewController;
            }());
            var ProductionOrderViewComponentController = /** @class */ (function () {
                function ProductionOrderViewComponentController() {
                    this.controller = ProductionOrderViewController;
                    this.templateUrl = "/Scripts/App/Production/ProductionOrder/ProductionOrderView/Template/_ProductionOrderView.html";
                }
                ProductionOrderViewComponentController.Name = "productionorderviewcomponent";
                return ProductionOrderViewComponentController;
            }());
            app.AddComponent(ProductionOrderViewComponentController.Name, new ProductionOrderViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ProductionOrderViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ProductionOrderViewController = /** @class */ (function (_super) {
            __extends(ProductionOrderViewController, _super);
            function ProductionOrderViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProductionOrderViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ProductionOrderViewController = ProductionOrderViewController;
        app.AddController("ProductionOrderViewController", ProductionOrderViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ProductionOrderViewController.js.map
//# sourceMappingURL=ProductionOrderViewService.js.map
//# sourceMappingURL=ProductionOrderConfirmationsModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ProductionOrderConfirmationsController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ProductionOrderConfirmationsController() {
                    this.IsShow = false;
                }
                ProductionOrderConfirmationsController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ProductionOrderConfirmationsController.prototype.Init = function () {
                };
                ProductionOrderConfirmationsController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ProductionOrderConfirmationsController.$inject = [];
                return ProductionOrderConfirmationsController;
            }());
            var ProductionOrderConfirmationsComponentController = /** @class */ (function () {
                function ProductionOrderConfirmationsComponentController() {
                    this.controller = ProductionOrderConfirmationsController;
                    this.templateUrl = "/Scripts/App/Production/ProductionOrder/ProductionOrderConfirmations/Template/_ProductionOrderConfirmations.html";
                }
                ProductionOrderConfirmationsComponentController.Name = "productionorderconfirmationscomponent";
                return ProductionOrderConfirmationsComponentController;
            }());
            app.AddComponent(ProductionOrderConfirmationsComponentController.Name, new ProductionOrderConfirmationsComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=ProductionOrderConfirmationsComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ProductionOrderConfirmationsController = /** @class */ (function (_super) {
            __extends(ProductionOrderConfirmationsController, _super);
            function ProductionOrderConfirmationsController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProductionOrderConfirmationsController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ProductionOrderConfirmationsController = ProductionOrderConfirmationsController;
        app.AddController("ProductionOrderConfirmationsController", ProductionOrderConfirmationsController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ProductionOrderConfirmationsController.js.map
//# sourceMappingURL=ProductionOrderConfirmationsService.js.map
//# sourceMappingURL=MRPLISTModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var MRPLISTController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function MRPLISTController() {
                    this.IsShow = false;
                }
                MRPLISTController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                MRPLISTController.prototype.Init = function () {
                };
                MRPLISTController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                MRPLISTController.$inject = [];
                return MRPLISTController;
            }());
            var MRPLISTComponentController = /** @class */ (function () {
                function MRPLISTComponentController() {
                    this.controller = MRPLISTController;
                    this.templateUrl = "/Scripts/App/Production/Mrp/MRPLIST/Template/_MRPLIST.html";
                }
                MRPLISTComponentController.Name = "mrplistcomponent";
                return MRPLISTComponentController;
            }());
            app.AddComponent(MRPLISTComponentController.Name, new MRPLISTComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=MRPLISTComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var MRPLISTController = /** @class */ (function (_super) {
            __extends(MRPLISTController, _super);
            function MRPLISTController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return MRPLISTController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.MRPLISTController = MRPLISTController;
        app.AddController("MRPLISTController", MRPLISTController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=MRPLISTController.js.map
//# sourceMappingURL=MRPLISTService.js.map
//# sourceMappingURL=MRPRUNModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var MRPRUNController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function MRPRUNController() {
                    this.IsShow = false;
                }
                MRPRUNController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                MRPRUNController.prototype.Init = function () {
                };
                MRPRUNController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                MRPRUNController.$inject = [];
                return MRPRUNController;
            }());
            var MRPRUNComponentController = /** @class */ (function () {
                function MRPRUNComponentController() {
                    this.controller = MRPRUNController;
                    this.templateUrl = "/Scripts/App/Production/Mrp/MRPRUN/Template/_MRPRUN.html";
                }
                MRPRUNComponentController.Name = "mrpruncomponent";
                return MRPRUNComponentController;
            }());
            app.AddComponent(MRPRUNComponentController.Name, new MRPRUNComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=MRPRUNComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var MRPRUNController = /** @class */ (function (_super) {
            __extends(MRPRUNController, _super);
            function MRPRUNController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return MRPRUNController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.MRPRUNController = MRPRUNController;
        app.AddController("MRPRUNController", MRPRUNController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=MRPRUNController.js.map
//# sourceMappingURL=MRPRUNService.js.map
//# sourceMappingURL=StoreIssueListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var StoreIssueListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function StoreIssueListController() {
                    this.IsShow = false;
                }
                StoreIssueListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                StoreIssueListController.prototype.Init = function () {
                };
                StoreIssueListController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                StoreIssueListController.$inject = [];
                return StoreIssueListController;
            }());
            var StoreIssueListComponentController = /** @class */ (function () {
                function StoreIssueListComponentController() {
                    this.controller = StoreIssueListController;
                    this.templateUrl = "/Scripts/App/Production/StoreIssue/StoreIssueList/Template/_StoreIssueList.html";
                }
                StoreIssueListComponentController.Name = "storeissuelistcomponent";
                return StoreIssueListComponentController;
            }());
            app.AddComponent(StoreIssueListComponentController.Name, new StoreIssueListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreIssueListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StoreIssueListController = /** @class */ (function (_super) {
            __extends(StoreIssueListController, _super);
            function StoreIssueListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StoreIssueListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StoreIssueListController = StoreIssueListController;
        app.AddController("StoreIssueListController", StoreIssueListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreIssueListController.js.map
//# sourceMappingURL=StoreIssueListService.js.map
//# sourceMappingURL=StoreIssueCreateModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var StoreIssueCreateController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function StoreIssueCreateController() {
                    this.IsShow = false;
                }
                StoreIssueCreateController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                StoreIssueCreateController.prototype.Init = function () {
                };
                StoreIssueCreateController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                StoreIssueCreateController.$inject = [];
                return StoreIssueCreateController;
            }());
            var StoreIssueCreateComponentController = /** @class */ (function () {
                function StoreIssueCreateComponentController() {
                    this.controller = StoreIssueCreateController;
                    this.templateUrl = "/Scripts/App/Production/StoreIssue/StoreIssueCreate/Template/_StoreIssueCreate.html";
                }
                StoreIssueCreateComponentController.Name = "storeissuecreatecomponent";
                return StoreIssueCreateComponentController;
            }());
            app.AddComponent(StoreIssueCreateComponentController.Name, new StoreIssueCreateComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreIssueCreateComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StoreIssueCreateController = /** @class */ (function (_super) {
            __extends(StoreIssueCreateController, _super);
            function StoreIssueCreateController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StoreIssueCreateController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StoreIssueCreateController = StoreIssueCreateController;
        app.AddController("StoreIssueCreateController", StoreIssueCreateController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreIssueCreateController.js.map
//# sourceMappingURL=StoreIssueCreateService.js.map
//# sourceMappingURL=StoreIssueEditModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var StoreIssueEditController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function StoreIssueEditController() {
                    this.IsShow = false;
                }
                StoreIssueEditController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                StoreIssueEditController.prototype.Init = function () {
                };
                StoreIssueEditController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                StoreIssueEditController.$inject = [];
                return StoreIssueEditController;
            }());
            var StoreIssueEditComponentController = /** @class */ (function () {
                function StoreIssueEditComponentController() {
                    this.controller = StoreIssueEditController;
                    this.templateUrl = "/Scripts/App/Production/StoreIssue/StoreIssueEdit/Template/_StoreIssueEdit.html";
                }
                StoreIssueEditComponentController.Name = "storeissueeditcomponent";
                return StoreIssueEditComponentController;
            }());
            app.AddComponent(StoreIssueEditComponentController.Name, new StoreIssueEditComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreIssueEditComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StoreIssueEditController = /** @class */ (function (_super) {
            __extends(StoreIssueEditController, _super);
            function StoreIssueEditController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StoreIssueEditController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StoreIssueEditController = StoreIssueEditController;
        app.AddController("StoreIssueEditController", StoreIssueEditController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreIssueEditController.js.map
//# sourceMappingURL=StoreIssueEditService.js.map
//# sourceMappingURL=StoreIssueViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var StoreIssueViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function StoreIssueViewController() {
                    this.IsShow = false;
                }
                StoreIssueViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                StoreIssueViewController.prototype.Init = function () {
                };
                StoreIssueViewController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                StoreIssueViewController.$inject = [];
                return StoreIssueViewController;
            }());
            var StoreIssueViewComponentController = /** @class */ (function () {
                function StoreIssueViewComponentController() {
                    this.controller = StoreIssueViewController;
                    this.templateUrl = "/Scripts/App/Production/StoreIssue/StoreIssueView/Template/_StoreIssueView.html";
                }
                StoreIssueViewComponentController.Name = "storeissueviewcomponent";
                return StoreIssueViewComponentController;
            }());
            app.AddComponent(StoreIssueViewComponentController.Name, new StoreIssueViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreIssueViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StoreIssueViewController = /** @class */ (function (_super) {
            __extends(StoreIssueViewController, _super);
            function StoreIssueViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StoreIssueViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StoreIssueViewController = StoreIssueViewController;
        app.AddController("StoreIssueViewController", StoreIssueViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreIssueViewController.js.map
//# sourceMappingURL=StoreIssueViewService.js.map
//# sourceMappingURL=ReturnToStoreListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ReturnToStoreListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ReturnToStoreListController() {
                    this.IsShow = false;
                }
                ReturnToStoreListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ReturnToStoreListController.prototype.Init = function () {
                };
                ReturnToStoreListController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ReturnToStoreListController.$inject = [];
                return ReturnToStoreListController;
            }());
            var ReturnToStoreListComponentController = /** @class */ (function () {
                function ReturnToStoreListComponentController() {
                    this.controller = ReturnToStoreListController;
                    this.templateUrl = "/Scripts/App/Production/ReturnToStore/ReturnToStoreList/Template/_ReturnToStoreList.html";
                }
                ReturnToStoreListComponentController.Name = "returntostorelistcomponent";
                return ReturnToStoreListComponentController;
            }());
            app.AddComponent(ReturnToStoreListComponentController.Name, new ReturnToStoreListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ReturnToStoreListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ReturnToStoreListController = /** @class */ (function (_super) {
            __extends(ReturnToStoreListController, _super);
            function ReturnToStoreListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ReturnToStoreListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ReturnToStoreListController = ReturnToStoreListController;
        app.AddController("ReturnToStoreListController", ReturnToStoreListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ReturnToStoreListController.js.map
//# sourceMappingURL=ReturnToStoreListService.js.map
//# sourceMappingURL=ReturnToStoreCreateModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ReturnToStoreCreateController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ReturnToStoreCreateController() {
                    this.IsShow = false;
                }
                ReturnToStoreCreateController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ReturnToStoreCreateController.prototype.Init = function () {
                };
                ReturnToStoreCreateController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ReturnToStoreCreateController.$inject = [];
                return ReturnToStoreCreateController;
            }());
            var ReturnToStoreCreateComponentController = /** @class */ (function () {
                function ReturnToStoreCreateComponentController() {
                    this.controller = ReturnToStoreCreateController;
                    this.templateUrl = "/Scripts/App/Production/ReturnToStore/ReturnToStoreCreate/Template/_ReturnToStoreCreate.html";
                }
                ReturnToStoreCreateComponentController.Name = "returntostorecreatecomponent";
                return ReturnToStoreCreateComponentController;
            }());
            app.AddComponent(ReturnToStoreCreateComponentController.Name, new ReturnToStoreCreateComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ReturnToStoreCreateComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ReturnToStoreCreateController = /** @class */ (function (_super) {
            __extends(ReturnToStoreCreateController, _super);
            function ReturnToStoreCreateController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ReturnToStoreCreateController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ReturnToStoreCreateController = ReturnToStoreCreateController;
        app.AddController("ReturnToStoreCreateController", ReturnToStoreCreateController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ReturnToStoreCreateController.js.map
//# sourceMappingURL=ReturnToStoreCreateService.js.map
//# sourceMappingURL=ReturnToStoreEditModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ReturnToStoreEditController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ReturnToStoreEditController() {
                    this.IsShow = false;
                }
                ReturnToStoreEditController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ReturnToStoreEditController.prototype.Init = function () {
                };
                ReturnToStoreEditController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ReturnToStoreEditController.$inject = [];
                return ReturnToStoreEditController;
            }());
            var ReturnToStoreEditComponentController = /** @class */ (function () {
                function ReturnToStoreEditComponentController() {
                    this.controller = ReturnToStoreEditController;
                    this.templateUrl = "/Scripts/App/Production/ReturnToStore/ReturnToStoreEdit/Template/_ReturnToStoreEdit.html";
                }
                ReturnToStoreEditComponentController.Name = "returntostoreeditcomponent";
                return ReturnToStoreEditComponentController;
            }());
            app.AddComponent(ReturnToStoreEditComponentController.Name, new ReturnToStoreEditComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ReturnToStoreEditComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ReturnToStoreEditController = /** @class */ (function (_super) {
            __extends(ReturnToStoreEditController, _super);
            function ReturnToStoreEditController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ReturnToStoreEditController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ReturnToStoreEditController = ReturnToStoreEditController;
        app.AddController("ReturnToStoreEditController", ReturnToStoreEditController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ReturnToStoreEditController.js.map
//# sourceMappingURL=ReturnToStoreEditService.js.map
//# sourceMappingURL=ReturnToStoreViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ReturnToStoreViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ReturnToStoreViewController() {
                    this.IsShow = false;
                }
                ReturnToStoreViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ReturnToStoreViewController.prototype.Init = function () {
                };
                ReturnToStoreViewController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ReturnToStoreViewController.$inject = [];
                return ReturnToStoreViewController;
            }());
            var ReturnToStoreViewComponentController = /** @class */ (function () {
                function ReturnToStoreViewComponentController() {
                    this.controller = ReturnToStoreViewController;
                    this.templateUrl = "/Scripts/App/Production/ReturnToStore/ReturnToStoreView/Template/_ReturnToStoreView.html";
                }
                ReturnToStoreViewComponentController.Name = "returntostoreviewcomponent";
                return ReturnToStoreViewComponentController;
            }());
            app.AddComponent(ReturnToStoreViewComponentController.Name, new ReturnToStoreViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ReturnToStoreViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ReturnToStoreViewController = /** @class */ (function (_super) {
            __extends(ReturnToStoreViewController, _super);
            function ReturnToStoreViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ReturnToStoreViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ReturnToStoreViewController = ReturnToStoreViewController;
        app.AddController("ReturnToStoreViewController", ReturnToStoreViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ReturnToStoreViewController.js.map
//# sourceMappingURL=ReturnToStoreViewService.js.map
//# sourceMappingURL=ConfirmationListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ConfirmationListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ConfirmationListController() {
                    this.IsShow = false;
                }
                ConfirmationListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ConfirmationListController.prototype.Init = function () {
                };
                ConfirmationListController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ConfirmationListController.$inject = [];
                return ConfirmationListController;
            }());
            var ConfirmationListComponentController = /** @class */ (function () {
                function ConfirmationListComponentController() {
                    this.controller = ConfirmationListController;
                    this.templateUrl = "/Scripts/App/Production/Confirmation/ConfirmationList/Template/_ConfirmationList.html";
                }
                ConfirmationListComponentController.Name = "confirmationlistcomponent";
                return ConfirmationListComponentController;
            }());
            app.AddComponent(ConfirmationListComponentController.Name, new ConfirmationListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=ConfirmationListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ConfirmationListController = /** @class */ (function (_super) {
            __extends(ConfirmationListController, _super);
            function ConfirmationListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ConfirmationListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ConfirmationListController = ConfirmationListController;
        app.AddController("ConfirmationListController", ConfirmationListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ConfirmationListController.js.map
//# sourceMappingURL=ConfirmationListService.js.map
//# sourceMappingURL=BulkConfirmationModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var BulkConfirmationController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function BulkConfirmationController() {
                    this.IsShow = false;
                }
                BulkConfirmationController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                BulkConfirmationController.prototype.Init = function () {
                };
                BulkConfirmationController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                BulkConfirmationController.$inject = [];
                return BulkConfirmationController;
            }());
            var BulkConfirmationComponentController = /** @class */ (function () {
                function BulkConfirmationComponentController() {
                    this.controller = BulkConfirmationController;
                    this.templateUrl = "/Scripts/App/Production/Confirmation/BulkConfirmation/Template/_BulkConfirmation.html";
                }
                BulkConfirmationComponentController.Name = "bulkconfirmationcomponent";
                return BulkConfirmationComponentController;
            }());
            app.AddComponent(BulkConfirmationComponentController.Name, new BulkConfirmationComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=BulkConfirmationComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var BulkConfirmationController = /** @class */ (function (_super) {
            __extends(BulkConfirmationController, _super);
            function BulkConfirmationController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return BulkConfirmationController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.BulkConfirmationController = BulkConfirmationController;
        app.AddController("BulkConfirmationController", BulkConfirmationController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=BulkConfirmationController.js.map
//# sourceMappingURL=BulkConfirmationService.js.map
//# sourceMappingURL=ConfirmationEditModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ConfirmationEditController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ConfirmationEditController() {
                    this.IsShow = false;
                }
                ConfirmationEditController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ConfirmationEditController.prototype.Init = function () {
                };
                ConfirmationEditController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ConfirmationEditController.$inject = [];
                return ConfirmationEditController;
            }());
            var ConfirmationEditComponentController = /** @class */ (function () {
                function ConfirmationEditComponentController() {
                    this.controller = ConfirmationEditController;
                    this.templateUrl = "/Scripts/App/Production/Confirmation/ConfirmationEdit/Template/_ConfirmationEdit.html";
                }
                ConfirmationEditComponentController.Name = "confirmationeditcomponent";
                return ConfirmationEditComponentController;
            }());
            app.AddComponent(ConfirmationEditComponentController.Name, new ConfirmationEditComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=ConfirmationEditComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ConfirmationEditController = /** @class */ (function (_super) {
            __extends(ConfirmationEditController, _super);
            function ConfirmationEditController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ConfirmationEditController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ConfirmationEditController = ConfirmationEditController;
        app.AddController("ConfirmationEditController", ConfirmationEditController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ConfirmationEditController.js.map
//# sourceMappingURL=ConfirmationEditService.js.map
//# sourceMappingURL=ConfirmationViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ConfirmationViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ConfirmationViewController() {
                    this.IsShow = false;
                }
                ConfirmationViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ConfirmationViewController.prototype.Init = function () {
                };
                ConfirmationViewController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                ConfirmationViewController.$inject = [];
                return ConfirmationViewController;
            }());
            var ConfirmationViewComponentController = /** @class */ (function () {
                function ConfirmationViewComponentController() {
                    this.controller = ConfirmationViewController;
                    this.templateUrl = "/Scripts/App/Production/Confirmation/ConfirmationView/Template/_ConfirmationView.html";
                }
                ConfirmationViewComponentController.Name = "confirmationviewcomponent";
                return ConfirmationViewComponentController;
            }());
            app.AddComponent(ConfirmationViewComponentController.Name, new ConfirmationViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ConfirmationViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ConfirmationViewController = /** @class */ (function (_super) {
            __extends(ConfirmationViewController, _super);
            function ConfirmationViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ConfirmationViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ConfirmationViewController = ConfirmationViewController;
        app.AddController("ConfirmationViewController", ConfirmationViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ConfirmationViewController.js.map
//# sourceMappingURL=ConfirmationViewService.js.map
//# sourceMappingURL=StoreRequestListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var StoreRequestListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function StoreRequestListController() {
                    this.IsShow = false;
                }
                StoreRequestListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                StoreRequestListController.prototype.Init = function () {
                };
                StoreRequestListController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                StoreRequestListController.$inject = [];
                return StoreRequestListController;
            }());
            var StoreRequestListComponentController = /** @class */ (function () {
                function StoreRequestListComponentController() {
                    this.controller = StoreRequestListController;
                    this.templateUrl = "/Scripts/App/Production/StoreRequest/StoreRequestList/Template/_StoreRequestList.html";
                }
                StoreRequestListComponentController.Name = "storerequestlistcomponent";
                return StoreRequestListComponentController;
            }());
            app.AddComponent(StoreRequestListComponentController.Name, new StoreRequestListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreRequestListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StoreRequestListController = /** @class */ (function (_super) {
            __extends(StoreRequestListController, _super);
            function StoreRequestListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StoreRequestListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StoreRequestListController = StoreRequestListController;
        app.AddController("StoreRequestListController", StoreRequestListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreRequestListController.js.map
//# sourceMappingURL=StoreRequestListService.js.map
//# sourceMappingURL=StoreRequestCreateModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var StoreRequestCreateController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function StoreRequestCreateController() {
                    this.IsShow = false;
                }
                StoreRequestCreateController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                StoreRequestCreateController.prototype.Init = function () {
                };
                StoreRequestCreateController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                StoreRequestCreateController.$inject = [];
                return StoreRequestCreateController;
            }());
            var StoreRequestCreateComponentController = /** @class */ (function () {
                function StoreRequestCreateComponentController() {
                    this.controller = StoreRequestCreateController;
                    this.templateUrl = "/Scripts/App/Production/StoreRequest/StoreRequestCreate/Template/StoreRequestCreate.html";
                }
                StoreRequestCreateComponentController.Name = "storerequestcreatecomponent";
                return StoreRequestCreateComponentController;
            }());
            app.AddComponent(StoreRequestCreateComponentController.Name, new StoreRequestCreateComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreRequestCreateComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StoreRequestCreateController = /** @class */ (function (_super) {
            __extends(StoreRequestCreateController, _super);
            function StoreRequestCreateController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StoreRequestCreateController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StoreRequestCreateController = StoreRequestCreateController;
        app.AddController("StoreRequestCreateController", StoreRequestCreateController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreRequestCreateController.js.map
//# sourceMappingURL=StoreRequestCreateService.js.map
//# sourceMappingURL=StoreRequestEditModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var StoreRequestEditController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function StoreRequestEditController() {
                    this.IsShow = false;
                }
                StoreRequestEditController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                StoreRequestEditController.prototype.Init = function () {
                };
                StoreRequestEditController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                StoreRequestEditController.$inject = [];
                return StoreRequestEditController;
            }());
            var StoreRequestEditComponentController = /** @class */ (function () {
                function StoreRequestEditComponentController() {
                    this.controller = StoreRequestEditController;
                    this.templateUrl = "/Scripts/App/Production/StoreRequest/StoreRequestEdit/Template/_StoreRequestEdit.html";
                }
                StoreRequestEditComponentController.Name = "storerequesteditcomponent";
                return StoreRequestEditComponentController;
            }());
            app.AddComponent(StoreRequestEditComponentController.Name, new StoreRequestEditComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreRequestEditComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StoreRequestEditController = /** @class */ (function (_super) {
            __extends(StoreRequestEditController, _super);
            function StoreRequestEditController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StoreRequestEditController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StoreRequestEditController = StoreRequestEditController;
        app.AddController("StoreRequestEditController", StoreRequestEditController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreRequestEditController.js.map
//# sourceMappingURL=StoreRequestEditService.js.map
//# sourceMappingURL=StoreRequestViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var StoreRequestViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function StoreRequestViewController() {
                    this.IsShow = false;
                }
                StoreRequestViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                StoreRequestViewController.prototype.Init = function () {
                };
                StoreRequestViewController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                StoreRequestViewController.$inject = [];
                return StoreRequestViewController;
            }());
            var StoreRequestViewComponentController = /** @class */ (function () {
                function StoreRequestViewComponentController() {
                    this.controller = StoreRequestViewController;
                    this.templateUrl = "/Scripts/App/Production/StoreRequest/StoreRequestView/Template/_StoreRequestView.html";
                }
                StoreRequestViewComponentController.Name = "storerequestviewcomponent";
                return StoreRequestViewComponentController;
            }());
            app.AddComponent(StoreRequestViewComponentController.Name, new StoreRequestViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreRequestViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var StoreRequestViewController = /** @class */ (function (_super) {
            __extends(StoreRequestViewController, _super);
            function StoreRequestViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return StoreRequestViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.StoreRequestViewController = StoreRequestViewController;
        app.AddController("StoreRequestViewController", StoreRequestViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=StoreRequestViewController.js.map
//# sourceMappingURL=StoreRequestViewService.js.map
//# sourceMappingURL=PurchaseRequisitionListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var PurchaseRequisitionListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function PurchaseRequisitionListController() {
                    this.IsShow = false;
                }
                PurchaseRequisitionListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                PurchaseRequisitionListController.prototype.Init = function () {
                };
                PurchaseRequisitionListController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                PurchaseRequisitionListController.$inject = [];
                return PurchaseRequisitionListController;
            }());
            var PurchaseRequisitionListComponentController = /** @class */ (function () {
                function PurchaseRequisitionListComponentController() {
                    this.controller = PurchaseRequisitionListController;
                    this.templateUrl = "/Scripts/App/Production/PurchaseRequisition/PurchaseRequisitionList/Template/_PurchaseRequisitionList.html";
                }
                PurchaseRequisitionListComponentController.Name = "purchaserequisitionlistcomponent";
                return PurchaseRequisitionListComponentController;
            }());
            app.AddComponent(PurchaseRequisitionListComponentController.Name, new PurchaseRequisitionListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseRequisitionListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var PurchaseRequisitionListController = /** @class */ (function (_super) {
            __extends(PurchaseRequisitionListController, _super);
            function PurchaseRequisitionListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PurchaseRequisitionListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.PurchaseRequisitionListController = PurchaseRequisitionListController;
        app.AddController("PurchaseRequisitionListController", PurchaseRequisitionListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseRequisitionListController.js.map
//# sourceMappingURL=PurchaseRequisitionListService.js.map
//# sourceMappingURL=PurchaseRequisitionCreateModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var PurchaseRequisitionCreateController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function PurchaseRequisitionCreateController() {
                    this.IsShow = false;
                }
                PurchaseRequisitionCreateController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                PurchaseRequisitionCreateController.prototype.Init = function () {
                };
                PurchaseRequisitionCreateController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                PurchaseRequisitionCreateController.$inject = [];
                return PurchaseRequisitionCreateController;
            }());
            var PurchaseRequisitionCreateComponentController = /** @class */ (function () {
                function PurchaseRequisitionCreateComponentController() {
                    this.controller = PurchaseRequisitionCreateController;
                    this.templateUrl = "/Scripts/App/Production/PurchaseRequisition/PurchaseRequisitionCreate/Template/_PurchaseRequisitionCreate.html";
                }
                PurchaseRequisitionCreateComponentController.Name = "purchaserequisitioncreatecomponent";
                return PurchaseRequisitionCreateComponentController;
            }());
            app.AddComponent(PurchaseRequisitionCreateComponentController.Name, new PurchaseRequisitionCreateComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseRequisitionCreateComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var PurchaseRequisitionCreateController = /** @class */ (function (_super) {
            __extends(PurchaseRequisitionCreateController, _super);
            function PurchaseRequisitionCreateController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PurchaseRequisitionCreateController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.PurchaseRequisitionCreateController = PurchaseRequisitionCreateController;
        app.AddController("PurchaseRequisitionCreateController", PurchaseRequisitionCreateController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseRequisitionCreateController.js.map
//# sourceMappingURL=PurchaseRequisitionCreateService.js.map
//# sourceMappingURL=PurchaseRequisitionEditModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var PurchaseRequisitionEditController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function PurchaseRequisitionEditController() {
                    this.IsShow = false;
                }
                PurchaseRequisitionEditController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                PurchaseRequisitionEditController.prototype.Init = function () {
                };
                PurchaseRequisitionEditController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                PurchaseRequisitionEditController.$inject = [];
                return PurchaseRequisitionEditController;
            }());
            var PurchaseRequisitionEditComponentController = /** @class */ (function () {
                function PurchaseRequisitionEditComponentController() {
                    this.controller = PurchaseRequisitionEditController;
                    this.templateUrl = "/Scripts/App/Production/PurchaseRequisition/PurchaseRequisitionEdit/Template/_PurchaseRequisitionEdit.html";
                }
                PurchaseRequisitionEditComponentController.Name = "purchaserequisitioneditcomponent";
                return PurchaseRequisitionEditComponentController;
            }());
            app.AddComponent(PurchaseRequisitionEditComponentController.Name, new PurchaseRequisitionEditComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseRequisitionEditComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var PurchaseRequisitionEditController = /** @class */ (function (_super) {
            __extends(PurchaseRequisitionEditController, _super);
            function PurchaseRequisitionEditController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PurchaseRequisitionEditController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.PurchaseRequisitionEditController = PurchaseRequisitionEditController;
        app.AddController("PurchaseRequisitionEditController", PurchaseRequisitionEditController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseRequisitionEditController.js.map
//# sourceMappingURL=PurchaseRequisitionEditService.js.map
//# sourceMappingURL=PurchaseRequisitionViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var PurchaseRequisitionViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function PurchaseRequisitionViewController() {
                    this.IsShow = false;
                }
                PurchaseRequisitionViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                PurchaseRequisitionViewController.prototype.Init = function () {
                };
                PurchaseRequisitionViewController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                PurchaseRequisitionViewController.$inject = [];
                return PurchaseRequisitionViewController;
            }());
            var PurchaseRequisitionViewComponentController = /** @class */ (function () {
                function PurchaseRequisitionViewComponentController() {
                    this.controller = PurchaseRequisitionViewController;
                    this.templateUrl = "/Scripts/App/Production/PurchaseRequisition/PurchaseRequisitionView/Template/_PurchaseRequisitionView.html";
                }
                PurchaseRequisitionViewComponentController.Name = "purchaserequisitionviewcomponent";
                return PurchaseRequisitionViewComponentController;
            }());
            app.AddComponent(PurchaseRequisitionViewComponentController.Name, new PurchaseRequisitionViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseRequisitionViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var PurchaseRequisitionViewController = /** @class */ (function (_super) {
            __extends(PurchaseRequisitionViewController, _super);
            function PurchaseRequisitionViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PurchaseRequisitionViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.PurchaseRequisitionViewController = PurchaseRequisitionViewController;
        app.AddController("PurchaseRequisitionViewController", PurchaseRequisitionViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=PurchaseRequisitionViewController.js.map
//# sourceMappingURL=PurchaseRequisitionViewService.js.map
//# sourceMappingURL=DemandPlanListModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var DemandPlanListController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function DemandPlanListController() {
                    this.IsShow = false;
                }
                DemandPlanListController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                DemandPlanListController.prototype.Init = function () {
                };
                DemandPlanListController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                DemandPlanListController.$inject = [];
                return DemandPlanListController;
            }());
            var DemandPlanListComponentController = /** @class */ (function () {
                function DemandPlanListComponentController() {
                    this.controller = DemandPlanListController;
                    this.templateUrl = "/Scripts/App/Production/DemandPlan/DemandPlanList/Template/_DemandPlanList.html";
                }
                DemandPlanListComponentController.Name = "demandplanlistcomponent";
                return DemandPlanListComponentController;
            }());
            app.AddComponent(DemandPlanListComponentController.Name, new DemandPlanListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=DemandPlanListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var DemandPlanListController = /** @class */ (function (_super) {
            __extends(DemandPlanListController, _super);
            function DemandPlanListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return DemandPlanListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.DemandPlanListController = DemandPlanListController;
        app.AddController("DemandPlanListController", DemandPlanListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DemandPlanListController.js.map
//# sourceMappingURL=DemandPlanListService.js.map
//# sourceMappingURL=DemandPlanCreateModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var DemandPlanCreateController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function DemandPlanCreateController() {
                    this.IsShow = false;
                }
                DemandPlanCreateController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                DemandPlanCreateController.prototype.Init = function () {
                };
                DemandPlanCreateController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                DemandPlanCreateController.$inject = [];
                return DemandPlanCreateController;
            }());
            var DemandPlanCreateComponentController = /** @class */ (function () {
                function DemandPlanCreateComponentController() {
                    this.controller = DemandPlanCreateController;
                    this.templateUrl = "/Scripts/App/Production/DemandPlan/DemandPlanCreate/Template/_DemandPlanCreate.html";
                }
                DemandPlanCreateComponentController.Name = "demandplancreatecomponent";
                return DemandPlanCreateComponentController;
            }());
            app.AddComponent(DemandPlanCreateComponentController.Name, new DemandPlanCreateComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DemandPlanCreateComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var DemandPlanCreateController = /** @class */ (function (_super) {
            __extends(DemandPlanCreateController, _super);
            function DemandPlanCreateController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return DemandPlanCreateController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.DemandPlanCreateController = DemandPlanCreateController;
        app.AddController("DemandPlanCreateController", DemandPlanCreateController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DemandPlanCreateController.js.map
//# sourceMappingURL=DemandPlanCreateService.js.map
//# sourceMappingURL=DemandPlanEditModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var DemandPlanEditController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function DemandPlanEditController() {
                    this.IsShow = false;
                }
                DemandPlanEditController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                DemandPlanEditController.prototype.Init = function () {
                };
                DemandPlanEditController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                DemandPlanEditController.$inject = [];
                return DemandPlanEditController;
            }());
            var DemandPlanEditComponentController = /** @class */ (function () {
                function DemandPlanEditComponentController() {
                    this.controller = DemandPlanEditController;
                    this.templateUrl = "/Scripts/App/Production/DemandPlan/DemandPlanEdit/Template/_DemandPlanEdit.html";
                }
                DemandPlanEditComponentController.Name = "demandplaneditcomponent";
                return DemandPlanEditComponentController;
            }());
            app.AddComponent(DemandPlanEditComponentController.Name, new DemandPlanEditComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DemandPlanEditComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var DemandPlanEditController = /** @class */ (function (_super) {
            __extends(DemandPlanEditController, _super);
            function DemandPlanEditController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return DemandPlanEditController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.DemandPlanEditController = DemandPlanEditController;
        app.AddController("DemandPlanEditController", DemandPlanEditController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DemandPlanEditController.js.map
//# sourceMappingURL=DemandPlanEditService.js.map
//# sourceMappingURL=DemandPlanViewModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var DemandPlanViewController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function DemandPlanViewController() {
                    this.IsShow = false;
                }
                DemandPlanViewController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                DemandPlanViewController.prototype.Init = function () {
                };
                DemandPlanViewController.prototype.divshow = function (data) {
                    //$("#divhideshow").show();
                    this.IsShow = (data == "") ? false : true;
                };
                DemandPlanViewController.$inject = [];
                return DemandPlanViewController;
            }());
            var DemandPlanViewComponentController = /** @class */ (function () {
                function DemandPlanViewComponentController() {
                    this.controller = DemandPlanViewController;
                    this.templateUrl = "/Scripts/App/Production/DemandPlan/DemandPlanView/Template/_DemandPlanView.html";
                }
                DemandPlanViewComponentController.Name = "demandplanviewcomponent";
                return DemandPlanViewComponentController;
            }());
            app.AddComponent(DemandPlanViewComponentController.Name, new DemandPlanViewComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DemandPlanViewComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var DemandPlanViewController = /** @class */ (function (_super) {
            __extends(DemandPlanViewController, _super);
            function DemandPlanViewController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return DemandPlanViewController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.DemandPlanViewController = DemandPlanViewController;
        app.AddController("DemandPlanViewController", DemandPlanViewController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=DemandPlanViewController.js.map
//# sourceMappingURL=DemandPlanViewService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var CustomerByRegionGrid = /** @class */ (function () {
            function CustomerByRegionGrid() {
            }
            return CustomerByRegionGrid;
        }());
        Model.CustomerByRegionGrid = CustomerByRegionGrid;
        var CustomerByRegionSearch = /** @class */ (function () {
            function CustomerByRegionSearch() {
            }
            return CustomerByRegionSearch;
        }());
        Model.CustomerByRegionSearch = CustomerByRegionSearch;
        var CustomerByRegionAutoFill = /** @class */ (function () {
            function CustomerByRegionAutoFill() {
            }
            return CustomerByRegionAutoFill;
        }());
        Model.CustomerByRegionAutoFill = CustomerByRegionAutoFill;
        var StateList = /** @class */ (function () {
            function StateList() {
            }
            return StateList;
        }());
        Model.StateList = StateList;
        var DistrictList = /** @class */ (function () {
            function DistrictList() {
            }
            return DistrictList;
        }());
        Model.DistrictList = DistrictList;
        var RegionListDDL = /** @class */ (function () {
            function RegionListDDL() {
            }
            return RegionListDDL;
        }());
        Model.RegionListDDL = RegionListDDL;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerByRegionModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var CustomerByRegionController = /** @class */ (function () {
                function CustomerByRegionController(_CustomerByRegionService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.CustomerByRegionSearch = null;
                    this.CustomerByRegionGrid = null;
                    this.StateList = null;
                    this.DistrictList = null;
                    this.RegionList = null;
                    this.Cookie = null;
                    this.CustomerByRegionService = _CustomerByRegionService;
                    this.Cookie = _cookieStore;
                    this.CustomerByRegionSearch = new GCPL.Model.CustomerByRegionSearch();
                    this.CustomerByRegionGrid = new Array();
                    this.StateList = new Array();
                    this.DistrictList = new Array();
                    this.RegionList = new Array();
                }
                CustomerByRegionController.prototype.$onInit = function () {
                    this.Init();
                };
                CustomerByRegionController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    $('#txtCustomerName').autocomplete({
                        source: function (request, res) {
                            that.CustomerByRegionService.FindCustomer(request).then((function (response) {
                                var data = that.CustomerByRegionService.GetCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.CustomerByRegionSearch.CustomerID = ui.item.id;
                            console.log(that.CustomerByRegionSearch.CustomerID);
                        },
                        change: function () {
                        }
                    });
                    this.StateList = this.CustomerByRegionService.FindState().then((function (response) {
                        _this.StateList = _this.CustomerByRegionService.GetState(response.data.Result);
                    }));
                    this.RegionList = this.CustomerByRegionService.FindRegion().then((function (response) {
                        _this.RegionList = _this.CustomerByRegionService.GetRegionList(response.data.Result);
                    }));
                };
                CustomerByRegionController.prototype.District = function (data) {
                    var _this = this;
                    this.DistrictList = this.CustomerByRegionService.FindDistrict(this.CustomerByRegionSearch.StateID).then((function (response) {
                        _this.DistrictList = _this.CustomerByRegionService.GetDistrict(response.data.Result);
                    }));
                };
                CustomerByRegionController.prototype.Search = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                    //this.CustomerByRegionGrid = this.CustomerByRegionService.Find(this.CustomerByRegionSearch).then((response => {
                    //    this.CustomerByRegionGrid = this.CustomerByRegionService.GetCustomerByRegionGrid(response.data.Result);
                    //}));            
                };
                CustomerByRegionController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    console.log(this.CustomerByRegionSearch);
                    this.CustomerByRegionGrid = this.CustomerByRegionService.Find(this.CustomerByRegionSearch).then((function (response) {
                        _this.CustomerByRegionGrid = _this.CustomerByRegionService.GetCustomerByRegionGrid(response.data.Result);
                        debugger;
                        if (_this.CustomerByRegionGrid.length > 0) {
                            $("#nullDataDiv").hide();
                            _this.CustomerByRegionGrid.forEach(function (value, key) {
                                that.incre = parseInt(key) + 1;
                            });
                            _this.maxPages = (that.incre / that.numRecords);
                            _this.ShowBack = false;
                            _this.ShowNext = that.maxPages > 1 ? true : false;
                            _this.shownItems = _this.CustomerByRegionGrid.slice(0, that.numRecords);
                        }
                        else {
                            $("#nullDataDiv").show();
                        }
                    }));
                };
                CustomerByRegionController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                CustomerByRegionController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.CustomerByRegionGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                CustomerByRegionController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.CustomerByRegionGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                CustomerByRegionController.prototype.clear = function () {
                    this.CustomerByRegionSearch.CustomerID = "";
                    this.CustomerByRegionSearch.StateID = "";
                    this.CustomerByRegionSearch.DistrictID = "";
                    this.CustomerByRegionSearch.RegionID = "";
                    document.getElementById("txtCustomerName").value = "";
                    $("#ddlState").val("");
                    $("#ddlDistrict").val("");
                    $("#ddlRegion").val("");
                    this.DistrictList = "";
                };
                CustomerByRegionController.$inject = ["CustomerByRegionService", "$cookieStore"];
                return CustomerByRegionController;
            }());
            var CustomerByRegionComponentController = /** @class */ (function () {
                function CustomerByRegionComponentController() {
                    this.controller = CustomerByRegionController;
                    this.templateUrl = "/Scripts/App/Reports/CustomerByRegion/Template/_CustomerByRegion.html";
                }
                CustomerByRegionComponentController.Name = "customerbyregioncomponent";
                return CustomerByRegionComponentController;
            }());
            app.AddComponent(CustomerByRegionComponentController.Name, new CustomerByRegionComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerByRegionComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var CustomerByRegionController = /** @class */ (function (_super) {
            __extends(CustomerByRegionController, _super);
            function CustomerByRegionController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CustomerByRegionController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.CustomerByRegionController = CustomerByRegionController;
        app.AddController("CustomerByRegionController", CustomerByRegionController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerByRegionController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var CustomerByRegionService = /** @class */ (function (_super) {
            __extends(CustomerByRegionService, _super);
            function CustomerByRegionService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            CustomerByRegionService.prototype.Find = function (data) {
                var url = this.apiUrl + "/CustomerByRegion";
                var CustomerName;
                var StateID;
                var DistrictID;
                var RegionID;
                debugger;
                if (data.CustomerID == undefined) {
                    CustomerName = '';
                }
                else {
                    CustomerName = data.CustomerID;
                }
                if (data.StateID == undefined) {
                    StateID = '';
                }
                else {
                    StateID = data.StateID;
                }
                if (data.DistrictID == undefined) {
                    DistrictID = '';
                }
                else {
                    DistrictID = data.DistrictID;
                }
                if (data.RegionID == undefined) {
                    RegionID = '';
                }
                else {
                    RegionID = data.RegionID;
                }
                var config = {
                    params: {
                        CustomerName: CustomerName,
                        StateID: StateID,
                        DistrictID: DistrictID,
                        RegionID: RegionID,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            CustomerByRegionService.prototype.GetCustomerByRegionGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        CustomerName: item.CustomerName,
                        State: item.State,
                        District: item.District,
                        RegionName: item.RegionName
                    });
                }
                return list;
            };
            CustomerByRegionService.prototype.FindCustomer = function (data) {
                var url = this.apiUrl + "/CustomerNameAutoFill";
                var config = {
                    params: {
                        CustomerName: data.term,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            CustomerByRegionService.prototype.GetCustomer = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        CustomerName: item.CustomerName,
                        CustomerID: item.CustomerID
                    });
                }
                return list;
            };
            CustomerByRegionService.prototype.FindState = function () {
                var url = this.apiUrl + "/Statectrl";
                var config = {
                    params: {}
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            CustomerByRegionService.prototype.GetState = function (data) {
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        StateID: item.Region_Code,
                        State: item.State
                    });
                }
                return list;
            };
            CustomerByRegionService.prototype.FindDistrict = function (data) {
                var url = this.apiUrl + "/Districtctrl";
                var config = {
                    params: {
                        StateId: data
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            CustomerByRegionService.prototype.GetDistrict = function (data) {
                var list = Array();
                for (var _i = 0, data_4 = data; _i < data_4.length; _i++) {
                    var item = data_4[_i];
                    list.push({
                        DistrictID: item.CityCode,
                        District: item.Name,
                    });
                }
                return list;
            };
            CustomerByRegionService.prototype.FindRegion = function () {
                var url = this.apiUrl + "/CustomerByRegion";
                var config = {
                    params: {
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            CustomerByRegionService.prototype.GetRegionList = function (data) {
                var list = Array();
                for (var _i = 0, data_5 = data; _i < data_5.length; _i++) {
                    var item = data_5[_i];
                    list.push({
                        RegionName: item.RegionName,
                        RegionID: item.RegionID
                    });
                }
                return list;
            };
            CustomerByRegionService.$inject = ["$http", "$q", "$cookieStore"];
            return CustomerByRegionService;
        }(GCPL.Service.BaseService));
        Service.CustomerByRegionService = CustomerByRegionService;
        app.AddService("CustomerByRegionService", CustomerByRegionService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerByRegionService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var TotalIDQPstage = /** @class */ (function () {
            function TotalIDQPstage() {
            }
            return TotalIDQPstage;
        }());
        Model.TotalIDQPstage = TotalIDQPstage;
        var Search = /** @class */ (function () {
            function Search() {
            }
            return Search;
        }());
        Model.Search = Search;
        var TotalWonLoss = /** @class */ (function () {
            function TotalWonLoss() {
            }
            return TotalWonLoss;
        }());
        Model.TotalWonLoss = TotalWonLoss;
        var Tile1stforlead = /** @class */ (function () {
            function Tile1stforlead() {
            }
            return Tile1stforlead;
        }());
        Model.Tile1stforlead = Tile1stforlead;
        var Tile2ndforlead = /** @class */ (function () {
            function Tile2ndforlead() {
            }
            return Tile2ndforlead;
        }());
        Model.Tile2ndforlead = Tile2ndforlead;
        //chart
        var IDQPstagePieChart = /** @class */ (function () {
            function IDQPstagePieChart() {
            }
            return IDQPstagePieChart;
        }());
        Model.IDQPstagePieChart = IDQPstagePieChart;
        var winlossLineChart = /** @class */ (function () {
            function winlossLineChart() {
            }
            return winlossLineChart;
        }());
        Model.winlossLineChart = winlossLineChart;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=LeadDashboardModel.js.map
/// <reference path="../../../../typings/chartjs/chart.d.ts" />
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var Totalstage = GCPL.Model.TotalIDQPstage;
            var WonLoss = GCPL.Model.TotalWonLoss;
            var LeadDashboardController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function LeadDashboardController(_IQDPService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.IDQPstage = null;
                    this.WonLossGrid = null;
                    this.LeadSearch = null;
                    this.firstTile = null;
                    this.secondTile = null;
                    this.Chart = null;
                    this.Iqdppiechart = null;
                    this.WinlossLinechart = null;
                    this.Cookie = null;
                    this.IQDPService = _IQDPService;
                    this.Cookie = _cookieStore;
                    this.IDQPstage = new Totalstage();
                    this.LeadSearch = new GCPL.Model.Search();
                    this.WonLossGrid = new WonLoss();
                    this.firstTile = new GCPL.Model.Tile1stforlead();
                    this.secondTile = new Array();
                    this.Iqdppiechart = new Array();
                    this.WinlossLinechart = new Array();
                }
                LeadDashboardController.prototype.$onInit = function () {
                    var _this = this;
                    this.Init();
                    debugger;
                    this.LeadSearch.Period = '-1';
                    this.IQDPService.FindIQDPStagetotal(this.LeadSearch).then((function (response) {
                        _this.IDQPstage = _this.IQDPService.GetIQDPStageTotal(response.data.Result);
                    }));
                    this.IQDPService.FindWonLosstotal(this.LeadSearch).then((function (response) {
                        _this.WonLossGrid = _this.IQDPService.GetWonLossTotal(response.data.Result);
                        document.getElementById("showTable").innerHTML = _this.WonLossGrid.LeadWonLoss;
                    }));
                    this.IQDPService.Find1stTile(this.LeadSearch).then((function (response) {
                        _this.firstTile = _this.IQDPService.Get1stTile(response.data.Result);
                    }));
                    this.IQDPService.Find2ndTile(this.LeadSearch).then((function (response) {
                        _this.secondTile = _this.IQDPService.Get2ndTile(response.data.Result);
                    }));
                    //chart
                    this.IQDPService.Findpiechart(this.LeadSearch).then((function (response) {
                        _this.Iqdppiechart = _this.IQDPService.Getpiechart(response.data.Result);
                        var xArray = [];
                        var yArray = [];
                        for (var i = 0; i < _this.Iqdppiechart.length; i++) {
                            //  $.each(this.Chart, function (index, value) {
                            xArray.push(_this.Iqdppiechart[i].label.substring(0, 3));
                            yArray.push(_this.Iqdppiechart[i].value, _this.Iqdppiechart[i].color, _this.Iqdppiechart[i].Highlightcolor);
                        }
                        _this.PieChart(xArray, yArray);
                    }));
                    //linechart
                    this.IQDPService.Findlinechart(this.LeadSearch).then((function (response) {
                        _this.WinlossLinechart = _this.IQDPService.Getlinechart(response.data.Result);
                        var xArray = [];
                        var yArray = [];
                        //  var zArray = [];
                        for (var i = 0; i < _this.WinlossLinechart.length; i++) {
                            xArray.push(_this.WinlossLinechart[i].LeadStatus); //.substring(0, 3));
                            yArray.push(_this.WinlossLinechart[i].LeadCount);
                            //zArray.push(this.WinlossLinechart[i].LeadStatus);
                        }
                        _this.BarChart(xArray, yArray);
                    }));
                };
                //Page Load Define Values//
                LeadDashboardController.prototype.Init = function () {
                };
                LeadDashboardController.prototype.Search = function () {
                    var _this = this;
                    console.log(this.LeadSearch);
                    this.IQDPService.FindIQDPStagetotal(this.LeadSearch).then((function (response) {
                        _this.IDQPstage = _this.IQDPService.GetIQDPStageTotal(response.data.Result);
                    }));
                    this.IQDPService.FindWonLosstotal(this.LeadSearch).then((function (response) {
                        _this.WonLossGrid = _this.IQDPService.GetWonLossTotal(response.data.Result);
                        document.getElementById("showTable").innerHTML = _this.WonLossGrid.LeadWonLoss;
                    }));
                    this.IQDPService.Find1stTile(this.LeadSearch).then((function (response) {
                        _this.firstTile = _this.IQDPService.Get1stTile(response.data.Result);
                    }));
                    this.IQDPService.Find2ndTile(this.LeadSearch).then((function (response) {
                        _this.secondTile = _this.IQDPService.Get2ndTile(response.data.Result);
                    }));
                    //chart
                    this.IQDPService.Findpiechart(this.LeadSearch).then((function (response) {
                        _this.Iqdppiechart = _this.IQDPService.Getpiechart(response.data.Result);
                        var xArray = [];
                        var yArray = [];
                        for (var i = 0; i < _this.Iqdppiechart.length; i++) {
                            //  $.each(this.Chart, function (index, value) {
                            xArray.push(_this.Iqdppiechart[i].label.substring(0, 3));
                            yArray.push(_this.Iqdppiechart[i].value, _this.Iqdppiechart[i].color, _this.Iqdppiechart[i].Highlightcolor);
                        }
                        _this.PieChart(xArray, yArray);
                    }));
                    //linechart
                    this.IQDPService.Findlinechart(this.LeadSearch).then((function (response) {
                        debugger;
                        _this.WinlossLinechart = _this.IQDPService.Getlinechart(response.data.Result);
                        var xArray = [];
                        var yArray = [];
                        //  var zArray = [];
                        for (var i = 0; i < _this.WinlossLinechart.length; i++) {
                            xArray.push(_this.WinlossLinechart[i].LeadStatus); //.substring(0, 3));
                            yArray.push(_this.WinlossLinechart[i].LeadCount);
                            //zArray.push(this.WinlossLinechart[i].LeadStatus);
                        }
                        console.log("barchartdata");
                        console.log(xArray);
                        console.log(yArray);
                        _this.BarChart(xArray, yArray);
                    }));
                };
                LeadDashboardController.prototype.BarChart = function (xArray, yArray) {
                    debugger;
                    var canvas = document.getElementById('BarchartWinLoss');
                    var ctx2 = canvas.getContext('2d');
                    var barData1 = {
                        labels: xArray,
                        datasets: [
                            {
                                label: "Funnel Data",
                                fillColor: "#42A5F5",
                                strokeColor: "#1E88E5",
                                highlightFill: "#42A5F5",
                                highlightStroke: "rgba(220,220,220,1)",
                                data: yArray
                            }
                        ]
                    };
                    //var myChart = new Chart(ctx2);
                    //var a=myChart.Bar(barData1,
                    var myBarChart = new Chart(ctx2).Bar(barData1, {
                        scaleBeginAtZero: true,
                        scaleShowGridLines: true,
                        scaleGridLineColor: "rgba(0,0,0,.05)",
                        scaleGridLineWidth: 1,
                        barShowStroke: true,
                        barStrokeWidth: 2,
                        barValueSpacing: 8,
                        barDatasetSpacing: 10,
                        legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"
                    });
                    var myBarChartLegend = myBarChart.generateLegend();
                    var myBarChartImage = myBarChart.toBase64Image();
                };
                LeadDashboardController.prototype.PieChart = function (xArray, yArray) {
                    var canvaspie = document.getElementById('pieIQDPchart');
                    var ctx2 = canvaspie.getContext('2d');
                    var dataArray = ([]);
                    var tableauDataPoints = [];
                    for (var i = 0; i < this.Iqdppiechart.length; i++) {
                        tableauDataPoints.push({ value: parseInt(this.Iqdppiechart[i].value), color: this.Iqdppiechart[i].color, highlight: this.Iqdppiechart[i].Highlightcolor, label: this.Iqdppiechart[i].label });
                    }
                    var myPieChart = new Chart(ctx2).Pie(tableauDataPoints, {
                        segmentShowStroke: true,
                        segmentStrokeColor: "#fff",
                        segmentStrokeWidth: 2,
                        percentageInnerCutout: 0,
                        animationSteps: 100,
                        animationEasing: "easeOutQuint",
                        animateRotate: true,
                        animateScale: false,
                        legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>"
                    });
                    var myPieChartLegend = myPieChart.generateLegend();
                    var myPieChartImage = myPieChart.toBase64Image();
                };
                LeadDashboardController.$inject = ["IQDPstageService", "$cookieStore"];
                return LeadDashboardController;
            }());
            var LeadDashboardComponentController = /** @class */ (function () {
                function LeadDashboardComponentController() {
                    this.controller = LeadDashboardController;
                    this.templateUrl = "/Scripts/App/Dashboard/LeadsDashboard/Template/_LeadDashboard.html";
                }
                LeadDashboardComponentController.Name = "leaddashboardcomponent";
                return LeadDashboardComponentController;
            }());
            app.AddComponent(LeadDashboardComponentController.Name, new LeadDashboardComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=LeadDashboardComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var LeadDashboardController = /** @class */ (function (_super) {
            __extends(LeadDashboardController, _super);
            function LeadDashboardController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return LeadDashboardController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.LeadDashboardController = LeadDashboardController;
        app.AddController("LeadDashboardController", LeadDashboardController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=LeadDashboardController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var IQDPstageService = /** @class */ (function (_super) {
            __extends(IQDPstageService, _super);
            function IQDPstageService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            IQDPstageService.prototype.FindIQDPStagetotal = function (data) {
                var url = this.apiUrl + "/Leaddashboard";
                var config = {
                    params: {
                        Period: data.Period,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                        //SearchInput: this.Cookie.get('UserInfo')['UserID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            IQDPstageService.prototype.GetIQDPStageTotal = function (data) {
                console.log(data);
                var list = new model.TotalIDQPstage();
                if (data == null || data == undefined) {
                    list.Total = "";
                    list.Enquiry = "";
                    list.Qualification = "";
                    list.Development = "";
                    list.Proposal = "";
                }
                else {
                    list.Total = data.Total;
                    list.Enquiry = data.Enquiry;
                    list.Qualification = data.Qualification;
                    list.Development = data.Development;
                    list.Proposal = data.Proposal;
                    //console.log(list);
                }
                return list;
            };
            IQDPstageService.prototype.FindWonLosstotal = function (data) {
                var url = this.apiUrl + "/WonLoss";
                var config = {
                    params: {
                        Period: data.Period,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                        //SearchInput: this.Cookie.get('UserInfo')['UserID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            IQDPstageService.prototype.GetWonLossTotal = function (data) {
                console.log(data);
                var list = new model.TotalWonLoss();
                if (data == null || data == undefined) {
                    list.LeadWonLoss = "";
                }
                else {
                    list.LeadWonLoss = data.LeadWonLoss;
                }
                return list;
            };
            IQDPstageService.prototype.Find1stTile = function (data) {
                var url = this.apiUrl + "/DashboardTiles";
                var config = {
                    params: {
                        Period: data.Period,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                        //SearchInput: this.Cookie.get('UserInfo')['UserID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            IQDPstageService.prototype.Get1stTile = function (data) {
                console.log(data);
                var list = new model.Tile1stforlead();
                if (data == null || data == undefined) {
                    list.TotalLeadCreated = "";
                    list.Won = "";
                    list.Lost = "";
                    list.Totalratio = "";
                }
                else {
                    list.TotalLeadCreated = data.TotalLeadCreated;
                    list.Won = data.Won;
                    list.Lost = data.Lost;
                    list.Totalratio = data.Totalratio;
                    //console.log(list);
                }
                return list;
            };
            IQDPstageService.prototype.Find2ndTile = function (data) {
                var url = this.apiUrl + "/DashboardTilesNewCust";
                var config = {
                    params: {
                        Period: data.Period,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                        //SearchInput: this.Cookie.get('UserInfo')['UserID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            IQDPstageService.prototype.Get2ndTile = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        TotalVisit: item.TotalVisit,
                        New: item.New,
                        Lead: item.Lead,
                        Totalratio: item.Totalratio
                    });
                }
                return list;
            };
            IQDPstageService.prototype.Findpiechart = function (data) {
                var url = this.apiUrl + "/DashboardForPieChart";
                var config = {
                    params: {
                        Period: data.Period,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                        //SearchInput: this.Cookie.get('UserInfo')['UserID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            IQDPstageService.prototype.Getpiechart = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        label: item.SalesStageName,
                        value: item.LeadCount,
                        color: item.color,
                        Highlightcolor: item.Highlightcolor
                    });
                }
                return list;
            };
            IQDPstageService.prototype.Findlinechart = function (data) {
                var url = this.apiUrl + "/DashboardForLineChart";
                var config = {
                    params: {
                        Period: data.Period,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                        //SearchInput: this.Cookie.get('UserInfo')['UserID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            IQDPstageService.prototype.Getlinechart = function (data) {
                var list = Array();
                debugger;
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        LeadStatus: item.LeadStatus,
                        // Month: item.Month,
                        LeadCount: item.LeadCount
                    });
                }
                return list;
            };
            IQDPstageService.$inject = ["$http", "$q", "$cookieStore"];
            return IQDPstageService;
        }(GCPL.Service.BaseService));
        Service.IQDPstageService = IQDPstageService;
        app.AddService("IQDPstageService", IQDPstageService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=LeadDashboardService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var LeadGrid1st = /** @class */ (function () {
            function LeadGrid1st() {
            }
            return LeadGrid1st;
        }());
        Model.LeadGrid1st = LeadGrid1st;
        var LeadGrid2nd = /** @class */ (function () {
            function LeadGrid2nd() {
            }
            return LeadGrid2nd;
        }());
        Model.LeadGrid2nd = LeadGrid2nd;
        var LeadGrid3rd = /** @class */ (function () {
            function LeadGrid3rd() {
            }
            return LeadGrid3rd;
        }());
        Model.LeadGrid3rd = LeadGrid3rd;
        var LeadGrid4th = /** @class */ (function () {
            function LeadGrid4th() {
            }
            return LeadGrid4th;
        }());
        Model.LeadGrid4th = LeadGrid4th;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=LeadSaleDashboardModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var LeadSaleDashBoardController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function LeadSaleDashBoardController(_LeadSaleService, _cookieStore) {
                    this._cookieStore = _cookieStore;
                    this.LeadSearch = null;
                    this.Lead1stGrid = null;
                    this.Lead2ndGrid = null;
                    this.Lead3rdGrid = null;
                    this.Lead4thGrid = null;
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.LeadSaleService = _LeadSaleService;
                    this.LeadSearch = new GCPL.Model.Search();
                    this.Lead1stGrid = new Array();
                    this.Lead2ndGrid = new Array();
                    this.Lead3rdGrid = new Array();
                    this.Lead4thGrid = new GCPL.Model.LeadGrid4th();
                }
                LeadSaleDashBoardController.prototype.$onInit = function () {
                    var _this = this;
                    this.Init();
                    debugger;
                    this.LeadSearch.Period = '-1';
                    this.LeadSaleService.FindGrid1list(this.LeadSearch).then((function (response) {
                        _this.Lead1stGrid = _this.LeadSaleService.Getgrid1list(response.data.Result);
                    }));
                    this.LeadSaleService.FindGrid2list(this.LeadSearch).then((function (response) {
                        _this.Lead2ndGrid = _this.LeadSaleService.Getgrid2list(response.data.Result);
                    }));
                    this.LeadSaleService.FindGrid3list(this.LeadSearch).then((function (response) {
                        _this.Lead3rdGrid = _this.LeadSaleService.Getgrid3list(response.data.Result);
                    }));
                    this.LeadSaleService.FindGrid4list(this.LeadSearch).then((function (response) {
                        _this.Lead4thGrid = _this.LeadSaleService.Getgrid4list(response.data.Result);
                        document.getElementById("showTable").innerHTML = _this.Lead4thGrid.LeadExpense;
                    }));
                };
                //Page Load Define Values//
                LeadSaleDashBoardController.prototype.Init = function () {
                };
                LeadSaleDashBoardController.prototype.Search = function () {
                    var _this = this;
                    this.LeadSaleService.FindGrid1list(this.LeadSearch).then((function (response) {
                        _this.Lead1stGrid = _this.LeadSaleService.Getgrid1list(response.data.Result);
                    }));
                    this.LeadSaleService.FindGrid2list(this.LeadSearch).then((function (response) {
                        _this.Lead2ndGrid = _this.LeadSaleService.Getgrid2list(response.data.Result);
                    }));
                    this.LeadSaleService.FindGrid3list(this.LeadSearch).then((function (response) {
                        _this.Lead3rdGrid = _this.LeadSaleService.Getgrid3list(response.data.Result);
                    }));
                    this.LeadSaleService.FindGrid4list(this.LeadSearch).then((function (response) {
                        _this.Lead4thGrid = _this.LeadSaleService.Getgrid4list(response.data.Result);
                        document.getElementById("showTable").innerHTML = _this.Lead4thGrid.LeadExpense;
                    }));
                };
                LeadSaleDashBoardController.$inject = ["LeadSaleDashBoardService", "$cookieStore"];
                return LeadSaleDashBoardController;
            }());
            var LeadSaleDashBoardComponentController = /** @class */ (function () {
                function LeadSaleDashBoardComponentController() {
                    this.controller = LeadSaleDashBoardController;
                    this.templateUrl = "/Scripts/App/Dashboard/LeadSalesdashboard/Template/LeadSaleDashboard.html";
                }
                LeadSaleDashBoardComponentController.Name = "leadsaledashboardcomponent";
                return LeadSaleDashBoardComponentController;
            }());
            app.AddComponent(LeadSaleDashBoardComponentController.Name, new LeadSaleDashBoardComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=LeadSaleDashboardComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var LeadSaleDashboardController = /** @class */ (function (_super) {
            __extends(LeadSaleDashboardController, _super);
            function LeadSaleDashboardController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return LeadSaleDashboardController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.LeadSaleDashboardController = LeadSaleDashboardController;
        app.AddController("LeadSaleDashboardController", LeadSaleDashboardController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=LeadSaleDashboardController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var LeadSaleDashBoardService = /** @class */ (function (_super) {
            __extends(LeadSaleDashBoardService, _super);
            function LeadSaleDashBoardService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            LeadSaleDashBoardService.prototype.FindGrid1list = function (data) {
                var url = this.apiUrl + "/LeadSale1st";
                debugger;
                var config = {
                    params: {
                        Period: data.Period,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                        //SearchInput: this.Cookie.get('UserInfo')['UserID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            LeadSaleDashBoardService.prototype.Getgrid1list = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        Created: item.Created,
                        Allocated: item.Allocated,
                        Inprocess: item.Inprocess,
                        Closed: item.Closed,
                        NoDeal: item.NoDeal,
                        SalesRep: item.SalesRep
                    });
                }
                return list;
            };
            LeadSaleDashBoardService.prototype.FindGrid2list = function (data) {
                var url = this.apiUrl + "/LeadSale2nd";
                debugger;
                var config = {
                    params: {
                        Period: data.Period,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                        //SearchInput: this.Cookie.get('UserInfo')['UserID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            LeadSaleDashBoardService.prototype.Getgrid2list = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        SalesRep: item.SalesRep,
                        Enquiry: item.Enquiry,
                        Inprocess: item.Inprocess,
                        Qualification: item.Qualification,
                        Devlopment: item.Devlopment,
                        Proposal: item.Proposal
                    });
                }
                return list;
            };
            LeadSaleDashBoardService.prototype.FindGrid3list = function (data) {
                var url = this.apiUrl + "/LeadSale3rd";
                debugger;
                var config = {
                    params: {
                        Period: data.Period,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                        //SearchInput: this.Cookie.get('UserInfo')['UserID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            LeadSaleDashBoardService.prototype.Getgrid3list = function (data) {
                var list = Array();
                for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                    var item = data_3[_i];
                    list.push({
                        SalesRep: item.SalesRep,
                        FTCVisit: item.FTCVisit,
                        TotalVisits: item.TotalVisits,
                        UniqueVisit: item.UniqueVisit,
                        ExistingCustVisits: item.ExistingCustVisits
                    });
                }
                return list;
            };
            LeadSaleDashBoardService.prototype.FindGrid4list = function (data) {
                var url = this.apiUrl + "/LeadSale4th";
                debugger;
                var config = {
                    params: {
                        Period: data.Period,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                        //SearchInput: this.Cookie.get('UserInfo')['UserID'],
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            LeadSaleDashBoardService.prototype.Getgrid4list = function (data) {
                var list = new model.LeadGrid4th();
                if (data == null || data == undefined) {
                    list.LeadExpense = "";
                }
                else {
                    list.LeadExpense = data.LeadExpense;
                    //console.log(list);
                }
                return list;
            };
            LeadSaleDashBoardService.$inject = ["$http", "$q", "$cookieStore"];
            return LeadSaleDashBoardService;
        }(GCPL.Service.BaseService));
        Service.LeadSaleDashBoardService = LeadSaleDashBoardService;
        app.AddService("LeadSaleDashBoardService", LeadSaleDashBoardService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=LeadSaleDashboardService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var ExpenseHeaderGird = /** @class */ (function () {
            function ExpenseHeaderGird() {
            }
            return ExpenseHeaderGird;
        }());
        Model.ExpenseHeaderGird = ExpenseHeaderGird;
        var ExpenseTransportItems = /** @class */ (function () {
            function ExpenseTransportItems() {
            }
            return ExpenseTransportItems;
        }());
        Model.ExpenseTransportItems = ExpenseTransportItems;
        var ExpenseFoodItems = /** @class */ (function () {
            function ExpenseFoodItems() {
            }
            return ExpenseFoodItems;
        }());
        Model.ExpenseFoodItems = ExpenseFoodItems;
        var ExpenseLodgingItems = /** @class */ (function () {
            function ExpenseLodgingItems() {
            }
            return ExpenseLodgingItems;
        }());
        Model.ExpenseLodgingItems = ExpenseLodgingItems;
        var ExpenseMonthlyItems = /** @class */ (function () {
            function ExpenseMonthlyItems() {
            }
            return ExpenseMonthlyItems;
        }());
        Model.ExpenseMonthlyItems = ExpenseMonthlyItems;
        var ExpenseItems = /** @class */ (function () {
            function ExpenseItems() {
            }
            return ExpenseItems;
        }());
        Model.ExpenseItems = ExpenseItems;
        var UpdateExpenseHeader = /** @class */ (function () {
            function UpdateExpenseHeader() {
            }
            return UpdateExpenseHeader;
        }());
        Model.UpdateExpenseHeader = UpdateExpenseHeader;
        var UserAdvanceAmount = /** @class */ (function () {
            function UserAdvanceAmount() {
            }
            return UserAdvanceAmount;
        }());
        Model.UserAdvanceAmount = UserAdvanceAmount;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ExpenseApprovalModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ExpenseHeaderUpdates = GCPL.Model.UpdateExpenseHeader;
            var ExpenseApprovalController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ExpenseApprovalController(_cookieStore, _ExpenseApprovalService) {
                    this._cookieStore = _cookieStore;
                    this._ExpenseApprovalService = _ExpenseApprovalService;
                    this.ExpenseHeaderList = null;
                    this.ExpenseItemsList = null;
                    this.ExpenseHeaderUpdate = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = "10";
                    this.UserID = null;
                    this.alert = null;
                    this.DealerID = null;
                    this.imgSrc = null;
                    this.PostID = null;
                    this.PostType = null;
                    this.Changestatus = false;
                    this.showManager = false;
                    this.showFinance = false;
                    this.ChangePaymentstatus = false;
                    this.DisplayTotalAmount = null;
                    this.UserAdvanceAmount = null;
                    this.DisplayAdvanceAmount = null;
                    this.DueToCompany = null;
                    this.DueToEmployee = null;
                    //Services
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.ExpenseApprovalService = _ExpenseApprovalService;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.ExpenseHeaderList = new Array();
                    this.ExpenseItemsList = new Array();
                    this.ExpenseHeaderUpdate = new ExpenseHeaderUpdates();
                }
                ExpenseApprovalController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ExpenseApprovalController.prototype.Init = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                //FillGrid
                ExpenseApprovalController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.ExpenseHeaderList = this.ExpenseApprovalService.FindExpenseHeaderList(this.DealerID).then((function (response) {
                        _this.ExpenseHeaderList = _this.ExpenseApprovalService.GetExpenseHeaderList(response.data.Result.list);
                        _this.ExpenseHeaderList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.ExpenseHeaderList.slice(0, that.numRecords);
                    }));
                };
                ExpenseApprovalController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ExpenseHeaderList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                ExpenseApprovalController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ExpenseHeaderList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                ExpenseApprovalController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                ExpenseApprovalController.prototype.showData = function (item) {
                    var _this = this;
                    this.ExpenseItemsList = null;
                    if (item.Status === "Created") {
                        this.Changestatus = true;
                        this.showManager = true;
                        this.showFinance = false;
                    }
                    else {
                        this.Changestatus = false;
                        this.showManager = false;
                    }
                    //if (item.Status === "Approved") {
                    //    this.ChangePaymentstatus = true;
                    //    this.showManager = false;
                    //    this.showFinance = true;
                    //    this.Changestatus = false;
                    //}
                    //else {
                    //    this.ChangePaymentstatus = false;
                    //    this.showFinance = false;
                    //}
                    this.ExpenseHeaderUpdate.DealerID = this.DealerID;
                    this.DisplayTotalAmount = item.TotalAmount;
                    this.ExpenseHeaderUpdate.DealerID = this.DealerID;
                    this.PostID = item.ID;
                    this.ExpenseApprovalService.FindExpenseItems(item.ID, this.DealerID).then((function (response) {
                        _this.ExpenseItemsList = _this.ExpenseApprovalService.GetExpenseItems(response.data.Result);
                        console.log(_this.ExpenseItemsList);
                    }));
                    this.ExpenseApprovalService.FindUserAdvanceAmount(item.UserID, this.DealerID).then((function (response) {
                        _this.UserAdvanceAmount = _this.ExpenseApprovalService.GetUserAdvanceAmount(response.data.Result);
                        var AdvanceAmount = _this.UserAdvanceAmount.AdvanceTaken;
                        var ExpenseAmount = item.TotalAmount;
                        var difference = (parseInt(AdvanceAmount) - parseInt(ExpenseAmount));
                        if (difference > 0) {
                            //due to company
                            _this.DueToCompany = difference;
                            _this.DueToEmployee = 0;
                        }
                        else {
                            //due to Employee
                            _this.DueToCompany = 0;
                            difference = (difference * -1);
                            _this.DueToEmployee = difference;
                        }
                    }));
                };
                ExpenseApprovalController.prototype.setSrc = function (src) {
                    this.imgSrc = src;
                };
                //Manager APproval
                ExpenseApprovalController.prototype.approveBtn = function () {
                    var _this = this;
                    this.ExpenseHeaderUpdate.ID = this.PostID;
                    this.ExpenseHeaderUpdate.ApprovedBy = this.UserID;
                    this.ExpenseHeaderUpdate.StatementType = "Approve";
                    this.ExpenseApprovalService.UpdateExpenseHeader(this.ExpenseHeaderUpdate).then((function (response) {
                        if ((response.data.Result) === "Success Approve") {
                            _this.ExpenseHeaderUpdate.ManagerComments = "";
                            _this.alert = "Request has been Approved.";
                            _this.numRecords = parseInt(_this.NoOfRds);
                            _this.FillGrid(_this.numRecords);
                        }
                        else {
                            _this.alert = "Some Error Occured";
                            _this.ExpenseHeaderUpdate.ManagerComments = "";
                        }
                    }));
                };
                //Manager Reject
                ExpenseApprovalController.prototype.rejectBtn = function () {
                    var _this = this;
                    this.ExpenseHeaderUpdate.ID = this.PostID;
                    this.ExpenseHeaderUpdate.StatementType = "Reject";
                    this.ExpenseHeaderUpdate.ApprovedBy = this.UserID;
                    this.ExpenseHeaderUpdate.PaymentComments = "";
                    this.ExpenseApprovalService.UpdateExpenseHeader(this.ExpenseHeaderUpdate).then((function (response) {
                        if ((response.data.Result) === "Success Reject") {
                            _this.ExpenseHeaderUpdate.ManagerComments = "";
                            _this.alert = "Request has been rejected.";
                            _this.numRecords = parseInt(_this.NoOfRds);
                            _this.FillGrid(_this.numRecords);
                        }
                        else {
                            _this.alert = "Some Error Occured";
                            _this.ExpenseHeaderUpdate.ManagerComments = "";
                        }
                    }));
                };
                //Approve Payment
                ExpenseApprovalController.prototype.approvePBtn = function () {
                    var _this = this;
                    this.ExpenseHeaderUpdate.ID = this.PostID;
                    this.ExpenseHeaderUpdate.StatementType = "PaymentApprove";
                    this.ExpenseHeaderUpdate.PaidBy = this.UserID;
                    this.ExpenseHeaderUpdate.ManagerComments = "";
                    this.ExpenseApprovalService.UpdateExpenseHeader(this.ExpenseHeaderUpdate).then((function (response) {
                        if ((response.data.Result) === "Success PaymentApprove") {
                            _this.ExpenseHeaderUpdate.PaymentComments = "";
                            _this.alert = "Payment has been Approved.";
                            _this.numRecords = parseInt(_this.NoOfRds);
                            _this.FillGrid(_this.numRecords);
                        }
                        else {
                            _this.alert = "Some Error Occured";
                            _this.ExpenseHeaderUpdate.PaymentComments = "";
                        }
                    }));
                };
                //Reject Payment
                ExpenseApprovalController.prototype.rejectPBtn = function () {
                    var _this = this;
                    this.ExpenseHeaderUpdate.ID = this.PostID;
                    this.ExpenseHeaderUpdate.StatementType = "PaymentReject";
                    this.ExpenseHeaderUpdate.PaidBy = this.UserID;
                    this.ExpenseHeaderUpdate.ManagerComments = "";
                    this.ExpenseApprovalService.UpdateExpenseHeader(this.ExpenseHeaderUpdate).then((function (response) {
                        if ((response.data.Result) === "Success PaymentReject") {
                            _this.ExpenseHeaderUpdate.PaymentComments = "";
                            _this.alert = "Payment has been rejected.";
                            _this.numRecords = parseInt(_this.NoOfRds);
                            _this.FillGrid(_this.numRecords);
                        }
                        else {
                            _this.alert = "Some Error Occured";
                            _this.ExpenseHeaderUpdate.PaymentComments = "";
                        }
                    }));
                };
                ExpenseApprovalController.$inject = ["$cookieStore", "ExpenseApprovalService"];
                return ExpenseApprovalController;
            }());
            var ExpenseApprovalComponentController = /** @class */ (function () {
                function ExpenseApprovalComponentController() {
                    this.controller = ExpenseApprovalController;
                    this.templateUrl = "/Scripts/App/ExpenseModule/ExpenseApproval/Template/ExpenseApproval.html";
                }
                ExpenseApprovalComponentController.Name = "expenseapprovalcomponent";
                return ExpenseApprovalComponentController;
            }());
            app.AddComponent(ExpenseApprovalComponentController.Name, new ExpenseApprovalComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=ExpenseApprovalComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ExpenseApprovalController = /** @class */ (function (_super) {
            __extends(ExpenseApprovalController, _super);
            function ExpenseApprovalController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ExpenseApprovalController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ExpenseApprovalController = ExpenseApprovalController;
        app.AddController("ExpenseApprovalController", ExpenseApprovalController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ExpenseApprovalController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var model = GCPL.Model;
        var ExpenseApprovalService = /** @class */ (function (_super) {
            __extends(ExpenseApprovalService, _super);
            function ExpenseApprovalService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            //Expense Header List
            ExpenseApprovalService.prototype.FindExpenseHeaderList = function (DealerID) {
                var url = this.apiUrl + "/ExpenseHeaderListApproval";
                var config = {
                    params: {
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            ExpenseApprovalService.prototype.GetExpenseHeaderList = function (data) {
                debugger;
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        CreatedBy: item.CreatedBy,
                        ExpenseDate: item.ExpenseDate,
                        ID: item.ID,
                        Title: item.Title,
                        TotalAmount: item.TotalAmount,
                        TourType: item.TourType,
                        WhenCreated: item.WhenCreated,
                        Status: item.Status,
                        UserID: item.UserID
                    });
                }
                return list;
            };
            //Expense Report Grid
            ExpenseApprovalService.prototype.FindExpenseReportGrid = function (data) {
                var url = this.apiUrl + "/ExpenseReport";
                var UserID, FromDate, ToDate, DealerID;
                if (data.UserID != undefined && data.UserID != null) {
                    UserID = data.UserID;
                }
                else {
                    UserID = "";
                }
                if (data.FromDate != undefined && data.FromDate != null) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = "";
                }
                if (data.ToDate != undefined && data.ToDate != null) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = "";
                }
                if (data.DealerID != undefined && data.DealerID != null) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = "";
                }
                var config = {
                    params: {
                        UserID: UserID,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            ExpenseApprovalService.prototype.GetExpenseReportGrid = function (data) {
                debugger;
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        ERDate: item.ERDate,
                        ERNO: item.ERNO,
                        PaidAmount: item.PaidAmount,
                        Status: item.Status,
                        Title: item.Title,
                        TotalAmount: item.TotalAmount,
                        CreatedBy: item.CreatedBy
                    });
                }
                return list;
            };
            //Find Expense Total Amount
            ExpenseApprovalService.prototype.FindExpenseTotalAmount = function (data) {
                //var url = this.apiUrl + "/ExpenseTotalAmountPaid";
                debugger;
                var url = this.apiUrl + "/ExpenseTotalAmount";
                var UserID, FromDate, ToDate, DealerID;
                if (data.UserID != undefined && data.UserID != null) {
                    UserID = data.UserID;
                }
                else {
                    UserID = "";
                }
                if (data.FromDate != undefined && data.FromDate != null) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = "";
                }
                if (data.ToDate != undefined && data.ToDate != null) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = "";
                }
                if (data.DealerID != undefined && data.DealerID != null) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = "";
                }
                var config = {
                    params: {
                        UserID: UserID,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            ExpenseApprovalService.prototype.GetExpenseTotalAmount = function (data) {
                var ob = new model.ExpenseTotalAmount();
                //ob.ExpenseTotal = data.TotalAmountPaid;
                ob.ExpenseTotal = data.TotalAmount;
                return ob;
            };
            ExpenseApprovalService.prototype.FindExpenseTotalPaid = function (data) {
                var url = this.apiUrl + "/ExpenseTotalAmountPaid";
                var UserID, FromDate, ToDate, DealerID;
                if (data.UserID != undefined && data.UserID != null) {
                    UserID = data.UserID;
                }
                else {
                    UserID = "";
                }
                if (data.FromDate != undefined && data.FromDate != null) {
                    FromDate = data.FromDate;
                }
                else {
                    FromDate = "";
                }
                if (data.ToDate != undefined && data.ToDate != null) {
                    ToDate = data.ToDate;
                }
                else {
                    ToDate = "";
                }
                if (data.DealerID != undefined && data.DealerID != null) {
                    DealerID = data.DealerID;
                }
                else {
                    DealerID = "";
                }
                var config = {
                    params: {
                        UserID: UserID,
                        FromDate: FromDate,
                        ToDate: ToDate,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            ExpenseApprovalService.prototype.GetExpenseTotalPaid = function (data) {
                var ob = new model.ExpenseTotalPaid();
                ob.ExpenseTotalPaid = data.TotalAmountPaid;
                return ob;
            };
            //Find Advance Balance Amount
            ExpenseApprovalService.prototype.FindExpenseBalance = function (UserID, DealerID) {
                var url = this.apiUrl + "/ExpenseAdvanceAmount";
                var UserID, FromDate, ToDate, DealerID;
                if (UserID != undefined && UserID != null) {
                    UserID = UserID;
                }
                else {
                    UserID = "";
                }
                if (DealerID != undefined && DealerID != null) {
                    DealerID = DealerID;
                }
                else {
                    DealerID = "";
                }
                var config = {
                    params: {
                        UserID: UserID,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            ExpenseApprovalService.prototype.GetExpenseBalance = function (data) {
                var ob = new model.ExpenseBalanceAmount();
                ob.ExpenseBalance = data.AdvanceBalance;
                return ob;
            };
            //User Advance Amount
            ExpenseApprovalService.prototype.FindUserAdvanceAmount = function (UserID, DealerID) {
                var url = this.apiUrl + "/UserAdvanceAmount";
                var config = {
                    params: {
                        UserID: UserID,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            ExpenseApprovalService.prototype.GetUserAdvanceAmount = function (data) {
                var ob = new model.UserAdvanceAmount();
                ob.AdvanceTaken = data.AdvanceTaken;
                return ob;
            };
            //Expense Details List
            ExpenseApprovalService.prototype.FindExpenseItems = function (ExpenseHeaderID, DealerID) {
                debugger;
                var url = this.apiUrl + "/ExpenseDetailsList";
                var config = {
                    params: {
                        ExpenseHeaderID: ExpenseHeaderID,
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            ExpenseApprovalService.prototype.GetExpenseItems = function (data) {
                debugger;
                var list = new model.ExpenseItems();
                var FoodList = Array();
                var TransportList = Array();
                var MonthlyList = Array();
                var LodgingList = Array();
                if (data.FoodList != null) {
                    for (var _i = 0, _a = data.FoodList; _i < _a.length; _i++) {
                        var item = _a[_i];
                        FoodList.push({
                            DailyFoodLimit: item.DailyFoodLimit,
                            FoodAmountSpent: item.FoodAmountSpent,
                            FoodDate: item.FoodDate,
                            FoodRecieptImage: item.FoodRecieptImage,
                            FoodRecieptStatus: item.FoodRecieptStatus,
                            FoodType: item.FoodType,
                            FoodVendor: item.FoodVendor
                        });
                    }
                }
                else {
                    FoodList = null;
                }
                if (data.TransportList != null && data.TransportList != undefined) {
                    for (var _b = 0, _c = data.TransportList; _b < _c.length; _b++) {
                        var item = _c[_b];
                        TransportList.push({
                            ActualDistance: item.ActualDistance,
                            DailyTransportLimit: item.DailyTransportLimit,
                            EndLocation: item.EndLocation,
                            EstimatedDistance: item.EstimatedDistance,
                            ExpenseDate: item.ExpenseDate,
                            ID: item.ID,
                            StartLocation: item.StartLocation,
                            Title: item.Title,
                            TotalAmount: item.TotalAmount,
                            ToursType: item.TourType,
                            TransportAmountSpent: item.TransportAmountSpent,
                            TransportCity: item.TransportCity,
                            TransportMode: item.TransportMode,
                            TransportRecieptImage: item.TransportRecieptImage,
                            TransportRecieptStatus: item.TransportRecieptStatus,
                            TransportState: item.TransportState,
                            TransportType: item.TransportType,
                            TransportVendor: item.TransportVendor
                        });
                    }
                }
                else {
                    TransportList = null;
                }
                if (data.LodgingList != null && data.LodgingList != undefined) {
                    for (var _d = 0, _e = data.LodgingList; _d < _e.length; _d++) {
                        var item = _e[_d];
                        LodgingList.push({
                            LodgingAmountSpent: item.LodgingAmountSpent,
                            LodgingComments: item.LodgingComments,
                            LodgingDailyLimit: item.LodgingDailyLimit,
                            LodgingRecieptImage: item.LodgingRecieptImage,
                            LodgingVendor: item.LodgingVendor,
                            LogingRecieptStatus: item.LogingRecieptStatus
                        });
                    }
                }
                else {
                    LodgingList = null;
                }
                if (data.MonthlyEntitlementList != null && data.MonthlyEntitlementList != undefined) {
                    for (var _f = 0, _g = data.MonthlyEntitlementList; _f < _g.length; _f++) {
                        var item = _g[_f];
                        MonthlyList.push({
                            MonthlyComments: item.MonthlyComments,
                            MonthlyEntitlement: item.MonthlyEntitlement,
                            MonthlyLimit: item.MonthlyLimit,
                            MonthlyRecieptImage: item.MonthlyRecieptImage,
                            MonthlyRecieptStatus: item.MonthlyRecieptStatus,
                            MonthlyVendor: item.MonthlyVendor,
                            OtherAmountSpend: item.OtherAmountSpend
                        });
                    }
                }
                else {
                    MonthlyList = null;
                }
                //let list =new 
                //for (let item of data) {
                //    list.push({
                //        FoodItemsList: FoodList,
                //        LodgingItemsList: LodgingList,
                //        MonthlyItemsList: MonthlyList,
                //        TransportItemsList: TransportList
                //    });
                //}
                list.FoodItemsList = FoodList;
                list.LodgingItemsList = LodgingList;
                list.MonthlyItemsList = MonthlyList;
                list.TransportItemsList = TransportList;
                return list;
            };
            //Update Expense Header
            ExpenseApprovalService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.url + "/" + "ExpenseHeaderUpdate" });
            };
            ExpenseApprovalService.prototype.UpdateExpenseHeader = function (data) {
                var url = this.url + "/" + "ExpenseHeaderUpdate";
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data
                });
            };
            ExpenseApprovalService.$inject = ["$http", "$q", "$cookieStore"];
            return ExpenseApprovalService;
        }(GCPL.Service.BaseService));
        Service.ExpenseApprovalService = ExpenseApprovalService;
        app.AddService("ExpenseApprovalService", ExpenseApprovalService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ExpenseApprovalService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var AdvanceRequestGrid = /** @class */ (function () {
            function AdvanceRequestGrid() {
            }
            return AdvanceRequestGrid;
        }());
        Model.AdvanceRequestGrid = AdvanceRequestGrid;
        var AdvanceRequestModel = /** @class */ (function () {
            function AdvanceRequestModel() {
            }
            return AdvanceRequestModel;
        }());
        Model.AdvanceRequestModel = AdvanceRequestModel;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AdvanceApprovalModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var AdvanceRequestUpdateModel = GCPL.Model.AdvanceRequestModel;
            var AdvanceApprovalController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function AdvanceApprovalController(_cookieStore, _AdvanceApprovalService) {
                    this._cookieStore = _cookieStore;
                    this._AdvanceApprovalService = _AdvanceApprovalService;
                    this.AdvanceList = null;
                    this.AdvanceRequestUpdate = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = "10";
                    this.UserID = null;
                    this.alert = null;
                    this.DealerID = null;
                    this.PostID = null;
                    this.PostType = null;
                    this.Changestatus = false;
                    this.showManager = false;
                    this.showFinance = false;
                    this.ChangePaymentstatus = false;
                    this.DisplayTotalAmount = null;
                    this.AmountRequested = null;
                    //Services
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.AdvanceApprovalService = _AdvanceApprovalService;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.AdvanceList = new Array();
                    this.AdvanceRequestUpdate = new AdvanceRequestUpdateModel();
                }
                AdvanceApprovalController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                AdvanceApprovalController.prototype.Init = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                //FillGrid
                AdvanceApprovalController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.AdvanceList = this.AdvanceApprovalService.FindAdvanceList(this.DealerID).then((function (response) {
                        _this.AdvanceList = _this.AdvanceApprovalService.GetAdvanceList(response.data.Result.list);
                        _this.AdvanceList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.AdvanceList.slice(0, that.numRecords);
                    }));
                };
                AdvanceApprovalController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.AdvanceList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                AdvanceApprovalController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.AdvanceList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                AdvanceApprovalController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                AdvanceApprovalController.prototype.showData = function (item) {
                    if (item.Status === "Created") {
                        this.Changestatus = true;
                        this.showManager = true;
                        this.showFinance = false;
                    }
                    else {
                        this.Changestatus = false;
                        this.showManager = false;
                    }
                    //if (item.Status === "Approved") {
                    //    this.ChangePaymentstatus = true;
                    //    this.showManager = false;
                    //    this.showFinance = true;
                    //    this.Changestatus = false;
                    //}
                    //else {
                    //    this.ChangePaymentstatus = false;
                    //    this.showFinance = false;
                    //}
                    this.PostID = item.ID;
                    this.AmountRequested = item.AdvanceAmount;
                };
                //Manager APproval
                AdvanceApprovalController.prototype.approveBtn = function () {
                    var _this = this;
                    this.AdvanceRequestUpdate.ID = this.PostID;
                    this.AdvanceRequestUpdate.ApprovedBy = this.UserID;
                    this.AdvanceRequestUpdate.PaymentComments = null;
                    this.AdvanceRequestUpdate.Status = "3";
                    this.AdvanceRequestUpdate.StatementType = "ApproverUpdate";
                    this.AdvanceApprovalService.UpdateAdvanceRequest(this.AdvanceRequestUpdate).then((function (response) {
                        if ((response.data.Result.MobileStatus) === "1") {
                            _this.AdvanceRequestUpdate.ApprovalComments = "";
                            _this.AdvanceRequestUpdate.AmountPaid = "";
                            _this.alert = "Request has been Approved.";
                            _this.numRecords = parseInt(_this.NoOfRds);
                            _this.FillGrid(_this.numRecords);
                        }
                        else {
                            _this.alert = "Some Error Occured";
                            _this.AdvanceRequestUpdate.ApprovalComments = "";
                        }
                    }));
                };
                //Manager Reject
                AdvanceApprovalController.prototype.rejectBtn = function () {
                    var _this = this;
                    this.AdvanceRequestUpdate.ID = this.PostID;
                    this.AdvanceRequestUpdate.Status = "4";
                    this.AdvanceRequestUpdate.PaymentComments = null;
                    this.AdvanceRequestUpdate.PaidBy = null;
                    this.AdvanceRequestUpdate.StatementType = "ApproverUpdate";
                    this.AdvanceRequestUpdate.ApprovedBy = this.UserID;
                    this.AdvanceApprovalService.UpdateAdvanceRequest(this.AdvanceRequestUpdate).then((function (response) {
                        if ((response.data.Result.MobileStatus) === "1") {
                            _this.AdvanceRequestUpdate.ApprovalComments = "";
                            _this.AdvanceRequestUpdate.AmountPaid = "";
                            _this.alert = "Request has been rejected.";
                            _this.numRecords = parseInt(_this.NoOfRds);
                            _this.FillGrid(_this.numRecords);
                        }
                        else {
                            _this.alert = "Some Error Occured";
                            _this.AdvanceRequestUpdate.ApprovalComments = "";
                        }
                    }));
                };
                //Approve Payment
                AdvanceApprovalController.prototype.approvePBtn = function () {
                    var _this = this;
                    this.AdvanceRequestUpdate.ID = this.PostID;
                    this.AdvanceRequestUpdate.ApprovedBy = null;
                    this.AdvanceRequestUpdate.Status = "5";
                    this.AdvanceRequestUpdate.PaidBy = this.UserID;
                    this.AdvanceRequestUpdate.StatementType = "FinanceUpdate";
                    this.AdvanceApprovalService.UpdateAdvanceRequest(this.AdvanceRequestUpdate).then((function (response) {
                        if ((response.data.Result.MobileStatus) === "1") {
                            _this.AdvanceRequestUpdate.PaymentComments = "";
                            _this.AdvanceRequestUpdate.AmountPaid = "";
                            _this.alert = "Payment has been Approved.";
                            _this.numRecords = parseInt(_this.NoOfRds);
                            _this.FillGrid(_this.numRecords);
                        }
                        else {
                            _this.alert = "Some Error Occured";
                            _this.AdvanceRequestUpdate.PaymentComments = "";
                            _this.AdvanceRequestUpdate.AmountPaid = "";
                        }
                    }));
                };
                //Reject Payment
                AdvanceApprovalController.prototype.rejectPBtn = function () {
                    var _this = this;
                    this.AdvanceRequestUpdate.ID = this.PostID;
                    this.AdvanceRequestUpdate.Status = "6";
                    this.AdvanceRequestUpdate.PaidBy = this.UserID;
                    this.AdvanceRequestUpdate.ApprovedBy = null;
                    this.AdvanceRequestUpdate.StatementType = "FinanceUpdate";
                    this.AdvanceApprovalService.UpdateAdvanceRequest(this.AdvanceRequestUpdate).then((function (response) {
                        if ((response.data.Result.MobileStatus) === "1") {
                            _this.AdvanceRequestUpdate.PaymentComments = "";
                            _this.AdvanceRequestUpdate.AmountPaid = "";
                            _this.alert = "Payment has been rejected.";
                            _this.numRecords = parseInt(_this.NoOfRds);
                            _this.FillGrid(_this.numRecords);
                        }
                        else {
                            _this.alert = "Some Error Occured";
                            _this.AdvanceRequestUpdate.PaymentComments = "";
                            _this.AdvanceRequestUpdate.AmountPaid = "";
                        }
                    }));
                };
                AdvanceApprovalController.$inject = ["$cookieStore", "AdvanceApprovalService"];
                return AdvanceApprovalController;
            }());
            var AdvanceApprovalComponentController = /** @class */ (function () {
                function AdvanceApprovalComponentController() {
                    this.controller = AdvanceApprovalController;
                    this.templateUrl = "/Scripts/App/ExpenseModule/AdvanceApproval/Template/AdvanceApproval.html";
                }
                AdvanceApprovalComponentController.Name = "advanceapprovalcomponent";
                return AdvanceApprovalComponentController;
            }());
            app.AddComponent(AdvanceApprovalComponentController.Name, new AdvanceApprovalComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=AdvanceApprovalComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var AdvanceApprovalController = /** @class */ (function (_super) {
            __extends(AdvanceApprovalController, _super);
            function AdvanceApprovalController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AdvanceApprovalController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.AdvanceApprovalController = AdvanceApprovalController;
        app.AddController("AdvanceApprovalController", AdvanceApprovalController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AdvanceApprovalController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var AdvanceApprovalService = /** @class */ (function (_super) {
            __extends(AdvanceApprovalService, _super);
            function AdvanceApprovalService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = "" + _this.url;
                _this.Cookie = _cookieStore;
                return _this;
            }
            //Expense Header List
            AdvanceApprovalService.prototype.FindAdvanceList = function (DealerID) {
                var url = this.apiUrl + "/AdvanceRequestApprovalList";
                var config = {
                    params: {
                        DealerID: DealerID
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            AdvanceApprovalService.prototype.GetAdvanceList = function (data) {
                debugger;
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        AdvanceAmount: item.AdvanceAmount,
                        AdvanceDate: item.AdvanceDate,
                        ApprovalComments: item.ApprovalComments,
                        ApprovedBy: item.ApprovedBy,
                        ID: item.ID,
                        PaidBy: item.PaidBy,
                        PaymentComments: item.PaymentComments,
                        ReasonForAdvance: item.ReasonForAdvance,
                        Status: item.Status,
                        UserID: item.UserID,
                        WhenCreated: item.WhenCreated
                    });
                }
                return list;
            };
            //Update Advance Request
            AdvanceApprovalService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.url + "/" + "AdvanceRequestInsert" });
            };
            AdvanceApprovalService.prototype.UpdateAdvanceRequest = function (data) {
                var url = this.url + "/" + "AdvanceRequestInsert";
                return this.ajaXUtility.Post({
                    Url: url,
                    data: data
                });
            };
            AdvanceApprovalService.$inject = ["$http", "$q", "$cookieStore"];
            return AdvanceApprovalService;
        }(GCPL.Service.BaseService));
        Service.AdvanceApprovalService = AdvanceApprovalService;
        app.AddService("AdvanceApprovalService", AdvanceApprovalService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AdvanceApprovalService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var ExpenseReportGrid = /** @class */ (function () {
            function ExpenseReportGrid() {
            }
            return ExpenseReportGrid;
        }());
        Model.ExpenseReportGrid = ExpenseReportGrid;
        var ExpenseReportSearch = /** @class */ (function () {
            function ExpenseReportSearch() {
            }
            return ExpenseReportSearch;
        }());
        Model.ExpenseReportSearch = ExpenseReportSearch;
        var ExpenseTotalAmount = /** @class */ (function () {
            function ExpenseTotalAmount() {
            }
            return ExpenseTotalAmount;
        }());
        Model.ExpenseTotalAmount = ExpenseTotalAmount;
        var ExpenseTotalPaid = /** @class */ (function () {
            function ExpenseTotalPaid() {
            }
            return ExpenseTotalPaid;
        }());
        Model.ExpenseTotalPaid = ExpenseTotalPaid;
        var ExpenseBalanceAmount = /** @class */ (function () {
            function ExpenseBalanceAmount() {
            }
            return ExpenseBalanceAmount;
        }());
        Model.ExpenseBalanceAmount = ExpenseBalanceAmount;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ExpenseReportModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ExpenseGridSearchModel = GCPL.Model.ExpenseReportSearch;
            var ExpenseReportController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ExpenseReportController(_cookieStore, _ExpenseApprovalService, _UserNameService) {
                    this._cookieStore = _cookieStore;
                    this._ExpenseApprovalService = _ExpenseApprovalService;
                    this._UserNameService = _UserNameService;
                    this.ExpenseReportGrid = null;
                    this.ExpenseSearch = null;
                    this.ExpenseTotal = null;
                    this.ExpenseTotalPaid = null;
                    this.ExpenseAdvance = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = "10";
                    this.UserID = null;
                    this.alert = null;
                    this.DealerID = null;
                    this.showTotal = null;
                    this.showTotalPaid = null;
                    this.showAdvance = null;
                    this.DueToCompany = null;
                    this.DueToEmployee = null;
                    //Services
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.ExpenseApprovalService = _ExpenseApprovalService;
                    this.UserNameService = _UserNameService;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.ExpenseReportGrid = new Array();
                    this.ExpenseSearch = new ExpenseGridSearchModel();
                    this.ExpenseTotal = new GCPL.Model.ExpenseTotalAmount();
                    this.ExpenseTotalPaid = new GCPL.Model.ExpenseTotalPaid();
                }
                ExpenseReportController.prototype.$onInit = function () {
                    this.Init();
                    var that = this;
                    //Datepicker
                    $("#FromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: function (date) {
                            angular.element($('#FromDate')).triggerHandler('input');
                            that.ExpenseSearch.FromDate = date;
                        }
                    });
                    $("#ToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: function (date) {
                            angular.element($('#ToDate')).triggerHandler('input');
                            that.ExpenseSearch.ToDate = date;
                        }
                    });
                };
                //Page Load Define Values//
                ExpenseReportController.prototype.Init = function () {
                    //User Autocomplete
                    var that = this;
                    $("#UserName").autocomplete({
                        source: function (request, res) {
                            that.UserNameService.FilterAutoComplete(request).then((function (response) {
                                var data = that.UserNameService.GetUserName(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Name,
                                        value: item.Name,
                                        id: item.UserID,
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.ExpenseSearch.UserID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                };
                ExpenseReportController.prototype.Search = function () {
                    var _this = this;
                    this.ExpenseSearch.DealerID = this.DealerID;
                    this.ExpenseApprovalService.FindExpenseTotalAmount(this.ExpenseSearch).then((function (response) {
                        _this.ExpenseTotal = _this.ExpenseApprovalService.GetExpenseTotalAmount(response.data.Result);
                        _this.showTotal = _this.ExpenseTotal.ExpenseTotal;
                        _this.ExpenseApprovalService.FindExpenseTotalPaid(_this.ExpenseSearch).then((function (response) {
                            _this.ExpenseTotalPaid = _this.ExpenseApprovalService.GetExpenseTotalPaid(response.data.Result);
                            _this.showTotalPaid = _this.ExpenseTotalPaid.ExpenseTotalPaid;
                            console.log(_this.showTotalPaid);
                            _this.ExpenseApprovalService.FindExpenseBalance(_this.ExpenseSearch.UserID, _this.DealerID).then((function (response) {
                                _this.ExpenseAdvance = _this.ExpenseApprovalService.GetExpenseBalance(response.data.Result);
                                _this.showAdvance = _this.ExpenseAdvance.ExpenseBalance;
                                var difference = (parseInt(_this.showAdvance) - parseInt(_this.showTotal));
                                if (difference > 0) {
                                    //due to company
                                    _this.DueToCompany = difference;
                                    _this.DueToEmployee = 0;
                                }
                                else {
                                    //due to Employee
                                    _this.DueToCompany = 0;
                                    difference = (difference * -1);
                                    _this.DueToEmployee = difference;
                                }
                                console.log("Due to Company:");
                                console.log(_this.DueToCompany);
                                console.log("Due to Emp:");
                                console.log(_this.DueToEmployee);
                            }));
                        }));
                    }));
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                ExpenseReportController.prototype.Clear = function () {
                    this.shownItems = null;
                    this.ExpenseReportGrid.length = 0;
                    $("#FromDate").val('');
                    this.ExpenseSearch.FromDate = $("#FromDate").val();
                    $("#ToDate").val('');
                    this.ExpenseSearch.ToDate = $("#ToDate").val();
                    $("#UserName").val('');
                    this.ExpenseSearch.UserID = $("#UserName").val();
                    $("#GTAmount").val('');
                    this.showTotal = $("#GTAmount").val();
                    $("#ADAmont").val('');
                    this.showAdvance = $("#ADAmont").val();
                    this.DueToEmployee = "";
                    this.DueToCompany = "";
                };
                //FillGrid
                ExpenseReportController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.ExpenseReportGrid = this.ExpenseApprovalService.FindExpenseReportGrid(this.ExpenseSearch).then((function (response) {
                        _this.ExpenseReportGrid = _this.ExpenseApprovalService.GetExpenseReportGrid(response.data.Result);
                        _this.ExpenseReportGrid.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.ExpenseReportGrid.slice(0, that.numRecords);
                    }));
                };
                ExpenseReportController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ExpenseReportGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                ExpenseReportController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ExpenseReportGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                ExpenseReportController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                ExpenseReportController.$inject = ["$cookieStore", "ExpenseApprovalService", "UserNameService"];
                return ExpenseReportController;
            }());
            var ExpenseReportComponentController = /** @class */ (function () {
                function ExpenseReportComponentController() {
                    this.controller = ExpenseReportController;
                    this.templateUrl = "/Scripts/App/ExpenseModule/ExpenseReport/Template/ExpenseReport.html";
                }
                ExpenseReportComponentController.Name = "expensereportcomponent";
                return ExpenseReportComponentController;
            }());
            app.AddComponent(ExpenseReportComponentController.Name, new ExpenseReportComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=ExpenseReportComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ExpenseReportController = /** @class */ (function (_super) {
            __extends(ExpenseReportController, _super);
            function ExpenseReportController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ExpenseReportController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ExpenseReportController = ExpenseReportController;
        app.AddController("ExpenseReportController", ExpenseReportController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ExpenseReportController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var ExpenseFinanceController = /** @class */ (function (_super) {
            __extends(ExpenseFinanceController, _super);
            function ExpenseFinanceController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ExpenseFinanceController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.ExpenseFinanceController = ExpenseFinanceController;
        app.AddController("ExpenseFinanceController", ExpenseFinanceController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ExpenseFinanceController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ExpenseHeaderUpdates = GCPL.Model.UpdateExpenseHeader;
            var ExpenseFinanceController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function ExpenseFinanceController(_cookieStore, _ExpenseApprovalService) {
                    this._cookieStore = _cookieStore;
                    this._ExpenseApprovalService = _ExpenseApprovalService;
                    this.ExpenseHeaderList = null;
                    this.ExpenseItemsList = null;
                    this.ExpenseHeaderUpdate = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = "10";
                    this.UserID = null;
                    this.alert = null;
                    this.DealerID = null;
                    this.imgSrc = null;
                    this.PostID = null;
                    this.PostType = null;
                    this.Changestatus = false;
                    this.showManager = false;
                    this.showFinance = false;
                    this.ChangePaymentstatus = false;
                    this.DisplayTotalAmount = null;
                    this.UserAdvanceAmount = null;
                    this.DisplayAdvanceAmount = null;
                    this.DueToCompany = null;
                    this.DueToEmployee = null;
                    //Services
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.ExpenseApprovalService = _ExpenseApprovalService;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.ExpenseHeaderList = new Array();
                    this.ExpenseItemsList = new Array();
                    this.ExpenseHeaderUpdate = new ExpenseHeaderUpdates();
                }
                ExpenseFinanceController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                ExpenseFinanceController.prototype.Init = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                //FillGrid
                ExpenseFinanceController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.ExpenseHeaderList = this.ExpenseApprovalService.FindExpenseHeaderList(this.DealerID).then((function (response) {
                        _this.ExpenseHeaderList = _this.ExpenseApprovalService.GetExpenseHeaderList(response.data.Result.list);
                        _this.ExpenseHeaderList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.ExpenseHeaderList.slice(0, that.numRecords);
                    }));
                };
                ExpenseFinanceController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ExpenseHeaderList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                ExpenseFinanceController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ExpenseHeaderList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                ExpenseFinanceController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                ExpenseFinanceController.prototype.showData = function (item) {
                    var _this = this;
                    this.ExpenseItemsList = null;
                    if (item.Status === "Approved") {
                        this.ChangePaymentstatus = true;
                        this.showManager = false;
                        this.showFinance = true;
                        this.Changestatus = false;
                    }
                    else {
                        this.ChangePaymentstatus = false;
                        this.showFinance = false;
                    }
                    this.ExpenseHeaderUpdate.DealerID = this.DealerID;
                    this.DisplayTotalAmount = item.TotalAmount;
                    this.ExpenseHeaderUpdate.DealerID = this.DealerID;
                    this.PostID = item.ID;
                    this.ExpenseApprovalService.FindExpenseItems(item.ID, this.DealerID).then((function (response) {
                        _this.ExpenseItemsList = _this.ExpenseApprovalService.GetExpenseItems(response.data.Result);
                        console.log(_this.ExpenseItemsList);
                    }));
                    this.ExpenseApprovalService.FindUserAdvanceAmount(item.UserID, this.DealerID).then((function (response) {
                        _this.UserAdvanceAmount = _this.ExpenseApprovalService.GetUserAdvanceAmount(response.data.Result);
                        var AdvanceAmount = _this.UserAdvanceAmount.AdvanceTaken;
                        var ExpenseAmount = item.TotalAmount;
                        var difference = (parseInt(AdvanceAmount) - parseInt(ExpenseAmount));
                        if (difference > 0) {
                            //due to company
                            _this.DueToCompany = difference;
                            _this.DueToEmployee = 0;
                        }
                        else {
                            //due to Employee
                            _this.DueToCompany = 0;
                            difference = (difference * -1);
                            _this.DueToEmployee = difference;
                        }
                    }));
                };
                ExpenseFinanceController.prototype.setSrc = function (src) {
                    this.imgSrc = src;
                };
                //Manager APproval
                ExpenseFinanceController.prototype.approveBtn = function () {
                    var _this = this;
                    this.ExpenseHeaderUpdate.ID = this.PostID;
                    this.ExpenseHeaderUpdate.ApprovedBy = this.UserID;
                    this.ExpenseHeaderUpdate.StatementType = "Approve";
                    this.ExpenseApprovalService.UpdateExpenseHeader(this.ExpenseHeaderUpdate).then((function (response) {
                        if ((response.data.Result) === "Success Approve") {
                            _this.ExpenseHeaderUpdate.ManagerComments = "";
                            _this.alert = "Request has been Approved.";
                            _this.numRecords = parseInt(_this.NoOfRds);
                            _this.FillGrid(_this.numRecords);
                        }
                        else {
                            _this.alert = "Some Error Occured";
                            _this.ExpenseHeaderUpdate.ManagerComments = "";
                        }
                    }));
                };
                //Manager Reject
                ExpenseFinanceController.prototype.rejectBtn = function () {
                    var _this = this;
                    this.ExpenseHeaderUpdate.ID = this.PostID;
                    this.ExpenseHeaderUpdate.StatementType = "Reject";
                    this.ExpenseHeaderUpdate.ApprovedBy = this.UserID;
                    this.ExpenseHeaderUpdate.PaymentComments = "";
                    this.ExpenseApprovalService.UpdateExpenseHeader(this.ExpenseHeaderUpdate).then((function (response) {
                        if ((response.data.Result) === "Success Reject") {
                            _this.ExpenseHeaderUpdate.ManagerComments = "";
                            _this.alert = "Request has been rejected.";
                            _this.numRecords = parseInt(_this.NoOfRds);
                            _this.FillGrid(_this.numRecords);
                        }
                        else {
                            _this.alert = "Some Error Occured";
                            _this.ExpenseHeaderUpdate.ManagerComments = "";
                        }
                    }));
                };
                //Approve Payment
                ExpenseFinanceController.prototype.approvePBtn = function () {
                    var _this = this;
                    this.ExpenseHeaderUpdate.ID = this.PostID;
                    this.ExpenseHeaderUpdate.StatementType = "PaymentApprove";
                    this.ExpenseHeaderUpdate.PaidBy = this.UserID;
                    this.ExpenseHeaderUpdate.ManagerComments = "";
                    this.ExpenseApprovalService.UpdateExpenseHeader(this.ExpenseHeaderUpdate).then((function (response) {
                        if ((response.data.Result) === "Success PaymentApprove") {
                            _this.ExpenseHeaderUpdate.PaymentComments = "";
                            _this.alert = "Payment has been Approved.";
                            _this.numRecords = parseInt(_this.NoOfRds);
                            _this.FillGrid(_this.numRecords);
                        }
                        else {
                            _this.alert = "Some Error Occured";
                            _this.ExpenseHeaderUpdate.PaymentComments = "";
                        }
                    }));
                };
                //Reject Payment
                ExpenseFinanceController.prototype.rejectPBtn = function () {
                    var _this = this;
                    this.ExpenseHeaderUpdate.ID = this.PostID;
                    this.ExpenseHeaderUpdate.StatementType = "PaymentReject";
                    this.ExpenseHeaderUpdate.PaidBy = this.UserID;
                    this.ExpenseHeaderUpdate.ManagerComments = "";
                    this.ExpenseApprovalService.UpdateExpenseHeader(this.ExpenseHeaderUpdate).then((function (response) {
                        if ((response.data.Result) === "Success PaymentReject") {
                            _this.ExpenseHeaderUpdate.PaymentComments = "";
                            _this.alert = "Payment has been rejected.";
                            _this.numRecords = parseInt(_this.NoOfRds);
                            _this.FillGrid(_this.numRecords);
                        }
                        else {
                            _this.alert = "Some Error Occured";
                            _this.ExpenseHeaderUpdate.PaymentComments = "";
                        }
                    }));
                };
                ExpenseFinanceController.$inject = ["$cookieStore", "ExpenseApprovalService"];
                return ExpenseFinanceController;
            }());
            var ExpenseFinanceComponentController = /** @class */ (function () {
                function ExpenseFinanceComponentController() {
                    this.controller = ExpenseFinanceController;
                    this.templateUrl = "/Scripts/App/ExpenseModule/ExpenseFinanceApproval/Template/ExpenseFinance.html";
                }
                ExpenseFinanceComponentController.Name = "expensefinancecomponent";
                return ExpenseFinanceComponentController;
            }());
            app.AddComponent(ExpenseFinanceComponentController.Name, new ExpenseFinanceComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=ExpenseFinanceComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var AdvanceFinanceController = /** @class */ (function (_super) {
            __extends(AdvanceFinanceController, _super);
            function AdvanceFinanceController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AdvanceFinanceController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.AdvanceFinanceController = AdvanceFinanceController;
        app.AddController("AdvanceFinanceController", AdvanceFinanceController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AdvanceFinanceController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var AdvanceRequestUpdateModel = GCPL.Model.AdvanceRequestModel;
            var AdvanceFinanceController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function AdvanceFinanceController(_cookieStore, _AdvanceApprovalService) {
                    this._cookieStore = _cookieStore;
                    this._AdvanceApprovalService = _AdvanceApprovalService;
                    this.AdvanceList = null;
                    this.AdvanceRequestUpdate = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = "10";
                    this.UserID = null;
                    this.alert = null;
                    this.DealerID = null;
                    this.PostID = null;
                    this.PostType = null;
                    this.Changestatus = false;
                    this.showManager = false;
                    this.showFinance = false;
                    this.ChangePaymentstatus = false;
                    this.DisplayTotalAmount = null;
                    this.AmountRequested = null;
                    //Services
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.AdvanceApprovalService = _AdvanceApprovalService;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.AdvanceList = new Array();
                    this.AdvanceRequestUpdate = new AdvanceRequestUpdateModel();
                }
                AdvanceFinanceController.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                AdvanceFinanceController.prototype.Init = function () {
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                //FillGrid
                AdvanceFinanceController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.AdvanceList = this.AdvanceApprovalService.FindAdvanceList(this.DealerID).then((function (response) {
                        _this.AdvanceList = _this.AdvanceApprovalService.GetAdvanceList(response.data.Result.list);
                        _this.AdvanceList.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.AdvanceList.slice(0, that.numRecords);
                    }));
                };
                AdvanceFinanceController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.AdvanceList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                AdvanceFinanceController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.AdvanceList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                AdvanceFinanceController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                AdvanceFinanceController.prototype.showData = function (item) {
                    //if (item.Status === "Created") {
                    //    this.Changestatus = true;
                    //    this.showManager = true;
                    //    this.showFinance = false;
                    //}
                    //else {
                    //    this.Changestatus = false;
                    //    this.showManager = false;
                    //}
                    if (item.Status === "Approved") {
                        this.ChangePaymentstatus = true;
                        this.showManager = false;
                        this.showFinance = true;
                        this.Changestatus = false;
                    }
                    else {
                        this.ChangePaymentstatus = false;
                        this.showFinance = false;
                    }
                    this.PostID = item.ID;
                    this.AmountRequested = item.AdvanceAmount;
                };
                //Manager APproval
                AdvanceFinanceController.prototype.approveBtn = function () {
                    var _this = this;
                    this.AdvanceRequestUpdate.ID = this.PostID;
                    this.AdvanceRequestUpdate.ApprovedBy = this.UserID;
                    this.AdvanceRequestUpdate.PaymentComments = null;
                    this.AdvanceRequestUpdate.Status = "3";
                    this.AdvanceRequestUpdate.StatementType = "ApproverUpdate";
                    this.AdvanceApprovalService.UpdateAdvanceRequest(this.AdvanceRequestUpdate).then((function (response) {
                        if ((response.data.Result.MobileStatus) === "1") {
                            _this.AdvanceRequestUpdate.ApprovalComments = "";
                            _this.AdvanceRequestUpdate.AmountPaid = "";
                            _this.alert = "Request has been Approved.";
                            _this.numRecords = parseInt(_this.NoOfRds);
                            _this.FillGrid(_this.numRecords);
                        }
                        else {
                            _this.alert = "Some Error Occured";
                            _this.AdvanceRequestUpdate.ApprovalComments = "";
                        }
                    }));
                };
                //Manager Reject
                AdvanceFinanceController.prototype.rejectBtn = function () {
                    var _this = this;
                    this.AdvanceRequestUpdate.ID = this.PostID;
                    this.AdvanceRequestUpdate.Status = "4";
                    this.AdvanceRequestUpdate.PaymentComments = null;
                    this.AdvanceRequestUpdate.PaidBy = null;
                    this.AdvanceRequestUpdate.StatementType = "ApproverUpdate";
                    this.AdvanceRequestUpdate.ApprovedBy = this.UserID;
                    this.AdvanceApprovalService.UpdateAdvanceRequest(this.AdvanceRequestUpdate).then((function (response) {
                        if ((response.data.Result.MobileStatus) === "1") {
                            _this.AdvanceRequestUpdate.ApprovalComments = "";
                            _this.AdvanceRequestUpdate.AmountPaid = "";
                            _this.alert = "Request has been rejected.";
                            _this.numRecords = parseInt(_this.NoOfRds);
                            _this.FillGrid(_this.numRecords);
                        }
                        else {
                            _this.alert = "Some Error Occured";
                            _this.AdvanceRequestUpdate.ApprovalComments = "";
                        }
                    }));
                };
                //Approve Payment
                AdvanceFinanceController.prototype.approvePBtn = function () {
                    var _this = this;
                    this.AdvanceRequestUpdate.ID = this.PostID;
                    this.AdvanceRequestUpdate.ApprovedBy = null;
                    this.AdvanceRequestUpdate.Status = "5";
                    this.AdvanceRequestUpdate.PaidBy = this.UserID;
                    this.AdvanceRequestUpdate.StatementType = "FinanceUpdate";
                    this.AdvanceApprovalService.UpdateAdvanceRequest(this.AdvanceRequestUpdate).then((function (response) {
                        if ((response.data.Result.MobileStatus) === "1") {
                            _this.AdvanceRequestUpdate.PaymentComments = "";
                            _this.AdvanceRequestUpdate.AmountPaid = "";
                            _this.alert = "Payment has been Approved.";
                            _this.numRecords = parseInt(_this.NoOfRds);
                            _this.FillGrid(_this.numRecords);
                        }
                        else {
                            _this.alert = "Some Error Occured";
                            _this.AdvanceRequestUpdate.PaymentComments = "";
                            _this.AdvanceRequestUpdate.AmountPaid = "";
                        }
                    }));
                };
                //Reject Payment
                AdvanceFinanceController.prototype.rejectPBtn = function () {
                    var _this = this;
                    this.AdvanceRequestUpdate.ID = this.PostID;
                    this.AdvanceRequestUpdate.Status = "6";
                    this.AdvanceRequestUpdate.PaidBy = this.UserID;
                    this.AdvanceRequestUpdate.ApprovedBy = null;
                    this.AdvanceRequestUpdate.StatementType = "FinanceUpdate";
                    this.AdvanceApprovalService.UpdateAdvanceRequest(this.AdvanceRequestUpdate).then((function (response) {
                        if ((response.data.Result.MobileStatus) === "1") {
                            _this.AdvanceRequestUpdate.PaymentComments = "";
                            _this.AdvanceRequestUpdate.AmountPaid = "";
                            _this.alert = "Payment has been rejected.";
                            _this.numRecords = parseInt(_this.NoOfRds);
                            _this.FillGrid(_this.numRecords);
                        }
                        else {
                            _this.alert = "Some Error Occured";
                            _this.AdvanceRequestUpdate.PaymentComments = "";
                            _this.AdvanceRequestUpdate.AmountPaid = "";
                        }
                    }));
                };
                AdvanceFinanceController.$inject = ["$cookieStore", "AdvanceApprovalService"];
                return AdvanceFinanceController;
            }());
            var AdvanceFinanceComponentController = /** @class */ (function () {
                function AdvanceFinanceComponentController() {
                    this.controller = AdvanceFinanceController;
                    this.templateUrl = "/Scripts/App/ExpenseModule/AdvanceFinance/Template/AdvanceFinance.html";
                }
                AdvanceFinanceComponentController.Name = "advancefinancecomponent";
                return AdvanceFinanceComponentController;
            }());
            app.AddComponent(AdvanceFinanceComponentController.Name, new AdvanceFinanceComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=AdvanceFinanceComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var MyExpenseReportController = /** @class */ (function (_super) {
            __extends(MyExpenseReportController, _super);
            function MyExpenseReportController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return MyExpenseReportController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.MyExpenseReportController = MyExpenseReportController;
        app.AddController("MyExpenseReportController", MyExpenseReportController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=MyExpenseReportController.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var ExpenseGridSearchModel = GCPL.Model.ExpenseReportSearch;
            var MyExpenseReportController = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function MyExpenseReportController(_cookieStore, _ExpenseApprovalService, _UserNameService) {
                    this._cookieStore = _cookieStore;
                    this._ExpenseApprovalService = _ExpenseApprovalService;
                    this._UserNameService = _UserNameService;
                    this.ExpenseReportGrid = null;
                    this.ExpenseSearch = null;
                    this.ExpenseTotal = null;
                    this.ExpenseTotalPaid = null;
                    this.ExpenseAdvance = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = true;
                    this.ShowBack = true;
                    this.NoOfRds = "10";
                    this.UserID = null;
                    this.alert = null;
                    this.DealerID = null;
                    this.showTotal = null;
                    this.showTotalPaid = null;
                    this.showAdvance = null;
                    this.DueToCompany = null;
                    this.DueToEmployee = null;
                    //Services
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.ExpenseApprovalService = _ExpenseApprovalService;
                    this.UserNameService = _UserNameService;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.ExpenseReportGrid = new Array();
                    this.ExpenseSearch = new ExpenseGridSearchModel();
                    this.ExpenseTotal = new GCPL.Model.ExpenseTotalAmount();
                    this.ExpenseTotalPaid = new GCPL.Model.ExpenseTotalPaid();
                }
                MyExpenseReportController.prototype.$onInit = function () {
                    this.Init();
                    var that = this;
                    //Datepicker
                    $("#FromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: function (date) {
                            angular.element($('#FromDate')).triggerHandler('input');
                            that.ExpenseSearch.FromDate = date;
                        }
                    });
                    $("#ToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: function (date) {
                            angular.element($('#ToDate')).triggerHandler('input');
                            that.ExpenseSearch.ToDate = date;
                        }
                    });
                };
                //Page Load Define Values//
                MyExpenseReportController.prototype.Init = function () {
                };
                MyExpenseReportController.prototype.Search = function () {
                    var _this = this;
                    this.ExpenseSearch.UserID = this.UserID;
                    this.ExpenseSearch.DealerID = this.DealerID;
                    this.ExpenseApprovalService.FindExpenseTotalAmount(this.ExpenseSearch).then((function (response) {
                        _this.ExpenseTotal = _this.ExpenseApprovalService.GetExpenseTotalAmount(response.data.Result);
                        _this.showTotal = _this.ExpenseTotal.ExpenseTotal;
                        _this.ExpenseApprovalService.FindExpenseTotalPaid(_this.ExpenseSearch).then((function (response) {
                            _this.ExpenseTotalPaid = _this.ExpenseApprovalService.GetExpenseTotalPaid(response.data.Result);
                            _this.showTotalPaid = _this.ExpenseTotalPaid.ExpenseTotalPaid;
                            console.log(_this.showTotalPaid);
                            _this.ExpenseApprovalService.FindExpenseBalance(_this.ExpenseSearch.UserID, _this.DealerID).then((function (response) {
                                _this.ExpenseAdvance = _this.ExpenseApprovalService.GetExpenseBalance(response.data.Result);
                                _this.showAdvance = _this.ExpenseAdvance.ExpenseBalance;
                                var difference = (parseInt(_this.showAdvance) - parseInt(_this.showTotal));
                                if (difference > 0) {
                                    //due to company
                                    _this.DueToCompany = difference;
                                    _this.DueToEmployee = 0;
                                }
                                else {
                                    //due to Employee
                                    _this.DueToCompany = 0;
                                    difference = (difference * -1);
                                    _this.DueToEmployee = difference;
                                }
                                console.log("Due to Company:");
                                console.log(_this.DueToCompany);
                                console.log("Due to Emp:");
                                console.log(_this.DueToEmployee);
                            }));
                        }));
                    }));
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                MyExpenseReportController.prototype.Clear = function () {
                    this.shownItems = null;
                    this.ExpenseReportGrid.length = 0;
                    $("#FromDate").val('');
                    this.ExpenseSearch.FromDate = $("#FromDate").val();
                    $("#ToDate").val('');
                    this.ExpenseSearch.ToDate = $("#ToDate").val();
                    //$("#UserName").val('');
                    //this.ExpenseSearch.UserID = $("#UserName").val();
                    $("#GTAmount").val('');
                    this.showTotal = $("#GTAmount").val();
                    $("#ADAmont").val('');
                    this.showAdvance = $("#ADAmont").val();
                    this.DueToEmployee = "";
                    this.DueToCompany = "";
                };
                //FillGrid
                MyExpenseReportController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.ExpenseReportGrid = this.ExpenseApprovalService.FindExpenseReportGrid(this.ExpenseSearch).then((function (response) {
                        _this.ExpenseReportGrid = _this.ExpenseApprovalService.GetExpenseReportGrid(response.data.Result);
                        _this.ExpenseReportGrid.forEach(function (value, key) {
                            that.incre = parseInt(key) + 1;
                        });
                        _this.maxPages = (that.incre / that.numRecords);
                        _this.ShowBack = false;
                        _this.ShowNext = that.maxPages > 1 ? true : false;
                        _this.shownItems = _this.ExpenseReportGrid.slice(0, that.numRecords);
                    }));
                };
                MyExpenseReportController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ExpenseReportGrid.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                MyExpenseReportController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.ExpenseReportGrid.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                MyExpenseReportController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                MyExpenseReportController.$inject = ["$cookieStore", "ExpenseApprovalService", "UserNameService"];
                return MyExpenseReportController;
            }());
            var MyExpenseReportComponentController = /** @class */ (function () {
                function MyExpenseReportComponentController() {
                    this.controller = MyExpenseReportController;
                    this.templateUrl = "/Scripts/App/ExpenseModule/MyExpenseReport/Template/MyExpenseReport.html";
                }
                MyExpenseReportComponentController.Name = "myexpensereportcomponent";
                return MyExpenseReportComponentController;
            }());
            app.AddComponent(MyExpenseReportComponentController.Name, new MyExpenseReportComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=MyExpenseReportComponent.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var CustomerByContactHeader = /** @class */ (function () {
            function CustomerByContactHeader() {
            }
            return CustomerByContactHeader;
        }());
        Model.CustomerByContactHeader = CustomerByContactHeader;
        var CustomerByContactGrid = /** @class */ (function () {
            function CustomerByContactGrid() {
            }
            return CustomerByContactGrid;
        }());
        Model.CustomerByContactGrid = CustomerByContactGrid;
        var ContactAutoFill = /** @class */ (function () {
            function ContactAutoFill() {
            }
            return ContactAutoFill;
        }());
        Model.ContactAutoFill = ContactAutoFill;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerByContactModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var customerbycontactcontroller = /** @class */ (function () {
                //constructor define with Serivce _Name:Service.IServiceName//
                function customerbycontactcontroller(_Sservicenew, _Dservice, _CustomerByContactService, _ContactAutofill) {
                    this.StateDropDownnew = null;
                    this.DistrictDropDown = null;
                    this.CustomerByContactHeader = null;
                    this.FillCustomerByContactGrid = null;
                    this.numRecords = null;
                    this.NoOfRds = null;
                    this.Sservicenew = _Sservicenew;
                    this.Districtservice = _Dservice;
                    this.CustomerByContactHeader = new GCPL.Model.CustomerByContactHeader();
                    this.CustomerByContactService = _CustomerByContactService;
                    this.ContactAutofill = _ContactAutofill;
                }
                customerbycontactcontroller.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                customerbycontactcontroller.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    this.StateDropDownnew = this.Sservicenew.Find().then((function (response) {
                        _this.StateDropDownnew = _this.Sservicenew.GetStateNamenew(response.data.Result);
                        console.log(_this.StateDropDownnew);
                    }));
                    $("#txtContactName").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.ContactAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.ContactAutofill.GetAutoContact(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.ContactName,
                                        value: item.ContactName,
                                        id: item.ContactID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.CustomerByContactHeader.ContactName = ui.item.id;
                            var SelectedContactID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                };
                customerbycontactcontroller.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.numRecords = parseInt(NoOfRecords);
                    this.FillCustomerByContactGrid = this.CustomerByContactService.FindGrid(this.CustomerByContactHeader).then((function (response) {
                        //   console.log(this.FillPartGrid);
                        _this.FillCustomerByContactGrid = _this.CustomerByContactService.GetCustomerByContactGrid(response.data.Result);
                    }));
                };
                customerbycontactcontroller.prototype.Search = function () {
                    this.numRecords = this.NoOfRds;
                    this.FillGrid(this.numRecords);
                    //this.PartRequestReportService.FindGrid(this.PartReportModel).then((response => {
                    //    this.FillPartReportGrid = this.PartRequestReportService.GetPartGrid(response.data.Result);
                    //}));
                };
                customerbycontactcontroller.prototype.District = function () {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.CustomerByContactHeader.State).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                customerbycontactcontroller.prototype.Clear = function () {
                    this.CustomerByContactHeader.ContactName = "";
                    this.CustomerByContactHeader.District = "";
                    this.CustomerByContactHeader.State = "";
                    // (<HTMLInputElement>document.getElementById("txtModel")).value = "";
                    document.getElementById("txtContactName").value = "";
                    //$("#CreatedBy").val("");
                    $("#txtModel").val("");
                    $("#ddlState").val("");
                    $("#ddlCreatedby").val("");
                    this.DistrictDropDown = "";
                    this.FillCustomerByContactGrid = "";
                    // this.shownItems = null;
                    //  this.Search();
                };
                customerbycontactcontroller.$inject = ["StateServicenew", "DistrictService", "CustomerByContactService", "ContactaAtofillService"];
                return customerbycontactcontroller;
            }());
            var customerbycontactComponentController = /** @class */ (function () {
                function customerbycontactComponentController() {
                    this.controller = customerbycontactcontroller;
                    this.templateUrl = "/Scripts/App/CustomerByContact/Template/CustomerByContact.html";
                }
                customerbycontactComponentController.Name = "customerbycontactcomponent";
                return customerbycontactComponentController;
            }());
            app.AddComponent(customerbycontactComponentController.Name, new customerbycontactComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
3;
//# sourceMappingURL=CustomerByContactComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var customerbycontactcontroller = /** @class */ (function (_super) {
            __extends(customerbycontactcontroller, _super);
            function customerbycontactcontroller() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return customerbycontactcontroller;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.customerbycontactcontroller = customerbycontactcontroller;
        app.AddController("customerbycontactcontroller", customerbycontactcontroller);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerByContactController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var CustomerByContactService = /** @class */ (function (_super) {
            __extends(CustomerByContactService, _super);
            function CustomerByContactService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/";
                _this.Cookie = _cookieStore;
                return _this;
            }
            CustomerByContactService.prototype.FindGrid = function (data) {
                // FromDate: any, ToDate: any, SoNumber: any, ObjectTpe: any, CustName: any, Status: any
                debugger;
                var url = this.apiUrl + "/CustomerByContact";
                var ContactName;
                var State;
                var District;
                if (data.ContactName != undefined) {
                    ContactName = data.ContactName;
                }
                else {
                    ContactName = '';
                }
                if (data.State != undefined) {
                    State = data.State;
                }
                else {
                    State = '';
                }
                if (data.District != undefined) {
                    District = data.District;
                }
                else {
                    District = '';
                }
                var config = {
                    params: {
                        ContactName: ContactName,
                        State: State,
                        District: District,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            CustomerByContactService.prototype.GetCustomerByContactGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        ContactName: item.ContactName,
                        CustomerName: item.CustomerName,
                        State: item.State,
                        District: item.District,
                        MobileNo: item.MobileNo,
                        PhoneNo: item.PhoneNo,
                        Email: item.Email
                        //DealerID: item.DealerID,
                    });
                }
                return list;
            };
            CustomerByContactService.$inject = ["$http", "$q", "$cookieStore"];
            return CustomerByContactService;
        }(GCPL.Service.BaseService));
        Service.CustomerByContactService = CustomerByContactService;
        app.AddService("CustomerByContactService", CustomerByContactService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var ContactaAtofillService = /** @class */ (function (_super) {
            __extends(ContactaAtofillService, _super);
            function ContactaAtofillService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/" + "CustomerNameAutoFill";
                _this.Cookie = _cookieStore;
                return _this;
            }
            ContactaAtofillService.prototype.Find = function () {
                return this.ajaXUtility.Get({ Url: this.apiUrl });
            };
            ContactaAtofillService.prototype.FilterAutoComplete = function (data) {
                var url = this.apiUrl + "/ContactNameAutoFill";
                var config = {
                    params: {
                        CustomerName: data.term,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            ContactaAtofillService.prototype.GetAutoContact = function (data) {
                var list = Array();
                for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                    var item = data_2[_i];
                    list.push({
                        ContactID: item.ContactID,
                        ContactName: item.ContactName
                        //DealerID: item.DealerID
                    });
                }
                return list;
            };
            ContactaAtofillService.$inject = ["$http", "$q", "$cookieStore"];
            return ContactaAtofillService;
        }(GCPL.Service.BaseService));
        Service.ContactaAtofillService = ContactaAtofillService;
        //inject service
        app.AddService("ContactaAtofillService", ContactaAtofillService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=CustomerByContactService.js.map
var GCPL;
(function (GCPL) {
    var Model;
    (function (Model) {
        var ContactByCustomerHeader = /** @class */ (function () {
            function ContactByCustomerHeader() {
            }
            return ContactByCustomerHeader;
        }());
        Model.ContactByCustomerHeader = ContactByCustomerHeader;
        var ContactByCustomerGrid = /** @class */ (function () {
            function ContactByCustomerGrid() {
            }
            return ContactByCustomerGrid;
        }());
        Model.ContactByCustomerGrid = ContactByCustomerGrid;
    })(Model = GCPL.Model || (GCPL.Model = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ContactByCustomerModel.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var contactbycustomercomponentcontroller = /** @class */ (function () {
                function contactbycustomercomponentcontroller(_Sservicenew, _Dservice, _Autofillservice, _ContactByCustomerService) {
                    this.StateDropDownnew = null;
                    this.DistrictDropDown = null;
                    this.ContactByCustomerHeader = null;
                    this.FillContactByCustomerGrid = null;
                    this.numRecords = null;
                    this.NoOfRds = null;
                    this.Sservicenew = _Sservicenew;
                    this.Districtservice = _Dservice;
                    this.CustomerAutofill = _Autofillservice;
                    this.ContactByCustomerHeader = new GCPL.Model.ContactByCustomerHeader();
                    this.ContactByCustomerService = _ContactByCustomerService;
                }
                contactbycustomercomponentcontroller.prototype.$onInit = function () {
                    this.Init();
                };
                //Page Load Define Values//
                contactbycustomercomponentcontroller.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    this.StateDropDownnew = this.Sservicenew.Find().then((function (response) {
                        _this.StateDropDownnew = _this.Sservicenew.GetStateNamenew(response.data.Result);
                        console.log(_this.StateDropDownnew);
                    }));
                    $("#txtCustomerName").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.CustomerAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.ContactByCustomerHeader.CustomerName = ui.item.id;
                            var SelectedCustomerID = ui.item.id;
                        },
                        change: function () {
                        }
                    });
                };
                contactbycustomercomponentcontroller.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.numRecords = parseInt(NoOfRecords);
                    this.FillContactByCustomerGrid = this.ContactByCustomerService.FindGrid(this.ContactByCustomerHeader).then((function (response) {
                        //   console.log(this.FillPartGrid);
                        _this.FillContactByCustomerGrid = _this.ContactByCustomerService.GetContactByCustomerGrid(response.data.Result);
                    }));
                };
                contactbycustomercomponentcontroller.prototype.Search = function () {
                    this.numRecords = this.NoOfRds;
                    this.FillGrid(this.numRecords);
                    //this.PartRequestReportService.FindGrid(this.PartReportModel).then((response => {
                    //    this.FillPartReportGrid = this.PartRequestReportService.GetPartGrid(response.data.Result);
                    //}));
                };
                contactbycustomercomponentcontroller.prototype.District = function () {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.ContactByCustomerHeader.State).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                contactbycustomercomponentcontroller.prototype.Clear = function () {
                    this.ContactByCustomerHeader.CustomerName = "";
                    this.ContactByCustomerHeader.District = "";
                    this.ContactByCustomerHeader.State = "";
                    // (<HTMLInputElement>document.getElementById("txtModel")).value = "";
                    document.getElementById("txtCustomerName").value = "";
                    //$("#CreatedBy").val("");
                    $("#txtModel").val("");
                    $("#ddlState").val("");
                    $("#ddlCreatedby").val("");
                    this.DistrictDropDown = "";
                    this.FillContactByCustomerGrid = "";
                    // this.shownItems = null;
                    //  this.Search();
                };
                //constructor define with Serivce _Name:Service.IServiceName//
                contactbycustomercomponentcontroller.$inject = ["StateServicenew", "DistrictService", "CustomeraAtofillService", "ContactByCustomerService"];
                return contactbycustomercomponentcontroller;
            }());
            var ContactByCustomerComponent = /** @class */ (function () {
                function ContactByCustomerComponent() {
                    this.controller = contactbycustomercomponentcontroller;
                    this.templateUrl = "/Scripts/App/ContactByCustomer/Template/ContactByCustomer.html";
                }
                ContactByCustomerComponent.Name = "contactbycustomercomponent";
                return ContactByCustomerComponent;
            }());
            app.AddComponent(ContactByCustomerComponent.Name, new ContactByCustomerComponent());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ContactByCustomerComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var contactbycustomercontroller = /** @class */ (function (_super) {
            __extends(contactbycustomercontroller, _super);
            function contactbycustomercontroller() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return contactbycustomercontroller;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.contactbycustomercontroller = contactbycustomercontroller;
        app.AddController("contactbycustomercontroller", contactbycustomercontroller);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ContactByCustomerController.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Service;
    (function (Service) {
        var app = GCPL.app;
        var ContactByCustomerService = /** @class */ (function (_super) {
            __extends(ContactByCustomerService, _super);
            function ContactByCustomerService($http, $q, _cookieStore) {
                var _this = _super.call(this, $http, $q) || this;
                _this.$http = $http;
                _this.$q = $q;
                _this._cookieStore = _cookieStore;
                _this.apiUrl = "";
                _this.Cookie = null;
                _this.apiUrl = _this.url + "/";
                _this.Cookie = _cookieStore;
                return _this;
            }
            ContactByCustomerService.prototype.FindGrid = function (data) {
                // FromDate: any, ToDate: any, SoNumber: any, ObjectTpe: any, CustName: any, Status: any
                debugger;
                var url = this.apiUrl + "/ContactByCustomer";
                var CustomerName;
                var State;
                var District;
                if (data.CustomerName != undefined) {
                    CustomerName = data.CustomerName;
                }
                else {
                    CustomerName = '';
                }
                if (data.State != undefined) {
                    State = data.State;
                }
                else {
                    State = '';
                }
                if (data.District != undefined) {
                    District = data.District;
                }
                else {
                    District = '';
                }
                var config = {
                    params: {
                        CustomerName: CustomerName,
                        State: State,
                        District: District,
                        DealerID: this.Cookie.get('UserInfo')['DealerID']
                    }
                };
                return this.ajaXUtility.Get({
                    Url: url,
                    Config: config
                });
            };
            ContactByCustomerService.prototype.GetContactByCustomerGrid = function (data) {
                var list = Array();
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var item = data_1[_i];
                    list.push({
                        CustomerName: item.CustomerName,
                        ContactName: item.ContactName,
                        State: item.State,
                        District: item.District,
                        MobileNo: item.MobileNo,
                        PhoneNo: item.PhoneNo,
                        Email: item.Email
                        //DealerID: item.DealerID,
                    });
                }
                return list;
            };
            ContactByCustomerService.$inject = ["$http", "$q", "$cookieStore"];
            return ContactByCustomerService;
        }(GCPL.Service.BaseService));
        Service.ContactByCustomerService = ContactByCustomerService;
        app.AddService("ContactByCustomerService", ContactByCustomerService);
    })(Service = GCPL.Service || (GCPL.Service = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=ContactByCustomerService.js.map
var GCPL;
(function (GCPL) {
    var Component;
    (function (Component) {
        var Home;
        (function (Home) {
            var app = GCPL.app;
            var VisitRepSearch = GCPL.Model.LeadVisitReportSearch;
            var AllVisitReportListController = /** @class */ (function () {
                function AllVisitReportListController(_cookieStore, _Listservice, _Sservice, _Dservice, _getAutoSalesrep, _Autofillservice) {
                    this._cookieStore = _cookieStore;
                    this.CMRList = null;
                    this.DealerID = null;
                    this.UserID = null;
                    this.numRecords = 10;
                    this.page = 0;
                    this.incre = 0;
                    this.shownItems = [];
                    this.maxPages = 0;
                    this.ShowNext = false;
                    this.ShowBack = false;
                    this.NoOfRds = "10";
                    this.getVistReportSearch = null;
                    this.StateDropDown = null;
                    this.DistrictDropDown = null;
                    this.Cookie = null;
                    this.Cookie = _cookieStore;
                    this.Sservice = _Sservice;
                    this.Districtservice = _Dservice;
                    this.getAutoSalesrep = _getAutoSalesrep;
                    this.CustomerAutofill = _Autofillservice;
                    this.DealerID = this.Cookie.get('UserInfo')['DealerID'];
                    this.UserID = this.Cookie.get('UserInfo')['UserID'];
                    this.Listservice = _Listservice;
                    this.getVistReportSearch = new VisitRepSearch();
                }
                AllVisitReportListController.prototype.$onInit = function () {
                    //this.Init();
                    this.Init();
                    var that = this;
                    $("#txtFromDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectFromDate
                    });
                    $("#txtToDate").datepicker({
                        dateFormat: 'dd M yy', changeMonth: true,
                        changeYear: true,
                        onSelect: this.selectToDate
                    });
                };
                AllVisitReportListController.prototype.selectFromDate = function (e) {
                    document.getElementById("txtFromDate").value = e;
                };
                AllVisitReportListController.prototype.selectToDate = function (e) {
                    document.getElementById("txtToDate").value = e;
                };
                //Page Load Define Values//
                AllVisitReportListController.prototype.Init = function () {
                    var _this = this;
                    var that = this;
                    var filters;
                    $("#txtSalesRep").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.getAutoSalesrep.FilterAutoComplete(request).then((function (response) {
                                var data = that.getAutoSalesrep.GetAutoFillSalesRep(response.data.Result);
                                console.log(data);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.Name,
                                        value: item.Name,
                                        id: item.UserID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.getVistReportSearch.SaleRep = ui.item.id;
                            //console.log(that.getLeadSearch.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    this.StateDropDown = this.Sservice.Find().then((function (response) {
                        _this.StateDropDown = _this.Sservice.GetStateName(response.data.Result);
                    }));
                    $("#txtCustomer").autocomplete({
                        //  source:['1a0','anjali','archana'],
                        source: function (request, res) {
                            that.CustomerAutofill.FilterAutoComplete(request).then((function (response) {
                                var data = that.CustomerAutofill.GetAutoCustomer(response.data.Result);
                                res($.map(data, function (item, index) {
                                    return {
                                        label: item.CustomerName,
                                        value: item.CustomerName,
                                        id: item.CustomerID
                                    };
                                }));
                            }));
                        },
                        minLength: 2,
                        focus: function (event, ui) {
                            // Don't populate input field with selected value (pxid)
                            event.preventDefault();
                        },
                        select: function (e, ui) {
                            that.getVistReportSearch.CustomerId = ui.item.id;
                            //that.LeadListSerachA.SearchInput = ui.item.value;
                            //console.log(that.LeadListSerachA.SearchInput);
                        },
                        change: function () {
                        }
                    });
                    //this.numRecords = parseInt(this.NoOfRds);
                    //this.FillGrid(this.numRecords);                   
                };
                AllVisitReportListController.prototype.District = function (data) {
                    var _this = this;
                    this.DistrictDropDown = this.Districtservice.Find(this.getVistReportSearch.stateId).then((function (response) {
                        _this.DistrictDropDown = _this.Districtservice.GetDistrictName(response.data.Result);
                    }));
                };
                AllVisitReportListController.prototype.Search = function () {
                    this.getVistReportSearch.FromDate = document.getElementById("txtFromDate").value;
                    this.getVistReportSearch.ToDate = document.getElementById("txtToDate").value;
                    //this.getVistReportSearch.CustomerId = "";
                    this.numRecords = parseInt(this.NoOfRds);
                    this.FillGrid(this.numRecords);
                };
                AllVisitReportListController.prototype.FillGrid = function (NoOfRecords) {
                    var _this = this;
                    var that = this;
                    that.incre = 0;
                    that.numRecords = parseInt(NoOfRecords);
                    that.page = 0;
                    that.maxPages = 0;
                    that.shownItems = [];
                    this.CMRList = this.Listservice.Find(this.getVistReportSearch).then((function (response) {
                        _this.CMRList = _this.Listservice.GetCustomerMeetingList(response.data.Result);
                        if (_this.CMRList.length > 0) {
                            $("#nullDataDiv").hide();
                            _this.CMRList.forEach(function (value, key) {
                                that.incre = parseInt(key) + 1;
                            });
                            _this.maxPages = (that.incre / that.numRecords);
                            _this.ShowBack = false;
                            _this.ShowNext = that.maxPages > 1 ? true : false;
                            _this.shownItems = _this.CMRList.slice(0, that.numRecords);
                        }
                        else {
                            $("#nullDataDiv").show();
                        }
                    }));
                };
                AllVisitReportListController.prototype.Refresh = function () {
                    this.FillGrid(this.NoOfRds);
                };
                AllVisitReportListController.prototype.next = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page += 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.CMRList.slice(begin, end);
                    if (this.page + 1 >= this.maxPages) {
                        this.ShowNext = false;
                    }
                };
                ;
                AllVisitReportListController.prototype.back = function () {
                    this.ShowBack = true;
                    this.ShowNext = true;
                    this.page -= 1;
                    var begin = this.page * this.numRecords;
                    var end = begin + this.numRecords;
                    this.shownItems = this.CMRList.slice(begin, end);
                    if (this.page < 1) {
                        this.ShowBack = false;
                    }
                };
                ;
                AllVisitReportListController.prototype.Clear = function () {
                    document.getElementById("txtFromDate").value = "";
                    document.getElementById("txtToDate").value = "";
                    this.getVistReportSearch.SaleRep = "";
                    this.getVistReportSearch.CustomerId = "";
                    this.getVistReportSearch.Region = "";
                    this.getVistReportSearch.stateId = "";
                    this.getVistReportSearch.FromDate = "";
                    this.getVistReportSearch.ToDate = "";
                    this.getVistReportSearch.Vstatus = "";
                    $("#txtSalesRep").val("");
                    $("#txtCustomer").val("");
                    $("#ddlstate").val("");
                    $("#ddlRegion").val("");
                    this.DistrictDropDown = "";
                    // $("#ddlRegion").empty();
                    $("#FromDate").val("");
                    $("#ToDate").val("");
                    $("#ddlStatus").val("");
                };
                AllVisitReportListController.prototype.downloadCSV = function (csv, filename) {
                    var csvFile;
                    var downloadLink;
                    // CSV file
                    csvFile = new Blob([csv], { type: "text/csv" });
                    // Download link
                    downloadLink = document.createElement("a");
                    // File name
                    downloadLink.download = filename;
                    // Create a link to the file
                    downloadLink.href = window.URL.createObjectURL(csvFile);
                    // Hide download link
                    downloadLink.style.display = "none";
                    // Add the link to DOM
                    document.body.appendChild(downloadLink);
                    // Click download link
                    downloadLink.click();
                };
                AllVisitReportListController.prototype.exportTableToCSV = function (filename) {
                    var csv = [];
                    var rows = document.querySelectorAll(".excel tr");
                    for (var i = 0; i < rows.length; i++) {
                        var row = [], cols = rows[i].querySelectorAll("td, th");
                        for (var j = 0; j < cols.length; j++)
                            row.push(cols[j].innerHTML);
                        csv.push(row.join(","));
                    }
                    // Download CSV file
                    this.downloadCSV(csv.join("\n"), filename);
                };
                AllVisitReportListController.$inject = ["$cookieStore", "CustomerMeetingListReportServies", "StateService", "DistrictService", "SalesRepaAutofillService", "CustomeraAtofillService"];
                return AllVisitReportListController;
            }());
            var AllVisitReportListComponentController = /** @class */ (function () {
                function AllVisitReportListComponentController() {
                    this.controller = AllVisitReportListController;
                    this.templateUrl = "/Scripts/App/LeadModelReport/AllVisitReportList/Template/_AllVisitReport.html";
                }
                AllVisitReportListComponentController.Name = "allvisitreportListcomponent";
                return AllVisitReportListComponentController;
            }());
            app.AddComponent(AllVisitReportListComponentController.Name, new AllVisitReportListComponentController());
        })(Home = Component.Home || (Component.Home = {}));
    })(Component = GCPL.Component || (GCPL.Component = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AllVisitReportListComponent.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GCPL;
(function (GCPL) {
    var Controller;
    (function (Controller) {
        var app = GCPL.app;
        var AllVisitReportListController = /** @class */ (function (_super) {
            __extends(AllVisitReportListController, _super);
            function AllVisitReportListController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AllVisitReportListController;
        }(GCPL.Controller.CoockiesBaseController));
        Controller.AllVisitReportListController = AllVisitReportListController;
        app.AddController("AllVisitReportListController", AllVisitReportListController);
    })(Controller = GCPL.Controller || (GCPL.Controller = {}));
})(GCPL || (GCPL = {}));
//# sourceMappingURL=AllVisitReportListController.js.map